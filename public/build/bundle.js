
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch$1(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch$1(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch$1(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch$1(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    const admin = writable(false);
    // @ts-ignore
    const production = false;
    const snackbar = writable('');
    const confirm = writable({ title: '', message: '', func: () => { } });

    class ApiError extends Error {
        constructor(response, message) {
            super(message);
            this.name = 'ApiError';
            this.url = response.url;
            this.status = response.status;
            this.statusText = response.statusText;
            this.body = response.body;
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }

    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var _CancelablePromise_isResolved, _CancelablePromise_isRejected, _CancelablePromise_isCancelled, _CancelablePromise_cancelHandlers, _CancelablePromise_promise, _CancelablePromise_resolve, _CancelablePromise_reject;
    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    class CancelError extends Error {
        constructor(message) {
            super(message);
            this.name = 'CancelError';
        }
        get isCancelled() {
            return true;
        }
    }
    class CancelablePromise {
        constructor(executor) {
            _CancelablePromise_isResolved.set(this, void 0);
            _CancelablePromise_isRejected.set(this, void 0);
            _CancelablePromise_isCancelled.set(this, void 0);
            _CancelablePromise_cancelHandlers.set(this, void 0);
            _CancelablePromise_promise.set(this, void 0);
            _CancelablePromise_resolve.set(this, void 0);
            _CancelablePromise_reject.set(this, void 0);
            __classPrivateFieldSet(this, _CancelablePromise_isResolved, false, "f");
            __classPrivateFieldSet(this, _CancelablePromise_isRejected, false, "f");
            __classPrivateFieldSet(this, _CancelablePromise_isCancelled, false, "f");
            __classPrivateFieldSet(this, _CancelablePromise_cancelHandlers, [], "f");
            __classPrivateFieldSet(this, _CancelablePromise_promise, new Promise((resolve, reject) => {
                __classPrivateFieldSet(this, _CancelablePromise_resolve, resolve, "f");
                __classPrivateFieldSet(this, _CancelablePromise_reject, reject, "f");
                const onResolve = (value) => {
                    var _a;
                    if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
                        return;
                    }
                    __classPrivateFieldSet(this, _CancelablePromise_isResolved, true, "f");
                    (_a = __classPrivateFieldGet(this, _CancelablePromise_resolve, "f")) === null || _a === void 0 ? void 0 : _a.call(this, value);
                };
                const onReject = (reason) => {
                    var _a;
                    if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
                        return;
                    }
                    __classPrivateFieldSet(this, _CancelablePromise_isRejected, true, "f");
                    (_a = __classPrivateFieldGet(this, _CancelablePromise_reject, "f")) === null || _a === void 0 ? void 0 : _a.call(this, reason);
                };
                const onCancel = (cancelHandler) => {
                    if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
                        return;
                    }
                    __classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f").push(cancelHandler);
                };
                Object.defineProperty(onCancel, 'isResolved', {
                    get: () => __classPrivateFieldGet(this, _CancelablePromise_isResolved, "f"),
                });
                Object.defineProperty(onCancel, 'isRejected', {
                    get: () => __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f"),
                });
                Object.defineProperty(onCancel, 'isCancelled', {
                    get: () => __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f"),
                });
                return executor(onResolve, onReject, onCancel);
            }), "f");
        }
        then(onFulfilled, onRejected) {
            return __classPrivateFieldGet(this, _CancelablePromise_promise, "f").then(onFulfilled, onRejected);
        }
        catch(onRejected) {
            return __classPrivateFieldGet(this, _CancelablePromise_promise, "f").catch(onRejected);
        }
        finally(onFinally) {
            return __classPrivateFieldGet(this, _CancelablePromise_promise, "f").finally(onFinally);
        }
        cancel() {
            var _a;
            if (__classPrivateFieldGet(this, _CancelablePromise_isResolved, "f") || __classPrivateFieldGet(this, _CancelablePromise_isRejected, "f") || __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f")) {
                return;
            }
            __classPrivateFieldSet(this, _CancelablePromise_isCancelled, true, "f");
            if (__classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f").length) {
                try {
                    for (const cancelHandler of __classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f")) {
                        cancelHandler();
                    }
                }
                catch (error) {
                    console.warn('Cancellation threw an error', error);
                    return;
                }
            }
            __classPrivateFieldGet(this, _CancelablePromise_cancelHandlers, "f").length = 0;
            (_a = __classPrivateFieldGet(this, _CancelablePromise_reject, "f")) === null || _a === void 0 ? void 0 : _a.call(this, new CancelError('Request aborted'));
        }
        get isCancelled() {
            return __classPrivateFieldGet(this, _CancelablePromise_isCancelled, "f");
        }
    }
    _CancelablePromise_isResolved = new WeakMap(), _CancelablePromise_isRejected = new WeakMap(), _CancelablePromise_isCancelled = new WeakMap(), _CancelablePromise_cancelHandlers = new WeakMap(), _CancelablePromise_promise = new WeakMap(), _CancelablePromise_resolve = new WeakMap(), _CancelablePromise_reject = new WeakMap();

    const OpenAPI = {
        BASE: '',
        VERSION: '1.0-SNAPSHOT',
        WITH_CREDENTIALS: false,
        CREDENTIALS: 'include',
        TOKEN: undefined,
        USERNAME: undefined,
        PASSWORD: undefined,
        HEADERS: undefined,
        ENCODE_PATH: undefined,
    };

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var ClientDocumentType;
    (function (ClientDocumentType) {
        ClientDocumentType["ANNUAL_SERVICE"] = "annualService";
        ClientDocumentType["GENERIC"] = "generic";
        ClientDocumentType["POLICY_SERVICE"] = "policyService";
    })(ClientDocumentType || (ClientDocumentType = {}));

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var Country;
    (function (Country) {
        Country["AD"] = "AD";
        Country["AE"] = "AE";
        Country["AF"] = "AF";
        Country["AG"] = "AG";
        Country["AI"] = "AI";
        Country["AL"] = "AL";
        Country["AM"] = "AM";
        Country["AO"] = "AO";
        Country["AQ"] = "AQ";
        Country["AR"] = "AR";
        Country["AS"] = "AS";
        Country["AT"] = "AT";
        Country["AU"] = "AU";
        Country["AW"] = "AW";
        Country["AX"] = "AX";
        Country["AZ"] = "AZ";
        Country["BA"] = "BA";
        Country["BB"] = "BB";
        Country["BD"] = "BD";
        Country["BE"] = "BE";
        Country["BF"] = "BF";
        Country["BG"] = "BG";
        Country["BH"] = "BH";
        Country["BI"] = "BI";
        Country["BJ"] = "BJ";
        Country["BL"] = "BL";
        Country["BM"] = "BM";
        Country["BN"] = "BN";
        Country["BO"] = "BO";
        Country["BQ"] = "BQ";
        Country["BR"] = "BR";
        Country["BS"] = "BS";
        Country["BT"] = "BT";
        Country["BV"] = "BV";
        Country["BW"] = "BW";
        Country["BY"] = "BY";
        Country["BZ"] = "BZ";
        Country["CA"] = "CA";
        Country["CC"] = "CC";
        Country["CD"] = "CD";
        Country["CF"] = "CF";
        Country["CG"] = "CG";
        Country["CH"] = "CH";
        Country["CI"] = "CI";
        Country["CK"] = "CK";
        Country["CL"] = "CL";
        Country["CM"] = "CM";
        Country["CN"] = "CN";
        Country["CO"] = "CO";
        Country["CR"] = "CR";
        Country["CU"] = "CU";
        Country["CV"] = "CV";
        Country["CW"] = "CW";
        Country["CX"] = "CX";
        Country["CY"] = "CY";
        Country["CZ"] = "CZ";
        Country["DE"] = "DE";
        Country["DJ"] = "DJ";
        Country["DK"] = "DK";
        Country["DM"] = "DM";
        Country["DO"] = "DO";
        Country["DZ"] = "DZ";
        Country["EC"] = "EC";
        Country["EE"] = "EE";
        Country["EG"] = "EG";
        Country["EH"] = "EH";
        Country["ER"] = "ER";
        Country["ES"] = "ES";
        Country["ET"] = "ET";
        Country["FI"] = "FI";
        Country["FJ"] = "FJ";
        Country["FK"] = "FK";
        Country["FM"] = "FM";
        Country["FO"] = "FO";
        Country["FR"] = "FR";
        Country["GA"] = "GA";
        Country["GB"] = "GB";
        Country["GD"] = "GD";
        Country["GE"] = "GE";
        Country["GF"] = "GF";
        Country["GG"] = "GG";
        Country["GH"] = "GH";
        Country["GI"] = "GI";
        Country["GL"] = "GL";
        Country["GM"] = "GM";
        Country["GN"] = "GN";
        Country["GP"] = "GP";
        Country["GQ"] = "GQ";
        Country["GR"] = "GR";
        Country["GS"] = "GS";
        Country["GT"] = "GT";
        Country["GU"] = "GU";
        Country["GW"] = "GW";
        Country["GY"] = "GY";
        Country["HK"] = "HK";
        Country["HM"] = "HM";
        Country["HN"] = "HN";
        Country["HR"] = "HR";
        Country["HT"] = "HT";
        Country["HU"] = "HU";
        Country["ID"] = "ID";
        Country["IE"] = "IE";
        Country["IL"] = "IL";
        Country["IM"] = "IM";
        Country["IN"] = "IN";
        Country["IO"] = "IO";
        Country["IQ"] = "IQ";
        Country["IR"] = "IR";
        Country["IS"] = "IS";
        Country["IT"] = "IT";
        Country["JE"] = "JE";
        Country["JM"] = "JM";
        Country["JO"] = "JO";
        Country["JP"] = "JP";
        Country["KE"] = "KE";
        Country["KG"] = "KG";
        Country["KH"] = "KH";
        Country["KI"] = "KI";
        Country["KM"] = "KM";
        Country["KN"] = "KN";
        Country["KP"] = "KP";
        Country["KR"] = "KR";
        Country["KW"] = "KW";
        Country["KY"] = "KY";
        Country["KZ"] = "KZ";
        Country["LA"] = "LA";
        Country["LB"] = "LB";
        Country["LC"] = "LC";
        Country["LI"] = "LI";
        Country["LK"] = "LK";
        Country["LR"] = "LR";
        Country["LS"] = "LS";
        Country["LT"] = "LT";
        Country["LU"] = "LU";
        Country["LV"] = "LV";
        Country["LY"] = "LY";
        Country["MA"] = "MA";
        Country["MC"] = "MC";
        Country["MD"] = "MD";
        Country["ME"] = "ME";
        Country["MF"] = "MF";
        Country["MG"] = "MG";
        Country["MH"] = "MH";
        Country["MK"] = "MK";
        Country["ML"] = "ML";
        Country["MM"] = "MM";
        Country["MN"] = "MN";
        Country["MO"] = "MO";
        Country["MP"] = "MP";
        Country["MQ"] = "MQ";
        Country["MR"] = "MR";
        Country["MS"] = "MS";
        Country["MT"] = "MT";
        Country["MU"] = "MU";
        Country["MV"] = "MV";
        Country["MW"] = "MW";
        Country["MX"] = "MX";
        Country["MY"] = "MY";
        Country["MZ"] = "MZ";
        Country["NA"] = "NA";
        Country["NC"] = "NC";
        Country["NE"] = "NE";
        Country["NF"] = "NF";
        Country["NG"] = "NG";
        Country["NI"] = "NI";
        Country["NL"] = "NL";
        Country["NO"] = "NO";
        Country["NP"] = "NP";
        Country["NR"] = "NR";
        Country["NU"] = "NU";
        Country["NZ"] = "NZ";
        Country["OM"] = "OM";
        Country["PA"] = "PA";
        Country["PE"] = "PE";
        Country["PF"] = "PF";
        Country["PG"] = "PG";
        Country["PH"] = "PH";
        Country["PK"] = "PK";
        Country["PL"] = "PL";
        Country["PM"] = "PM";
        Country["PN"] = "PN";
        Country["PR"] = "PR";
        Country["PS"] = "PS";
        Country["PT"] = "PT";
        Country["PW"] = "PW";
        Country["PY"] = "PY";
        Country["QA"] = "QA";
        Country["RE"] = "RE";
        Country["RO"] = "RO";
        Country["RS"] = "RS";
        Country["RU"] = "RU";
        Country["RW"] = "RW";
        Country["SA"] = "SA";
        Country["SB"] = "SB";
        Country["SC"] = "SC";
        Country["SD"] = "SD";
        Country["SE"] = "SE";
        Country["SG"] = "SG";
        Country["SH"] = "SH";
        Country["SI"] = "SI";
        Country["SJ"] = "SJ";
        Country["SK"] = "SK";
        Country["SL"] = "SL";
        Country["SM"] = "SM";
        Country["SN"] = "SN";
        Country["SO"] = "SO";
        Country["SR"] = "SR";
        Country["SS"] = "SS";
        Country["ST"] = "ST";
        Country["SV"] = "SV";
        Country["SX"] = "SX";
        Country["SY"] = "SY";
        Country["SZ"] = "SZ";
        Country["TC"] = "TC";
        Country["TD"] = "TD";
        Country["TF"] = "TF";
        Country["TG"] = "TG";
        Country["TH"] = "TH";
        Country["TJ"] = "TJ";
        Country["TK"] = "TK";
        Country["TL"] = "TL";
        Country["TM"] = "TM";
        Country["TN"] = "TN";
        Country["TO"] = "TO";
        Country["TR"] = "TR";
        Country["TT"] = "TT";
        Country["TV"] = "TV";
        Country["TW"] = "TW";
        Country["TZ"] = "TZ";
        Country["UA"] = "UA";
        Country["UG"] = "UG";
        Country["UM"] = "UM";
        Country["US"] = "US";
        Country["UY"] = "UY";
        Country["UZ"] = "UZ";
        Country["VA"] = "VA";
        Country["VC"] = "VC";
        Country["VE"] = "VE";
        Country["VG"] = "VG";
        Country["VI"] = "VI";
        Country["VN"] = "VN";
        Country["VU"] = "VU";
        Country["WF"] = "WF";
        Country["WS"] = "WS";
        Country["XK"] = "XK";
        Country["YE"] = "YE";
        Country["YT"] = "YT";
        Country["ZA"] = "ZA";
        Country["ZM"] = "ZM";
        Country["ZW"] = "ZW";
    })(Country || (Country = {}));

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var Gender;
    (function (Gender) {
        Gender["F"] = "f";
        Gender["M"] = "m";
        Gender["X"] = "x";
    })(Gender || (Gender = {}));

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var MaritalStatus;
    (function (MaritalStatus) {
        MaritalStatus["DIVORCED"] = "divorced";
        MaritalStatus["MARRIED"] = "married";
        MaritalStatus["SINGLE"] = "single";
    })(MaritalStatus || (MaritalStatus = {}));

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var PaymentFrequency;
    (function (PaymentFrequency) {
        PaymentFrequency["MONTHLY"] = "monthly";
        PaymentFrequency["QUARTERLY"] = "quarterly";
        PaymentFrequency["UNKNOWN"] = "unknown";
        PaymentFrequency["YEARLY"] = "yearly";
    })(PaymentFrequency || (PaymentFrequency = {}));

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var ProofOfIdentityType;
    (function (ProofOfIdentityType) {
        ProofOfIdentityType["DRIVERS_LICENCE"] = "driversLicence";
        ProofOfIdentityType["IDENTITY_CARD"] = "identityCard";
        ProofOfIdentityType["PASSPORT"] = "passport";
    })(ProofOfIdentityType || (ProofOfIdentityType = {}));

    /* istanbul ignore file */
    /* tslint:disable */
    /* eslint-disable */
    var ReminderType;
    (function (ReminderType) {
        ReminderType["GENERIC"] = "generic";
        ReminderType["SERVICE"] = "service";
    })(ReminderType || (ReminderType = {}));

    /* istanbul ignore file */
    const isDefined = (value) => {
        return value !== undefined && value !== null;
    };
    const isString = (value) => {
        return typeof value === 'string';
    };
    const isStringWithValue = (value) => {
        return isString(value) && value !== '';
    };
    const isBlob = (value) => {
        return (typeof value === 'object' &&
            typeof value.type === 'string' &&
            typeof value.stream === 'function' &&
            typeof value.arrayBuffer === 'function' &&
            typeof value.constructor === 'function' &&
            typeof value.constructor.name === 'string' &&
            /^(Blob|File)$/.test(value.constructor.name) &&
            /^(Blob|File)$/.test(value[Symbol.toStringTag]));
    };
    const isFormData = (value) => {
        return value instanceof FormData;
    };
    const base64 = (str) => {
        try {
            return btoa(str);
        }
        catch (err) {
            // @ts-ignore
            return Buffer.from(str).toString('base64');
        }
    };
    const getQueryString = (params) => {
        const qs = [];
        const append = (key, value) => {
            qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
        };
        const process = (key, value) => {
            if (isDefined(value)) {
                if (Array.isArray(value)) {
                    value.forEach(v => {
                        process(key, v);
                    });
                }
                else if (typeof value === 'object') {
                    Object.entries(value).forEach(([k, v]) => {
                        process(`${key}[${k}]`, v);
                    });
                }
                else {
                    append(key, value);
                }
            }
        };
        Object.entries(params).forEach(([key, value]) => {
            process(key, value);
        });
        if (qs.length > 0) {
            return `?${qs.join('&')}`;
        }
        return '';
    };
    const getUrl = (config, options) => {
        const encoder = config.ENCODE_PATH || encodeURI;
        const path = options.url
            .replace('{api-version}', config.VERSION)
            .replace(/{(.*?)}/g, (substring, group) => {
            var _a;
            if ((_a = options.path) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });
        const url = `${config.BASE}${path}`;
        if (options.query) {
            return `${url}${getQueryString(options.query)}`;
        }
        return url;
    };
    const getFormData = (options) => {
        if (options.formData) {
            const formData = new FormData();
            const process = (key, value) => {
                if (isString(value) || isBlob(value)) {
                    formData.append(key, value);
                }
                else {
                    formData.append(key, JSON.stringify(value));
                }
            };
            Object.entries(options.formData)
                .filter(([_, value]) => isDefined(value))
                .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                }
                else {
                    process(key, value);
                }
            });
            return formData;
        }
        return;
    };
    const resolve = async (options, resolver) => {
        if (typeof resolver === 'function') {
            return resolver(options);
        }
        return resolver;
    };
    const getHeaders = async (config, options) => {
        const token = await resolve(options, config.TOKEN);
        const username = await resolve(options, config.USERNAME);
        const password = await resolve(options, config.PASSWORD);
        const additionalHeaders = await resolve(options, config.HEADERS);
        const headers = Object.entries(Object.assign(Object.assign({ Accept: 'application/json' }, additionalHeaders), options.headers))
            .filter(([_, value]) => isDefined(value))
            .reduce((headers, [key, value]) => (Object.assign(Object.assign({}, headers), { [key]: String(value) })), {});
        if (isStringWithValue(token)) {
            headers['Authorization'] = `Bearer ${token}`;
        }
        if (isStringWithValue(username) && isStringWithValue(password)) {
            const credentials = base64(`${username}:${password}`);
            headers['Authorization'] = `Basic ${credentials}`;
        }
        if (options.body) {
            if (options.mediaType) {
                headers['Content-Type'] = options.mediaType;
            }
            else if (isBlob(options.body)) {
                headers['Content-Type'] = options.body.type || 'application/octet-stream';
            }
            else if (isString(options.body)) {
                headers['Content-Type'] = 'text/plain';
            }
            else if (!isFormData(options.body)) {
                headers['Content-Type'] = 'application/json';
            }
        }
        return new Headers(headers);
    };
    const getRequestBody = (options) => {
        var _a;
        if (options.body) {
            if ((_a = options.mediaType) === null || _a === void 0 ? void 0 : _a.includes('/json')) {
                return JSON.stringify(options.body);
            }
            else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
                return options.body;
            }
            else {
                return JSON.stringify(options.body);
            }
        }
        return;
    };
    const sendRequest = async (config, options, url, body, formData, headers, onCancel) => {
        const controller = new AbortController();
        const request = {
            headers,
            body: body !== null && body !== void 0 ? body : formData,
            method: options.method,
            signal: controller.signal,
        };
        if (config.WITH_CREDENTIALS) {
            request.credentials = config.CREDENTIALS;
        }
        onCancel(() => controller.abort());
        return await fetch(url, request);
    };
    const getResponseHeader = (response, responseHeader) => {
        if (responseHeader) {
            const content = response.headers.get(responseHeader);
            if (isString(content)) {
                return content;
            }
        }
        return;
    };
    const getResponseBody = async (response) => {
        if (response.status !== 204) {
            try {
                const contentType = response.headers.get('Content-Type');
                if (contentType) {
                    const isJSON = contentType.toLowerCase().startsWith('application/json');
                    if (isJSON) {
                        return await response.json();
                    }
                    else {
                        return await response.text();
                    }
                }
            }
            catch (error) {
                console.error(error);
            }
        }
        return;
    };
    const catchErrorCodes = (options, result) => {
        const errors = Object.assign({ 400: 'Bad Request', 401: 'Unauthorized', 403: 'Forbidden', 404: 'Not Found', 500: 'Internal Server Error', 502: 'Bad Gateway', 503: 'Service Unavailable' }, options.errors);
        const error = errors[result.status];
        if (error) {
            throw new ApiError(result, error);
        }
        if (!result.ok) {
            throw new ApiError(result, 'Generic Error');
        }
    };
    /**
     * Request method
     * @param config The OpenAPI configuration object
     * @param options The request options from the service
     * @returns CancelablePromise<T>
     * @throws ApiError
     */
    const request = (config, options) => {
        return new CancelablePromise(async (resolve, reject, onCancel) => {
            try {
                const url = getUrl(config, options);
                const formData = getFormData(options);
                const body = getRequestBody(options);
                const headers = await getHeaders(config, options);
                if (!onCancel.isCancelled) {
                    const response = await sendRequest(config, options, url, body, formData, headers, onCancel);
                    const responseBody = await getResponseBody(response);
                    const responseHeader = getResponseHeader(response, options.responseHeader);
                    const result = {
                        url,
                        ok: response.ok,
                        status: response.status,
                        statusText: response.statusText,
                        body: responseHeader !== null && responseHeader !== void 0 ? responseHeader : responseBody,
                    };
                    catchErrorCodes(options, result);
                    resolve(result.body);
                }
            }
            catch (error) {
                reject(error);
            }
        });
    };

    class ClientContractService {
        /**
         * @param requestBody
         * @returns ClientContractDto OK
         * @throws ApiError
         */
        static add(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client-contract/add',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
        /**
         * @param id
         * @returns any OK
         * @throws ApiError
         */
        static delete(id) {
            return request(OpenAPI, {
                method: 'DELETE',
                url: '/api/client-contract/delete/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @param contractId
         * @returns any OK
         * @throws ApiError
         */
        static getPolicyRequest(contractId) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/client-contract/get-policy-request/{contractId}',
                path: {
                    'contractId': contractId,
                },
            });
        }
        /**
         * @param contractId
         * @returns any OK
         * @throws ApiError
         */
        static getPolicy(contractId) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/client-contract/get-policy/{contractId}',
                path: {
                    'contractId': contractId,
                },
            });
        }
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static update(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client-contract/update',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
        /**
         * @param formData
         * @returns ClientContractDto OK
         * @throws ApiError
         */
        static uploadPolicy(formData) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client-contract/upload-policy',
                formData: formData,
                mediaType: 'multipart/form-data',
            });
        }
        /**
         * @param formData
         * @returns ClientContractDto OK
         * @throws ApiError
         */
        static uploadPolicyRequest(formData) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client-contract/upload-policy-request',
                formData: formData,
                mediaType: 'multipart/form-data',
            });
        }
    }

    class ClientDocumentService {
        /**
         * @param id
         * @returns any OK
         * @throws ApiError
         */
        static delete(id) {
            return request(OpenAPI, {
                method: 'DELETE',
                url: '/api/client-document/delete/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @param id
         * @returns any OK
         * @throws ApiError
         */
        static get(id) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/client-document/get/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @param formData
         * @returns ClientDocumentDto OK
         * @throws ApiError
         */
        static upload(formData) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client-document/upload',
                formData: formData,
                mediaType: 'multipart/form-data',
            });
        }
    }

    class ClientService {
        /**
         * @param requestBody
         * @returns string
         * @throws ApiError
         */
        static add(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client/add',
                body: requestBody,
                mediaType: 'application/json',
                responseHeader: 'location',
            });
        }
        /**
         * @param clientId
         * @returns any OK
         * @throws ApiError
         */
        static delete(clientId) {
            return request(OpenAPI, {
                method: 'DELETE',
                url: '/api/client/delete/{clientId}',
                path: {
                    'clientId': clientId,
                },
            });
        }
        /**
         * @param id
         * @returns ClientDto OK
         * @throws ApiError
         */
        static get(id) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/client/get/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @returns ClientDto OK
         * @throws ApiError
         */
        static list() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/client/list',
            });
        }
        /**
         * @returns ClientDto OK
         * @throws ApiError
         */
        static listAll() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/client/list-all',
            });
        }
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static update(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/client/update',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
    }

    class EmployeeService {
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static add(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/employee/add',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
        /**
         * @returns ClientContractWithPersonalInformationDto OK
         * @throws ApiError
         */
        static contracts() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/employee/contracts',
            });
        }
        /**
         * @param id
         * @returns EmployeeDto OK
         * @throws ApiError
         */
        static get(id) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/employee/get/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @returns EmployeeDto OK
         * @throws ApiError
         */
        static list() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/employee/list',
            });
        }
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static update(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/employee/update',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
    }

    class PartnerService$1 {
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static add(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/partner/add',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
        /**
         * @param partnerId
         * @returns PartnerDto OK
         * @throws ApiError
         */
        static get(partnerId) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/partner/get/{partnerId}',
                path: {
                    'partnerId': partnerId,
                },
            });
        }
        /**
         * @returns PartnerReferenceDto OK
         * @throws ApiError
         */
        static list() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/partner/list',
            });
        }
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static update(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/partner/update',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
    }

    class PartnerServiceTypeService {
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static add(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/partner-service-type/add',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
        /**
         * @param id
         * @returns any OK
         * @throws ApiError
         */
        static delete(id) {
            return request(OpenAPI, {
                method: 'DELETE',
                url: '/api/partner-service-type/delete/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @returns PartnerServiceTypeDto OK
         * @throws ApiError
         */
        static list() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/partner-service-type/list',
            });
        }
    }

    class ProofOfIdentityService {
        /**
         * @param formData
         * @returns ProofOfIdentityDto OK
         * @throws ApiError
         */
        static add(formData) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/proof-of-identity/add',
                formData: formData,
                mediaType: 'multipart/form-data',
            });
        }
        /**
         * @param id
         * @returns any OK
         * @throws ApiError
         */
        static delete(id) {
            return request(OpenAPI, {
                method: 'DELETE',
                url: '/api/proof-of-identity/delete/{id}',
                path: {
                    'id': id,
                },
            });
        }
        /**
         * @param id
         * @returns any OK
         * @throws ApiError
         */
        static get(id) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/proof-of-identity/get/{id}',
                path: {
                    'id': id,
                },
            });
        }
    }

    class ReminderService {
        /**
         * @returns ReminderDto OK
         * @throws ApiError
         */
        static list() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/reminder',
            });
        }
    }

    class TemplateService {
        /**
         * @param formData
         * @returns any OK
         * @throws ApiError
         */
        static add(formData) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/template/add',
                formData: formData,
                mediaType: 'multipart/form-data',
            });
        }
        /**
         * @param templateId
         * @returns any OK
         * @throws ApiError
         */
        static delete(templateId) {
            return request(OpenAPI, {
                method: 'DELETE',
                url: '/api/template/delete/{templateId}',
                path: {
                    'templateId': templateId,
                },
            });
        }
        /**
         * @param templateId
         * @returns any OK
         * @throws ApiError
         */
        static get(templateId) {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/template/get/{templateId}',
                path: {
                    'templateId': templateId,
                },
            });
        }
        /**
         * @returns TemplateDto OK
         * @throws ApiError
         */
        static list() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/template/list',
            });
        }
        /**
         * @param requestBody
         * @returns any OK
         * @throws ApiError
         */
        static update(requestBody) {
            return request(OpenAPI, {
                method: 'POST',
                url: '/api/template/update',
                body: requestBody,
                mediaType: 'application/json',
            });
        }
    }

    class UserService {
        /**
         * @returns EmployeeDto OK
         * @throws ApiError
         */
        static get() {
            return request(OpenAPI, {
                method: 'GET',
                url: '/api/me',
            });
        }
    }

    function format(localisation, ...args) {
        return localisation.replace(/{(\d+)}/g, (_, index) => args[index] || '');
    }
    const en = {
        slogan: 'Kopf frei bei Finanzfragen',
        menu: {
            home: 'Home',
            clients: 'Clients',
            templates: 'Templates',
            partner: 'Partner',
            contracts: 'Contracts',
            notes: 'Notes',
            admin_mode: 'Admin Mode',
            employees: 'Employees',
            logout: 'Logout',
            footer: 'created with ♡ by quellkunst.com',
            footerAlt: 'created with ♥ by quellkunst.com',
        },
        personal: {
            firstName: 'First name',
            lastName: 'Last name',
            email: 'E-mail address',
            address: 'Address',
            country: 'Country',
            zipCode: 'Zip code',
            city: 'City',
            phone: 'Phone number',
            mobile: 'Mobile number',
            gender: {
                label: 'Gender',
                male: 'Male',
                female: 'Female',
                divers: 'Divers'
            },
            birthday: 'Birthday',
            nationality: 'Nationality',
            birthPlace: 'Place of birth',
            partnerLabel: 'Partner',
            maritalStatus: {
                label: 'Marital status',
                single: 'Single',
                married: 'Married',
                divorced: 'Divorced',
            },
            occupation: 'Occupation',
            socialInsuranceInstitution: 'Social insurance institution',
            title: 'Title',
            degree: 'Degree',
            militaryServiceDone: 'Conscripted',
            smoker: 'Smoker',
            pets: 'Pets',
            petsRemarks: 'Remarks regarding your pets',
            childrenLabel: 'Children',
            addChild: 'Add child',
            car: {
                label: 'Cars',
                addCar: 'Add car',
                name: 'Name',
                contractor: 'Contractor',
                contractNumber: 'Contract-No.',
                bonusLevel: 'Bonus / malus level',
                mainDue: 'Main due',
                make: 'Make',
                power: 'Power',
                driveType: 'Drive type',
                licensePlate: 'License plate',
                constructionYear: 'Construction year',
                insuranceType: 'Insurance type',
                originalPrice: 'Original price incl. extras',
                deductible: 'Deductible',
                bonus: 'Bonus',
                paymentType: 'Payment type',
            },
            home: {
                area: 'Area',
                builtArea: 'Built area',
                floors: 'Floors',
                roofType: 'Roof type',
                cellar: 'Cellar',
                pool: 'Pool',
                photovoltaic: 'Photovoltaic',
                photovoltaicRemarks: 'Area or module number',
                specialAssets: 'Special assets',
            }
        },
        needsAssessment: {
            title: 'Needs Assessment',
            subtitles: {
                personal: 'Personal',
                insurance: 'Insurances',
                provision: 'Provisions',
                experiences: 'Experiences',
                legal: 'Legal'
            },
            insurances: {
                chartTitle: 'Cover',
                accidentInsurance: {
                    name: 'Accident Insurance',
                    helpSubtitle: 'Max Muster stumbles over the stairs!',
                    helpText: 'In the fall he is seriously injured and damages the glazing of the stairwell!'
                },
                disabilityInsurance: {
                    name: 'Disability Insurance',
                    helpSubtitle: 'Max Muster stumbles over the stairs!',
                    helpText: 'Because of the injuries Max must be flown to the hospital! After some time it turns out that Max can no longer practice his profession due to his injuries!'
                },
                homeInsurance: {
                    name: 'Home Insurance',
                    helpSubtitle: 'Max Muster stumbles over the stairs!',
                    helpText: 'In addition, Max gets a hefty bill from the building owner\'s, because of the damaged window!',
                    homeOwnershipLabel: 'Home ownership',
                    householdInsuranceLabel: 'Household insurance',
                    liabilityInsuranceLabel: 'Liability insurance'
                },
                legalProtectionInsurance: {
                    name: 'Legal Protection Insurance',
                    helpSubtitle: 'Max Muster stumbles over the stairs!',
                    helpText: 'Max does not want to let this sit on himself, and have it checked by a lawyer.'
                }
            },
            provisions: {
                death: 'Endowment insurance',
                retirement: 'Retirement plan',
                wealthBuilding: 'Wealth building',
                illness: 'Illness',
                care: 'Care'
            },
            experiences: {
                lifeInsurance: 'Life insurance',
                investmentFonds: 'Investment fonds',
                bonds: 'Bonds',
                shareHolding: 'Share holding',
                options: 'Options / Futures / Hedgefonds',
                financing: 'Financing',
                guarantees: 'Guarantee bonds',
                properties: 'Properties / Propertyfonds/-shares',
                certificates: 'Certificates',
                yesExperience: 'Yes, I do have experience',
                noExperience: 'No experience, desired anyway',
                since: 'Since'
            },
            wealthBuilding: {
                retirementProvision: 'Retirement provision',
                saveBig: 'Save for something big',
                saveEducation: 'Save for education',
                otherInvestmentGoal: 'Other investment goals',
                alreadyInvested: 'Do savings forms already exist?',
                plannedInvestmentGoals: 'Planned investment goals',
                plannedInvestmentPeriod: 'Planned investment period',
                investmentPeriodOptions: {
                    upToFiveYears: 'Up to 5 years',
                    fiveToTwentyYears: '5 - 20 years',
                    moreThanTwentyYears: 'more than 20 years'
                },
                plannedMethodOfPayment: 'Planned method of payment',
                paymentOnce: 'once',
                paymentMonthly: 'monthly',
                paymentYearly: 'yearly',
                riskTolerance: 'Risk tolerance',
                veryHigh: {
                    name: 'Very high',
                    description: 'speculative investor | acceptance of very high fluctuations in value up to total loss of the capital invested'
                },
                high: {
                    name: 'High',
                    description: 'dynamic investor | acceptance of value fluctuations of more than 20% per year in expectation'
                },
                medium: {
                    name: 'Medium',
                    description: 'balanced investor | acceptance of value fluctuations of up to 20% per year in expectation'
                },
                low: {
                    name: 'Low',
                    description: 'conservative investor | acceptance of value fluctuations of up to 10% per year'
                },
            },
            signing: {
                date: 'Date',
                place: 'Place',
                powerOfAttornyTitle: 'Power of attorny',
                powerOfAttornyText: 'I hereby authorize LiberoLife GmbH and the persons acting on its behalf to provide information (including the retrieval of personal data within the meaning of Art 9 (1) DSGVO) and release from banking secrecy for {0}',
                noticeTitle: 'Notice',
                noticeText: 'We thank you for your willingness to disclose your personal data to us and are convinced that we can offer you an effective evaluation of this analysis as well as limited to the lines of insurance requested by the customer in the requirements assessment; further protection of interests is not desired and therefore excluded.<br/><br/>"The creation of the coverage concept was created exclusively according to the information provided by the customer. No liability is assumed for incorrect information".<br/><br/>I hereby authorize LiberoLife GmbH to use my personal data in accordance with § 62 WAG 2007 in conjunction with § 107 TKG and under the statutory data protection regulations - in particular the DSGVO. Your data will be treated as strictly confidential and will only be passed on to third parties under the legal requirements (e.g. preparation of an offer, etc.).<br/><br/>I confirm receipt of the information obligations and data protection notices and have been informed in detail about them. '
            },
            finishButton: 'Finish assessment',
            wishesOffer: 'Wishes offer',
            saveClient: 'Save as new client'
        },
        home: {
            greeting: 'Hello {0}!'
        },
        remarks: 'Remarks',
        payment: {
            euroTextfieldLabel: 'Value',
            paymentFrequency: 'Payment frequency',
            contractor: 'Contractor',
            monthly: 'Monthly',
            quarterly: 'Quarterly',
            yearly: 'Yearly'
        },
        yes: 'yes',
        no: 'no',
        search: 'Search',
        save: 'Save',
        edit: 'Edit',
        add: 'Add',
        contract: {
            newContractTitle: 'New Contract',
            editContractTitle: 'Edit Contract',
            contractNumber: 'Contract No.',
            serviceType: 'Service',
            legacy: 'Legacy Contract'
        },
        createdAt: 'Created at',
        file: 'File',
        document: {
            general: 'Generic',
            annualService: 'Annual Service',
            policyService: 'PolicyService'
        },
        unknown: 'Unknown'
    };
    const de = {
        slogan: 'Kopf frei bei Finanzfragen',
        menu: {
            home: 'Start',
            clients: 'Kunden',
            templates: 'Vorlagen',
            partner: 'Partner',
            contracts: 'Verträge',
            notes: 'Notizen',
            admin_mode: 'Admin Modus',
            employees: 'Mitarbeiter',
            logout: 'Abmelden',
            footer: 'erstellt mit ♡ von quellkunst.com',
            footerAlt: 'erstellt mit ♥ von quellkunst.com'
        },
        personal: {
            firstName: 'Vorname',
            lastName: 'Nachname',
            email: 'E-Mail Adresse',
            address: 'Adresse',
            country: 'Land',
            zipCode: 'PLZ',
            city: 'Ort',
            phone: 'Telefonnummer',
            mobile: 'Mobilnummer',
            gender: {
                label: 'Geschlecht',
                male: 'männlich',
                female: 'weiblich',
                divers: 'divers'
            },
            birthday: 'Geburtstag',
            partnerLabel: 'Partner',
            maritalStatus: {
                label: 'Familienstand',
                single: 'Ledig',
                married: 'Verheiratet',
                divorced: 'Geschieden'
            },
            nationality: 'Nationalität',
            birthPlace: 'Geburtsort',
            occupation: 'Beruf',
            socialInsuranceInstitution: 'Sozialversicherungsanstalt',
            title: 'Titel',
            degree: 'Akademischer Grad',
            militaryServiceDone: 'Wehrpflicht abgeschlossen',
            smoker: 'Raucher',
            pets: 'Haustiere',
            petsRemarks: 'Anmerkungen über die Haustiere',
            childrenLabel: 'Kinder',
            addChild: 'Kind hinzufügen',
            car: {
                label: 'Fahrzeuge',
                addCar: 'Fahrzeug hinzufügen',
                name: 'Name',
                contractor: 'Gesellschaft',
                contractNumber: 'Polizzen-Nr.',
                bonusLevel: 'Bonus / Malus Stufe',
                mainDue: 'Hauptfälligkeit',
                make: 'KFZ-Marke',
                power: 'KW / PS / ccm',
                driveType: 'Antriebsart',
                licensePlate: 'Kennzeichen',
                constructionYear: 'Baujahr',
                insuranceType: 'Kaskoart',
                originalPrice: 'Neupreis inkl. Sonderausstattung',
                deductible: 'Selbstbehalt',
                bonus: 'Prämie',
                paymentType: 'Zahlungsweise',
            },
            home: {
                area: 'Fläche',
                builtArea: 'Verbaute Fläche',
                floors: 'Stockwerke',
                roofType: 'Dachart',
                cellar: 'Keller',
                pool: 'Pool',
                photovoltaic: 'Photovoltaik',
                photovoltaicRemarks: 'Fläche oder Modulzahl',
                specialAssets: 'Besondere Sachwerte',
            }
        },
        needsAssessment: {
            title: 'Bedarfsanalyse',
            subtitles: {
                personal: 'Persönliches',
                insurance: 'Versicherungen',
                provision: 'Vorsorgen',
                experiences: 'Erfahrungen',
                legal: 'Rechtliches'
            },
            insurances: {
                chartTitle: 'Abdeckung',
                accidentInsurance: {
                    name: 'Unfall',
                    helpSubtitle: 'Max Muster stolpert über die Stiege!',
                    helpText: 'Beim Sturz Verletzt er sich schwer und beschädigt die Verglasung des Stiegenhauses!'
                },
                disabilityInsurance: {
                    name: 'Berufsunfähigkeit',
                    helpSubtitle: 'Max Muster stolpert über die Stiege!',
                    helpText: 'Aufgrund der Verletzungen muss Max ins Spital geflogen werden! Nach einiger Zeit stellt sich heraus, das Max aufgrund seiner Verletzungen den seinem Beruf nicht mehr ausüben kann!'
                },
                homeInsurance: {
                    name: 'Eigenheim/Haushalt/Haftpflicht',
                    helpSubtitle: 'Max Muster stolpert über die Stiege!',
                    helpText: 'Als draufgabe bekommt Max noch eine saftige Rechnung des Gebäudebesitzter´s, aufgrund der Beschädigten Scheibe!',
                    homeOwnershipLabel: 'Eigenheim',
                    householdInsuranceLabel: 'Haushaltsversicherung',
                    liabilityInsuranceLabel: 'Haftpflichtversicherung'
                },
                legalProtectionInsurance: {
                    name: 'Rechtsschutz',
                    helpSubtitle: 'Max Muster stolpert über die Stiege!',
                    helpText: 'Max möchte das nicht auf sich sitzen lassen, und das von einem Rechtsanwalt Prüfen lassen'
                }
            },
            provisions: {
                death: 'Ableben',
                retirement: 'Pensionsvorsorge',
                wealthBuilding: 'Vermögensaufbau',
                illness: 'Krankenversicherung',
                care: 'Pflege'
            },
            experiences: {
                lifeInsurance: 'Lebensversicherung',
                investmentFonds: 'Investmentfonds',
                bonds: 'Anleihen',
                shareHolding: 'Aktien',
                options: 'Optionen/Futures/Hedgefonds',
                financing: 'Finanzierungen',
                guarantees: 'Garantiefonds',
                properties: 'Immobilien/Immobilienfonds/-aktien',
                certificates: 'Zertifikate',
                yesExperience: 'bereits Erfahrung',
                noExperience: 'keine Erfahrung trotzdem gewünscht',
                since: 'seit wann'
            },
            wealthBuilding: {
                retirementProvision: 'Altersvorsorge',
                saveBig: 'Sparen für größere Anschaffungen ',
                saveEducation: 'Sparen für Ausbildung Kinder/Partner ',
                otherInvestmentGoal: 'Andere Anlageziel',
                alreadyInvested: 'Bestehen bereits Sparformen?',
                plannedInvestmentGoals: 'Geplante Anlageziele',
                plannedInvestmentPeriod: 'Geplante Anlagedauer',
                investmentPeriodOptions: {
                    upToFiveYears: 'Bis 5.Jahre',
                    fiveToTwentyYears: '5-20.Jahre',
                    moreThanTwentyYears: 'über 20.Jahre'
                },
                plannedMethodOfPayment: 'Geplante Zahlungsweise',
                paymentOnce: 'Einmalzahlung',
                paymentMonthly: 'Monatliche Zahlung',
                paymentYearly: 'Jährliche Zahlung',
                riskTolerance: 'Risikotoleranz',
                veryHigh: {
                    name: 'Sehr Hoch',
                    description: 'spekulativer Anleger | Akzeptanz von sehr hohen Wertschwankungen bis zum Totalverlust des eingesetzten Kapitals.'
                },
                high: {
                    name: 'Hoch',
                    description: 'dynamischer Anleger | Akzeptanz von Wertschwankungen von mehr als 20% im Jahr in Erwartung.'
                },
                medium: {
                    name: 'Mittel',
                    description: 'ausgewogener Anleger | Akzeptanz von Wertschwankungen von bis zu 20% im Jahr in Erwartung.'
                },
                low: {
                    name: 'Niedrig',
                    description: 'konservativer Anleger | Akzeptanz von Wertschwankungen von bis zu 10% im Jahr.'
                },
            },
            signing: {
                date: 'Datum',
                place: 'Ort',
                powerOfAttornyTitle: 'Auskunftsvollmacht',
                powerOfAttornyText: 'Hiermit erteile ich bis auf Widerruf der LiberoLife GmbH und den in ihrem Auftrag handelnden Personen die Auskunftsvollmacht (einschließlich zur Abfrage personen- bezogener Daten im Sinne des Art 9 Abs 1 DSGVO) und Entbindung vom Bankgeheimnis für {0}',
                noticeTitle: 'Hinweise',
                noticeText: 'Wir bedanken uns für die Bereitschaft, uns Deine persönlichen Daten offen zu legen, und sind davon überzeugt, Dir dadurch eine effektive Auswertung dieser Analyse bieten zu können.<br/>Wir weisen darauf hin, dass sich im Versicherungsbereich die Interessenwahrung auf den österreichischen Markt sowie auf die vom Kunden in der Bedarfserfassung gewünschten Versicherungssparten beschränkt; eine darüber hinausgehende Interessenwahrung ist nicht gewünscht und daher ausgeschlossen.<br/><br/>„Die Erstellung des Deckungskonzeptes ist ausschließlich nach Angaben des Kunden passierenden Daten erstellt worden. Für Fehlinformationen wird keine Haftung übernommen“.<br/><br/>Hiermit bevollmächtige ich die LiberoLife GmbH, meine personenbezogenen Daten laut § 62 WAG 2007 iVm § 107 TKG sowie unter den gesetzlichen Datenschutzbestimmungen – insbesondere der DSGVO – zu verwenden. Deine Daten werden streng vertraulich behandelt und nur unter den gesetzlichen Voraussetzungen (zb Angebotserstellung etc.) an Dritte weitergegeben.<br/><br/>Ich bestätige den Erhalt der Informationspflichten und Datenschutzhinweise und wurde darüber ausführlich aufgeklärt.'
            },
            finishButton: 'Analyse abschließen',
            wishesOffer: 'Angebot erwünscht',
            saveClient: 'Als Kunde speichern'
        },
        home: {
            greeting: 'Hallo {0}!'
        },
        remarks: 'Anmerkungen',
        payment: {
            euroTextfieldLabel: 'Betrag',
            paymentFrequency: 'Frequenz',
            contractor: 'Versicherungsgesellschaft',
            monthly: 'Monatlich',
            quarterly: 'Quartalsweise',
            yearly: 'Jährlich'
        },
        yes: 'ja',
        no: 'nein',
        search: 'Suche',
        save: 'Speichern',
        edit: 'Ändern',
        add: 'Hinzufügen',
        contract: {
            newContractTitle: 'Neue Polizze',
            editContractTitle: 'Polizze bearbeiten',
            contractNumber: 'Polizzen Nr.',
            serviceType: 'Versicherungsgegenstand',
            legacy: 'Altvertrag'
        },
        createdAt: 'Erstellungsdatum',
        file: 'Datei',
        document: {
            general: 'Allgemein',
            annualService: 'Jahresservice',
            policyService: 'Polizzenservice'
        },
        unknown: 'Unbekannt'
    };
    const l = writable(de);

    /* src/routes/Home.svelte generated by Svelte v3.44.3 */
    const file$1B = "src/routes/Home.svelte";

    function create_fragment$23(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let h1;
    	let t1_value = format(/*$l*/ ctx[1].home.greeting, /*name*/ ctx[0]) + "";
    	let t1;
    	let t2;
    	let ul;
    	let li0;
    	let t3;
    	let li1;
    	let t4;
    	let li2;
    	let t5;
    	let li3;
    	let t6;
    	let li4;
    	let t7;
    	let li5;
    	let t8;
    	let li6;
    	let t9;
    	let li7;
    	let t10;
    	let li8;
    	let t11;
    	let li9;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			ul = element("ul");
    			li0 = element("li");
    			t3 = space();
    			li1 = element("li");
    			t4 = space();
    			li2 = element("li");
    			t5 = space();
    			li3 = element("li");
    			t6 = space();
    			li4 = element("li");
    			t7 = space();
    			li5 = element("li");
    			t8 = space();
    			li6 = element("li");
    			t9 = space();
    			li7 = element("li");
    			t10 = space();
    			li8 = element("li");
    			t11 = space();
    			li9 = element("li");
    			attr_dev(img, "class", "logo svelte-k1t5il");
    			if (!src_url_equal(img.src, img_src_value = "../logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "LiberoLife Logo");
    			add_location(img, file$1B, 5, 8, 159);
    			attr_dev(h1, "class", "svelte-k1t5il");
    			add_location(h1, file$1B, 6, 8, 228);
    			attr_dev(div0, "class", "content svelte-k1t5il");
    			add_location(div0, file$1B, 4, 4, 129);
    			attr_dev(li0, "class", "svelte-k1t5il");
    			add_location(li0, file$1B, 9, 8, 314);
    			attr_dev(li1, "class", "svelte-k1t5il");
    			add_location(li1, file$1B, 10, 8, 332);
    			attr_dev(li2, "class", "svelte-k1t5il");
    			add_location(li2, file$1B, 11, 8, 350);
    			attr_dev(li3, "class", "svelte-k1t5il");
    			add_location(li3, file$1B, 12, 8, 368);
    			attr_dev(li4, "class", "svelte-k1t5il");
    			add_location(li4, file$1B, 13, 8, 386);
    			attr_dev(li5, "class", "svelte-k1t5il");
    			add_location(li5, file$1B, 14, 8, 404);
    			attr_dev(li6, "class", "svelte-k1t5il");
    			add_location(li6, file$1B, 15, 8, 422);
    			attr_dev(li7, "class", "svelte-k1t5il");
    			add_location(li7, file$1B, 16, 8, 440);
    			attr_dev(li8, "class", "svelte-k1t5il");
    			add_location(li8, file$1B, 17, 8, 458);
    			attr_dev(li9, "class", "svelte-k1t5il");
    			add_location(li9, file$1B, 18, 8, 476);
    			attr_dev(ul, "class", "circles svelte-k1t5il");
    			add_location(ul, file$1B, 8, 4, 285);
    			attr_dev(div1, "class", "area background svelte-k1t5il");
    			add_location(div1, file$1B, 3, 0, 95);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, h1);
    			append_dev(h1, t1);
    			append_dev(div1, t2);
    			append_dev(div1, ul);
    			append_dev(ul, li0);
    			append_dev(ul, t3);
    			append_dev(ul, li1);
    			append_dev(ul, t4);
    			append_dev(ul, li2);
    			append_dev(ul, t5);
    			append_dev(ul, li3);
    			append_dev(ul, t6);
    			append_dev(ul, li4);
    			append_dev(ul, t7);
    			append_dev(ul, li5);
    			append_dev(ul, t8);
    			append_dev(ul, li6);
    			append_dev(ul, t9);
    			append_dev(ul, li7);
    			append_dev(ul, t10);
    			append_dev(ul, li8);
    			append_dev(ul, t11);
    			append_dev(ul, li9);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$l, name*/ 3 && t1_value !== (t1_value = format(/*$l*/ ctx[1].home.greeting, /*name*/ ctx[0]) + "")) set_data_dev(t1, t1_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$23.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1G($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(1, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	let { name = "" } = $$props;
    	const writable_props = ['name'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    	};

    	$$self.$capture_state = () => ({ l, format, name, $l });

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, $l];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1G, create_fragment$23, safe_not_equal, { name: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$23.name
    		});
    	}

    	get name() {
    		throw new Error("<Home>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Home>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const LOCATION = {};
    const ROUTER = {};

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    function getLocation(source) {
      return {
        ...source.location,
        state: source.history.state,
        key: (source.history.state && source.history.state.key) || "initial"
      };
    }

    function createHistory(source, options) {
      const listeners = [];
      let location = getLocation(source);

      return {
        get location() {
          return location;
        },

        listen(listener) {
          listeners.push(listener);

          const popstateListener = () => {
            location = getLocation(source);
            listener({ location, action: "POP" });
          };

          source.addEventListener("popstate", popstateListener);

          return () => {
            source.removeEventListener("popstate", popstateListener);

            const index = listeners.indexOf(listener);
            listeners.splice(index, 1);
          };
        },

        navigate(to, { state, replace = false } = {}) {
          state = { ...state, key: Date.now() + "" };
          // try...catch iOS Safari limits to 100 pushState calls
          try {
            if (replace) {
              source.history.replaceState(state, null, to);
            } else {
              source.history.pushState(state, null, to);
            }
          } catch (e) {
            source.location[replace ? "replace" : "assign"](to);
          }

          location = getLocation(source);
          listeners.forEach(listener => listener({ location, action: "PUSH" }));
        }
      };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
      let index = 0;
      const stack = [{ pathname: initialPathname, search: "" }];
      const states = [];

      return {
        get location() {
          return stack[index];
        },
        addEventListener(name, fn) {},
        removeEventListener(name, fn) {},
        history: {
          get entries() {
            return stack;
          },
          get index() {
            return index;
          },
          get state() {
            return states[index];
          },
          pushState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            index++;
            stack.push({ pathname, search });
            states.push(state);
          },
          replaceState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            stack[index] = { pathname, search };
            states[index] = state;
          }
        }
      };
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = Boolean(
      typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );
    const globalHistory = createHistory(canUseDOM ? window : createMemorySource());
    const { navigate } = globalHistory;

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    const paramRe = /^:(.+)/;

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    function isRootSegment(segment) {
      return segment === "";
    }

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    function isDynamic(segment) {
      return paramRe.test(segment);
    }

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    function isSplat(segment) {
      return segment[0] === "*";
    }

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri) {
      return (
        uri
          // Strip starting/ending `/`
          .replace(/(^\/+|\/+$)/g, "")
          .split("/")
      );
    }

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    function stripSlashes(str) {
      return str.replace(/(^\/+|\/+$)/g, "");
    }

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
      const score = route.default
        ? 0
        : segmentize(route.path).reduce((score, segment) => {
            score += SEGMENT_POINTS;

            if (isRootSegment(segment)) {
              score += ROOT_POINTS;
            } else if (isDynamic(segment)) {
              score += DYNAMIC_POINTS;
            } else if (isSplat(segment)) {
              score -= SEGMENT_POINTS + SPLAT_PENALTY;
            } else {
              score += STATIC_POINTS;
            }

            return score;
          }, 0);

      return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
      return (
        routes
          .map(rankRoute)
          // If two routes have the exact same score, we go by index instead
          .sort((a, b) =>
            a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
          )
      );
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { path, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
      let match;
      let default_;

      const [uriPathname] = uri.split("?");
      const uriSegments = segmentize(uriPathname);
      const isRootUri = uriSegments[0] === "";
      const ranked = rankRoutes(routes);

      for (let i = 0, l = ranked.length; i < l; i++) {
        const route = ranked[i].route;
        let missed = false;

        if (route.default) {
          default_ = {
            route,
            params: {},
            uri
          };
          continue;
        }

        const routeSegments = segmentize(route.path);
        const params = {};
        const max = Math.max(uriSegments.length, routeSegments.length);
        let index = 0;

        for (; index < max; index++) {
          const routeSegment = routeSegments[index];
          const uriSegment = uriSegments[index];

          if (routeSegment !== undefined && isSplat(routeSegment)) {
            // Hit a splat, just grab the rest, and return a match
            // uri:   /files/documents/work
            // route: /files/* or /files/*splatname
            const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

            params[splatName] = uriSegments
              .slice(index)
              .map(decodeURIComponent)
              .join("/");
            break;
          }

          if (uriSegment === undefined) {
            // URI is shorter than the route, no match
            // uri:   /users
            // route: /users/:userId
            missed = true;
            break;
          }

          let dynamicMatch = paramRe.exec(routeSegment);

          if (dynamicMatch && !isRootUri) {
            const value = decodeURIComponent(uriSegment);
            params[dynamicMatch[1]] = value;
          } else if (routeSegment !== uriSegment) {
            // Current segments don't match, not dynamic, not splat, so no match
            // uri:   /users/123/settings
            // route: /users/:id/profile
            missed = true;
            break;
          }
        }

        if (!missed) {
          match = {
            route,
            params,
            uri: "/" + uriSegments.slice(0, index).join("/")
          };
          break;
        }
      }

      return match || default_ || null;
    }

    /**
     * Check if the `path` matches the `uri`.
     * @param {string} path
     * @param {string} uri
     * @return {?object}
     */
    function match(route, uri) {
      return pick([route], uri);
    }

    /**
     * Combines the `basepath` and the `path` into one path.
     * @param {string} basepath
     * @param {string} path
     */
    function combinePaths(basepath, path) {
      return `${stripSlashes(
    path === "/" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`
  )}/`;
    }

    /**
     * Decides whether a given `event` should result in a navigation or not.
     * @param {object} event
     */
    function shouldNavigate(event) {
      return (
        !event.defaultPrevented &&
        event.button === 0 &&
        !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
      );
    }

    function hostMatches(anchor) {
      const host = location.host;
      return (
        anchor.host == host ||
        // svelte seems to kill anchor.host value in ie11, so fall back to checking href
        anchor.href.indexOf(`https://${host}`) === 0 ||
        anchor.href.indexOf(`http://${host}`) === 0
      )
    }

    /* node_modules/svelte-routing/src/Router.svelte generated by Svelte v3.44.3 */

    function create_fragment$22(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$22.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1F($$self, $$props, $$invalidate) {
    	let $location;
    	let $routes;
    	let $base;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, ['default']);
    	let { basepath = "/" } = $$props;
    	let { url = null } = $$props;
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const routes = writable([]);
    	validate_store(routes, 'routes');
    	component_subscribe($$self, routes, value => $$invalidate(6, $routes = value));
    	const activeRoute = writable(null);
    	let hasActiveRoute = false; // Used in SSR to synchronously set that a Route is active.

    	// If locationContext is not set, this is the topmost Router in the tree.
    	// If the `url` prop is given we force the location to it.
    	const location = locationContext || writable(url ? { pathname: url } : globalHistory.location);

    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(5, $location = value));

    	// If routerContext is set, the routerBase of the parent Router
    	// will be the base for this Router's descendants.
    	// If routerContext is not set, the path and resolved uri will both
    	// have the value of the basepath prop.
    	const base = routerContext
    	? routerContext.routerBase
    	: writable({ path: basepath, uri: basepath });

    	validate_store(base, 'base');
    	component_subscribe($$self, base, value => $$invalidate(7, $base = value));

    	const routerBase = derived([base, activeRoute], ([base, activeRoute]) => {
    		// If there is no activeRoute, the routerBase will be identical to the base.
    		if (activeRoute === null) {
    			return base;
    		}

    		const { path: basepath } = base;
    		const { route, uri } = activeRoute;

    		// Remove the potential /* or /*splatname from
    		// the end of the child Routes relative paths.
    		const path = route.default
    		? basepath
    		: route.path.replace(/\*.*$/, "");

    		return { path, uri };
    	});

    	function registerRoute(route) {
    		const { path: basepath } = $base;
    		let { path } = route;

    		// We store the original path in the _path property so we can reuse
    		// it when the basepath changes. The only thing that matters is that
    		// the route reference is intact, so mutation is fine.
    		route._path = path;

    		route.path = combinePaths(basepath, path);

    		if (typeof window === "undefined") {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match(route, $location.pathname);

    			if (matchingRoute) {
    				activeRoute.set(matchingRoute);
    				hasActiveRoute = true;
    			}
    		} else {
    			routes.update(rs => {
    				rs.push(route);
    				return rs;
    			});
    		}
    	}

    	function unregisterRoute(route) {
    		routes.update(rs => {
    			const index = rs.indexOf(route);
    			rs.splice(index, 1);
    			return rs;
    		});
    	}

    	if (!locationContext) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = globalHistory.listen(history => {
    				location.set(history.location);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute
    	});

    	const writable_props = ['basepath', 'url'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('basepath' in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(4, url = $$props.url);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		setContext,
    		onMount,
    		writable,
    		derived,
    		LOCATION,
    		ROUTER,
    		globalHistory,
    		pick,
    		match,
    		stripSlashes,
    		combinePaths,
    		basepath,
    		url,
    		locationContext,
    		routerContext,
    		routes,
    		activeRoute,
    		hasActiveRoute,
    		location,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute,
    		$location,
    		$routes,
    		$base
    	});

    	$$self.$inject_state = $$props => {
    		if ('basepath' in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(4, url = $$props.url);
    		if ('hasActiveRoute' in $$props) hasActiveRoute = $$props.hasActiveRoute;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$base*/ 128) {
    			// This reactive statement will update all the Routes' path when
    			// the basepath changes.
    			{
    				const { path: basepath } = $base;

    				routes.update(rs => {
    					rs.forEach(r => r.path = combinePaths(basepath, r._path));
    					return rs;
    				});
    			}
    		}

    		if ($$self.$$.dirty & /*$routes, $location*/ 96) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			{
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}
    	};

    	return [
    		routes,
    		location,
    		base,
    		basepath,
    		url,
    		$location,
    		$routes,
    		$base,
    		$$scope,
    		slots
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1F, create_fragment$22, safe_not_equal, { basepath: 3, url: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$22.name
    		});
    	}

    	get basepath() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set basepath(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-routing/src/Route.svelte generated by Svelte v3.44.3 */

    const get_default_slot_changes$3 = dirty => ({
    	params: dirty & /*routeParams*/ 4,
    	location: dirty & /*$location*/ 16
    });

    const get_default_slot_context$3 = ctx => ({
    	params: /*routeParams*/ ctx[2],
    	location: /*$location*/ ctx[4]
    });

    // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}
    function create_if_block$M(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$p, create_else_block$i];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$M.name,
    		type: "if",
    		source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {:else}
    function create_else_block$i(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$3);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, routeParams, $location*/ 532)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$3),
    						get_default_slot_context$3
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$i.name,
    		type: "else",
    		source: "(43:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (41:2) {#if component !== null}
    function create_if_block_1$p(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[4] },
    		/*routeParams*/ ctx[2],
    		/*routeProps*/ ctx[3]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, routeParams, routeProps*/ 28)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 16 && { location: /*$location*/ ctx[4] },
    					dirty & /*routeParams*/ 4 && get_spread_object(/*routeParams*/ ctx[2]),
    					dirty & /*routeProps*/ 8 && get_spread_object(/*routeProps*/ ctx[3])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$p.name,
    		type: "if",
    		source: "(41:2) {#if component !== null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$21(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$activeRoute*/ ctx[1] !== null && /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7] && create_if_block$M(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$activeRoute*/ ctx[1] !== null && /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$activeRoute*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$M(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$21.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1E($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	let $location;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, ['default']);
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, value => $$invalidate(1, $activeRoute = value));
    	const location = getContext(LOCATION);
    	validate_store(location, 'location');
    	component_subscribe($$self, location, value => $$invalidate(4, $location = value));

    	const route = {
    		path,
    		// If no path prop is given, this Route will act as the default Route
    		// that is rendered if no other Route in the Router is a match.
    		default: path === ""
    	};

    	let routeParams = {};
    	let routeProps = {};
    	registerRoute(route);

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway.
    	if (typeof window !== "undefined") {
    		onDestroy(() => {
    			unregisterRoute(route);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('path' in $$new_props) $$invalidate(8, path = $$new_props.path);
    		if ('component' in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onDestroy,
    		ROUTER,
    		LOCATION,
    		path,
    		component,
    		registerRoute,
    		unregisterRoute,
    		activeRoute,
    		location,
    		route,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ('path' in $$props) $$invalidate(8, path = $$new_props.path);
    		if ('component' in $$props) $$invalidate(0, component = $$new_props.component);
    		if ('routeParams' in $$props) $$invalidate(2, routeParams = $$new_props.routeParams);
    		if ('routeProps' in $$props) $$invalidate(3, routeProps = $$new_props.routeProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$activeRoute*/ 2) {
    			if ($activeRoute && $activeRoute.route === route) {
    				$$invalidate(2, routeParams = $activeRoute.params);
    			}
    		}

    		{
    			const { path, component, ...rest } = $$props;
    			$$invalidate(3, routeProps = rest);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		$activeRoute,
    		routeParams,
    		routeProps,
    		$location,
    		activeRoute,
    		location,
    		route,
    		path,
    		$$scope,
    		slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1E, create_fragment$21, safe_not_equal, { path: 8, component: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$21.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * An action to be added at a root element of your application to
     * capture all relative links and push them onto the history stack.
     *
     * Example:
     * ```html
     * <div use:links>
     *   <Router>
     *     <Route path="/" component={Home} />
     *     <Route path="/p/:projectId/:docId?" component={ProjectScreen} />
     *     {#each projects as project}
     *       <a href="/p/{project.id}">{project.title}</a>
     *     {/each}
     *   </Router>
     * </div>
     * ```
     */
    function links(node) {
      function findClosest(tagName, el) {
        while (el && el.tagName !== tagName) {
          el = el.parentNode;
        }
        return el;
      }

      function onClick(event) {
        const anchor = findClosest("A", event.target);

        if (
          anchor &&
          anchor.target === "" &&
          hostMatches(anchor) &&
          shouldNavigate(event) &&
          !anchor.hasAttribute("noroute")
        ) {
          event.preventDefault();
          navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute("replace") });
        }
      }

      node.addEventListener("click", onClick);

      return {
        destroy() {
          node.removeEventListener("click", onClick);
        }
      };
    }

    /**
     * A screen reader announcer, compatible with the announce function from
     * @material/dom/announce.js.
     *
     * @param message The text to announce with the screen reader.
     * @param options The options, including "priority" and "ownerDocument".
     */
    function announce$2(message, options = {}) {
        const priority = options.priority || 'polite';
        const ownerDocument = options.ownerDocument || document;
        const previousElements = ownerDocument.querySelectorAll('[data-smui-dom-announce]');
        if (previousElements.length) {
            previousElements.forEach((el) => {
                var _a;
                (_a = el.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(el);
            });
        }
        const el = ownerDocument.createElement('div');
        el.style.position = 'absolute';
        el.style.top = '-9999px';
        el.style.left = '-9999px';
        el.style.height = '1px';
        el.style.overflow = 'hidden';
        el.setAttribute('aria-atomic', 'true');
        el.setAttribute('aria-live', priority);
        el.setAttribute('data-mdc-dom-announce', 'true');
        el.setAttribute('data-smui-dom-announce', 'true');
        ownerDocument.body.appendChild(el);
        window.setTimeout(() => {
            el.textContent = message;
            const clear = () => {
                el.textContent = '';
                el.removeEventListener('click', clear);
            };
            el.addEventListener('click', clear, { once: true });
        }, 100);
    }

    function classMap(classObj) {
        return Object.entries(classObj)
            .filter(([name, value]) => name !== '' && value)
            .map(([name]) => name)
            .join(' ');
    }

    function dispatch(element, eventType, detail, eventInit = { bubbles: true }, 
    /** This is an internal thing used by SMUI to duplicate some SMUI events as MDC events. */
    duplicateEventForMDC = false) {
        if (typeof Event !== 'undefined' && element) {
            const event = new CustomEvent(eventType, Object.assign(Object.assign({}, eventInit), { detail }));
            element === null || element === void 0 ? void 0 : element.dispatchEvent(event);
            if (duplicateEventForMDC && eventType.startsWith('SMUI')) {
                const duplicateEvent = new CustomEvent(eventType.replace(/^SMUI/g, () => 'MDC'), Object.assign(Object.assign({}, eventInit), { detail }));
                element === null || element === void 0 ? void 0 : element.dispatchEvent(duplicateEvent);
                if (duplicateEvent.defaultPrevented) {
                    event.preventDefault();
                }
            }
            return event;
        }
    }

    function exclude(obj, keys) {
        let names = Object.getOwnPropertyNames(obj);
        const newObj = {};
        for (let i = 0; i < names.length; i++) {
            const name = names[i];
            const cashIndex = name.indexOf('$');
            if (cashIndex !== -1 &&
                keys.indexOf(name.substring(0, cashIndex + 1)) !== -1) {
                continue;
            }
            if (keys.indexOf(name) !== -1) {
                continue;
            }
            newObj[name] = obj[name];
        }
        return newObj;
    }

    // Match old modifiers. (only works on DOM events)
    const oldModifierRegex = /^[a-z]+(?::(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;
    // Match new modifiers.
    const newModifierRegex = /^[^$]+(?:\$(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;
    function forwardEventsBuilder(component) {
        // This is our pseudo $on function. It is defined on component mount.
        let $on;
        // This is a list of events bound before mount.
        let events = [];
        // And we override the $on function to forward all bound events.
        component.$on = (fullEventType, callback) => {
            let eventType = fullEventType;
            let destructor = () => { };
            if ($on) {
                // The event was bound programmatically.
                destructor = $on(eventType, callback);
            }
            else {
                // The event was bound before mount by Svelte.
                events.push([eventType, callback]);
            }
            const oldModifierMatch = eventType.match(oldModifierRegex);
            if (oldModifierMatch && console) {
                console.warn('Event modifiers in SMUI now use "$" instead of ":", so that ' +
                    'all events can be bound with modifiers. Please update your ' +
                    'event binding: ', eventType);
            }
            return () => {
                destructor();
            };
        };
        function forward(e) {
            // Internally bubble the event up from Svelte components.
            bubble(component, e);
        }
        return (node) => {
            const destructors = [];
            const forwardDestructors = {};
            // This function is responsible for listening and forwarding
            // all bound events.
            $on = (fullEventType, callback) => {
                let eventType = fullEventType;
                let handler = callback;
                // DOM addEventListener options argument.
                let options = false;
                const oldModifierMatch = eventType.match(oldModifierRegex);
                const newModifierMatch = eventType.match(newModifierRegex);
                const modifierMatch = oldModifierMatch || newModifierMatch;
                if (eventType.match(/^SMUI:\w+:/)) {
                    const newEventTypeParts = eventType.split(':');
                    let newEventType = '';
                    for (let i = 0; i < newEventTypeParts.length; i++) {
                        newEventType +=
                            i === newEventTypeParts.length - 1
                                ? ':' + newEventTypeParts[i]
                                : newEventTypeParts[i]
                                    .split('-')
                                    .map((value) => value.slice(0, 1).toUpperCase() + value.slice(1))
                                    .join('');
                    }
                    console.warn(`The event ${eventType.split('$')[0]} has been renamed to ${newEventType.split('$')[0]}.`);
                    eventType = newEventType;
                }
                if (modifierMatch) {
                    // Parse the event modifiers.
                    // Supported modifiers:
                    // - preventDefault
                    // - stopPropagation
                    // - passive
                    // - nonpassive
                    // - capture
                    // - once
                    const parts = eventType.split(oldModifierMatch ? ':' : '$');
                    eventType = parts[0];
                    const eventOptions = Object.fromEntries(parts.slice(1).map((mod) => [mod, true]));
                    if (eventOptions.passive) {
                        options = options || {};
                        options.passive = true;
                    }
                    if (eventOptions.nonpassive) {
                        options = options || {};
                        options.passive = false;
                    }
                    if (eventOptions.capture) {
                        options = options || {};
                        options.capture = true;
                    }
                    if (eventOptions.once) {
                        options = options || {};
                        options.once = true;
                    }
                    if (eventOptions.preventDefault) {
                        handler = prevent_default(handler);
                    }
                    if (eventOptions.stopPropagation) {
                        handler = stop_propagation(handler);
                    }
                }
                // Listen for the event directly, with the given options.
                const off = listen(node, eventType, handler, options);
                const destructor = () => {
                    off();
                    const idx = destructors.indexOf(destructor);
                    if (idx > -1) {
                        destructors.splice(idx, 1);
                    }
                };
                destructors.push(destructor);
                // Forward the event from Svelte.
                if (!(eventType in forwardDestructors)) {
                    forwardDestructors[eventType] = listen(node, eventType, forward);
                }
                return destructor;
            };
            for (let i = 0; i < events.length; i++) {
                // Listen to all the events added before mount.
                $on(events[i][0], events[i][1]);
            }
            return {
                destroy: () => {
                    // Remove all event listeners.
                    for (let i = 0; i < destructors.length; i++) {
                        destructors[i]();
                    }
                    // Remove all event forwarders.
                    for (let entry of Object.entries(forwardDestructors)) {
                        entry[1]();
                    }
                },
            };
        };
    }

    function prefixFilter(obj, prefix) {
        let names = Object.getOwnPropertyNames(obj);
        const newObj = {};
        for (let i = 0; i < names.length; i++) {
            const name = names[i];
            if (name.substring(0, prefix.length) === prefix) {
                newObj[name.substring(prefix.length)] = obj[name];
            }
        }
        return newObj;
    }

    function useActions(node, actions) {
        let actionReturns = [];
        if (actions) {
            for (let i = 0; i < actions.length; i++) {
                const actionEntry = actions[i];
                const action = Array.isArray(actionEntry) ? actionEntry[0] : actionEntry;
                if (Array.isArray(actionEntry) && actionEntry.length > 1) {
                    actionReturns.push(action(node, actionEntry[1]));
                }
                else {
                    actionReturns.push(action(node));
                }
            }
        }
        return {
            update(actions) {
                if (((actions && actions.length) || 0) != actionReturns.length) {
                    throw new Error('You must not change the length of an actions array.');
                }
                if (actions) {
                    for (let i = 0; i < actions.length; i++) {
                        const returnEntry = actionReturns[i];
                        if (returnEntry && returnEntry.update) {
                            const actionEntry = actions[i];
                            if (Array.isArray(actionEntry) && actionEntry.length > 1) {
                                returnEntry.update(actionEntry[1]);
                            }
                            else {
                                returnEntry.update();
                            }
                        }
                    }
                }
            },
            destroy() {
                for (let i = 0; i < actionReturns.length; i++) {
                    const returnEntry = actionReturns[i];
                    if (returnEntry && returnEntry.destroy) {
                        returnEntry.destroy();
                    }
                }
            },
        };
    }

    /* node_modules/@smui/paper/dist/Paper.svelte generated by Svelte v3.44.3 */
    const file$1A = "node_modules/@smui/paper/dist/Paper.svelte";

    function create_fragment$20(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'smui-paper': true,
    				'smui-paper--raised': /*variant*/ ctx[2] === 'raised',
    				'smui-paper--unelevated': /*variant*/ ctx[2] === 'unelevated',
    				'smui-paper--outlined': /*variant*/ ctx[2] === 'outlined',
    				['smui-paper--elevation-z' + /*elevation*/ ctx[5]]: /*elevation*/ ctx[5] !== 0 && /*variant*/ ctx[2] === 'raised',
    				'smui-paper--rounded': !/*square*/ ctx[3],
    				['smui-paper--color-' + /*color*/ ctx[4]]: /*color*/ ctx[4] !== 'default',
    				'smui-paper-transition': /*transition*/ ctx[6]
    			})
    		},
    		/*$$restProps*/ ctx[9]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$1A, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[13](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[8].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, variant, elevation, square, color, transition*/ 126 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'smui-paper': true,
    					'smui-paper--raised': /*variant*/ ctx[2] === 'raised',
    					'smui-paper--unelevated': /*variant*/ ctx[2] === 'unelevated',
    					'smui-paper--outlined': /*variant*/ ctx[2] === 'outlined',
    					['smui-paper--elevation-z' + /*elevation*/ ctx[5]]: /*elevation*/ ctx[5] !== 0 && /*variant*/ ctx[2] === 'raised',
    					'smui-paper--rounded': !/*square*/ ctx[3],
    					['smui-paper--color-' + /*color*/ ctx[4]]: /*color*/ ctx[4] !== 'default',
    					'smui-paper-transition': /*transition*/ ctx[6]
    				}))) && { class: div_class_value },
    				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[13](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$20.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1D($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","variant","square","color","elevation","transition","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Paper', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { variant = 'raised' } = $$props;
    	let { square = false } = $$props;
    	let { color = 'default' } = $$props;
    	let { elevation = 1 } = $$props;
    	let { transition = false } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('variant' in $$new_props) $$invalidate(2, variant = $$new_props.variant);
    		if ('square' in $$new_props) $$invalidate(3, square = $$new_props.square);
    		if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ('elevation' in $$new_props) $$invalidate(5, elevation = $$new_props.elevation);
    		if ('transition' in $$new_props) $$invalidate(6, transition = $$new_props.transition);
    		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		variant,
    		square,
    		color,
    		elevation,
    		transition,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('variant' in $$props) $$invalidate(2, variant = $$new_props.variant);
    		if ('square' in $$props) $$invalidate(3, square = $$new_props.square);
    		if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
    		if ('elevation' in $$props) $$invalidate(5, elevation = $$new_props.elevation);
    		if ('transition' in $$props) $$invalidate(6, transition = $$new_props.transition);
    		if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		variant,
    		square,
    		color,
    		elevation,
    		transition,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Paper extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1D, create_fragment$20, safe_not_equal, {
    			use: 0,
    			class: 1,
    			variant: 2,
    			square: 3,
    			color: 4,
    			elevation: 5,
    			transition: 6,
    			getElement: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Paper",
    			options,
    			id: create_fragment$20.name
    		});
    	}

    	get use() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get square() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set square(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elevation() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elevation(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[10];
    	}

    	set getElement(value) {
    		throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Div.svelte generated by Svelte v3.44.3 */
    const file$1z = "node_modules/@smui/common/dist/elements/Div.svelte";

    function create_fragment$1$(ctx) {
    	let div;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let div_levels = [/*$$restProps*/ ctx[3]];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$1z, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[7](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1C($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Div', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Div$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1C, create_fragment$1$, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Div",
    			options,
    			id: create_fragment$1$.name
    		});
    	}

    	get use() {
    		throw new Error("<Div>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Div>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Div>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/classadder/ClassAdder.svelte generated by Svelte v3.44.3 */

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     [smuiClass]: true,     ...smuiClassMap,   })}   {...props}   {...$$restProps}>
    function create_default_slot$Z(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$Z.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     [smuiClass]: true,     ...smuiClassMap,   })}   {...props}   {...$$restProps}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1_(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[7], .../*use*/ ctx[0]]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				[/*smuiClass*/ ctx[5]]: true,
    				.../*smuiClassMap*/ ctx[4]
    			})
    		},
    		/*props*/ ctx[6],
    		/*$$restProps*/ ctx[8]
    	];

    	var switch_value = /*component*/ ctx[2];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$Z] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[11](switch_instance);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*forwardEvents, use, classMap, className, smuiClass, smuiClassMap, props, $$restProps*/ 499)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*forwardEvents, use*/ 129 && {
    						use: [/*forwardEvents*/ ctx[7], .../*use*/ ctx[0]]
    					},
    					dirty & /*classMap, className, smuiClass, smuiClassMap*/ 50 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							[/*smuiClass*/ ctx[5]]: true,
    							.../*smuiClassMap*/ ctx[4]
    						})
    					},
    					dirty & /*props*/ 64 && get_spread_object(/*props*/ ctx[6]),
    					dirty & /*$$restProps*/ 256 && get_spread_object(/*$$restProps*/ ctx[8])
    				])
    			: {};

    			if (dirty & /*$$scope*/ 4096) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[2])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[11](switch_instance);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[11](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const internals = {
    	component: Div$1,
    	class: '',
    	classMap: {},
    	contexts: {},
    	props: {}
    };

    function instance$1B($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","component","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ClassAdder', slots, ['default']);
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let element;
    	const smuiClass = internals.class;
    	const smuiClassMap = {};
    	const smuiClassUnsubscribes = [];
    	const contexts = internals.contexts;
    	const props = internals.props;
    	let { component = internals.component } = $$props;

    	Object.entries(internals.classMap).forEach(([name, context]) => {
    		const store = getContext(context);

    		if (store && 'subscribe' in store) {
    			smuiClassUnsubscribes.push(store.subscribe(value => {
    				$$invalidate(4, smuiClassMap[name] = value, smuiClassMap);
    			}));
    		}
    	});

    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	for (let context in contexts) {
    		if (contexts.hasOwnProperty(context)) {
    			setContext(context, contexts[context]);
    		}
    	}

    	onDestroy(() => {
    		for (const unsubscribe of smuiClassUnsubscribes) {
    			unsubscribe();
    		}
    	});

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(3, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('component' in $$new_props) $$invalidate(2, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Div: Div$1,
    		internals,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		use,
    		className,
    		element,
    		smuiClass,
    		smuiClassMap,
    		smuiClassUnsubscribes,
    		contexts,
    		props,
    		component,
    		forwardEvents,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('element' in $$props) $$invalidate(3, element = $$new_props.element);
    		if ('component' in $$props) $$invalidate(2, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		component,
    		element,
    		smuiClassMap,
    		smuiClass,
    		props,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		slots,
    		switch_instance_binding,
    		$$scope
    	];
    }

    class ClassAdder extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1B, create_fragment$1_, safe_not_equal, {
    			use: 0,
    			class: 1,
    			component: 2,
    			getElement: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ClassAdder",
    			options,
    			id: create_fragment$1_.name
    		});
    	}

    	get use() {
    		throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[9];
    	}

    	set getElement(value) {
    		throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-ignore: Internals is exported... argh.
    const defaults = Object.assign({}, internals);
    function classAdderBuilder(props) {
        return new Proxy(ClassAdder, {
            construct: function (target, args) {
                Object.assign(internals, defaults, props);
                // @ts-ignore: Need spread arg.
                return new target(...args);
            },
            get: function (target, prop) {
                Object.assign(internals, defaults, props);
                return target[prop];
            },
        });
    }

    /* node_modules/@smui/common/dist/elements/A.svelte generated by Svelte v3.44.3 */
    const file$1y = "node_modules/@smui/common/dist/elements/A.svelte";

    function create_fragment$1Z(ctx) {
    	let a;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let a_levels = [{ href: /*href*/ ctx[1] }, /*$$restProps*/ ctx[4]];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    			add_location(a, file$1y, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			/*a_binding*/ ctx[8](a);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, a, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[3].call(null, a))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
    				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			/*a_binding*/ ctx[8](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1A($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","href","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('A', slots, ['default']);
    	let { use = [] } = $$props;
    	let { href = 'javascript:void(0);' } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function a_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		href,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('href' in $$props) $$invalidate(1, href = $$new_props.href);
    		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		href,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		a_binding
    	];
    }

    class A$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1A, create_fragment$1Z, safe_not_equal, { use: 0, href: 1, getElement: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "A",
    			options,
    			id: create_fragment$1Z.name
    		});
    	}

    	get use() {
    		throw new Error("<A>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<A>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<A>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<A>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[5];
    	}

    	set getElement(value) {
    		throw new Error("<A>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Button.svelte generated by Svelte v3.44.3 */
    const file$1x = "node_modules/@smui/common/dist/elements/Button.svelte";

    function create_fragment$1Y(ctx) {
    	let button;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let button_levels = [/*$$restProps*/ ctx[3]];
    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			set_attributes(button, button_data);
    			add_location(button, file$1x, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			if (button.autofocus) button.focus();
    			/*button_binding*/ ctx[7](button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, button, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, button))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(button, button_data = get_spread_update(button_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			/*button_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1z($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		button_binding
    	];
    }

    class Button$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1z, create_fragment$1Y, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$1Y.name
    		});
    	}

    	get use() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/H1.svelte generated by Svelte v3.44.3 */
    const file$1w = "node_modules/@smui/common/dist/elements/H1.svelte";

    function create_fragment$1X(ctx) {
    	let h1;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let h1_levels = [/*$$restProps*/ ctx[3]];
    	let h1_data = {};

    	for (let i = 0; i < h1_levels.length; i += 1) {
    		h1_data = assign(h1_data, h1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			if (default_slot) default_slot.c();
    			set_attributes(h1, h1_data);
    			add_location(h1, file$1w, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);

    			if (default_slot) {
    				default_slot.m(h1, null);
    			}

    			/*h1_binding*/ ctx[7](h1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, h1, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, h1))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(h1, h1_data = get_spread_update(h1_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (default_slot) default_slot.d(detaching);
    			/*h1_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1y($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H1', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function h1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		h1_binding
    	];
    }

    class H1$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1y, create_fragment$1X, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H1",
    			options,
    			id: create_fragment$1X.name
    		});
    	}

    	get use() {
    		throw new Error("<H1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<H1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<H1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/H2.svelte generated by Svelte v3.44.3 */
    const file$1v = "node_modules/@smui/common/dist/elements/H2.svelte";

    function create_fragment$1W(ctx) {
    	let h2;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let h2_levels = [/*$$restProps*/ ctx[3]];
    	let h2_data = {};

    	for (let i = 0; i < h2_levels.length; i += 1) {
    		h2_data = assign(h2_data, h2_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			if (default_slot) default_slot.c();
    			set_attributes(h2, h2_data);
    			add_location(h2, file$1v, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);

    			if (default_slot) {
    				default_slot.m(h2, null);
    			}

    			/*h2_binding*/ ctx[7](h2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, h2, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, h2))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(h2, h2_data = get_spread_update(h2_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (default_slot) default_slot.d(detaching);
    			/*h2_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1x($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H2', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function h2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		h2_binding
    	];
    }

    class H2$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1x, create_fragment$1W, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H2",
    			options,
    			id: create_fragment$1W.name
    		});
    	}

    	get use() {
    		throw new Error("<H2>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<H2>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<H2>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/H3.svelte generated by Svelte v3.44.3 */
    const file$1u = "node_modules/@smui/common/dist/elements/H3.svelte";

    function create_fragment$1V(ctx) {
    	let h3;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let h3_levels = [/*$$restProps*/ ctx[3]];
    	let h3_data = {};

    	for (let i = 0; i < h3_levels.length; i += 1) {
    		h3_data = assign(h3_data, h3_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			if (default_slot) default_slot.c();
    			set_attributes(h3, h3_data);
    			add_location(h3, file$1u, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);

    			if (default_slot) {
    				default_slot.m(h3, null);
    			}

    			/*h3_binding*/ ctx[7](h3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, h3, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, h3))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(h3, h3_data = get_spread_update(h3_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (default_slot) default_slot.d(detaching);
    			/*h3_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1w($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H3', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function h3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		h3_binding
    	];
    }

    class H3$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1w, create_fragment$1V, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H3",
    			options,
    			id: create_fragment$1V.name
    		});
    	}

    	get use() {
    		throw new Error("<H3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<H3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<H3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/H5.svelte generated by Svelte v3.44.3 */
    const file$1t = "node_modules/@smui/common/dist/elements/H5.svelte";

    function create_fragment$1U(ctx) {
    	let h5;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let h5_levels = [/*$$restProps*/ ctx[3]];
    	let h5_data = {};

    	for (let i = 0; i < h5_levels.length; i += 1) {
    		h5_data = assign(h5_data, h5_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			if (default_slot) default_slot.c();
    			set_attributes(h5, h5_data);
    			add_location(h5, file$1t, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);

    			if (default_slot) {
    				default_slot.m(h5, null);
    			}

    			/*h5_binding*/ ctx[7](h5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, h5, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, h5))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(h5, h5_data = get_spread_update(h5_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    			if (default_slot) default_slot.d(detaching);
    			/*h5_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1v($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H5', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function h5_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		h5_binding
    	];
    }

    class H5$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1v, create_fragment$1U, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H5",
    			options,
    			id: create_fragment$1U.name
    		});
    	}

    	get use() {
    		throw new Error("<H5>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<H5>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<H5>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/H6.svelte generated by Svelte v3.44.3 */
    const file$1s = "node_modules/@smui/common/dist/elements/H6.svelte";

    function create_fragment$1T(ctx) {
    	let h6;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let h6_levels = [/*$$restProps*/ ctx[3]];
    	let h6_data = {};

    	for (let i = 0; i < h6_levels.length; i += 1) {
    		h6_data = assign(h6_data, h6_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			if (default_slot) default_slot.c();
    			set_attributes(h6, h6_data);
    			add_location(h6, file$1s, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);

    			if (default_slot) {
    				default_slot.m(h6, null);
    			}

    			/*h6_binding*/ ctx[7](h6);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, h6, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, h6))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(h6, h6_data = get_spread_update(h6_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h6);
    			if (default_slot) default_slot.d(detaching);
    			/*h6_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1u($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H6', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function h6_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		h6_binding
    	];
    }

    class H6$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1u, create_fragment$1T, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H6",
    			options,
    			id: create_fragment$1T.name
    		});
    	}

    	get use() {
    		throw new Error("<H6>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<H6>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<H6>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Hr.svelte generated by Svelte v3.44.3 */
    const file$1r = "node_modules/@smui/common/dist/elements/Hr.svelte";

    function create_fragment$1S(ctx) {
    	let hr;
    	let useActions_action;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	let hr_levels = [/*$$restProps*/ ctx[3]];
    	let hr_data = {};

    	for (let i = 0; i < hr_levels.length; i += 1) {
    		hr_data = assign(hr_data, hr_levels[i]);
    	}

    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t = space();
    			if (default_slot) default_slot.c();
    			set_attributes(hr, hr_data);
    			add_location(hr, file$1r, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			/*hr_binding*/ ctx[7](hr);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, hr, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, hr))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(hr, hr_data = get_spread_update(hr_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			/*hr_binding*/ ctx[7](null);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1t($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Hr', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function hr_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		hr_binding
    	];
    }

    class Hr$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1t, create_fragment$1S, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Hr",
    			options,
    			id: create_fragment$1S.name
    		});
    	}

    	get use() {
    		throw new Error("<Hr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Hr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Hr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/I.svelte generated by Svelte v3.44.3 */
    const file$1q = "node_modules/@smui/common/dist/elements/I.svelte";

    function create_fragment$1R(ctx) {
    	let i;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let i_levels = [/*$$restProps*/ ctx[3]];
    	let i_data = {};

    	for (let i = 0; i < i_levels.length; i += 1) {
    		i_data = assign(i_data, i_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			i = element("i");
    			if (default_slot) default_slot.c();
    			set_attributes(i, i_data);
    			add_location(i, file$1q, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);

    			if (default_slot) {
    				default_slot.m(i, null);
    			}

    			/*i_binding*/ ctx[7](i);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, i, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, i))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(i, i_data = get_spread_update(i_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			if (default_slot) default_slot.d(detaching);
    			/*i_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1s($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('I', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function i_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		i_binding
    	];
    }

    class I extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1s, create_fragment$1R, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "I",
    			options,
    			id: create_fragment$1R.name
    		});
    	}

    	get use() {
    		throw new Error("<I>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<I>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<I>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Li.svelte generated by Svelte v3.44.3 */
    const file$1p = "node_modules/@smui/common/dist/elements/Li.svelte";

    function create_fragment$1Q(ctx) {
    	let li;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let li_levels = [/*$$restProps*/ ctx[3]];
    	let li_data = {};

    	for (let i = 0; i < li_levels.length; i += 1) {
    		li_data = assign(li_data, li_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			if (default_slot) default_slot.c();
    			set_attributes(li, li_data);
    			add_location(li, file$1p, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			/*li_binding*/ ctx[7](li);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, li, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, li))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot) default_slot.d(detaching);
    			/*li_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1r($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Li', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function li_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		li_binding
    	];
    }

    class Li$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1r, create_fragment$1Q, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Li",
    			options,
    			id: create_fragment$1Q.name
    		});
    	}

    	get use() {
    		throw new Error("<Li>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Li>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Li>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Nav.svelte generated by Svelte v3.44.3 */
    const file$1o = "node_modules/@smui/common/dist/elements/Nav.svelte";

    function create_fragment$1P(ctx) {
    	let nav;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let nav_levels = [/*$$restProps*/ ctx[3]];
    	let nav_data = {};

    	for (let i = 0; i < nav_levels.length; i += 1) {
    		nav_data = assign(nav_data, nav_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			if (default_slot) default_slot.c();
    			set_attributes(nav, nav_data);
    			add_location(nav, file$1o, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);

    			if (default_slot) {
    				default_slot.m(nav, null);
    			}

    			/*nav_binding*/ ctx[7](nav);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, nav, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, nav))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(nav, nav_data = get_spread_update(nav_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (default_slot) default_slot.d(detaching);
    			/*nav_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1q($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Nav', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function nav_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		nav_binding
    	];
    }

    class Nav$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1q, create_fragment$1P, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Nav",
    			options,
    			id: create_fragment$1P.name
    		});
    	}

    	get use() {
    		throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Span.svelte generated by Svelte v3.44.3 */
    const file$1n = "node_modules/@smui/common/dist/elements/Span.svelte";

    function create_fragment$1O(ctx) {
    	let span;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let span_levels = [/*$$restProps*/ ctx[3]];
    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			set_attributes(span, span_data);
    			add_location(span, file$1n, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			/*span_binding*/ ctx[7](span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			/*span_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1p($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Span', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		span_binding
    	];
    }

    class Span$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1p, create_fragment$1O, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Span",
    			options,
    			id: create_fragment$1O.name
    		});
    	}

    	get use() {
    		throw new Error("<Span>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Span>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Span>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Svg.svelte generated by Svelte v3.44.3 */
    const file$1m = "node_modules/@smui/common/dist/elements/Svg.svelte";

    function create_fragment$1N(ctx) {
    	let svg;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let svg_levels = [/*$$restProps*/ ctx[3]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (default_slot) default_slot.c();
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$1m, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			if (default_slot) {
    				default_slot.m(svg, null);
    			}

    			/*svg_binding*/ ctx[7](svg);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, svg, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (default_slot) default_slot.d(detaching);
    			/*svg_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1o($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Svg', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function svg_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		svg_binding
    	];
    }

    class Svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1o, create_fragment$1N, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Svg",
    			options,
    			id: create_fragment$1N.name
    		});
    	}

    	get use() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/elements/Ul.svelte generated by Svelte v3.44.3 */
    const file$1l = "node_modules/@smui/common/dist/elements/Ul.svelte";

    function create_fragment$1M(ctx) {
    	let ul;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let ul_levels = [/*$$restProps*/ ctx[3]];
    	let ul_data = {};

    	for (let i = 0; i < ul_levels.length; i += 1) {
    		ul_data = assign(ul_data, ul_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			if (default_slot) default_slot.c();
    			set_attributes(ul, ul_data);
    			add_location(ul, file$1l, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			if (default_slot) {
    				default_slot.m(ul, null);
    			}

    			/*ul_binding*/ ctx[7](ul);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, ul, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, ul))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			if (default_slot) default_slot.d(detaching);
    			/*ul_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1n($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ul', slots, ['default']);
    	let { use = [] } = $$props;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let element;

    	function getElement() {
    		return element;
    	}

    	function ul_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		use,
    		forwardEvents,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		ul_binding
    	];
    }

    class Ul$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1n, create_fragment$1M, safe_not_equal, { use: 0, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ul",
    			options,
    			id: create_fragment$1M.name
    		});
    	}

    	get use() {
    		throw new Error("<Ul>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Ul>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Ul>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const A = A$1;
    const Button = Button$1;
    const Div = Div$1;
    const H1$1 = H1$2;
    const H2$1 = H2$2;
    const H3$1 = H3$2;
    const H5 = H5$1;
    const H6 = H6$1;
    const Hr = Hr$1;
    const Li = Li$1;
    const Nav = Nav$1;
    const Span = Span$1;
    const Ul = Ul$1;

    classAdderBuilder({
        class: 'smui-paper__content',
        component: Div,
    });

    classAdderBuilder({
        class: 'smui-paper__title',
        component: H5,
    });

    classAdderBuilder({
        class: 'smui-paper__subtitle',
        component: H6,
    });

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFoundation = /** @class */ (function () {
        function MDCFoundation(adapter) {
            if (adapter === void 0) { adapter = {}; }
            this.adapter = adapter;
        }
        Object.defineProperty(MDCFoundation, "cssClasses", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports every
                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
                return {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "strings", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
                return {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "numbers", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
                return {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "defaultAdapter", {
            get: function () {
                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
                // validation.
                return {};
            },
            enumerable: false,
            configurable: true
        });
        MDCFoundation.prototype.init = function () {
            // Subclasses should override this method to perform initialization routines (registering events, etc.)
        };
        MDCFoundation.prototype.destroy = function () {
            // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
        };
        return MDCFoundation;
    }());

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCComponent = /** @class */ (function () {
        function MDCComponent(root, foundation) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            this.root = root;
            this.initialize.apply(this, __spreadArray([], __read(args)));
            // Note that we initialize foundation here and not within the constructor's
            // default param so that this.root is defined and can be used within the
            // foundation class.
            this.foundation =
                foundation === undefined ? this.getDefaultFoundation() : foundation;
            this.foundation.init();
            this.initialSyncWithDOM();
        }
        MDCComponent.attachTo = function (root) {
            // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
            // returns an instantiated component with its root set to that element. Also note that in the cases of
            // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
            // from getDefaultFoundation().
            return new MDCComponent(root, new MDCFoundation({}));
        };
        /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
        MDCComponent.prototype.initialize = function () {
            var _args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _args[_i] = arguments[_i];
            }
            // Subclasses can override this to do any additional setup work that would be considered part of a
            // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
            // initialized. Any additional arguments besides root and foundation will be passed in here.
        };
        MDCComponent.prototype.getDefaultFoundation = function () {
            // Subclasses must override this method to return a properly configured foundation class for the
            // component.
            throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
                'foundation class');
        };
        MDCComponent.prototype.initialSyncWithDOM = function () {
            // Subclasses should override this method if they need to perform work to synchronize with a host DOM
            // object. An example of this would be a form control wrapper that needs to synchronize its internal state
            // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
            // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
        };
        MDCComponent.prototype.destroy = function () {
            // Subclasses may implement this method to release any resources / deregister any listeners they have
            // attached. An example of this might be deregistering a resize event from the window object.
            this.foundation.destroy();
        };
        MDCComponent.prototype.listen = function (evtType, handler, options) {
            this.root.addEventListener(evtType, handler, options);
        };
        MDCComponent.prototype.unlisten = function (evtType, handler, options) {
            this.root.removeEventListener(evtType, handler, options);
        };
        /**
         * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
         */
        MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
            if (shouldBubble === void 0) { shouldBubble = false; }
            var evt;
            if (typeof CustomEvent === 'function') {
                evt = new CustomEvent(evtType, {
                    bubbles: shouldBubble,
                    detail: evtData,
                });
            }
            else {
                evt = document.createEvent('CustomEvent');
                evt.initCustomEvent(evtType, shouldBubble, false, evtData);
            }
            this.root.dispatchEvent(evt);
        };
        return MDCComponent;
    }());

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * Determine whether the current browser supports passive event listeners, and
     * if so, use them.
     */
    function applyPassive$1(globalObj) {
        if (globalObj === void 0) { globalObj = window; }
        return supportsPassiveOption(globalObj) ?
            { passive: true } :
            false;
    }
    function supportsPassiveOption(globalObj) {
        if (globalObj === void 0) { globalObj = window; }
        // See
        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
        var passiveSupported = false;
        try {
            var options = {
                // This function will be called when the browser
                // attempts to access the passive property.
                get passive() {
                    passiveSupported = true;
                    return false;
                }
            };
            var handler = function () { };
            globalObj.document.addEventListener('test', handler, options);
            globalObj.document.removeEventListener('test', handler, options);
        }
        catch (err) {
            passiveSupported = false;
        }
        return passiveSupported;
    }

    var events = /*#__PURE__*/Object.freeze({
        __proto__: null,
        applyPassive: applyPassive$1
    });

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
     * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
     */
    function closest(element, selector) {
        if (element.closest) {
            return element.closest(selector);
        }
        var el = element;
        while (el) {
            if (matches$1(el, selector)) {
                return el;
            }
            el = el.parentElement;
        }
        return null;
    }
    function matches$1(element, selector) {
        var nativeMatches = element.matches
            || element.webkitMatchesSelector
            || element.msMatchesSelector;
        return nativeMatches.call(element, selector);
    }
    /**
     * Used to compute the estimated scroll width of elements. When an element is
     * hidden due to display: none; being applied to a parent element, the width is
     * returned as 0. However, the element will have a true width once no longer
     * inside a display: none context. This method computes an estimated width when
     * the element is hidden or returns the true width when the element is visble.
     * @param {Element} element the element whose width to estimate
     */
    function estimateScrollWidth(element) {
        // Check the offsetParent. If the element inherits display: none from any
        // parent, the offsetParent property will be null (see
        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
        // This check ensures we only clone the node when necessary.
        var htmlEl = element;
        if (htmlEl.offsetParent !== null) {
            return htmlEl.scrollWidth;
        }
        var clone = htmlEl.cloneNode(true);
        clone.style.setProperty('position', 'absolute');
        clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
        document.documentElement.appendChild(clone);
        var scrollWidth = clone.scrollWidth;
        document.documentElement.removeChild(clone);
        return scrollWidth;
    }

    var ponyfill = /*#__PURE__*/Object.freeze({
        __proto__: null,
        closest: closest,
        matches: matches$1,
        estimateScrollWidth: estimateScrollWidth
    });

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$n = {
        LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
        LABEL_REQUIRED: 'mdc-floating-label--required',
        LABEL_SHAKE: 'mdc-floating-label--shake',
        ROOT: 'mdc-floating-label',
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFloatingLabelFoundation = /** @class */ (function (_super) {
        __extends(MDCFloatingLabelFoundation, _super);
        function MDCFloatingLabelFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation.defaultAdapter), adapter)) || this;
            _this.shakeAnimationEndHandler = function () {
                _this.handleShakeAnimationEnd();
            };
            return _this;
        }
        Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
            get: function () {
                return cssClasses$n;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
            /**
             * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    getWidth: function () { return 0; },
                    registerInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCFloatingLabelFoundation.prototype.init = function () {
            this.adapter.registerInteractionHandler('animationend', this.shakeAnimationEndHandler);
        };
        MDCFloatingLabelFoundation.prototype.destroy = function () {
            this.adapter.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler);
        };
        /**
         * Returns the width of the label element.
         */
        MDCFloatingLabelFoundation.prototype.getWidth = function () {
            return this.adapter.getWidth();
        };
        /**
         * Styles the label to produce a shake animation to indicate an error.
         * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
         */
        MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
            var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
            if (shouldShake) {
                this.adapter.addClass(LABEL_SHAKE);
            }
            else {
                this.adapter.removeClass(LABEL_SHAKE);
            }
        };
        /**
         * Styles the label to float or dock.
         * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
         */
        MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
            var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
            if (shouldFloat) {
                this.adapter.addClass(LABEL_FLOAT_ABOVE);
            }
            else {
                this.adapter.removeClass(LABEL_FLOAT_ABOVE);
                this.adapter.removeClass(LABEL_SHAKE);
            }
        };
        /**
         * Styles the label as required.
         * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
         */
        MDCFloatingLabelFoundation.prototype.setRequired = function (isRequired) {
            var LABEL_REQUIRED = MDCFloatingLabelFoundation.cssClasses.LABEL_REQUIRED;
            if (isRequired) {
                this.adapter.addClass(LABEL_REQUIRED);
            }
            else {
                this.adapter.removeClass(LABEL_REQUIRED);
            }
        };
        MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd = function () {
            var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
            this.adapter.removeClass(LABEL_SHAKE);
        };
        return MDCFloatingLabelFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$m = {
        LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
        LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCLineRippleFoundation = /** @class */ (function (_super) {
        __extends(MDCLineRippleFoundation, _super);
        function MDCLineRippleFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation.defaultAdapter), adapter)) || this;
            _this.transitionEndHandler = function (evt) {
                _this.handleTransitionEnd(evt);
            };
            return _this;
        }
        Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
            get: function () {
                return cssClasses$m;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
            /**
             * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setStyle: function () { return undefined; },
                    registerEventHandler: function () { return undefined; },
                    deregisterEventHandler: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCLineRippleFoundation.prototype.init = function () {
            this.adapter.registerEventHandler('transitionend', this.transitionEndHandler);
        };
        MDCLineRippleFoundation.prototype.destroy = function () {
            this.adapter.deregisterEventHandler('transitionend', this.transitionEndHandler);
        };
        MDCLineRippleFoundation.prototype.activate = function () {
            this.adapter.removeClass(cssClasses$m.LINE_RIPPLE_DEACTIVATING);
            this.adapter.addClass(cssClasses$m.LINE_RIPPLE_ACTIVE);
        };
        MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
            this.adapter.setStyle('transform-origin', xCoordinate + "px center");
        };
        MDCLineRippleFoundation.prototype.deactivate = function () {
            this.adapter.addClass(cssClasses$m.LINE_RIPPLE_DEACTIVATING);
        };
        MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
            // Wait for the line ripple to be either transparent or opaque
            // before emitting the animation end event
            var isDeactivating = this.adapter.hasClass(cssClasses$m.LINE_RIPPLE_DEACTIVATING);
            if (evt.propertyName === 'opacity') {
                if (isDeactivating) {
                    this.adapter.removeClass(cssClasses$m.LINE_RIPPLE_ACTIVE);
                    this.adapter.removeClass(cssClasses$m.LINE_RIPPLE_DEACTIVATING);
                }
            }
        };
        return MDCLineRippleFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$n = {
        NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',
    };
    var numbers$a = {
        // This should stay in sync with $mdc-notched-outline-padding * 2.
        NOTCH_ELEMENT_PADDING: 8,
    };
    var cssClasses$l = {
        NO_LABEL: 'mdc-notched-outline--no-label',
        OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
        OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCNotchedOutlineFoundation = /** @class */ (function (_super) {
        __extends(MDCNotchedOutlineFoundation, _super);
        function MDCNotchedOutlineFoundation(adapter) {
            return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;
        }
        Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
            get: function () {
                return strings$n;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
            get: function () {
                return cssClasses$l;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
            get: function () {
                return numbers$a;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
            /**
             * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    setNotchWidthProperty: function () { return undefined; },
                    removeNotchWidthProperty: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
         */
        MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
            var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
            if (notchWidth > 0) {
                notchWidth += numbers$a.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
            }
            this.adapter.setNotchWidthProperty(notchWidth);
            this.adapter.addClass(OUTLINE_NOTCHED);
        };
        /**
         * Removes notched outline selector to close the notch in the outline.
         */
        MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
            var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
            this.adapter.removeClass(OUTLINE_NOTCHED);
            this.adapter.removeNotchWidthProperty();
        };
        return MDCNotchedOutlineFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$k = {
        // Ripple is a special case where the "root" component is really a "mixin" of sorts,
        // given that it's an 'upgrade' to an existing component. That being said it is the root
        // CSS class that all other CSS classes derive from.
        BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
        FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
        FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
        ROOT: 'mdc-ripple-upgraded',
        UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
    };
    var strings$m = {
        VAR_FG_SCALE: '--mdc-ripple-fg-scale',
        VAR_FG_SIZE: '--mdc-ripple-fg-size',
        VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
        VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
        VAR_LEFT: '--mdc-ripple-left',
        VAR_TOP: '--mdc-ripple-top',
    };
    var numbers$9 = {
        DEACTIVATION_TIMEOUT_MS: 225,
        FG_DEACTIVATION_MS: 150,
        INITIAL_ORIGIN_SCALE: 0.6,
        PADDING: 10,
        TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices
    };

    /**
     * Stores result from supportsCssVariables to avoid redundant processing to
     * detect CSS custom variable support.
     */
    var supportsCssVariables_;
    function supportsCssVariables(windowObj, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        var CSS = windowObj.CSS;
        var supportsCssVars = supportsCssVariables_;
        if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
            return supportsCssVariables_;
        }
        var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
        if (!supportsFunctionPresent) {
            return false;
        }
        var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
        // See: https://bugs.webkit.org/show_bug.cgi?id=154669
        // See: README section on Safari
        var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&
            CSS.supports('color', '#00000000'));
        supportsCssVars =
            explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
        if (!forceRefresh) {
            supportsCssVariables_ = supportsCssVars;
        }
        return supportsCssVars;
    }
    function getNormalizedEventCoords(evt, pageOffset, clientRect) {
        if (!evt) {
            return { x: 0, y: 0 };
        }
        var x = pageOffset.x, y = pageOffset.y;
        var documentX = x + clientRect.left;
        var documentY = y + clientRect.top;
        var normalizedX;
        var normalizedY;
        // Determine touch point relative to the ripple container.
        if (evt.type === 'touchstart') {
            var touchEvent = evt;
            normalizedX = touchEvent.changedTouches[0].pageX - documentX;
            normalizedY = touchEvent.changedTouches[0].pageY - documentY;
        }
        else {
            var mouseEvent = evt;
            normalizedX = mouseEvent.pageX - documentX;
            normalizedY = mouseEvent.pageY - documentY;
        }
        return { x: normalizedX, y: normalizedY };
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    // Activation events registered on the root element of each instance for activation
    var ACTIVATION_EVENT_TYPES = [
        'touchstart', 'pointerdown', 'mousedown', 'keydown',
    ];
    // Deactivation events registered on documentElement when a pointer-related down event occurs
    var POINTER_DEACTIVATION_EVENT_TYPES = [
        'touchend', 'pointerup', 'mouseup', 'contextmenu',
    ];
    // simultaneous nested activations
    var activatedTargets = [];
    var MDCRippleFoundation = /** @class */ (function (_super) {
        __extends(MDCRippleFoundation, _super);
        function MDCRippleFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
            _this.activationAnimationHasEnded = false;
            _this.activationTimer = 0;
            _this.fgDeactivationRemovalTimer = 0;
            _this.fgScale = '0';
            _this.frame = { width: 0, height: 0 };
            _this.initialSize = 0;
            _this.layoutFrame = 0;
            _this.maxRadius = 0;
            _this.unboundedCoords = { left: 0, top: 0 };
            _this.activationState = _this.defaultActivationState();
            _this.activationTimerCallback = function () {
                _this.activationAnimationHasEnded = true;
                _this.runDeactivationUXLogicIfReady();
            };
            _this.activateHandler = function (e) {
                _this.activateImpl(e);
            };
            _this.deactivateHandler = function () {
                _this.deactivateImpl();
            };
            _this.focusHandler = function () {
                _this.handleFocus();
            };
            _this.blurHandler = function () {
                _this.handleBlur();
            };
            _this.resizeHandler = function () {
                _this.layout();
            };
            return _this;
        }
        Object.defineProperty(MDCRippleFoundation, "cssClasses", {
            get: function () {
                return cssClasses$k;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "strings", {
            get: function () {
                return strings$m;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "numbers", {
            get: function () {
                return numbers$9;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    browserSupportsCssVars: function () { return true; },
                    computeBoundingRect: function () {
                        return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
                    },
                    containsEventTarget: function () { return true; },
                    deregisterDocumentInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    deregisterResizeHandler: function () { return undefined; },
                    getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
                    isSurfaceActive: function () { return true; },
                    isSurfaceDisabled: function () { return true; },
                    isUnbounded: function () { return true; },
                    registerDocumentInteractionHandler: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                    registerResizeHandler: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    updateCssVariable: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCRippleFoundation.prototype.init = function () {
            var _this = this;
            var supportsPressRipple = this.supportsPressRipple();
            this.registerRootHandlers(supportsPressRipple);
            if (supportsPressRipple) {
                var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                    _this.adapter.addClass(ROOT_1);
                    if (_this.adapter.isUnbounded()) {
                        _this.adapter.addClass(UNBOUNDED_1);
                        // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                        _this.layoutInternal();
                    }
                });
            }
        };
        MDCRippleFoundation.prototype.destroy = function () {
            var _this = this;
            if (this.supportsPressRipple()) {
                if (this.activationTimer) {
                    clearTimeout(this.activationTimer);
                    this.activationTimer = 0;
                    this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
                }
                if (this.fgDeactivationRemovalTimer) {
                    clearTimeout(this.fgDeactivationRemovalTimer);
                    this.fgDeactivationRemovalTimer = 0;
                    this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
                }
                var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                    _this.adapter.removeClass(ROOT_2);
                    _this.adapter.removeClass(UNBOUNDED_2);
                    _this.removeCssVars();
                });
            }
            this.deregisterRootHandlers();
            this.deregisterDeactivationHandlers();
        };
        /**
         * @param evt Optional event containing position information.
         */
        MDCRippleFoundation.prototype.activate = function (evt) {
            this.activateImpl(evt);
        };
        MDCRippleFoundation.prototype.deactivate = function () {
            this.deactivateImpl();
        };
        MDCRippleFoundation.prototype.layout = function () {
            var _this = this;
            if (this.layoutFrame) {
                cancelAnimationFrame(this.layoutFrame);
            }
            this.layoutFrame = requestAnimationFrame(function () {
                _this.layoutInternal();
                _this.layoutFrame = 0;
            });
        };
        MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
            var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
            if (unbounded) {
                this.adapter.addClass(UNBOUNDED);
            }
            else {
                this.adapter.removeClass(UNBOUNDED);
            }
        };
        MDCRippleFoundation.prototype.handleFocus = function () {
            var _this = this;
            requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
        };
        MDCRippleFoundation.prototype.handleBlur = function () {
            var _this = this;
            requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
        };
        /**
         * We compute this property so that we are not querying information about the client
         * until the point in time where the foundation requests it. This prevents scenarios where
         * client-side feature-detection may happen too early, such as when components are rendered on the server
         * and then initialized at mount time on the client.
         */
        MDCRippleFoundation.prototype.supportsPressRipple = function () {
            return this.adapter.browserSupportsCssVars();
        };
        MDCRippleFoundation.prototype.defaultActivationState = function () {
            return {
                activationEvent: undefined,
                hasDeactivationUXRun: false,
                isActivated: false,
                isProgrammatic: false,
                wasActivatedByPointer: false,
                wasElementMadeActive: false,
            };
        };
        /**
         * supportsPressRipple Passed from init to save a redundant function call
         */
        MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {
            var e_1, _a;
            if (supportsPressRipple) {
                try {
                    for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
                        var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                        this.adapter.registerInteractionHandler(evtType, this.activateHandler);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (this.adapter.isUnbounded()) {
                    this.adapter.registerResizeHandler(this.resizeHandler);
                }
            }
            this.adapter.registerInteractionHandler('focus', this.focusHandler);
            this.adapter.registerInteractionHandler('blur', this.blurHandler);
        };
        MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {
            var e_2, _a;
            if (evt.type === 'keydown') {
                this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
            }
            else {
                try {
                    for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
                        var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                        this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        };
        MDCRippleFoundation.prototype.deregisterRootHandlers = function () {
            var e_3, _a;
            try {
                for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
                    var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
                    this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
            this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
            if (this.adapter.isUnbounded()) {
                this.adapter.deregisterResizeHandler(this.resizeHandler);
            }
        };
        MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {
            var e_4, _a;
            this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
            try {
                for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
                    this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
        };
        MDCRippleFoundation.prototype.removeCssVars = function () {
            var _this = this;
            var rippleStrings = MDCRippleFoundation.strings;
            var keys = Object.keys(rippleStrings);
            keys.forEach(function (key) {
                if (key.indexOf('VAR_') === 0) {
                    _this.adapter.updateCssVariable(rippleStrings[key], null);
                }
            });
        };
        MDCRippleFoundation.prototype.activateImpl = function (evt) {
            var _this = this;
            if (this.adapter.isSurfaceDisabled()) {
                return;
            }
            var activationState = this.activationState;
            if (activationState.isActivated) {
                return;
            }
            // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
            var previousActivationEvent = this.previousActivationEvent;
            var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
            if (isSameInteraction) {
                return;
            }
            activationState.isActivated = true;
            activationState.isProgrammatic = evt === undefined;
            activationState.activationEvent = evt;
            activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
            var hasActivatedChild = evt !== undefined &&
                activatedTargets.length > 0 &&
                activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });
            if (hasActivatedChild) {
                // Immediately reset activation state, while preserving logic that prevents touch follow-on events
                this.resetActivationState();
                return;
            }
            if (evt !== undefined) {
                activatedTargets.push(evt.target);
                this.registerDeactivationHandlers(evt);
            }
            activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
            if (activationState.wasElementMadeActive) {
                this.animateActivation();
            }
            requestAnimationFrame(function () {
                // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
                activatedTargets = [];
                if (!activationState.wasElementMadeActive
                    && evt !== undefined
                    && (evt.key === ' ' || evt.keyCode === 32)) {
                    // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                    // active states inconsistently when they're called within event handling code:
                    // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                    // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                    // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                    // variable is set within a rAF callback for a submit button interaction (#2241).
                    activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
                    if (activationState.wasElementMadeActive) {
                        _this.animateActivation();
                    }
                }
                if (!activationState.wasElementMadeActive) {
                    // Reset activation state immediately if element was not made active.
                    _this.activationState = _this.defaultActivationState();
                }
            });
        };
        MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {
            return (evt !== undefined && evt.type === 'keydown') ?
                this.adapter.isSurfaceActive() :
                true;
        };
        MDCRippleFoundation.prototype.animateActivation = function () {
            var _this = this;
            var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
            var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
            var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
            this.layoutInternal();
            var translateStart = '';
            var translateEnd = '';
            if (!this.adapter.isUnbounded()) {
                var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
                translateStart = startPoint.x + "px, " + startPoint.y + "px";
                translateEnd = endPoint.x + "px, " + endPoint.y + "px";
            }
            this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
            this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
            // Cancel any ongoing activation/deactivation animations
            clearTimeout(this.activationTimer);
            clearTimeout(this.fgDeactivationRemovalTimer);
            this.rmBoundedActivationClasses();
            this.adapter.removeClass(FG_DEACTIVATION);
            // Force layout in order to re-trigger the animation.
            this.adapter.computeBoundingRect();
            this.adapter.addClass(FG_ACTIVATION);
            this.activationTimer = setTimeout(function () {
                _this.activationTimerCallback();
            }, DEACTIVATION_TIMEOUT_MS);
        };
        MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {
            var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
            var startPoint;
            if (wasActivatedByPointer) {
                startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
            }
            else {
                startPoint = {
                    x: this.frame.width / 2,
                    y: this.frame.height / 2,
                };
            }
            // Center the element around the start point.
            startPoint = {
                x: startPoint.x - (this.initialSize / 2),
                y: startPoint.y - (this.initialSize / 2),
            };
            var endPoint = {
                x: (this.frame.width / 2) - (this.initialSize / 2),
                y: (this.frame.height / 2) - (this.initialSize / 2),
            };
            return { startPoint: startPoint, endPoint: endPoint };
        };
        MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {
            var _this = this;
            // This method is called both when a pointing device is released, and when the activation animation ends.
            // The deactivation animation should only run after both of those occur.
            var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
            var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
            var activationHasEnded = hasDeactivationUXRun || !isActivated;
            if (activationHasEnded && this.activationAnimationHasEnded) {
                this.rmBoundedActivationClasses();
                this.adapter.addClass(FG_DEACTIVATION);
                this.fgDeactivationRemovalTimer = setTimeout(function () {
                    _this.adapter.removeClass(FG_DEACTIVATION);
                }, numbers$9.FG_DEACTIVATION_MS);
            }
        };
        MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {
            var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
            this.adapter.removeClass(FG_ACTIVATION);
            this.activationAnimationHasEnded = false;
            this.adapter.computeBoundingRect();
        };
        MDCRippleFoundation.prototype.resetActivationState = function () {
            var _this = this;
            this.previousActivationEvent = this.activationState.activationEvent;
            this.activationState = this.defaultActivationState();
            // Touch devices may fire additional events for the same interaction within a short time.
            // Store the previous event until it's safe to assume that subsequent events are for new interactions.
            setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
        };
        MDCRippleFoundation.prototype.deactivateImpl = function () {
            var _this = this;
            var activationState = this.activationState;
            // This can happen in scenarios such as when you have a keyup event that blurs the element.
            if (!activationState.isActivated) {
                return;
            }
            var state = __assign({}, activationState);
            if (activationState.isProgrammatic) {
                requestAnimationFrame(function () {
                    _this.animateDeactivation(state);
                });
                this.resetActivationState();
            }
            else {
                this.deregisterDeactivationHandlers();
                requestAnimationFrame(function () {
                    _this.activationState.hasDeactivationUXRun = true;
                    _this.animateDeactivation(state);
                    _this.resetActivationState();
                });
            }
        };
        MDCRippleFoundation.prototype.animateDeactivation = function (_a) {
            var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
            if (wasActivatedByPointer || wasElementMadeActive) {
                this.runDeactivationUXLogicIfReady();
            }
        };
        MDCRippleFoundation.prototype.layoutInternal = function () {
            var _this = this;
            this.frame = this.adapter.computeBoundingRect();
            var maxDim = Math.max(this.frame.height, this.frame.width);
            // Surface diameter is treated differently for unbounded vs. bounded ripples.
            // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
            // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
            // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
            // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
            // `overflow: hidden`.
            var getBoundedRadius = function () {
                var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
                return hypotenuse + MDCRippleFoundation.numbers.PADDING;
            };
            this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
            // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
            var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
            // Unbounded ripple size should always be even number to equally center align.
            if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
                this.initialSize = initialSize - 1;
            }
            else {
                this.initialSize = initialSize;
            }
            this.fgScale = "" + this.maxRadius / this.initialSize;
            this.updateLayoutCssVars();
        };
        MDCRippleFoundation.prototype.updateLayoutCssVars = function () {
            var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
            this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
            this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
            if (this.adapter.isUnbounded()) {
                this.unboundedCoords = {
                    left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),
                    top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),
                };
                this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
                this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
            }
        };
        return MDCRippleFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCRipple = /** @class */ (function (_super) {
        __extends(MDCRipple, _super);
        function MDCRipple() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.disabled = false;
            return _this;
        }
        MDCRipple.attachTo = function (root, opts) {
            if (opts === void 0) { opts = {
                isUnbounded: undefined
            }; }
            var ripple = new MDCRipple(root);
            // Only override unbounded behavior if option is explicitly specified
            if (opts.isUnbounded !== undefined) {
                ripple.unbounded = opts.isUnbounded;
            }
            return ripple;
        };
        MDCRipple.createAdapter = function (instance) {
            return {
                addClass: function (className) { return instance.root.classList.add(className); },
                browserSupportsCssVars: function () { return supportsCssVariables(window); },
                computeBoundingRect: function () { return instance.root.getBoundingClientRect(); },
                containsEventTarget: function (target) { return instance.root.contains(target); },
                deregisterDocumentInteractionHandler: function (evtType, handler) {
                    return document.documentElement.removeEventListener(evtType, handler, applyPassive$1());
                },
                deregisterInteractionHandler: function (evtType, handler) {
                    return instance.root
                        .removeEventListener(evtType, handler, applyPassive$1());
                },
                deregisterResizeHandler: function (handler) {
                    return window.removeEventListener('resize', handler);
                },
                getWindowPageOffset: function () {
                    return ({ x: window.pageXOffset, y: window.pageYOffset });
                },
                isSurfaceActive: function () { return matches$1(instance.root, ':active'); },
                isSurfaceDisabled: function () { return Boolean(instance.disabled); },
                isUnbounded: function () { return Boolean(instance.unbounded); },
                registerDocumentInteractionHandler: function (evtType, handler) {
                    return document.documentElement.addEventListener(evtType, handler, applyPassive$1());
                },
                registerInteractionHandler: function (evtType, handler) {
                    return instance.root
                        .addEventListener(evtType, handler, applyPassive$1());
                },
                registerResizeHandler: function (handler) {
                    return window.addEventListener('resize', handler);
                },
                removeClass: function (className) { return instance.root.classList.remove(className); },
                updateCssVariable: function (varName, value) {
                    return instance.root.style.setProperty(varName, value);
                },
            };
        };
        Object.defineProperty(MDCRipple.prototype, "unbounded", {
            get: function () {
                return Boolean(this.isUnbounded);
            },
            set: function (unbounded) {
                this.isUnbounded = Boolean(unbounded);
                this.setUnbounded();
            },
            enumerable: false,
            configurable: true
        });
        MDCRipple.prototype.activate = function () {
            this.foundation.activate();
        };
        MDCRipple.prototype.deactivate = function () {
            this.foundation.deactivate();
        };
        MDCRipple.prototype.layout = function () {
            this.foundation.layout();
        };
        MDCRipple.prototype.getDefaultFoundation = function () {
            return new MDCRippleFoundation(MDCRipple.createAdapter(this));
        };
        MDCRipple.prototype.initialSyncWithDOM = function () {
            var root = this.root;
            this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;
        };
        /**
         * Closure Compiler throws an access control error when directly accessing a
         * protected or private property inside a getter/setter, like unbounded above.
         * By accessing the protected property inside a method, we solve that problem.
         * That's why this function exists.
         */
        MDCRipple.prototype.setUnbounded = function () {
            this.foundation.setUnbounded(Boolean(this.isUnbounded));
        };
        return MDCRipple;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$l = {
        ARIA_CONTROLS: 'aria-controls',
        ARIA_DESCRIBEDBY: 'aria-describedby',
        INPUT_SELECTOR: '.mdc-text-field__input',
        LABEL_SELECTOR: '.mdc-floating-label',
        LEADING_ICON_SELECTOR: '.mdc-text-field__icon--leading',
        LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
        OUTLINE_SELECTOR: '.mdc-notched-outline',
        PREFIX_SELECTOR: '.mdc-text-field__affix--prefix',
        SUFFIX_SELECTOR: '.mdc-text-field__affix--suffix',
        TRAILING_ICON_SELECTOR: '.mdc-text-field__icon--trailing'
    };
    var cssClasses$j = {
        DISABLED: 'mdc-text-field--disabled',
        FOCUSED: 'mdc-text-field--focused',
        HELPER_LINE: 'mdc-text-field-helper-line',
        INVALID: 'mdc-text-field--invalid',
        LABEL_FLOATING: 'mdc-text-field--label-floating',
        NO_LABEL: 'mdc-text-field--no-label',
        OUTLINED: 'mdc-text-field--outlined',
        ROOT: 'mdc-text-field',
        TEXTAREA: 'mdc-text-field--textarea',
        WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
        WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon',
        WITH_INTERNAL_COUNTER: 'mdc-text-field--with-internal-counter',
    };
    var numbers$8 = {
        LABEL_SCALE: 0.75,
    };
    /**
     * Whitelist based off of
     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
     * under the "Validation-related attributes" section.
     */
    var VALIDATION_ATTR_WHITELIST = [
        'pattern',
        'min',
        'max',
        'required',
        'step',
        'minlength',
        'maxlength',
    ];
    /**
     * Label should always float for these types as they show some UI even if value
     * is empty.
     */
    var ALWAYS_FLOAT_TYPES = [
        'color',
        'date',
        'datetime-local',
        'month',
        'range',
        'time',
        'week',
    ];

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
    var INTERACTION_EVENTS$1 = ['click', 'keydown'];
    var MDCTextFieldFoundation = /** @class */ (function (_super) {
        __extends(MDCTextFieldFoundation, _super);
        /**
         * @param adapter
         * @param foundationMap Map from subcomponent names to their subfoundations.
         */
        function MDCTextFieldFoundation(adapter, foundationMap) {
            if (foundationMap === void 0) { foundationMap = {}; }
            var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;
            _this.isFocused = false;
            _this.receivedUserInput = false;
            _this.valid = true;
            _this.useNativeValidation = true;
            _this.validateOnValueChange = true;
            _this.helperText = foundationMap.helperText;
            _this.characterCounter = foundationMap.characterCounter;
            _this.leadingIcon = foundationMap.leadingIcon;
            _this.trailingIcon = foundationMap.trailingIcon;
            _this.inputFocusHandler = function () {
                _this.activateFocus();
            };
            _this.inputBlurHandler = function () {
                _this.deactivateFocus();
            };
            _this.inputInputHandler = function () {
                _this.handleInput();
            };
            _this.setPointerXOffset = function (evt) {
                _this.setTransformOrigin(evt);
            };
            _this.textFieldInteractionHandler = function () {
                _this.handleTextFieldInteraction();
            };
            _this.validationAttributeChangeHandler = function (attributesList) {
                _this.handleValidationAttributeChange(attributesList);
            };
            return _this;
        }
        Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
            get: function () {
                return cssClasses$j;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation, "strings", {
            get: function () {
                return strings$l;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation, "numbers", {
            get: function () {
                return numbers$8;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat", {
            get: function () {
                var type = this.getNativeInput().type;
                return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
            get: function () {
                return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() ||
                    this.isBadInput();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
            get: function () {
                return !this.isFocused && !this.isValid() && !!this.getValue();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
            /**
             * See {@link MDCTextFieldAdapter} for typing information on parameters and
             * return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return true; },
                    setInputAttr: function () { return undefined; },
                    removeInputAttr: function () { return undefined; },
                    registerTextFieldInteractionHandler: function () { return undefined; },
                    deregisterTextFieldInteractionHandler: function () { return undefined; },
                    registerInputInteractionHandler: function () { return undefined; },
                    deregisterInputInteractionHandler: function () { return undefined; },
                    registerValidationAttributeChangeHandler: function () {
                        return new MutationObserver(function () { return undefined; });
                    },
                    deregisterValidationAttributeChangeHandler: function () { return undefined; },
                    getNativeInput: function () { return null; },
                    isFocused: function () { return false; },
                    activateLineRipple: function () { return undefined; },
                    deactivateLineRipple: function () { return undefined; },
                    setLineRippleTransformOrigin: function () { return undefined; },
                    shakeLabel: function () { return undefined; },
                    floatLabel: function () { return undefined; },
                    setLabelRequired: function () { return undefined; },
                    hasLabel: function () { return false; },
                    getLabelWidth: function () { return 0; },
                    hasOutline: function () { return false; },
                    notchOutline: function () { return undefined; },
                    closeOutline: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCTextFieldFoundation.prototype.init = function () {
            var e_1, _a, e_2, _b;
            if (this.adapter.hasLabel() && this.getNativeInput().required) {
                this.adapter.setLabelRequired(true);
            }
            if (this.adapter.isFocused()) {
                this.inputFocusHandler();
            }
            else if (this.adapter.hasLabel() && this.shouldFloat) {
                this.notchOutline(true);
                this.adapter.floatLabel(true);
                this.styleFloating(true);
            }
            this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);
            this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);
            this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);
            try {
                for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
                    var evtType = POINTERDOWN_EVENTS_1_1.value;
                    this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS$1), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
                    var evtType = INTERACTION_EVENTS_1_1.value;
                    this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.validationObserver =
                this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
            this.setcharacterCounter(this.getValue().length);
        };
        MDCTextFieldFoundation.prototype.destroy = function () {
            var e_3, _a, e_4, _b;
            this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);
            this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);
            this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);
            try {
                for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
                    var evtType = POINTERDOWN_EVENTS_2_1.value;
                    this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            try {
                for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS$1), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
                    var evtType = INTERACTION_EVENTS_2_1.value;
                    this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
        };
        /**
         * Handles user interactions with the Text Field.
         */
        MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
            var nativeInput = this.adapter.getNativeInput();
            if (nativeInput && nativeInput.disabled) {
                return;
            }
            this.receivedUserInput = true;
        };
        /**
         * Handles validation attribute changes
         */
        MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
            var _this = this;
            attributesList.some(function (attributeName) {
                if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
                    _this.styleValidity(true);
                    _this.adapter.setLabelRequired(_this.getNativeInput().required);
                    return true;
                }
                return false;
            });
            if (attributesList.indexOf('maxlength') > -1) {
                this.setcharacterCounter(this.getValue().length);
            }
        };
        /**
         * Opens/closes the notched outline.
         */
        MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
            if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
                return;
            }
            if (openNotch) {
                var labelWidth = this.adapter.getLabelWidth() * numbers$8.LABEL_SCALE;
                this.adapter.notchOutline(labelWidth);
            }
            else {
                this.adapter.closeOutline();
            }
        };
        /**
         * Activates the text field focus state.
         */
        MDCTextFieldFoundation.prototype.activateFocus = function () {
            this.isFocused = true;
            this.styleFocused(this.isFocused);
            this.adapter.activateLineRipple();
            if (this.adapter.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter.floatLabel(this.shouldFloat);
                this.styleFloating(this.shouldFloat);
                this.adapter.shakeLabel(this.shouldShake);
            }
            if (this.helperText &&
                (this.helperText.isPersistent() || !this.helperText.isValidation() ||
                    !this.valid)) {
                this.helperText.showToScreenReader();
            }
        };
        /**
         * Sets the line ripple's transform origin, so that the line ripple activate
         * animation will animate out from the user's click location.
         */
        MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
            if (this.isDisabled() || this.adapter.hasOutline()) {
                return;
            }
            var touches = evt.touches;
            var targetEvent = touches ? touches[0] : evt;
            var targetClientRect = targetEvent.target.getBoundingClientRect();
            var normalizedX = targetEvent.clientX - targetClientRect.left;
            this.adapter.setLineRippleTransformOrigin(normalizedX);
        };
        /**
         * Handles input change of text input and text area.
         */
        MDCTextFieldFoundation.prototype.handleInput = function () {
            this.autoCompleteFocus();
            this.setcharacterCounter(this.getValue().length);
        };
        /**
         * Activates the Text Field's focus state in cases when the input value
         * changes without user input (e.g. programmatically).
         */
        MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
            if (!this.receivedUserInput) {
                this.activateFocus();
            }
        };
        /**
         * Deactivates the Text Field's focus state.
         */
        MDCTextFieldFoundation.prototype.deactivateFocus = function () {
            this.isFocused = false;
            this.adapter.deactivateLineRipple();
            var isValid = this.isValid();
            this.styleValidity(isValid);
            this.styleFocused(this.isFocused);
            if (this.adapter.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter.floatLabel(this.shouldFloat);
                this.styleFloating(this.shouldFloat);
                this.adapter.shakeLabel(this.shouldShake);
            }
            if (!this.shouldFloat) {
                this.receivedUserInput = false;
            }
        };
        MDCTextFieldFoundation.prototype.getValue = function () {
            return this.getNativeInput().value;
        };
        /**
         * @param value The value to set on the input Element.
         */
        MDCTextFieldFoundation.prototype.setValue = function (value) {
            // Prevent Safari from moving the caret to the end of the input when the
            // value has not changed.
            if (this.getValue() !== value) {
                this.getNativeInput().value = value;
            }
            this.setcharacterCounter(value.length);
            if (this.validateOnValueChange) {
                var isValid = this.isValid();
                this.styleValidity(isValid);
            }
            if (this.adapter.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter.floatLabel(this.shouldFloat);
                this.styleFloating(this.shouldFloat);
                if (this.validateOnValueChange) {
                    this.adapter.shakeLabel(this.shouldShake);
                }
            }
        };
        /**
         * @return The custom validity state, if set; otherwise, the result of a
         *     native validity check.
         */
        MDCTextFieldFoundation.prototype.isValid = function () {
            return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
        };
        /**
         * @param isValid Sets the custom validity state of the Text Field.
         */
        MDCTextFieldFoundation.prototype.setValid = function (isValid) {
            this.valid = isValid;
            this.styleValidity(isValid);
            var shouldShake = !isValid && !this.isFocused && !!this.getValue();
            if (this.adapter.hasLabel()) {
                this.adapter.shakeLabel(shouldShake);
            }
        };
        /**
         * @param shouldValidate Whether or not validity should be updated on
         *     value change.
         */
        MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {
            this.validateOnValueChange = shouldValidate;
        };
        /**
         * @return Whether or not validity should be updated on value change. `true`
         *     by default.
         */
        MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {
            return this.validateOnValueChange;
        };
        /**
         * Enables or disables the use of native validation. Use this for custom
         * validation.
         * @param useNativeValidation Set this to false to ignore native input
         *     validation.
         */
        MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
            this.useNativeValidation = useNativeValidation;
        };
        MDCTextFieldFoundation.prototype.isDisabled = function () {
            return this.getNativeInput().disabled;
        };
        /**
         * @param disabled Sets the text-field disabled or enabled.
         */
        MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
            this.getNativeInput().disabled = disabled;
            this.styleDisabled(disabled);
        };
        /**
         * @param content Sets the content of the helper text.
         */
        MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
            if (this.helperText) {
                this.helperText.setContent(content);
            }
        };
        /**
         * Sets the aria label of the leading icon.
         */
        MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
            if (this.leadingIcon) {
                this.leadingIcon.setAriaLabel(label);
            }
        };
        /**
         * Sets the text content of the leading icon.
         */
        MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
            if (this.leadingIcon) {
                this.leadingIcon.setContent(content);
            }
        };
        /**
         * Sets the aria label of the trailing icon.
         */
        MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
            if (this.trailingIcon) {
                this.trailingIcon.setAriaLabel(label);
            }
        };
        /**
         * Sets the text content of the trailing icon.
         */
        MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
            if (this.trailingIcon) {
                this.trailingIcon.setContent(content);
            }
        };
        /**
         * Sets character counter values that shows characters used and the total
         * character limit.
         */
        MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {
            if (!this.characterCounter) {
                return;
            }
            var maxLength = this.getNativeInput().maxLength;
            if (maxLength === -1) {
                throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
            }
            this.characterCounter.setCounterValue(currentLength, maxLength);
        };
        /**
         * @return True if the Text Field input fails in converting the user-supplied
         *     value.
         */
        MDCTextFieldFoundation.prototype.isBadInput = function () {
            // The badInput property is not supported in IE 11 💩.
            return this.getNativeInput().validity.badInput || false;
        };
        /**
         * @return The result of native validity checking (ValidityState.valid).
         */
        MDCTextFieldFoundation.prototype.isNativeInputValid = function () {
            return this.getNativeInput().validity.valid;
        };
        /**
         * Styles the component based on the validity state.
         */
        MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {
            var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
            if (isValid) {
                this.adapter.removeClass(INVALID);
            }
            else {
                this.adapter.addClass(INVALID);
            }
            if (this.helperText) {
                this.helperText.setValidity(isValid);
                // We dynamically set or unset aria-describedby for validation helper text
                // only, based on whether the field is valid
                var helperTextValidation = this.helperText.isValidation();
                if (!helperTextValidation) {
                    return;
                }
                var helperTextVisible = this.helperText.isVisible();
                var helperTextId = this.helperText.getId();
                if (helperTextVisible && helperTextId) {
                    this.adapter.setInputAttr(strings$l.ARIA_DESCRIBEDBY, helperTextId);
                }
                else {
                    this.adapter.removeInputAttr(strings$l.ARIA_DESCRIBEDBY);
                }
            }
        };
        /**
         * Styles the component based on the focused state.
         */
        MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {
            var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
            if (isFocused) {
                this.adapter.addClass(FOCUSED);
            }
            else {
                this.adapter.removeClass(FOCUSED);
            }
        };
        /**
         * Styles the component based on the disabled state.
         */
        MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {
            var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
            if (isDisabled) {
                this.adapter.addClass(DISABLED);
                this.adapter.removeClass(INVALID);
            }
            else {
                this.adapter.removeClass(DISABLED);
            }
            if (this.leadingIcon) {
                this.leadingIcon.setDisabled(isDisabled);
            }
            if (this.trailingIcon) {
                this.trailingIcon.setDisabled(isDisabled);
            }
        };
        /**
         * Styles the component based on the label floating state.
         */
        MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {
            var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;
            if (isFloating) {
                this.adapter.addClass(LABEL_FLOATING);
            }
            else {
                this.adapter.removeClass(LABEL_FLOATING);
            }
        };
        /**
         * @return The native text input element from the host environment, or an
         *     object with the same shape for unit tests.
         */
        MDCTextFieldFoundation.prototype.getNativeInput = function () {
            // this.adapter may be undefined in foundation unit tests. This happens when
            // testdouble is creating a mock object and invokes the
            // shouldShake/shouldFloat getters (which in turn call getValue(), which
            // calls this method) before init() has been called from the MDCTextField
            // constructor. To work around that issue, we return a dummy object.
            var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
            return nativeInput || {
                disabled: false,
                maxLength: -1,
                required: false,
                type: 'input',
                validity: {
                    badInput: false,
                    valid: true,
                },
                value: '',
            };
        };
        return MDCTextFieldFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$k = {
        ICON_EVENT: 'MDCTextField:icon',
        ICON_ROLE: 'button',
    };
    var cssClasses$i = {
        ROOT: 'mdc-text-field__icon',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var INTERACTION_EVENTS = ['click', 'keydown'];
    var MDCTextFieldIconFoundation = /** @class */ (function (_super) {
        __extends(MDCTextFieldIconFoundation, _super);
        function MDCTextFieldIconFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;
            _this.savedTabIndex = null;
            _this.interactionHandler = function (evt) {
                _this.handleInteraction(evt);
            };
            return _this;
        }
        Object.defineProperty(MDCTextFieldIconFoundation, "strings", {
            get: function () {
                return strings$k;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldIconFoundation, "cssClasses", {
            get: function () {
                return cssClasses$i;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldIconFoundation, "defaultAdapter", {
            /**
             * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    getAttr: function () { return null; },
                    setAttr: function () { return undefined; },
                    removeAttr: function () { return undefined; },
                    setContent: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    notifyIconAction: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCTextFieldIconFoundation.prototype.init = function () {
            var e_1, _a;
            this.savedTabIndex = this.adapter.getAttr('tabindex');
            try {
                for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
                    var evtType = INTERACTION_EVENTS_1_1.value;
                    this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return)) _a.call(INTERACTION_EVENTS_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        MDCTextFieldIconFoundation.prototype.destroy = function () {
            var e_2, _a;
            try {
                for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
                    var evtType = INTERACTION_EVENTS_2_1.value;
                    this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return)) _a.call(INTERACTION_EVENTS_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {
            if (!this.savedTabIndex) {
                return;
            }
            if (disabled) {
                this.adapter.setAttr('tabindex', '-1');
                this.adapter.removeAttr('role');
            }
            else {
                this.adapter.setAttr('tabindex', this.savedTabIndex);
                this.adapter.setAttr('role', strings$k.ICON_ROLE);
            }
        };
        MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {
            this.adapter.setAttr('aria-label', label);
        };
        MDCTextFieldIconFoundation.prototype.setContent = function (content) {
            this.adapter.setContent(content);
        };
        MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {
            var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
            if (evt.type === 'click' || isEnterKey) {
                evt.preventDefault(); // stop click from causing host label to focus
                // input
                this.adapter.notifyIconAction();
            }
        };
        return MDCTextFieldIconFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var FOCUS_SENTINEL_CLASS = 'mdc-dom-focus-sentinel';
    /**
     * Utility to trap focus in a given root element, e.g. for modal components such
     * as dialogs. The root should have at least one focusable child element,
     * for setting initial focus when trapping focus.
     * Also tracks the previously focused element, and restores focus to that
     * element when releasing focus.
     */
    var FocusTrap = /** @class */ (function () {
        function FocusTrap(root, options) {
            if (options === void 0) { options = {}; }
            this.root = root;
            this.options = options;
            // Previously focused element before trapping focus.
            this.elFocusedBeforeTrapFocus = null;
        }
        /**
         * Traps focus in `root`. Also focuses on either `initialFocusEl` if set;
         * otherwises sets initial focus to the first focusable child element.
         */
        FocusTrap.prototype.trapFocus = function () {
            var focusableEls = this.getFocusableElements(this.root);
            if (focusableEls.length === 0) {
                throw new Error('FocusTrap: Element must have at least one focusable child.');
            }
            this.elFocusedBeforeTrapFocus =
                document.activeElement instanceof HTMLElement ? document.activeElement :
                    null;
            this.wrapTabFocus(this.root);
            if (!this.options.skipInitialFocus) {
                this.focusInitialElement(focusableEls, this.options.initialFocusEl);
            }
        };
        /**
         * Releases focus from `root`. Also restores focus to the previously focused
         * element.
         */
        FocusTrap.prototype.releaseFocus = function () {
            [].slice.call(this.root.querySelectorAll("." + FOCUS_SENTINEL_CLASS))
                .forEach(function (sentinelEl) {
                sentinelEl.parentElement.removeChild(sentinelEl);
            });
            if (!this.options.skipRestoreFocus && this.elFocusedBeforeTrapFocus) {
                this.elFocusedBeforeTrapFocus.focus();
            }
        };
        /**
         * Wraps tab focus within `el` by adding two hidden sentinel divs which are
         * used to mark the beginning and the end of the tabbable region. When
         * focused, these sentinel elements redirect focus to the first/last
         * children elements of the tabbable region, ensuring that focus is trapped
         * within that region.
         */
        FocusTrap.prototype.wrapTabFocus = function (el) {
            var _this = this;
            var sentinelStart = this.createSentinel();
            var sentinelEnd = this.createSentinel();
            sentinelStart.addEventListener('focus', function () {
                var focusableEls = _this.getFocusableElements(el);
                if (focusableEls.length > 0) {
                    focusableEls[focusableEls.length - 1].focus();
                }
            });
            sentinelEnd.addEventListener('focus', function () {
                var focusableEls = _this.getFocusableElements(el);
                if (focusableEls.length > 0) {
                    focusableEls[0].focus();
                }
            });
            el.insertBefore(sentinelStart, el.children[0]);
            el.appendChild(sentinelEnd);
        };
        /**
         * Focuses on `initialFocusEl` if defined and a child of the root element.
         * Otherwise, focuses on the first focusable child element of the root.
         */
        FocusTrap.prototype.focusInitialElement = function (focusableEls, initialFocusEl) {
            var focusIndex = 0;
            if (initialFocusEl) {
                focusIndex = Math.max(focusableEls.indexOf(initialFocusEl), 0);
            }
            focusableEls[focusIndex].focus();
        };
        FocusTrap.prototype.getFocusableElements = function (root) {
            var focusableEls = [].slice.call(root.querySelectorAll('[autofocus], [tabindex], a, input, textarea, select, button'));
            return focusableEls.filter(function (el) {
                var isDisabledOrHidden = el.getAttribute('aria-disabled') === 'true' ||
                    el.getAttribute('disabled') != null ||
                    el.getAttribute('hidden') != null ||
                    el.getAttribute('aria-hidden') === 'true';
                var isTabbableAndVisible = el.tabIndex >= 0 &&
                    el.getBoundingClientRect().width > 0 &&
                    !el.classList.contains(FOCUS_SENTINEL_CLASS) && !isDisabledOrHidden;
                var isProgrammaticallyHidden = false;
                if (isTabbableAndVisible) {
                    var style = getComputedStyle(el);
                    isProgrammaticallyHidden =
                        style.display === 'none' || style.visibility === 'hidden';
                }
                return isTabbableAndVisible && !isProgrammaticallyHidden;
            });
        };
        FocusTrap.prototype.createSentinel = function () {
            var sentinel = document.createElement('div');
            sentinel.setAttribute('tabindex', '0');
            // Don't announce in screen readers.
            sentinel.setAttribute('aria-hidden', 'true');
            sentinel.classList.add(FOCUS_SENTINEL_CLASS);
            return sentinel;
        };
        return FocusTrap;
    }());

    var domFocusTrap = /*#__PURE__*/Object.freeze({
        __proto__: null,
        FocusTrap: FocusTrap
    });

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * KEY provides normalized string values for keys.
     */
    var KEY = {
        UNKNOWN: 'Unknown',
        BACKSPACE: 'Backspace',
        ENTER: 'Enter',
        SPACEBAR: 'Spacebar',
        PAGE_UP: 'PageUp',
        PAGE_DOWN: 'PageDown',
        END: 'End',
        HOME: 'Home',
        ARROW_LEFT: 'ArrowLeft',
        ARROW_UP: 'ArrowUp',
        ARROW_RIGHT: 'ArrowRight',
        ARROW_DOWN: 'ArrowDown',
        DELETE: 'Delete',
        ESCAPE: 'Escape',
        TAB: 'Tab',
    };
    var normalizedKeys = new Set();
    // IE11 has no support for new Map with iterable so we need to initialize this
    // by hand.
    normalizedKeys.add(KEY.BACKSPACE);
    normalizedKeys.add(KEY.ENTER);
    normalizedKeys.add(KEY.SPACEBAR);
    normalizedKeys.add(KEY.PAGE_UP);
    normalizedKeys.add(KEY.PAGE_DOWN);
    normalizedKeys.add(KEY.END);
    normalizedKeys.add(KEY.HOME);
    normalizedKeys.add(KEY.ARROW_LEFT);
    normalizedKeys.add(KEY.ARROW_UP);
    normalizedKeys.add(KEY.ARROW_RIGHT);
    normalizedKeys.add(KEY.ARROW_DOWN);
    normalizedKeys.add(KEY.DELETE);
    normalizedKeys.add(KEY.ESCAPE);
    normalizedKeys.add(KEY.TAB);
    var KEY_CODE = {
        BACKSPACE: 8,
        ENTER: 13,
        SPACEBAR: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        ARROW_LEFT: 37,
        ARROW_UP: 38,
        ARROW_RIGHT: 39,
        ARROW_DOWN: 40,
        DELETE: 46,
        ESCAPE: 27,
        TAB: 9,
    };
    var mappedKeyCodes = new Map();
    // IE11 has no support for new Map with iterable so we need to initialize this
    // by hand.
    mappedKeyCodes.set(KEY_CODE.BACKSPACE, KEY.BACKSPACE);
    mappedKeyCodes.set(KEY_CODE.ENTER, KEY.ENTER);
    mappedKeyCodes.set(KEY_CODE.SPACEBAR, KEY.SPACEBAR);
    mappedKeyCodes.set(KEY_CODE.PAGE_UP, KEY.PAGE_UP);
    mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, KEY.PAGE_DOWN);
    mappedKeyCodes.set(KEY_CODE.END, KEY.END);
    mappedKeyCodes.set(KEY_CODE.HOME, KEY.HOME);
    mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, KEY.ARROW_LEFT);
    mappedKeyCodes.set(KEY_CODE.ARROW_UP, KEY.ARROW_UP);
    mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, KEY.ARROW_RIGHT);
    mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, KEY.ARROW_DOWN);
    mappedKeyCodes.set(KEY_CODE.DELETE, KEY.DELETE);
    mappedKeyCodes.set(KEY_CODE.ESCAPE, KEY.ESCAPE);
    mappedKeyCodes.set(KEY_CODE.TAB, KEY.TAB);
    var navigationKeys$1 = new Set();
    // IE11 has no support for new Set with iterable so we need to initialize this
    // by hand.
    navigationKeys$1.add(KEY.PAGE_UP);
    navigationKeys$1.add(KEY.PAGE_DOWN);
    navigationKeys$1.add(KEY.END);
    navigationKeys$1.add(KEY.HOME);
    navigationKeys$1.add(KEY.ARROW_LEFT);
    navigationKeys$1.add(KEY.ARROW_UP);
    navigationKeys$1.add(KEY.ARROW_RIGHT);
    navigationKeys$1.add(KEY.ARROW_DOWN);
    /**
     * normalizeKey returns the normalized string for a navigational action.
     */
    function normalizeKey(evt) {
        var key = evt.key;
        // If the event already has a normalized key, return it
        if (normalizedKeys.has(key)) {
            return key;
        }
        // tslint:disable-next-line:deprecation
        var mappedKey = mappedKeyCodes.get(evt.keyCode);
        if (mappedKey) {
            return mappedKey;
        }
        return KEY.UNKNOWN;
    }
    /**
     * isNavigationEvent returns whether the event is a navigation event
     */
    function isNavigationEvent(evt) {
        return navigationKeys$1.has(normalizeKey(evt));
    }

    /* node_modules/@smui/common/dist/CommonLabel.svelte generated by Svelte v3.44.3 */

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__label': context === 'button',     'mdc-fab__label': context === 'fab',     'mdc-tab__text-label': context === 'tab',     'mdc-image-list__label': context === 'image-list',     'mdc-snackbar__label': context === 'snackbar',     'mdc-banner__text': context === 'banner',     'mdc-segmented-button__label': context === 'segmented-button',     'mdc-data-table__pagination-rows-per-page-label':       context === 'data-table:pagination',     'mdc-data-table__header-cell-label':       context === 'data-table:sortable-header-cell',   })}   {...context === 'snackbar' ? { 'aria-atomic': 'false' } : {}}   {tabindex}   {...$$restProps}>
    function create_default_slot$Y(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$Y.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__label': context === 'button',     'mdc-fab__label': context === 'fab',     'mdc-tab__text-label': context === 'tab',     'mdc-image-list__label': context === 'image-list',     'mdc-snackbar__label': context === 'snackbar',     'mdc-banner__text': context === 'banner',     'mdc-segmented-button__label': context === 'segmented-button',     'mdc-data-table__pagination-rows-per-page-label':       context === 'data-table:pagination',     'mdc-data-table__header-cell-label':       context === 'data-table:sortable-header-cell',   })}   {...context === 'snackbar' ? { 'aria-atomic': 'false' } : {}}   {tabindex}   {...$$restProps}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1L(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[4], .../*use*/ ctx[0]]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-button__label': /*context*/ ctx[5] === 'button',
    				'mdc-fab__label': /*context*/ ctx[5] === 'fab',
    				'mdc-tab__text-label': /*context*/ ctx[5] === 'tab',
    				'mdc-image-list__label': /*context*/ ctx[5] === 'image-list',
    				'mdc-snackbar__label': /*context*/ ctx[5] === 'snackbar',
    				'mdc-banner__text': /*context*/ ctx[5] === 'banner',
    				'mdc-segmented-button__label': /*context*/ ctx[5] === 'segmented-button',
    				'mdc-data-table__pagination-rows-per-page-label': /*context*/ ctx[5] === 'data-table:pagination',
    				'mdc-data-table__header-cell-label': /*context*/ ctx[5] === 'data-table:sortable-header-cell'
    			})
    		},
    		/*context*/ ctx[5] === 'snackbar'
    		? { 'aria-atomic': 'false' }
    		: {},
    		{ tabindex: /*tabindex*/ ctx[6] },
    		/*$$restProps*/ ctx[7]
    	];

    	var switch_value = /*component*/ ctx[2];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$Y] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[10](switch_instance);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*forwardEvents, use, classMap, className, context, tabindex, $$restProps*/ 243)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*forwardEvents, use*/ 17 && {
    						use: [/*forwardEvents*/ ctx[4], .../*use*/ ctx[0]]
    					},
    					dirty & /*classMap, className, context*/ 34 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-button__label': /*context*/ ctx[5] === 'button',
    							'mdc-fab__label': /*context*/ ctx[5] === 'fab',
    							'mdc-tab__text-label': /*context*/ ctx[5] === 'tab',
    							'mdc-image-list__label': /*context*/ ctx[5] === 'image-list',
    							'mdc-snackbar__label': /*context*/ ctx[5] === 'snackbar',
    							'mdc-banner__text': /*context*/ ctx[5] === 'banner',
    							'mdc-segmented-button__label': /*context*/ ctx[5] === 'segmented-button',
    							'mdc-data-table__pagination-rows-per-page-label': /*context*/ ctx[5] === 'data-table:pagination',
    							'mdc-data-table__header-cell-label': /*context*/ ctx[5] === 'data-table:sortable-header-cell'
    						})
    					},
    					dirty & /*context*/ 32 && get_spread_object(/*context*/ ctx[5] === 'snackbar'
    					? { 'aria-atomic': 'false' }
    					: {}),
    					dirty & /*tabindex*/ 64 && { tabindex: /*tabindex*/ ctx[6] },
    					dirty & /*$$restProps*/ 128 && get_spread_object(/*$$restProps*/ ctx[7])
    				])
    			: {};

    			if (dirty & /*$$scope*/ 2048) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[2])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[10](switch_instance);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[10](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1m($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","component","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CommonLabel', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let element;
    	let { component = Span$1 } = $$props;
    	const context = getContext('SMUI:label:context');
    	const tabindex = getContext('SMUI:label:tabindex');

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(3, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('component' in $$new_props) $$invalidate(2, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		Span: Span$1,
    		forwardEvents,
    		use,
    		className,
    		element,
    		component,
    		context,
    		tabindex,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('element' in $$props) $$invalidate(3, element = $$new_props.element);
    		if ('component' in $$props) $$invalidate(2, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		component,
    		element,
    		forwardEvents,
    		context,
    		tabindex,
    		$$restProps,
    		getElement,
    		slots,
    		switch_instance_binding,
    		$$scope
    	];
    }

    class CommonLabel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1m, create_fragment$1L, safe_not_equal, {
    			use: 0,
    			class: 1,
    			component: 2,
    			getElement: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CommonLabel",
    			options,
    			id: create_fragment$1L.name
    		});
    	}

    	get use() {
    		throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[8];
    	}

    	set getElement(value) {
    		throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/CommonIcon.svelte generated by Svelte v3.44.3 */

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__icon': context === 'button',     'mdc-fab__icon': context === 'fab',     'mdc-icon-button__icon': context === 'icon-button',     'mdc-icon-button__icon--on': context === 'icon-button' && on,     'mdc-tab__icon': context === 'tab',     'mdc-banner__icon': context === 'banner',     'mdc-segmented-button__icon': context === 'segmented-button',   })}   aria-hidden="true"   {...component === Svg ? { focusable: 'false', tabindex: '-1' } : {}}   {...$$restProps}>
    function create_default_slot$X(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$X.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__icon': context === 'button',     'mdc-fab__icon': context === 'fab',     'mdc-icon-button__icon': context === 'icon-button',     'mdc-icon-button__icon--on': context === 'icon-button' && on,     'mdc-tab__icon': context === 'tab',     'mdc-banner__icon': context === 'banner',     'mdc-segmented-button__icon': context === 'segmented-button',   })}   aria-hidden=\\\"true\\\"   {...component === Svg ? { focusable: 'false', tabindex: '-1' } : {}}   {...$$restProps}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1K(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-button__icon': /*context*/ ctx[6] === 'button',
    				'mdc-fab__icon': /*context*/ ctx[6] === 'fab',
    				'mdc-icon-button__icon': /*context*/ ctx[6] === 'icon-button',
    				'mdc-icon-button__icon--on': /*context*/ ctx[6] === 'icon-button' && /*on*/ ctx[2],
    				'mdc-tab__icon': /*context*/ ctx[6] === 'tab',
    				'mdc-banner__icon': /*context*/ ctx[6] === 'banner',
    				'mdc-segmented-button__icon': /*context*/ ctx[6] === 'segmented-button'
    			})
    		},
    		{ "aria-hidden": "true" },
    		/*component*/ ctx[3] === Svg
    		? { focusable: 'false', tabindex: '-1' }
    		: {},
    		/*$$restProps*/ ctx[7]
    	];

    	var switch_value = /*component*/ ctx[3];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$X] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[10](switch_instance);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*forwardEvents, use, classMap, className, context, on, component, Svg, $$restProps*/ 239)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*forwardEvents, use*/ 33 && {
    						use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
    					},
    					dirty & /*classMap, className, context, on*/ 70 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-button__icon': /*context*/ ctx[6] === 'button',
    							'mdc-fab__icon': /*context*/ ctx[6] === 'fab',
    							'mdc-icon-button__icon': /*context*/ ctx[6] === 'icon-button',
    							'mdc-icon-button__icon--on': /*context*/ ctx[6] === 'icon-button' && /*on*/ ctx[2],
    							'mdc-tab__icon': /*context*/ ctx[6] === 'tab',
    							'mdc-banner__icon': /*context*/ ctx[6] === 'banner',
    							'mdc-segmented-button__icon': /*context*/ ctx[6] === 'segmented-button'
    						})
    					},
    					switch_instance_spread_levels[2],
    					dirty & /*component, Svg*/ 8 && get_spread_object(/*component*/ ctx[3] === Svg
    					? { focusable: 'false', tabindex: '-1' }
    					: {}),
    					dirty & /*$$restProps*/ 128 && get_spread_object(/*$$restProps*/ ctx[7])
    				])
    			: {};

    			if (dirty & /*$$scope*/ 2048) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[3])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[10](switch_instance);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[10](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1l($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","on","component","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CommonIcon', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { on = false } = $$props;
    	let element;
    	let { component = I } = $$props;
    	const context = getContext('SMUI:icon:context');

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('on' in $$new_props) $$invalidate(2, on = $$new_props.on);
    		if ('component' in $$new_props) $$invalidate(3, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		I,
    		Svg,
    		forwardEvents,
    		use,
    		className,
    		on,
    		element,
    		component,
    		context,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('on' in $$props) $$invalidate(2, on = $$new_props.on);
    		if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
    		if ('component' in $$props) $$invalidate(3, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		on,
    		component,
    		element,
    		forwardEvents,
    		context,
    		$$restProps,
    		getElement,
    		slots,
    		switch_instance_binding,
    		$$scope
    	];
    }

    class CommonIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1l, create_fragment$1K, safe_not_equal, {
    			use: 0,
    			class: 1,
    			on: 2,
    			component: 3,
    			getElement: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CommonIcon",
    			options,
    			id: create_fragment$1K.name
    		});
    	}

    	get use() {
    		throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get on() {
    		throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set on(value) {
    		throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[8];
    	}

    	set getElement(value) {
    		throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/dist/ContextFragment.svelte generated by Svelte v3.44.3 */

    function create_fragment$1J(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1k($$self, $$props, $$invalidate) {
    	let $storeValue;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContextFragment', slots, ['default']);
    	let { key } = $$props;
    	let { value } = $$props;
    	const storeValue = writable(value);
    	validate_store(storeValue, 'storeValue');
    	component_subscribe($$self, storeValue, value => $$invalidate(5, $storeValue = value));
    	setContext(key, storeValue);

    	onDestroy(() => {
    		storeValue.set(undefined);
    	});

    	const writable_props = ['key', 'value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContextFragment> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('key' in $$props) $$invalidate(1, key = $$props.key);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		setContext,
    		writable,
    		key,
    		value,
    		storeValue,
    		$storeValue
    	});

    	$$self.$inject_state = $$props => {
    		if ('key' in $$props) $$invalidate(1, key = $$props.key);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 4) {
    			set_store_value(storeValue, $storeValue = value, $storeValue);
    		}
    	};

    	return [storeValue, key, value, $$scope, slots];
    }

    class ContextFragment extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1k, create_fragment$1J, safe_not_equal, { key: 1, value: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContextFragment",
    			options,
    			id: create_fragment$1J.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*key*/ ctx[1] === undefined && !('key' in props)) {
    			console.warn("<ContextFragment> was created without expected prop 'key'");
    		}

    		if (/*value*/ ctx[2] === undefined && !('value' in props)) {
    			console.warn("<ContextFragment> was created without expected prop 'value'");
    		}
    	}

    	get key() {
    		throw new Error("<ContextFragment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<ContextFragment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ContextFragment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ContextFragment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Label = CommonLabel;
    const Icon$1 = CommonIcon;

    const { applyPassive } = events;
    const { matches } = ponyfill;
    function Ripple(node, { ripple = true, surface = false, unbounded = false, disabled = false, color, active, rippleElement, eventTarget, activeTarget, addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className), addStyle = (name, value) => node.style.setProperty(name, value), initPromise = Promise.resolve(), } = {}) {
        let instance;
        let addLayoutListener = getContext('SMUI:addLayoutListener');
        let removeLayoutListener;
        let oldActive = active;
        let oldEventTarget = eventTarget;
        let oldActiveTarget = activeTarget;
        function handleProps() {
            if (surface) {
                addClass('mdc-ripple-surface');
                if (color === 'primary') {
                    addClass('smui-ripple-surface--primary');
                    removeClass('smui-ripple-surface--secondary');
                }
                else if (color === 'secondary') {
                    removeClass('smui-ripple-surface--primary');
                    addClass('smui-ripple-surface--secondary');
                }
                else {
                    removeClass('smui-ripple-surface--primary');
                    removeClass('smui-ripple-surface--secondary');
                }
            }
            else {
                removeClass('mdc-ripple-surface');
                removeClass('smui-ripple-surface--primary');
                removeClass('smui-ripple-surface--secondary');
            }
            // Handle activation first.
            if (instance && oldActive !== active) {
                oldActive = active;
                if (active) {
                    instance.activate();
                }
                else if (active === false) {
                    instance.deactivate();
                }
            }
            // Then create/destroy an instance.
            if (ripple && !instance) {
                instance = new MDCRippleFoundation({
                    addClass,
                    browserSupportsCssVars: () => supportsCssVariables(window),
                    computeBoundingRect: () => (rippleElement || node).getBoundingClientRect(),
                    containsEventTarget: (target) => node.contains(target),
                    deregisterDocumentInteractionHandler: (evtType, handler) => document.documentElement.removeEventListener(evtType, handler, applyPassive()),
                    deregisterInteractionHandler: (evtType, handler) => (eventTarget || node).removeEventListener(evtType, handler, applyPassive()),
                    deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),
                    getWindowPageOffset: () => ({
                        x: window.pageXOffset,
                        y: window.pageYOffset,
                    }),
                    isSurfaceActive: () => active == null ? matches(activeTarget || node, ':active') : active,
                    isSurfaceDisabled: () => !!disabled,
                    isUnbounded: () => !!unbounded,
                    registerDocumentInteractionHandler: (evtType, handler) => document.documentElement.addEventListener(evtType, handler, applyPassive()),
                    registerInteractionHandler: (evtType, handler) => (eventTarget || node).addEventListener(evtType, handler, applyPassive()),
                    registerResizeHandler: (handler) => window.addEventListener('resize', handler),
                    removeClass,
                    updateCssVariable: addStyle,
                });
                initPromise.then(() => {
                    if (instance) {
                        instance.init();
                        instance.setUnbounded(unbounded);
                    }
                });
            }
            else if (instance && !ripple) {
                initPromise.then(() => {
                    if (instance) {
                        instance.destroy();
                        instance = undefined;
                    }
                });
            }
            // Now handle event/active targets
            if (instance &&
                (oldEventTarget !== eventTarget || oldActiveTarget !== activeTarget)) {
                oldEventTarget = eventTarget;
                oldActiveTarget = activeTarget;
                instance.destroy();
                requestAnimationFrame(() => {
                    if (instance) {
                        instance.init();
                        instance.setUnbounded(unbounded);
                    }
                });
            }
            if (!ripple && unbounded) {
                addClass('mdc-ripple-upgraded--unbounded');
            }
        }
        handleProps();
        if (addLayoutListener) {
            removeLayoutListener = addLayoutListener(layout);
        }
        function layout() {
            if (instance) {
                instance.layout();
            }
        }
        return {
            update(props) {
                ({
                    ripple,
                    surface,
                    unbounded,
                    disabled,
                    color,
                    active,
                    rippleElement,
                    eventTarget,
                    activeTarget,
                    addClass,
                    removeClass,
                    addStyle,
                    initPromise,
                } = Object.assign({ ripple: true, surface: false, unbounded: false, disabled: false, color: undefined, active: undefined, rippleElement: undefined, eventTarget: undefined, activeTarget: undefined, addClass: (className) => node.classList.add(className), removeClass: (className) => node.classList.remove(className), addStyle: (name, value) => node.style.setProperty(name, value), initPromise: Promise.resolve() }, props));
                handleProps();
            },
            destroy() {
                if (instance) {
                    instance.destroy();
                    instance = undefined;
                    removeClass('mdc-ripple-surface');
                    removeClass('smui-ripple-surface--primary');
                    removeClass('smui-ripple-surface--secondary');
                }
                if (removeLayoutListener) {
                    removeLayoutListener();
                }
            },
        };
    }

    /* node_modules/@smui/floating-label/dist/FloatingLabel.svelte generated by Svelte v3.44.3 */

    const file$1k = "node_modules/@smui/floating-label/dist/FloatingLabel.svelte";

    // (19:0) {:else}
    function create_else_block$h(ctx) {
    	let label;
    	let label_class_value;
    	let label_style_value;
    	let label_for_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	let label_levels = [
    		{
    			class: label_class_value = classMap({
    				[/*className*/ ctx[3]]: true,
    				'mdc-floating-label': true,
    				'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
    				'mdc-floating-label--required': /*required*/ ctx[1],
    				.../*internalClasses*/ ctx[8]
    			})
    		},
    		{
    			style: label_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func_1$2).concat([/*style*/ ctx[4]]).join(' ')
    		},
    		{
    			for: label_for_value = /*forId*/ ctx[5] || (/*inputProps*/ ctx[11]
    			? /*inputProps*/ ctx[11].id
    			: undefined)
    		},
    		/*$$restProps*/ ctx[12]
    	];

    	let label_data = {};

    	for (let i = 0; i < label_levels.length; i += 1) {
    		label_data = assign(label_data, label_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (default_slot) default_slot.c();
    			set_attributes(label, label_data);
    			add_location(label, file$1k, 19, 2, 494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			/*label_binding*/ ctx[24](label);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, label, /*use*/ ctx[2])),
    					action_destroyer(/*forwardEvents*/ ctx[10].call(null, label))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(label, label_data = get_spread_update(label_levels, [
    				(!current || dirty & /*className, floatAbove, required, internalClasses*/ 267 && label_class_value !== (label_class_value = classMap({
    					[/*className*/ ctx[3]]: true,
    					'mdc-floating-label': true,
    					'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
    					'mdc-floating-label--required': /*required*/ ctx[1],
    					.../*internalClasses*/ ctx[8]
    				}))) && { class: label_class_value },
    				(!current || dirty & /*internalStyles, style*/ 528 && label_style_value !== (label_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func_1$2).concat([/*style*/ ctx[4]]).join(' '))) && { style: label_style_value },
    				(!current || dirty & /*forId*/ 32 && label_for_value !== (label_for_value = /*forId*/ ctx[5] || (/*inputProps*/ ctx[11]
    				? /*inputProps*/ ctx[11].id
    				: undefined))) && { for: label_for_value },
    				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (default_slot) default_slot.d(detaching);
    			/*label_binding*/ ctx[24](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$h.name,
    		type: "else",
    		source: "(19:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if wrapped}
    function create_if_block$L(ctx) {
    	let span;
    	let span_class_value;
    	let span_style_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	let span_levels = [
    		{
    			class: span_class_value = classMap({
    				[/*className*/ ctx[3]]: true,
    				'mdc-floating-label': true,
    				'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
    				'mdc-floating-label--required': /*required*/ ctx[1],
    				.../*internalClasses*/ ctx[8]
    			})
    		},
    		{
    			style: span_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$j).concat([/*style*/ ctx[4]]).join(' ')
    		},
    		/*$$restProps*/ ctx[12]
    	];

    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			set_attributes(span, span_data);
    			add_location(span, file$1k, 1, 2, 16);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			/*span_binding*/ ctx[23](span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[2])),
    					action_destroyer(/*forwardEvents*/ ctx[10].call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				(!current || dirty & /*className, floatAbove, required, internalClasses*/ 267 && span_class_value !== (span_class_value = classMap({
    					[/*className*/ ctx[3]]: true,
    					'mdc-floating-label': true,
    					'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
    					'mdc-floating-label--required': /*required*/ ctx[1],
    					.../*internalClasses*/ ctx[8]
    				}))) && { class: span_class_value },
    				(!current || dirty & /*internalStyles, style*/ 528 && span_style_value !== (span_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$j).concat([/*style*/ ctx[4]]).join(' '))) && { style: span_style_value },
    				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			/*span_binding*/ ctx[23](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$L.name,
    		type: "if",
    		source: "(1:0) {#if wrapped}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1I(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$L, create_else_block$h];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*wrapped*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$j = ([name, value]) => `${name}: ${value};`;
    const func_1$2 = ([name, value]) => `${name}: ${value};`;

    function instance_1$o($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","for","floatAbove","required","wrapped","shake","float","setRequired","getWidth","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FloatingLabel', slots, ['default']);
    	var _a;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { for: forId = undefined } = $$props;
    	let { floatAbove = false } = $$props;
    	let { required = false } = $$props;
    	let { wrapped = false } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};

    	let inputProps = (_a = getContext('SMUI:generic:input:props')) !== null && _a !== void 0
    	? _a
    	: {};

    	let previousFloatAbove = floatAbove;
    	let previousRequired = required;

    	onMount(() => {
    		$$invalidate(18, instance = new MDCFloatingLabelFoundation({
    				addClass,
    				removeClass,
    				getWidth: () => {
    					var _a, _b;
    					const el = getElement();
    					const clone = el.cloneNode(true);

    					(_a = el.parentNode) === null || _a === void 0
    					? void 0
    					: _a.appendChild(clone);

    					clone.classList.add('smui-floating-label--remove-transition');
    					clone.classList.add('smui-floating-label--force-size');
    					clone.classList.remove('mdc-floating-label--float-above');
    					const scrollWidth = clone.scrollWidth;

    					(_b = el.parentNode) === null || _b === void 0
    					? void 0
    					: _b.removeChild(clone);

    					return scrollWidth;
    				},
    				registerInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
    				deregisterInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler)
    			}));

    		const accessor = {
    			get element() {
    				return getElement();
    			},
    			addStyle,
    			removeStyle
    		};

    		dispatch(element, 'SMUIFloatingLabel:mount', accessor);
    		instance.init();

    		return () => {
    			dispatch(element, 'SMUIFloatingLabel:unmount', accessor);
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(8, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(8, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(9, internalStyles);
    			} else {
    				$$invalidate(9, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function removeStyle(name) {
    		if (name in internalStyles) {
    			delete internalStyles[name];
    			$$invalidate(9, internalStyles);
    		}
    	}

    	function shake(shouldShake) {
    		instance.shake(shouldShake);
    	}

    	function float(shouldFloat) {
    		$$invalidate(0, floatAbove = shouldFloat);
    	}

    	function setRequired(isRequired) {
    		$$invalidate(1, required = isRequired);
    	}

    	function getWidth() {
    		return instance.getWidth();
    	}

    	function getElement() {
    		return element;
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	function label_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
    		if ('for' in $$new_props) $$invalidate(5, forId = $$new_props.for);
    		if ('floatAbove' in $$new_props) $$invalidate(0, floatAbove = $$new_props.floatAbove);
    		if ('required' in $$new_props) $$invalidate(1, required = $$new_props.required);
    		if ('wrapped' in $$new_props) $$invalidate(6, wrapped = $$new_props.wrapped);
    		if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		MDCFloatingLabelFoundation,
    		onMount,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		forwardEvents,
    		use,
    		className,
    		style,
    		forId,
    		floatAbove,
    		required,
    		wrapped,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		inputProps,
    		previousFloatAbove,
    		previousRequired,
    		addClass,
    		removeClass,
    		addStyle,
    		removeStyle,
    		shake,
    		float,
    		setRequired,
    		getWidth,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) _a = $$new_props._a;
    		if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
    		if ('forId' in $$props) $$invalidate(5, forId = $$new_props.forId);
    		if ('floatAbove' in $$props) $$invalidate(0, floatAbove = $$new_props.floatAbove);
    		if ('required' in $$props) $$invalidate(1, required = $$new_props.required);
    		if ('wrapped' in $$props) $$invalidate(6, wrapped = $$new_props.wrapped);
    		if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(18, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(8, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(9, internalStyles = $$new_props.internalStyles);
    		if ('inputProps' in $$props) $$invalidate(11, inputProps = $$new_props.inputProps);
    		if ('previousFloatAbove' in $$props) $$invalidate(19, previousFloatAbove = $$new_props.previousFloatAbove);
    		if ('previousRequired' in $$props) $$invalidate(20, previousRequired = $$new_props.previousRequired);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*instance, previousFloatAbove, floatAbove*/ 786433) {
    			if (instance && previousFloatAbove !== floatAbove) {
    				$$invalidate(19, previousFloatAbove = floatAbove);
    				instance.float(floatAbove);
    			}
    		}

    		if ($$self.$$.dirty & /*instance, previousRequired, required*/ 1310722) {
    			if (instance && previousRequired !== required) {
    				$$invalidate(20, previousRequired = required);
    				instance.setRequired(required);
    			}
    		}
    	};

    	return [
    		floatAbove,
    		required,
    		use,
    		className,
    		style,
    		forId,
    		wrapped,
    		element,
    		internalClasses,
    		internalStyles,
    		forwardEvents,
    		inputProps,
    		$$restProps,
    		shake,
    		float,
    		setRequired,
    		getWidth,
    		getElement,
    		instance,
    		previousFloatAbove,
    		previousRequired,
    		$$scope,
    		slots,
    		span_binding,
    		label_binding
    	];
    }

    class FloatingLabel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$o, create_fragment$1I, safe_not_equal, {
    			use: 2,
    			class: 3,
    			style: 4,
    			for: 5,
    			floatAbove: 0,
    			required: 1,
    			wrapped: 6,
    			shake: 13,
    			float: 14,
    			setRequired: 15,
    			getWidth: 16,
    			getElement: 17
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FloatingLabel",
    			options,
    			id: create_fragment$1I.name
    		});
    	}

    	get use() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get for() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set for(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get floatAbove() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set floatAbove(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wrapped() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wrapped(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shake() {
    		return this.$$.ctx[13];
    	}

    	set shake(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get float() {
    		return this.$$.ctx[14];
    	}

    	set float(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setRequired() {
    		return this.$$.ctx[15];
    	}

    	set setRequired(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getWidth() {
    		return this.$$.ctx[16];
    	}

    	set getWidth(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[17];
    	}

    	set getElement(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/line-ripple/dist/LineRipple.svelte generated by Svelte v3.44.3 */
    const file$1j = "node_modules/@smui/line-ripple/dist/LineRipple.svelte";

    function create_fragment$1H(ctx) {
    	let div;
    	let div_class_value;
    	let div_style_value;
    	let useActions_action;
    	let mounted;
    	let dispose;

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-line-ripple': true,
    				'mdc-line-ripple--active': /*active*/ ctx[3],
    				.../*internalClasses*/ ctx[5]
    			})
    		},
    		{
    			style: div_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$i).concat([/*style*/ ctx[2]]).join(' ')
    		},
    		/*$$restProps*/ ctx[8]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			set_attributes(div, div_data);
    			add_location(div, file$1j, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[13](div);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				dirty & /*className, active, internalClasses*/ 42 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-line-ripple': true,
    					'mdc-line-ripple--active': /*active*/ ctx[3],
    					.../*internalClasses*/ ctx[5]
    				})) && { class: div_class_value },
    				dirty & /*internalStyles, style*/ 68 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$i).concat([/*style*/ ctx[2]]).join(' ')) && { style: div_style_value },
    				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[13](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$i = ([name, value]) => `${name}: ${value};`;

    function instance_1$n($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","active","activate","deactivate","setRippleCenter","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LineRipple', slots, []);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { active = false } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};

    	onMount(() => {
    		instance = new MDCLineRippleFoundation({
    				addClass,
    				removeClass,
    				hasClass,
    				setStyle: addStyle,
    				registerEventHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
    				deregisterEventHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler)
    			});

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(5, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(5, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(6, internalStyles);
    			} else {
    				$$invalidate(6, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function activate() {
    		instance.activate();
    	}

    	function deactivate() {
    		instance.deactivate();
    	}

    	function setRippleCenter(xCoordinate) {
    		instance.setRippleCenter(xCoordinate);
    	}

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
    		if ('active' in $$new_props) $$invalidate(3, active = $$new_props.active);
    	};

    	$$self.$capture_state = () => ({
    		MDCLineRippleFoundation,
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		style,
    		active,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		hasClass,
    		addClass,
    		removeClass,
    		addStyle,
    		activate,
    		deactivate,
    		setRippleCenter,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
    		if ('active' in $$props) $$invalidate(3, active = $$new_props.active);
    		if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
    		if ('instance' in $$props) instance = $$new_props.instance;
    		if ('internalClasses' in $$props) $$invalidate(5, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(6, internalStyles = $$new_props.internalStyles);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		style,
    		active,
    		element,
    		internalClasses,
    		internalStyles,
    		forwardEvents,
    		$$restProps,
    		activate,
    		deactivate,
    		setRippleCenter,
    		getElement,
    		div_binding
    	];
    }

    class LineRipple extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$n, create_fragment$1H, safe_not_equal, {
    			use: 0,
    			class: 1,
    			style: 2,
    			active: 3,
    			activate: 9,
    			deactivate: 10,
    			setRippleCenter: 11,
    			getElement: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LineRipple",
    			options,
    			id: create_fragment$1H.name
    		});
    	}

    	get use() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activate() {
    		return this.$$.ctx[9];
    	}

    	set activate(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deactivate() {
    		return this.$$.ctx[10];
    	}

    	set deactivate(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setRippleCenter() {
    		return this.$$.ctx[11];
    	}

    	set setRippleCenter(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[12];
    	}

    	set getElement(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/notched-outline/dist/NotchedOutline.svelte generated by Svelte v3.44.3 */
    const file$1i = "node_modules/@smui/notched-outline/dist/NotchedOutline.svelte";

    // (17:2) {#if !noLabel}
    function create_if_block$K(ctx) {
    	let div;
    	let div_style_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "mdc-notched-outline__notch");
    			attr_dev(div, "style", div_style_value = Object.entries(/*notchStyles*/ ctx[7]).map(func$h).join(' '));
    			add_location(div, file$1i, 17, 4, 496);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*notchStyles*/ 128 && div_style_value !== (div_style_value = Object.entries(/*notchStyles*/ ctx[7]).map(func$h).join(' '))) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$K.name,
    		type: "if",
    		source: "(17:2) {#if !noLabel}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1G(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let div2_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*noLabel*/ ctx[3] && create_if_block$K(ctx);

    	let div2_levels = [
    		{
    			class: div2_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-notched-outline': true,
    				'mdc-notched-outline--notched': /*notched*/ ctx[2],
    				'mdc-notched-outline--no-label': /*noLabel*/ ctx[3],
    				.../*internalClasses*/ ctx[6]
    			})
    		},
    		/*$$restProps*/ ctx[9]
    	];

    	let div2_data = {};

    	for (let i = 0; i < div2_levels.length; i += 1) {
    		div2_data = assign(div2_data, div2_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div1 = element("div");
    			attr_dev(div0, "class", "mdc-notched-outline__leading");
    			add_location(div0, file$1i, 15, 2, 430);
    			attr_dev(div1, "class", "mdc-notched-outline__trailing");
    			add_location(div1, file$1i, 26, 2, 699);
    			set_attributes(div2, div2_data);
    			add_location(div2, file$1i, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t0);
    			if (if_block) if_block.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			/*div2_binding*/ ctx[15](div2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div2, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[8].call(null, div2)),
    					listen_dev(div2, "SMUIFloatingLabel:mount", /*SMUIFloatingLabel_mount_handler*/ ctx[16], false, false, false),
    					listen_dev(div2, "SMUIFloatingLabel:unmount", /*SMUIFloatingLabel_unmount_handler*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*noLabel*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*noLabel*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$K(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div2, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
    				(!current || dirty & /*className, notched, noLabel, internalClasses*/ 78 && div2_class_value !== (div2_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-notched-outline': true,
    					'mdc-notched-outline--notched': /*notched*/ ctx[2],
    					'mdc-notched-outline--no-label': /*noLabel*/ ctx[3],
    					.../*internalClasses*/ ctx[6]
    				}))) && { class: div2_class_value },
    				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			/*div2_binding*/ ctx[15](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$h = ([name, value]) => `${name}: ${value};`;

    function instance_1$m($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","notched","noLabel","notch","closeNotch","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotchedOutline', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { notched = false } = $$props;
    	let { noLabel = false } = $$props;
    	let element;
    	let instance;
    	let floatingLabel;
    	let internalClasses = {};
    	let notchStyles = {};

    	onMount(() => {
    		instance = new MDCNotchedOutlineFoundation({
    				addClass,
    				removeClass,
    				setNotchWidthProperty: width => addNotchStyle('width', width + 'px'),
    				removeNotchWidthProperty: () => removeNotchStyle('width')
    			});

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(6, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(6, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addNotchStyle(name, value) {
    		if (notchStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete notchStyles[name];
    				$$invalidate(7, notchStyles);
    			} else {
    				$$invalidate(7, notchStyles[name] = value, notchStyles);
    			}
    		}
    	}

    	function removeNotchStyle(name) {
    		if (name in notchStyles) {
    			delete notchStyles[name];
    			$$invalidate(7, notchStyles);
    		}
    	}

    	function notch(notchWidth) {
    		instance.notch(notchWidth);
    	}

    	function closeNotch() {
    		instance.closeNotch();
    	}

    	function getElement() {
    		return element;
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	const SMUIFloatingLabel_mount_handler = event => $$invalidate(4, floatingLabel = event.detail);
    	const SMUIFloatingLabel_unmount_handler = () => $$invalidate(4, floatingLabel = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('notched' in $$new_props) $$invalidate(2, notched = $$new_props.notched);
    		if ('noLabel' in $$new_props) $$invalidate(3, noLabel = $$new_props.noLabel);
    		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCNotchedOutlineFoundation,
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		notched,
    		noLabel,
    		element,
    		instance,
    		floatingLabel,
    		internalClasses,
    		notchStyles,
    		addClass,
    		removeClass,
    		addNotchStyle,
    		removeNotchStyle,
    		notch,
    		closeNotch,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('notched' in $$props) $$invalidate(2, notched = $$new_props.notched);
    		if ('noLabel' in $$props) $$invalidate(3, noLabel = $$new_props.noLabel);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('instance' in $$props) instance = $$new_props.instance;
    		if ('floatingLabel' in $$props) $$invalidate(4, floatingLabel = $$new_props.floatingLabel);
    		if ('internalClasses' in $$props) $$invalidate(6, internalClasses = $$new_props.internalClasses);
    		if ('notchStyles' in $$props) $$invalidate(7, notchStyles = $$new_props.notchStyles);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*floatingLabel*/ 16) {
    			if (floatingLabel) {
    				floatingLabel.addStyle('transition-duration', '0s');
    				addClass('mdc-notched-outline--upgraded');

    				requestAnimationFrame(() => {
    					if (floatingLabel) {
    						floatingLabel.removeStyle('transition-duration');
    					}
    				});
    			} else {
    				removeClass('mdc-notched-outline--upgraded');
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		notched,
    		noLabel,
    		floatingLabel,
    		element,
    		internalClasses,
    		notchStyles,
    		forwardEvents,
    		$$restProps,
    		notch,
    		closeNotch,
    		getElement,
    		$$scope,
    		slots,
    		div2_binding,
    		SMUIFloatingLabel_mount_handler,
    		SMUIFloatingLabel_unmount_handler
    	];
    }

    class NotchedOutline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$m, create_fragment$1G, safe_not_equal, {
    			use: 0,
    			class: 1,
    			notched: 2,
    			noLabel: 3,
    			notch: 10,
    			closeNotch: 11,
    			getElement: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotchedOutline",
    			options,
    			id: create_fragment$1G.name
    		});
    	}

    	get use() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notched() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set notched(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noLabel() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noLabel(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notch() {
    		return this.$$.ctx[10];
    	}

    	set notch(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeNotch() {
    		return this.$$.ctx[11];
    	}

    	set closeNotch(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[12];
    	}

    	set getElement(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var HelperLine = classAdderBuilder({
        class: 'mdc-text-field-helper-line',
        component: Div,
    });

    var Prefix = classAdderBuilder({
        class: 'mdc-text-field__affix mdc-text-field__affix--prefix',
        component: Span,
    });

    var Suffix = classAdderBuilder({
        class: 'mdc-text-field__affix mdc-text-field__affix--suffix',
        component: Span,
    });

    /* node_modules/@smui/textfield/dist/Input.svelte generated by Svelte v3.44.3 */
    const file$1h = "node_modules/@smui/textfield/dist/Input.svelte";

    function create_fragment$1F(ctx) {
    	let input;
    	let input_class_value;
    	let useActions_action;
    	let mounted;
    	let dispose;

    	let input_levels = [
    		{
    			class: input_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-text-field__input': true
    			})
    		},
    		{ type: /*type*/ ctx[2] },
    		{ placeholder: /*placeholder*/ ctx[3] },
    		/*valueProp*/ ctx[4],
    		/*internalAttrs*/ ctx[6],
    		/*$$restProps*/ ctx[10]
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			set_attributes(input, input_data);
    			add_location(input, file$1h, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			if (input.autofocus) input.focus();
    			/*input_binding*/ ctx[26](input);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, input, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, input)),
    					listen_dev(input, "input", /*input_handler*/ ctx[27], false, false, false),
    					listen_dev(input, "change", /*changeHandler*/ ctx[9], false, false, false),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[24], false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[25], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				dirty & /*className*/ 2 && input_class_value !== (input_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-text-field__input': true
    				})) && { class: input_class_value },
    				dirty & /*type*/ 4 && { type: /*type*/ ctx[2] },
    				dirty & /*placeholder*/ 8 && { placeholder: /*placeholder*/ ctx[3] },
    				dirty & /*valueProp*/ 16 && /*valueProp*/ ctx[4],
    				dirty & /*internalAttrs*/ 64 && /*internalAttrs*/ ctx[6],
    				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			/*input_binding*/ ctx[26](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function toNumber(value) {
    	if (value === '') {
    		const nan = new Number(Number.NaN);
    		nan.length = 0;
    		return nan;
    	}

    	return +value;
    }

    function instance$1j($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","type","placeholder","value","files","dirty","invalid","updateInvalid","emptyValueNull","emptyValueUndefined","getAttr","addAttr","removeAttr","focus","blur","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Input', slots, []);
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { type = 'text' } = $$props;
    	let { placeholder = ' ' } = $$props;
    	let { value = uninitializedValue } = $$props;
    	const valueUninitialized = isUninitializedValue(value);

    	if (valueUninitialized) {
    		value = '';
    	}

    	let { files = null } = $$props;
    	let { dirty = false } = $$props;
    	let { invalid = false } = $$props;
    	let { updateInvalid = true } = $$props;
    	let { emptyValueNull = value === null } = $$props;

    	if (valueUninitialized && emptyValueNull) {
    		value = null;
    	}

    	let { emptyValueUndefined = value === undefined } = $$props;

    	if (valueUninitialized && emptyValueUndefined) {
    		value = undefined;
    	}

    	let element;
    	let internalAttrs = {};
    	let valueProp = {};

    	onMount(() => {
    		if (updateInvalid) {
    			$$invalidate(14, invalid = element.matches(':invalid'));
    		}
    	});

    	function valueUpdater(e) {
    		if (type === 'file') {
    			$$invalidate(12, files = e.currentTarget.files);
    			return;
    		}

    		if (e.currentTarget.value === '' && emptyValueNull) {
    			$$invalidate(11, value = null);
    			return;
    		}

    		if (e.currentTarget.value === '' && emptyValueUndefined) {
    			$$invalidate(11, value = undefined);
    			return;
    		}

    		switch (type) {
    			case 'number':
    			case 'range':
    				$$invalidate(11, value = toNumber(e.currentTarget.value));
    				break;
    			default:
    				$$invalidate(11, value = e.currentTarget.value);
    				break;
    		}
    	}

    	function changeHandler(e) {
    		if (type === 'file' || type === 'range') {
    			valueUpdater(e);
    		}

    		$$invalidate(13, dirty = true);

    		if (updateInvalid) {
    			$$invalidate(14, invalid = element.matches(':invalid'));
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(6, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function removeAttr(name) {
    		if (!(name in internalAttrs) || internalAttrs[name] != null) {
    			$$invalidate(6, internalAttrs[name] = undefined, internalAttrs);
    		}
    	}

    	function focus() {
    		getElement().focus();
    	}

    	function blur() {
    		getElement().blur();
    	}

    	function getElement() {
    		return element;
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	const input_handler = e => type !== 'file' && valueUpdater(e);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('type' in $$new_props) $$invalidate(2, type = $$new_props.type);
    		if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
    		if ('value' in $$new_props) $$invalidate(11, value = $$new_props.value);
    		if ('files' in $$new_props) $$invalidate(12, files = $$new_props.files);
    		if ('dirty' in $$new_props) $$invalidate(13, dirty = $$new_props.dirty);
    		if ('invalid' in $$new_props) $$invalidate(14, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$new_props) $$invalidate(15, updateInvalid = $$new_props.updateInvalid);
    		if ('emptyValueNull' in $$new_props) $$invalidate(16, emptyValueNull = $$new_props.emptyValueNull);
    		if ('emptyValueUndefined' in $$new_props) $$invalidate(17, emptyValueUndefined = $$new_props.emptyValueUndefined);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		type,
    		placeholder,
    		value,
    		valueUninitialized,
    		files,
    		dirty,
    		invalid,
    		updateInvalid,
    		emptyValueNull,
    		emptyValueUndefined,
    		element,
    		internalAttrs,
    		valueProp,
    		toNumber,
    		valueUpdater,
    		changeHandler,
    		getAttr,
    		addAttr,
    		removeAttr,
    		focus,
    		blur,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('type' in $$props) $$invalidate(2, type = $$new_props.type);
    		if ('placeholder' in $$props) $$invalidate(3, placeholder = $$new_props.placeholder);
    		if ('value' in $$props) $$invalidate(11, value = $$new_props.value);
    		if ('files' in $$props) $$invalidate(12, files = $$new_props.files);
    		if ('dirty' in $$props) $$invalidate(13, dirty = $$new_props.dirty);
    		if ('invalid' in $$props) $$invalidate(14, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$props) $$invalidate(15, updateInvalid = $$new_props.updateInvalid);
    		if ('emptyValueNull' in $$props) $$invalidate(16, emptyValueNull = $$new_props.emptyValueNull);
    		if ('emptyValueUndefined' in $$props) $$invalidate(17, emptyValueUndefined = $$new_props.emptyValueUndefined);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('internalAttrs' in $$props) $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
    		if ('valueProp' in $$props) $$invalidate(4, valueProp = $$new_props.valueProp);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*type, valueProp, value*/ 2068) {
    			if (type === 'file') {
    				delete valueProp.value;
    				(($$invalidate(4, valueProp), $$invalidate(2, type)), $$invalidate(11, value));
    			} else {
    				$$invalidate(4, valueProp.value = value == null ? '' : value, valueProp);
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		type,
    		placeholder,
    		valueProp,
    		element,
    		internalAttrs,
    		forwardEvents,
    		valueUpdater,
    		changeHandler,
    		$$restProps,
    		value,
    		files,
    		dirty,
    		invalid,
    		updateInvalid,
    		emptyValueNull,
    		emptyValueUndefined,
    		getAttr,
    		addAttr,
    		removeAttr,
    		focus,
    		blur,
    		getElement,
    		blur_handler,
    		focus_handler,
    		input_binding,
    		input_handler
    	];
    }

    class Input$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1j, create_fragment$1F, safe_not_equal, {
    			use: 0,
    			class: 1,
    			type: 2,
    			placeholder: 3,
    			value: 11,
    			files: 12,
    			dirty: 13,
    			invalid: 14,
    			updateInvalid: 15,
    			emptyValueNull: 16,
    			emptyValueUndefined: 17,
    			getAttr: 18,
    			addAttr: 19,
    			removeAttr: 20,
    			focus: 21,
    			blur: 22,
    			getElement: 23
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Input",
    			options,
    			id: create_fragment$1F.name
    		});
    	}

    	get use() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get files() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set files(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dirty() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dirty(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateInvalid() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateInvalid(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get emptyValueNull() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set emptyValueNull(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get emptyValueUndefined() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set emptyValueUndefined(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getAttr() {
    		return this.$$.ctx[18];
    	}

    	set getAttr(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get addAttr() {
    		return this.$$.ctx[19];
    	}

    	set addAttr(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get removeAttr() {
    		return this.$$.ctx[20];
    	}

    	set removeAttr(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[21];
    	}

    	set focus(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blur() {
    		return this.$$.ctx[22];
    	}

    	set blur(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[23];
    	}

    	set getElement(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/textfield/dist/Textarea.svelte generated by Svelte v3.44.3 */
    const file$1g = "node_modules/@smui/textfield/dist/Textarea.svelte";

    function create_fragment$1E(ctx) {
    	let textarea;
    	let textarea_class_value;
    	let textarea_style_value;
    	let useActions_action;
    	let mounted;
    	let dispose;

    	let textarea_levels = [
    		{
    			class: textarea_class_value = classMap({
    				[/*className*/ ctx[2]]: true,
    				'mdc-text-field__input': true
    			})
    		},
    		{
    			style: textarea_style_value = `${/*resizable*/ ctx[4] ? '' : 'resize: none; '}${/*style*/ ctx[3]}`
    		},
    		/*internalAttrs*/ ctx[6],
    		/*$$restProps*/ ctx[9]
    	];

    	let textarea_data = {};

    	for (let i = 0; i < textarea_levels.length; i += 1) {
    		textarea_data = assign(textarea_data, textarea_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			textarea = element("textarea");
    			set_attributes(textarea, textarea_data);
    			add_location(textarea, file$1g, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textarea, anchor);
    			if (textarea.autofocus) textarea.focus();
    			/*textarea_binding*/ ctx[21](textarea);
    			set_input_value(textarea, /*value*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, textarea, /*use*/ ctx[1])),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, textarea)),
    					listen_dev(textarea, "change", /*changeHandler*/ ctx[8], false, false, false),
    					listen_dev(textarea, "blur", /*blur_handler*/ ctx[19], false, false, false),
    					listen_dev(textarea, "focus", /*focus_handler*/ ctx[20], false, false, false),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[22])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
    				dirty & /*className*/ 4 && textarea_class_value !== (textarea_class_value = classMap({
    					[/*className*/ ctx[2]]: true,
    					'mdc-text-field__input': true
    				})) && { class: textarea_class_value },
    				dirty & /*resizable, style*/ 24 && textarea_style_value !== (textarea_style_value = `${/*resizable*/ ctx[4] ? '' : 'resize: none; '}${/*style*/ ctx[3]}`) && { style: textarea_style_value },
    				dirty & /*internalAttrs*/ 64 && /*internalAttrs*/ ctx[6],
    				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);

    			if (dirty & /*value*/ 1) {
    				set_input_value(textarea, /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textarea);
    			/*textarea_binding*/ ctx[21](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1i($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","value","dirty","invalid","updateInvalid","resizable","getAttr","addAttr","removeAttr","focus","blur","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Textarea', slots, []);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { value = '' } = $$props;
    	let { dirty = false } = $$props;
    	let { invalid = false } = $$props;
    	let { updateInvalid = true } = $$props;
    	let { resizable = true } = $$props;
    	let element;
    	let internalAttrs = {};

    	onMount(() => {
    		if (updateInvalid) {
    			$$invalidate(11, invalid = element.matches(':invalid'));
    		}
    	});

    	function changeHandler() {
    		$$invalidate(10, dirty = true);

    		if (updateInvalid) {
    			$$invalidate(11, invalid = element.matches(':invalid'));
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(6, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function removeAttr(name) {
    		if (!(name in internalAttrs) || internalAttrs[name] != null) {
    			$$invalidate(6, internalAttrs[name] = undefined, internalAttrs);
    		}
    	}

    	function focus() {
    		getElement().focus();
    	}

    	function blur() {
    		getElement().blur();
    	}

    	function getElement() {
    		return element;
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function textarea_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	function textarea_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('dirty' in $$new_props) $$invalidate(10, dirty = $$new_props.dirty);
    		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$new_props) $$invalidate(12, updateInvalid = $$new_props.updateInvalid);
    		if ('resizable' in $$new_props) $$invalidate(4, resizable = $$new_props.resizable);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		style,
    		value,
    		dirty,
    		invalid,
    		updateInvalid,
    		resizable,
    		element,
    		internalAttrs,
    		changeHandler,
    		getAttr,
    		addAttr,
    		removeAttr,
    		focus,
    		blur,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(3, style = $$new_props.style);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('dirty' in $$props) $$invalidate(10, dirty = $$new_props.dirty);
    		if ('invalid' in $$props) $$invalidate(11, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$props) $$invalidate(12, updateInvalid = $$new_props.updateInvalid);
    		if ('resizable' in $$props) $$invalidate(4, resizable = $$new_props.resizable);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('internalAttrs' in $$props) $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		use,
    		className,
    		style,
    		resizable,
    		element,
    		internalAttrs,
    		forwardEvents,
    		changeHandler,
    		$$restProps,
    		dirty,
    		invalid,
    		updateInvalid,
    		getAttr,
    		addAttr,
    		removeAttr,
    		focus,
    		blur,
    		getElement,
    		blur_handler,
    		focus_handler,
    		textarea_binding,
    		textarea_input_handler
    	];
    }

    class Textarea extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1i, create_fragment$1E, safe_not_equal, {
    			use: 1,
    			class: 2,
    			style: 3,
    			value: 0,
    			dirty: 10,
    			invalid: 11,
    			updateInvalid: 12,
    			resizable: 4,
    			getAttr: 13,
    			addAttr: 14,
    			removeAttr: 15,
    			focus: 16,
    			blur: 17,
    			getElement: 18
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Textarea",
    			options,
    			id: create_fragment$1E.name
    		});
    	}

    	get use() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dirty() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dirty(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateInvalid() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateInvalid(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get resizable() {
    		throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set resizable(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getAttr() {
    		return this.$$.ctx[13];
    	}

    	set getAttr(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get addAttr() {
    		return this.$$.ctx[14];
    	}

    	set addAttr(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get removeAttr() {
    		return this.$$.ctx[15];
    	}

    	set removeAttr(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[16];
    	}

    	set focus(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blur() {
    		return this.$$.ctx[17];
    	}

    	set blur(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[18];
    	}

    	set getElement(value) {
    		throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/textfield/dist/Textfield.svelte generated by Svelte v3.44.3 */

    const { Error: Error_1$3 } = globals;
    const file$1f = "node_modules/@smui/textfield/dist/Textfield.svelte";
    const get_helper_slot_changes = dirty => ({});
    const get_helper_slot_context = ctx => ({});
    const get_ripple_slot_changes = dirty => ({});
    const get_ripple_slot_context = ctx => ({});
    const get_trailingIcon_slot_changes_1 = dirty => ({});
    const get_trailingIcon_slot_context_1 = ctx => ({});
    const get_leadingIcon_slot_changes_1 = dirty => ({});
    const get_leadingIcon_slot_context_1 = ctx => ({});
    const get_label_slot_changes_2 = dirty => ({});
    const get_label_slot_context_2 = ctx => ({});
    const get_trailingIcon_slot_changes = dirty => ({});
    const get_trailingIcon_slot_context = ctx => ({});
    const get_suffix_slot_changes = dirty => ({});
    const get_suffix_slot_context = ctx => ({});
    const get_prefix_slot_changes = dirty => ({});
    const get_prefix_slot_context = ctx => ({});
    const get_internalCounter_slot_changes = dirty => ({});
    const get_internalCounter_slot_context = ctx => ({});
    const get_leadingIcon_slot_changes$1 = dirty => ({});
    const get_leadingIcon_slot_context$1 = ctx => ({});
    const get_label_slot_changes_1$1 = dirty => ({});
    const get_label_slot_context_1$1 = ctx => ({});
    const get_label_slot_changes$2 = dirty => ({});
    const get_label_slot_context$2 = ctx => ({});

    // (163:0) {:else}
    function create_else_block_1$7(ctx) {
    	let div;
    	let t0;
    	let contextfragment0;
    	let t1;
    	let t2;
    	let contextfragment1;
    	let t3;
    	let div_class_value;
    	let div_style_value;
    	let Ripple_action;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const label_slot_template = /*#slots*/ ctx[51].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[90], get_label_slot_context_2);

    	contextfragment0 = new ContextFragment({
    			props: {
    				key: "SMUI:textfield:icon:leading",
    				value: true,
    				$$slots: { default: [create_default_slot_9$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[51].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[90], null);

    	contextfragment1 = new ContextFragment({
    			props: {
    				key: "SMUI:textfield:icon:leading",
    				value: false,
    				$$slots: { default: [create_default_slot_8$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const ripple_slot_template = /*#slots*/ ctx[51].ripple;
    	const ripple_slot = create_slot(ripple_slot_template, ctx, /*$$scope*/ ctx[90], get_ripple_slot_context);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[9]]: true,
    				'mdc-text-field': true,
    				'mdc-text-field--disabled': /*disabled*/ ctx[12],
    				'mdc-text-field--textarea': /*textarea*/ ctx[14],
    				'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
    				'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
    				'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
    				'mdc-text-field--no-label': /*noLabel*/ ctx[16] || !/*$$slots*/ ctx[42].label,
    				'mdc-text-field--with-leading-icon': /*$$slots*/ ctx[42].leadingIcon,
    				'mdc-text-field--with-trailing-icon': /*$$slots*/ ctx[42].trailingIcon,
    				'mdc-text-field--invalid': /*invalid*/ ctx[1],
    				.../*internalClasses*/ ctx[25]
    			})
    		},
    		{
    			style: div_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func_1$1).concat([/*style*/ ctx[10]]).join(' ')
    		},
    		exclude(/*$$restProps*/ ctx[41], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (label_slot) label_slot.c();
    			t0 = space();
    			create_component(contextfragment0.$$.fragment);
    			t1 = space();
    			if (default_slot) default_slot.c();
    			t2 = space();
    			create_component(contextfragment1.$$.fragment);
    			t3 = space();
    			if (ripple_slot) ripple_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$1f, 163, 2, 5417);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (label_slot) {
    				label_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			mount_component(contextfragment0, div, null);
    			append_dev(div, t1);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t2);
    			mount_component(contextfragment1, div, null);
    			append_dev(div, t3);

    			if (ripple_slot) {
    				ripple_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[80](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Ripple_action = Ripple.call(null, div, {
    						ripple: /*ripple*/ ctx[11],
    						unbounded: false,
    						addClass: /*addClass*/ ctx[38],
    						removeClass: /*removeClass*/ ctx[39],
    						addStyle: /*addStyle*/ ctx[40]
    					})),
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[8])),
    					action_destroyer(/*forwardEvents*/ ctx[34].call(null, div)),
    					listen_dev(div, "SMUITextfieldLeadingIcon:mount", /*SMUITextfieldLeadingIcon_mount_handler_1*/ ctx[81], false, false, false),
    					listen_dev(div, "SMUITextfieldLeadingIcon:unmount", /*SMUITextfieldLeadingIcon_unmount_handler_1*/ ctx[82], false, false, false),
    					listen_dev(div, "SMUITextfieldTrailingIcon:mount", /*SMUITextfieldTrailingIcon_mount_handler_1*/ ctx[83], false, false, false),
    					listen_dev(div, "SMUITextfieldTrailingIcon:unmount", /*SMUITextfieldTrailingIcon_unmount_handler_1*/ ctx[84], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (label_slot) {
    				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						label_slot,
    						label_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[90], dirty, get_label_slot_changes_2),
    						get_label_slot_context_2
    					);
    				}
    			}

    			const contextfragment0_changes = {};

    			if (dirty[2] & /*$$scope*/ 268435456) {
    				contextfragment0_changes.$$scope = { dirty, ctx };
    			}

    			contextfragment0.$set(contextfragment0_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[90], dirty, null),
    						null
    					);
    				}
    			}

    			const contextfragment1_changes = {};

    			if (dirty[2] & /*$$scope*/ 268435456) {
    				contextfragment1_changes.$$scope = { dirty, ctx };
    			}

    			contextfragment1.$set(contextfragment1_changes);

    			if (ripple_slot) {
    				if (ripple_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						ripple_slot,
    						ripple_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(ripple_slot_template, /*$$scope*/ ctx[90], dirty, get_ripple_slot_changes),
    						get_ripple_slot_context
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty[0] & /*className, disabled, textarea, variant, noLabel, invalid, internalClasses*/ 33673730 | dirty[1] & /*$$slots*/ 2048 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[9]]: true,
    					'mdc-text-field': true,
    					'mdc-text-field--disabled': /*disabled*/ ctx[12],
    					'mdc-text-field--textarea': /*textarea*/ ctx[14],
    					'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
    					'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
    					'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
    					'mdc-text-field--no-label': /*noLabel*/ ctx[16] || !/*$$slots*/ ctx[42].label,
    					'mdc-text-field--with-leading-icon': /*$$slots*/ ctx[42].leadingIcon,
    					'mdc-text-field--with-trailing-icon': /*$$slots*/ ctx[42].trailingIcon,
    					'mdc-text-field--invalid': /*invalid*/ ctx[1],
    					.../*internalClasses*/ ctx[25]
    				}))) && { class: div_class_value },
    				(!current || dirty[0] & /*internalStyles, style*/ 67109888 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func_1$1).concat([/*style*/ ctx[10]]).join(' '))) && { style: div_style_value },
    				dirty[1] & /*$$restProps*/ 1024 && exclude(/*$$restProps*/ ctx[41], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
    			]));

    			if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*ripple*/ 2048) Ripple_action.update.call(null, {
    				ripple: /*ripple*/ ctx[11],
    				unbounded: false,
    				addClass: /*addClass*/ ctx[38],
    				removeClass: /*removeClass*/ ctx[39],
    				addStyle: /*addStyle*/ ctx[40]
    			});

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 256) useActions_action.update.call(null, /*use*/ ctx[8]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			transition_in(contextfragment0.$$.fragment, local);
    			transition_in(default_slot, local);
    			transition_in(contextfragment1.$$.fragment, local);
    			transition_in(ripple_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			transition_out(contextfragment0.$$.fragment, local);
    			transition_out(default_slot, local);
    			transition_out(contextfragment1.$$.fragment, local);
    			transition_out(ripple_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (label_slot) label_slot.d(detaching);
    			destroy_component(contextfragment0);
    			if (default_slot) default_slot.d(detaching);
    			destroy_component(contextfragment1);
    			if (ripple_slot) ripple_slot.d(detaching);
    			/*div_binding*/ ctx[80](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$7.name,
    		type: "else",
    		source: "(163:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if valued}
    function create_if_block_1$o(ctx) {
    	let label_1;
    	let t0;
    	let t1;
    	let contextfragment0;
    	let t2;
    	let t3;
    	let current_block_type_index;
    	let if_block2;
    	let t4;
    	let contextfragment1;
    	let t5;
    	let label_1_class_value;
    	let label_1_style_value;
    	let Ripple_action;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined' && create_if_block_8(ctx);
    	let if_block1 = (/*textarea*/ ctx[14] || /*variant*/ ctx[15] === 'outlined') && create_if_block_6$3(ctx);

    	contextfragment0 = new ContextFragment({
    			props: {
    				key: "SMUI:textfield:icon:leading",
    				value: true,
    				$$slots: { default: [create_default_slot_4$t] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[51].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[90], null);
    	const if_block_creators = [create_if_block_3$5, create_else_block$g];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*textarea*/ ctx[14] && typeof /*value*/ ctx[0] === 'string') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	contextfragment1 = new ContextFragment({
    			props: {
    				key: "SMUI:textfield:icon:leading",
    				value: false,
    				$$slots: { default: [create_default_slot_1$G] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block3 = !/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined' && /*ripple*/ ctx[11] && create_if_block_2$8(ctx);

    	let label_1_levels = [
    		{
    			class: label_1_class_value = classMap({
    				[/*className*/ ctx[9]]: true,
    				'mdc-text-field': true,
    				'mdc-text-field--disabled': /*disabled*/ ctx[12],
    				'mdc-text-field--textarea': /*textarea*/ ctx[14],
    				'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
    				'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
    				'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
    				'mdc-text-field--no-label': /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[42].label,
    				'mdc-text-field--label-floating': /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '',
    				'mdc-text-field--with-leading-icon': /*isUninitializedValue*/ ctx[35](/*withLeadingIcon*/ ctx[22])
    				? /*$$slots*/ ctx[42].leadingIcon
    				: /*withLeadingIcon*/ ctx[22],
    				'mdc-text-field--with-trailing-icon': /*isUninitializedValue*/ ctx[35](/*withTrailingIcon*/ ctx[23])
    				? /*$$slots*/ ctx[42].trailingIcon
    				: /*withTrailingIcon*/ ctx[23],
    				'mdc-text-field--with-internal-counter': /*textarea*/ ctx[14] && /*$$slots*/ ctx[42].internalCounter,
    				'mdc-text-field--invalid': /*invalid*/ ctx[1],
    				.../*internalClasses*/ ctx[25]
    			})
    		},
    		{
    			style: label_1_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func$g).concat([/*style*/ ctx[10]]).join(' ')
    		},
    		{
    			for: /* suppress a11y warning, since this is wrapped */ undefined
    		},
    		exclude(/*$$restProps*/ ctx[41], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
    	];

    	let label_1_data = {};

    	for (let i = 0; i < label_1_levels.length; i += 1) {
    		label_1_data = assign(label_1_data, label_1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			create_component(contextfragment0.$$.fragment);
    			t2 = space();
    			if (default_slot) default_slot.c();
    			t3 = space();
    			if_block2.c();
    			t4 = space();
    			create_component(contextfragment1.$$.fragment);
    			t5 = space();
    			if (if_block3) if_block3.c();
    			set_attributes(label_1, label_1_data);
    			add_location(label_1, file$1f, 1, 2, 15);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label_1, anchor);
    			if (if_block0) if_block0.m(label_1, null);
    			append_dev(label_1, t0);
    			if (if_block1) if_block1.m(label_1, null);
    			append_dev(label_1, t1);
    			mount_component(contextfragment0, label_1, null);
    			append_dev(label_1, t2);

    			if (default_slot) {
    				default_slot.m(label_1, null);
    			}

    			append_dev(label_1, t3);
    			if_blocks[current_block_type_index].m(label_1, null);
    			append_dev(label_1, t4);
    			mount_component(contextfragment1, label_1, null);
    			append_dev(label_1, t5);
    			if (if_block3) if_block3.m(label_1, null);
    			/*label_1_binding*/ ctx[73](label_1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(Ripple_action = Ripple.call(null, label_1, {
    						ripple: !/*textarea*/ ctx[14] && /*variant*/ ctx[15] === 'filled',
    						unbounded: false,
    						addClass: /*addClass*/ ctx[38],
    						removeClass: /*removeClass*/ ctx[39],
    						addStyle: /*addStyle*/ ctx[40],
    						eventTarget: /*inputElement*/ ctx[33],
    						activeTarget: /*inputElement*/ ctx[33],
    						initPromise: /*initPromise*/ ctx[37]
    					})),
    					action_destroyer(useActions_action = useActions.call(null, label_1, /*use*/ ctx[8])),
    					action_destroyer(/*forwardEvents*/ ctx[34].call(null, label_1)),
    					listen_dev(label_1, "SMUITextfieldLeadingIcon:mount", /*SMUITextfieldLeadingIcon_mount_handler*/ ctx[74], false, false, false),
    					listen_dev(label_1, "SMUITextfieldLeadingIcon:unmount", /*SMUITextfieldLeadingIcon_unmount_handler*/ ctx[75], false, false, false),
    					listen_dev(label_1, "SMUITextfieldTrailingIcon:mount", /*SMUITextfieldTrailingIcon_mount_handler*/ ctx[76], false, false, false),
    					listen_dev(label_1, "SMUITextfieldTrailingIcon:unmount", /*SMUITextfieldTrailingIcon_unmount_handler*/ ctx[77], false, false, false),
    					listen_dev(label_1, "SMUITextfieldCharacterCounter:mount", /*SMUITextfieldCharacterCounter_mount_handler*/ ctx[78], false, false, false),
    					listen_dev(label_1, "SMUITextfieldCharacterCounter:unmount", /*SMUITextfieldCharacterCounter_unmount_handler*/ ctx[79], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined') {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*textarea, variant*/ 49152) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(label_1, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*textarea*/ ctx[14] || /*variant*/ ctx[15] === 'outlined') {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*textarea, variant*/ 49152) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(label_1, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const contextfragment0_changes = {};

    			if (dirty[2] & /*$$scope*/ 268435456) {
    				contextfragment0_changes.$$scope = { dirty, ctx };
    			}

    			contextfragment0.$set(contextfragment0_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[90], dirty, null),
    						null
    					);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(label_1, t4);
    			}

    			const contextfragment1_changes = {};

    			if (dirty[2] & /*$$scope*/ 268435456) {
    				contextfragment1_changes.$$scope = { dirty, ctx };
    			}

    			contextfragment1.$set(contextfragment1_changes);

    			if (!/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined' && /*ripple*/ ctx[11]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*textarea, variant, ripple*/ 51200) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_2$8(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(label_1, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			set_attributes(label_1, label_1_data = get_spread_update(label_1_levels, [
    				(!current || dirty[0] & /*className, disabled, textarea, variant, noLabel, label, focused, value, withLeadingIcon, withTrailingIcon, invalid, internalClasses*/ 314823171 | dirty[1] & /*$$slots*/ 2048 && label_1_class_value !== (label_1_class_value = classMap({
    					[/*className*/ ctx[9]]: true,
    					'mdc-text-field': true,
    					'mdc-text-field--disabled': /*disabled*/ ctx[12],
    					'mdc-text-field--textarea': /*textarea*/ ctx[14],
    					'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
    					'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
    					'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
    					'mdc-text-field--no-label': /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[42].label,
    					'mdc-text-field--label-floating': /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '',
    					'mdc-text-field--with-leading-icon': /*isUninitializedValue*/ ctx[35](/*withLeadingIcon*/ ctx[22])
    					? /*$$slots*/ ctx[42].leadingIcon
    					: /*withLeadingIcon*/ ctx[22],
    					'mdc-text-field--with-trailing-icon': /*isUninitializedValue*/ ctx[35](/*withTrailingIcon*/ ctx[23])
    					? /*$$slots*/ ctx[42].trailingIcon
    					: /*withTrailingIcon*/ ctx[23],
    					'mdc-text-field--with-internal-counter': /*textarea*/ ctx[14] && /*$$slots*/ ctx[42].internalCounter,
    					'mdc-text-field--invalid': /*invalid*/ ctx[1],
    					.../*internalClasses*/ ctx[25]
    				}))) && { class: label_1_class_value },
    				(!current || dirty[0] & /*internalStyles, style*/ 67109888 && label_1_style_value !== (label_1_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func$g).concat([/*style*/ ctx[10]]).join(' '))) && { style: label_1_style_value },
    				{
    					for: /* suppress a11y warning, since this is wrapped */ undefined
    				},
    				dirty[1] & /*$$restProps*/ 1024 && exclude(/*$$restProps*/ ctx[41], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
    			]));

    			if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*textarea, variant*/ 49152 | dirty[1] & /*inputElement*/ 4) Ripple_action.update.call(null, {
    				ripple: !/*textarea*/ ctx[14] && /*variant*/ ctx[15] === 'filled',
    				unbounded: false,
    				addClass: /*addClass*/ ctx[38],
    				removeClass: /*removeClass*/ ctx[39],
    				addStyle: /*addStyle*/ ctx[40],
    				eventTarget: /*inputElement*/ ctx[33],
    				activeTarget: /*inputElement*/ ctx[33],
    				initPromise: /*initPromise*/ ctx[37]
    			});

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 256) useActions_action.update.call(null, /*use*/ ctx[8]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(contextfragment0.$$.fragment, local);
    			transition_in(default_slot, local);
    			transition_in(if_block2);
    			transition_in(contextfragment1.$$.fragment, local);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(contextfragment0.$$.fragment, local);
    			transition_out(default_slot, local);
    			transition_out(if_block2);
    			transition_out(contextfragment1.$$.fragment, local);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(contextfragment0);
    			if (default_slot) default_slot.d(detaching);
    			if_blocks[current_block_type_index].d();
    			destroy_component(contextfragment1);
    			if (if_block3) if_block3.d();
    			/*label_1_binding*/ ctx[73](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$o.name,
    		type: "if",
    		source: "(1:0) {#if valued}",
    		ctx
    	});

    	return block;
    }

    // (207:4) <ContextFragment key="SMUI:textfield:icon:leading" value={true}>
    function create_default_slot_9$g(ctx) {
    	let current;
    	const leadingIcon_slot_template = /*#slots*/ ctx[51].leadingIcon;
    	const leadingIcon_slot = create_slot(leadingIcon_slot_template, ctx, /*$$scope*/ ctx[90], get_leadingIcon_slot_context_1);

    	const block = {
    		c: function create() {
    			if (leadingIcon_slot) leadingIcon_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (leadingIcon_slot) {
    				leadingIcon_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (leadingIcon_slot) {
    				if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						leadingIcon_slot,
    						leadingIcon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(leadingIcon_slot_template, /*$$scope*/ ctx[90], dirty, get_leadingIcon_slot_changes_1),
    						get_leadingIcon_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(leadingIcon_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(leadingIcon_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (leadingIcon_slot) leadingIcon_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$g.name,
    		type: "slot",
    		source: "(207:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={true}>",
    		ctx
    	});

    	return block;
    }

    // (211:4) <ContextFragment key="SMUI:textfield:icon:leading" value={false}>
    function create_default_slot_8$i(ctx) {
    	let current;
    	const trailingIcon_slot_template = /*#slots*/ ctx[51].trailingIcon;
    	const trailingIcon_slot = create_slot(trailingIcon_slot_template, ctx, /*$$scope*/ ctx[90], get_trailingIcon_slot_context_1);

    	const block = {
    		c: function create() {
    			if (trailingIcon_slot) trailingIcon_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (trailingIcon_slot) {
    				trailingIcon_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (trailingIcon_slot) {
    				if (trailingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						trailingIcon_slot,
    						trailingIcon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(trailingIcon_slot_template, /*$$scope*/ ctx[90], dirty, get_trailingIcon_slot_changes_1),
    						get_trailingIcon_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trailingIcon_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trailingIcon_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (trailingIcon_slot) trailingIcon_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$i.name,
    		type: "slot",
    		source: "(211:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={false}>",
    		ctx
    	});

    	return block;
    }

    // (62:4) {#if !textarea && variant !== 'outlined'}
    function create_if_block_8(ctx) {
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*variant*/ ctx[15] === 'filled' && create_if_block_10(ctx);
    	let if_block1 = !/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[42].label) && create_if_block_9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*variant*/ ctx[15] === 'filled') {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_10(ctx);
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[42].label)) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots*/ 2048) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(62:4) {#if !textarea && variant !== 'outlined'}",
    		ctx
    	});

    	return block;
    }

    // (63:6) {#if variant === 'filled'}
    function create_if_block_10(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "mdc-text-field__ripple");
    			add_location(span, file$1f, 63, 8, 2241);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(63:6) {#if variant === 'filled'}",
    		ctx
    	});

    	return block;
    }

    // (66:6) {#if !noLabel && (label != null || $$slots.label)}
    function create_if_block_9(ctx) {
    	let floatinglabel;
    	let current;

    	const floatinglabel_spread_levels = [
    		{
    			floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== ''
    		},
    		{ required: /*required*/ ctx[13] },
    		{ wrapped: true },
    		prefixFilter(/*$$restProps*/ ctx[41], 'label$')
    	];

    	let floatinglabel_props = {
    		$$slots: { default: [create_default_slot_7$j] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    		floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
    	}

    	floatinglabel = new FloatingLabel({
    			props: floatinglabel_props,
    			$$inline: true
    		});

    	/*floatinglabel_binding*/ ctx[52](floatinglabel);

    	const block = {
    		c: function create() {
    			create_component(floatinglabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatinglabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatinglabel_changes = (dirty[0] & /*focused, value, required*/ 268443649 | dirty[1] & /*$$restProps*/ 1024)
    			? get_spread_update(floatinglabel_spread_levels, [
    					dirty[0] & /*focused, value*/ 268435457 && {
    						floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== ''
    					},
    					dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
    					floatinglabel_spread_levels[2],
    					dirty[1] & /*$$restProps*/ 1024 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'label$'))
    				])
    			: {};

    			if (dirty[0] & /*label*/ 131072 | dirty[2] & /*$$scope*/ 268435456) {
    				floatinglabel_changes.$$scope = { dirty, ctx };
    			}

    			floatinglabel.$set(floatinglabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatinglabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatinglabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*floatinglabel_binding*/ ctx[52](null);
    			destroy_component(floatinglabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(66:6) {#if !noLabel && (label != null || $$slots.label)}",
    		ctx
    	});

    	return block;
    }

    // (67:8) <FloatingLabel           bind:this={floatingLabel}           floatAbove={focused || (value != null && value !== '')}           {required}           wrapped           {...prefixFilter($$restProps, 'label$')}           >
    function create_default_slot_7$j(ctx) {
    	let t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "";
    	let t;
    	let current;
    	const label_slot_template = /*#slots*/ ctx[51].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[90], get_label_slot_context$2);

    	const block = {
    		c: function create() {
    			t = text(t_value);
    			if (label_slot) label_slot.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			if (label_slot) {
    				label_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*label*/ 131072) && t_value !== (t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "")) set_data_dev(t, t_value);

    			if (label_slot) {
    				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						label_slot,
    						label_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[90], dirty, get_label_slot_changes$2),
    						get_label_slot_context$2
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (label_slot) label_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$j.name,
    		type: "slot",
    		source: "(67:8) <FloatingLabel           bind:this={floatingLabel}           floatAbove={focused || (value != null && value !== '')}           {required}           wrapped           {...prefixFilter($$restProps, 'label$')}           >",
    		ctx
    	});

    	return block;
    }

    // (77:4) {#if textarea || variant === 'outlined'}
    function create_if_block_6$3(ctx) {
    	let notchedoutline;
    	let current;

    	const notchedoutline_spread_levels = [
    		{
    			noLabel: /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[42].label
    		},
    		prefixFilter(/*$$restProps*/ ctx[41], 'outline$')
    	];

    	let notchedoutline_props = {
    		$$slots: { default: [create_default_slot_5$q] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < notchedoutline_spread_levels.length; i += 1) {
    		notchedoutline_props = assign(notchedoutline_props, notchedoutline_spread_levels[i]);
    	}

    	notchedoutline = new NotchedOutline({
    			props: notchedoutline_props,
    			$$inline: true
    		});

    	/*notchedoutline_binding*/ ctx[54](notchedoutline);

    	const block = {
    		c: function create() {
    			create_component(notchedoutline.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(notchedoutline, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const notchedoutline_changes = (dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots, $$restProps*/ 3072)
    			? get_spread_update(notchedoutline_spread_levels, [
    					dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots*/ 2048 && {
    						noLabel: /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[42].label
    					},
    					dirty[1] & /*$$restProps*/ 1024 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'outline$'))
    				])
    			: {};

    			if (dirty[0] & /*focused, value, required, floatingLabel, label, noLabel*/ 268640289 | dirty[1] & /*$$restProps, $$slots*/ 3072 | dirty[2] & /*$$scope*/ 268435456) {
    				notchedoutline_changes.$$scope = { dirty, ctx };
    			}

    			notchedoutline.$set(notchedoutline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notchedoutline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notchedoutline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*notchedoutline_binding*/ ctx[54](null);
    			destroy_component(notchedoutline, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(77:4) {#if textarea || variant === 'outlined'}",
    		ctx
    	});

    	return block;
    }

    // (83:8) {#if !noLabel && (label != null || $$slots.label)}
    function create_if_block_7$1(ctx) {
    	let floatinglabel;
    	let current;

    	const floatinglabel_spread_levels = [
    		{
    			floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== ''
    		},
    		{ required: /*required*/ ctx[13] },
    		{ wrapped: true },
    		prefixFilter(/*$$restProps*/ ctx[41], 'label$')
    	];

    	let floatinglabel_props = {
    		$$slots: { default: [create_default_slot_6$o] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    		floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
    	}

    	floatinglabel = new FloatingLabel({
    			props: floatinglabel_props,
    			$$inline: true
    		});

    	/*floatinglabel_binding_1*/ ctx[53](floatinglabel);

    	const block = {
    		c: function create() {
    			create_component(floatinglabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatinglabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatinglabel_changes = (dirty[0] & /*focused, value, required*/ 268443649 | dirty[1] & /*$$restProps*/ 1024)
    			? get_spread_update(floatinglabel_spread_levels, [
    					dirty[0] & /*focused, value*/ 268435457 && {
    						floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== ''
    					},
    					dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
    					floatinglabel_spread_levels[2],
    					dirty[1] & /*$$restProps*/ 1024 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'label$'))
    				])
    			: {};

    			if (dirty[0] & /*label*/ 131072 | dirty[2] & /*$$scope*/ 268435456) {
    				floatinglabel_changes.$$scope = { dirty, ctx };
    			}

    			floatinglabel.$set(floatinglabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatinglabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatinglabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*floatinglabel_binding_1*/ ctx[53](null);
    			destroy_component(floatinglabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(83:8) {#if !noLabel && (label != null || $$slots.label)}",
    		ctx
    	});

    	return block;
    }

    // (84:10) <FloatingLabel             bind:this={floatingLabel}             floatAbove={focused || (value != null && value !== '')}             {required}             wrapped             {...prefixFilter($$restProps, 'label$')}             >
    function create_default_slot_6$o(ctx) {
    	let t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "";
    	let t;
    	let current;
    	const label_slot_template = /*#slots*/ ctx[51].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[90], get_label_slot_context_1$1);

    	const block = {
    		c: function create() {
    			t = text(t_value);
    			if (label_slot) label_slot.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			if (label_slot) {
    				label_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*label*/ 131072) && t_value !== (t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "")) set_data_dev(t, t_value);

    			if (label_slot) {
    				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						label_slot,
    						label_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[90], dirty, get_label_slot_changes_1$1),
    						get_label_slot_context_1$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (label_slot) label_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$o.name,
    		type: "slot",
    		source: "(84:10) <FloatingLabel             bind:this={floatingLabel}             floatAbove={focused || (value != null && value !== '')}             {required}             wrapped             {...prefixFilter($$restProps, 'label$')}             >",
    		ctx
    	});

    	return block;
    }

    // (78:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >
    function create_default_slot_5$q(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[42].label) && create_if_block_7$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[42].label)) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_7$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$q.name,
    		type: "slot",
    		source: "(78:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >",
    		ctx
    	});

    	return block;
    }

    // (95:4) <ContextFragment key="SMUI:textfield:icon:leading" value={true}>
    function create_default_slot_4$t(ctx) {
    	let current;
    	const leadingIcon_slot_template = /*#slots*/ ctx[51].leadingIcon;
    	const leadingIcon_slot = create_slot(leadingIcon_slot_template, ctx, /*$$scope*/ ctx[90], get_leadingIcon_slot_context$1);

    	const block = {
    		c: function create() {
    			if (leadingIcon_slot) leadingIcon_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (leadingIcon_slot) {
    				leadingIcon_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (leadingIcon_slot) {
    				if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						leadingIcon_slot,
    						leadingIcon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(leadingIcon_slot_template, /*$$scope*/ ctx[90], dirty, get_leadingIcon_slot_changes$1),
    						get_leadingIcon_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(leadingIcon_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(leadingIcon_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (leadingIcon_slot) leadingIcon_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$t.name,
    		type: "slot",
    		source: "(95:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={true}>",
    		ctx
    	});

    	return block;
    }

    // (124:4) {:else}
    function create_else_block$g(ctx) {
    	let t0;
    	let t1;
    	let input_1;
    	let updating_value;
    	let updating_files;
    	let updating_dirty;
    	let updating_invalid;
    	let t2;
    	let t3;
    	let current;
    	const prefix_slot_template = /*#slots*/ ctx[51].prefix;
    	const prefix_slot = create_slot(prefix_slot_template, ctx, /*$$scope*/ ctx[90], get_prefix_slot_context);
    	let if_block0 = /*prefix*/ ctx[20] != null && create_if_block_5$3(ctx);

    	const input_1_spread_levels = [
    		{ type: /*type*/ ctx[18] },
    		{ disabled: /*disabled*/ ctx[12] },
    		{ required: /*required*/ ctx[13] },
    		{ updateInvalid: /*updateInvalid*/ ctx[19] },
    		{ "aria-controls": /*helperId*/ ctx[27] },
    		{ "aria-describedby": /*helperId*/ ctx[27] },
    		/*noLabel*/ ctx[16] && /*label*/ ctx[17] != null
    		? { placeholder: /*label*/ ctx[17] }
    		: {},
    		prefixFilter(/*$$restProps*/ ctx[41], 'input$')
    	];

    	function input_1_value_binding(value) {
    		/*input_1_value_binding*/ ctx[64](value);
    	}

    	function input_1_files_binding(value) {
    		/*input_1_files_binding*/ ctx[65](value);
    	}

    	function input_1_dirty_binding(value) {
    		/*input_1_dirty_binding*/ ctx[66](value);
    	}

    	function input_1_invalid_binding(value) {
    		/*input_1_invalid_binding*/ ctx[67](value);
    	}

    	let input_1_props = {};

    	for (let i = 0; i < input_1_spread_levels.length; i += 1) {
    		input_1_props = assign(input_1_props, input_1_spread_levels[i]);
    	}

    	if (/*value*/ ctx[0] !== void 0) {
    		input_1_props.value = /*value*/ ctx[0];
    	}

    	if (/*files*/ ctx[3] !== void 0) {
    		input_1_props.files = /*files*/ ctx[3];
    	}

    	if (/*dirty*/ ctx[4] !== void 0) {
    		input_1_props.dirty = /*dirty*/ ctx[4];
    	}

    	if (/*invalid*/ ctx[1] !== void 0) {
    		input_1_props.invalid = /*invalid*/ ctx[1];
    	}

    	input_1 = new Input$1({ props: input_1_props, $$inline: true });
    	/*input_1_binding*/ ctx[63](input_1);
    	binding_callbacks.push(() => bind(input_1, 'value', input_1_value_binding));
    	binding_callbacks.push(() => bind(input_1, 'files', input_1_files_binding));
    	binding_callbacks.push(() => bind(input_1, 'dirty', input_1_dirty_binding));
    	binding_callbacks.push(() => bind(input_1, 'invalid', input_1_invalid_binding));
    	input_1.$on("blur", /*blur_handler_2*/ ctx[68]);
    	input_1.$on("focus", /*focus_handler_2*/ ctx[69]);
    	input_1.$on("blur", /*blur_handler_3*/ ctx[70]);
    	input_1.$on("focus", /*focus_handler_3*/ ctx[71]);
    	let if_block1 = /*suffix*/ ctx[21] != null && create_if_block_4$5(ctx);
    	const suffix_slot_template = /*#slots*/ ctx[51].suffix;
    	const suffix_slot = create_slot(suffix_slot_template, ctx, /*$$scope*/ ctx[90], get_suffix_slot_context);

    	const block = {
    		c: function create() {
    			if (prefix_slot) prefix_slot.c();
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			create_component(input_1.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (suffix_slot) suffix_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (prefix_slot) {
    				prefix_slot.m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(input_1, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);

    			if (suffix_slot) {
    				suffix_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prefix_slot) {
    				if (prefix_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						prefix_slot,
    						prefix_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(prefix_slot_template, /*$$scope*/ ctx[90], dirty, get_prefix_slot_changes),
    						get_prefix_slot_context
    					);
    				}
    			}

    			if (/*prefix*/ ctx[20] != null) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*prefix*/ 1048576) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const input_1_changes = (dirty[0] & /*type, disabled, required, updateInvalid, helperId, noLabel, label*/ 135213056 | dirty[1] & /*$$restProps*/ 1024)
    			? get_spread_update(input_1_spread_levels, [
    					dirty[0] & /*type*/ 262144 && { type: /*type*/ ctx[18] },
    					dirty[0] & /*disabled*/ 4096 && { disabled: /*disabled*/ ctx[12] },
    					dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
    					dirty[0] & /*updateInvalid*/ 524288 && { updateInvalid: /*updateInvalid*/ ctx[19] },
    					dirty[0] & /*helperId*/ 134217728 && { "aria-controls": /*helperId*/ ctx[27] },
    					dirty[0] & /*helperId*/ 134217728 && { "aria-describedby": /*helperId*/ ctx[27] },
    					dirty[0] & /*noLabel, label*/ 196608 && get_spread_object(/*noLabel*/ ctx[16] && /*label*/ ctx[17] != null
    					? { placeholder: /*label*/ ctx[17] }
    					: {}),
    					dirty[1] & /*$$restProps*/ 1024 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'input$'))
    				])
    			: {};

    			if (!updating_value && dirty[0] & /*value*/ 1) {
    				updating_value = true;
    				input_1_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			if (!updating_files && dirty[0] & /*files*/ 8) {
    				updating_files = true;
    				input_1_changes.files = /*files*/ ctx[3];
    				add_flush_callback(() => updating_files = false);
    			}

    			if (!updating_dirty && dirty[0] & /*dirty*/ 16) {
    				updating_dirty = true;
    				input_1_changes.dirty = /*dirty*/ ctx[4];
    				add_flush_callback(() => updating_dirty = false);
    			}

    			if (!updating_invalid && dirty[0] & /*invalid*/ 2) {
    				updating_invalid = true;
    				input_1_changes.invalid = /*invalid*/ ctx[1];
    				add_flush_callback(() => updating_invalid = false);
    			}

    			input_1.$set(input_1_changes);

    			if (/*suffix*/ ctx[21] != null) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*suffix*/ 2097152) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_4$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (suffix_slot) {
    				if (suffix_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						suffix_slot,
    						suffix_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(suffix_slot_template, /*$$scope*/ ctx[90], dirty, get_suffix_slot_changes),
    						get_suffix_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prefix_slot, local);
    			transition_in(if_block0);
    			transition_in(input_1.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(suffix_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prefix_slot, local);
    			transition_out(if_block0);
    			transition_out(input_1.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(suffix_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (prefix_slot) prefix_slot.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			/*input_1_binding*/ ctx[63](null);
    			destroy_component(input_1, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (suffix_slot) suffix_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$g.name,
    		type: "else",
    		source: "(124:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (99:4) {#if textarea && typeof value === 'string'}
    function create_if_block_3$5(ctx) {
    	let span;
    	let textarea_1;
    	let updating_value;
    	let updating_dirty;
    	let updating_invalid;
    	let t;
    	let span_class_value;
    	let current;

    	const textarea_1_spread_levels = [
    		{ disabled: /*disabled*/ ctx[12] },
    		{ required: /*required*/ ctx[13] },
    		{ updateInvalid: /*updateInvalid*/ ctx[19] },
    		{ "aria-controls": /*helperId*/ ctx[27] },
    		{ "aria-describedby": /*helperId*/ ctx[27] },
    		prefixFilter(/*$$restProps*/ ctx[41], 'input$')
    	];

    	function textarea_1_value_binding(value) {
    		/*textarea_1_value_binding*/ ctx[56](value);
    	}

    	function textarea_1_dirty_binding(value) {
    		/*textarea_1_dirty_binding*/ ctx[57](value);
    	}

    	function textarea_1_invalid_binding(value) {
    		/*textarea_1_invalid_binding*/ ctx[58](value);
    	}

    	let textarea_1_props = {};

    	for (let i = 0; i < textarea_1_spread_levels.length; i += 1) {
    		textarea_1_props = assign(textarea_1_props, textarea_1_spread_levels[i]);
    	}

    	if (/*value*/ ctx[0] !== void 0) {
    		textarea_1_props.value = /*value*/ ctx[0];
    	}

    	if (/*dirty*/ ctx[4] !== void 0) {
    		textarea_1_props.dirty = /*dirty*/ ctx[4];
    	}

    	if (/*invalid*/ ctx[1] !== void 0) {
    		textarea_1_props.invalid = /*invalid*/ ctx[1];
    	}

    	textarea_1 = new Textarea({ props: textarea_1_props, $$inline: true });
    	/*textarea_1_binding*/ ctx[55](textarea_1);
    	binding_callbacks.push(() => bind(textarea_1, 'value', textarea_1_value_binding));
    	binding_callbacks.push(() => bind(textarea_1, 'dirty', textarea_1_dirty_binding));
    	binding_callbacks.push(() => bind(textarea_1, 'invalid', textarea_1_invalid_binding));
    	textarea_1.$on("blur", /*blur_handler*/ ctx[59]);
    	textarea_1.$on("focus", /*focus_handler*/ ctx[60]);
    	textarea_1.$on("blur", /*blur_handler_1*/ ctx[61]);
    	textarea_1.$on("focus", /*focus_handler_1*/ ctx[62]);
    	const internalCounter_slot_template = /*#slots*/ ctx[51].internalCounter;
    	const internalCounter_slot = create_slot(internalCounter_slot_template, ctx, /*$$scope*/ ctx[90], get_internalCounter_slot_context);

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(textarea_1.$$.fragment);
    			t = space();
    			if (internalCounter_slot) internalCounter_slot.c();

    			attr_dev(span, "class", span_class_value = classMap({
    				'mdc-text-field__resizer': !('input$resizable' in /*$$restProps*/ ctx[41]) || /*$$restProps*/ ctx[41].input$resizable
    			}));

    			add_location(span, file$1f, 99, 6, 3514);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(textarea_1, span, null);
    			append_dev(span, t);

    			if (internalCounter_slot) {
    				internalCounter_slot.m(span, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textarea_1_changes = (dirty[0] & /*disabled, required, updateInvalid, helperId*/ 134754304 | dirty[1] & /*$$restProps*/ 1024)
    			? get_spread_update(textarea_1_spread_levels, [
    					dirty[0] & /*disabled*/ 4096 && { disabled: /*disabled*/ ctx[12] },
    					dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
    					dirty[0] & /*updateInvalid*/ 524288 && { updateInvalid: /*updateInvalid*/ ctx[19] },
    					dirty[0] & /*helperId*/ 134217728 && { "aria-controls": /*helperId*/ ctx[27] },
    					dirty[0] & /*helperId*/ 134217728 && { "aria-describedby": /*helperId*/ ctx[27] },
    					dirty[1] & /*$$restProps*/ 1024 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'input$'))
    				])
    			: {};

    			if (!updating_value && dirty[0] & /*value*/ 1) {
    				updating_value = true;
    				textarea_1_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			if (!updating_dirty && dirty[0] & /*dirty*/ 16) {
    				updating_dirty = true;
    				textarea_1_changes.dirty = /*dirty*/ ctx[4];
    				add_flush_callback(() => updating_dirty = false);
    			}

    			if (!updating_invalid && dirty[0] & /*invalid*/ 2) {
    				updating_invalid = true;
    				textarea_1_changes.invalid = /*invalid*/ ctx[1];
    				add_flush_callback(() => updating_invalid = false);
    			}

    			textarea_1.$set(textarea_1_changes);

    			if (internalCounter_slot) {
    				if (internalCounter_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						internalCounter_slot,
    						internalCounter_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(internalCounter_slot_template, /*$$scope*/ ctx[90], dirty, get_internalCounter_slot_changes),
    						get_internalCounter_slot_context
    					);
    				}
    			}

    			if (!current || dirty[1] & /*$$restProps*/ 1024 && span_class_value !== (span_class_value = classMap({
    				'mdc-text-field__resizer': !('input$resizable' in /*$$restProps*/ ctx[41]) || /*$$restProps*/ ctx[41].input$resizable
    			}))) {
    				attr_dev(span, "class", span_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textarea_1.$$.fragment, local);
    			transition_in(internalCounter_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textarea_1.$$.fragment, local);
    			transition_out(internalCounter_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			/*textarea_1_binding*/ ctx[55](null);
    			destroy_component(textarea_1);
    			if (internalCounter_slot) internalCounter_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(99:4) {#if textarea && typeof value === 'string'}",
    		ctx
    	});

    	return block;
    }

    // (126:6) {#if prefix != null}
    function create_if_block_5$3(ctx) {
    	let prefix_1;
    	let current;

    	prefix_1 = new Prefix({
    			props: {
    				$$slots: { default: [create_default_slot_3$x] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(prefix_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prefix_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const prefix_1_changes = {};

    			if (dirty[0] & /*prefix*/ 1048576 | dirty[2] & /*$$scope*/ 268435456) {
    				prefix_1_changes.$$scope = { dirty, ctx };
    			}

    			prefix_1.$set(prefix_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prefix_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prefix_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prefix_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(126:6) {#if prefix != null}",
    		ctx
    	});

    	return block;
    }

    // (127:8) <Prefix>
    function create_default_slot_3$x(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*prefix*/ ctx[20]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*prefix*/ 1048576) set_data_dev(t, /*prefix*/ ctx[20]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$x.name,
    		type: "slot",
    		source: "(127:8) <Prefix>",
    		ctx
    	});

    	return block;
    }

    // (148:6) {#if suffix != null}
    function create_if_block_4$5(ctx) {
    	let suffix_1;
    	let current;

    	suffix_1 = new Suffix({
    			props: {
    				$$slots: { default: [create_default_slot_2$C] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(suffix_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(suffix_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const suffix_1_changes = {};

    			if (dirty[0] & /*suffix*/ 2097152 | dirty[2] & /*$$scope*/ 268435456) {
    				suffix_1_changes.$$scope = { dirty, ctx };
    			}

    			suffix_1.$set(suffix_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(suffix_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(suffix_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(suffix_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(148:6) {#if suffix != null}",
    		ctx
    	});

    	return block;
    }

    // (149:8) <Suffix>
    function create_default_slot_2$C(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*suffix*/ ctx[21]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*suffix*/ 2097152) set_data_dev(t, /*suffix*/ ctx[21]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$C.name,
    		type: "slot",
    		source: "(149:8) <Suffix>",
    		ctx
    	});

    	return block;
    }

    // (153:4) <ContextFragment key="SMUI:textfield:icon:leading" value={false}>
    function create_default_slot_1$G(ctx) {
    	let current;
    	const trailingIcon_slot_template = /*#slots*/ ctx[51].trailingIcon;
    	const trailingIcon_slot = create_slot(trailingIcon_slot_template, ctx, /*$$scope*/ ctx[90], get_trailingIcon_slot_context);

    	const block = {
    		c: function create() {
    			if (trailingIcon_slot) trailingIcon_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (trailingIcon_slot) {
    				trailingIcon_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (trailingIcon_slot) {
    				if (trailingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						trailingIcon_slot,
    						trailingIcon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(trailingIcon_slot_template, /*$$scope*/ ctx[90], dirty, get_trailingIcon_slot_changes),
    						get_trailingIcon_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trailingIcon_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trailingIcon_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (trailingIcon_slot) trailingIcon_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$G.name,
    		type: "slot",
    		source: "(153:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={false}>",
    		ctx
    	});

    	return block;
    }

    // (156:4) {#if !textarea && variant !== 'outlined' && ripple}
    function create_if_block_2$8(ctx) {
    	let lineripple;
    	let current;
    	const lineripple_spread_levels = [prefixFilter(/*$$restProps*/ ctx[41], 'ripple$')];
    	let lineripple_props = {};

    	for (let i = 0; i < lineripple_spread_levels.length; i += 1) {
    		lineripple_props = assign(lineripple_props, lineripple_spread_levels[i]);
    	}

    	lineripple = new LineRipple({ props: lineripple_props, $$inline: true });
    	/*lineripple_binding*/ ctx[72](lineripple);

    	const block = {
    		c: function create() {
    			create_component(lineripple.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lineripple, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const lineripple_changes = (dirty[1] & /*$$restProps*/ 1024)
    			? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'ripple$'))])
    			: {};

    			lineripple.$set(lineripple_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lineripple.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lineripple.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*lineripple_binding*/ ctx[72](null);
    			destroy_component(lineripple, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(156:4) {#if !textarea && variant !== 'outlined' && ripple}",
    		ctx
    	});

    	return block;
    }

    // (217:0) {#if $$slots.helper}
    function create_if_block$J(ctx) {
    	let helperline;
    	let current;
    	const helperline_spread_levels = [prefixFilter(/*$$restProps*/ ctx[41], 'helperLine$')];

    	let helperline_props = {
    		$$slots: { default: [create_default_slot$W] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < helperline_spread_levels.length; i += 1) {
    		helperline_props = assign(helperline_props, helperline_spread_levels[i]);
    	}

    	helperline = new HelperLine({ props: helperline_props, $$inline: true });
    	helperline.$on("SMUITextfieldHelperText:id", /*SMUITextfieldHelperText_id_handler*/ ctx[85]);
    	helperline.$on("SMUITextfieldHelperText:mount", /*SMUITextfieldHelperText_mount_handler*/ ctx[86]);
    	helperline.$on("SMUITextfieldHelperText:unmount", /*SMUITextfieldHelperText_unmount_handler*/ ctx[87]);
    	helperline.$on("SMUITextfieldCharacterCounter:mount", /*SMUITextfieldCharacterCounter_mount_handler_1*/ ctx[88]);
    	helperline.$on("SMUITextfieldCharacterCounter:unmount", /*SMUITextfieldCharacterCounter_unmount_handler_1*/ ctx[89]);

    	const block = {
    		c: function create() {
    			create_component(helperline.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(helperline, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const helperline_changes = (dirty[1] & /*$$restProps*/ 1024)
    			? get_spread_update(helperline_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[41], 'helperLine$'))])
    			: {};

    			if (dirty[2] & /*$$scope*/ 268435456) {
    				helperline_changes.$$scope = { dirty, ctx };
    			}

    			helperline.$set(helperline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(helperline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(helperline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(helperline, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$J.name,
    		type: "if",
    		source: "(217:0) {#if $$slots.helper}",
    		ctx
    	});

    	return block;
    }

    // (218:2) <HelperLine     on:SMUITextfieldHelperText:id={(event) => (helperId = event.detail)}     on:SMUITextfieldHelperText:mount={(event) => (helperText = event.detail)}     on:SMUITextfieldHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     on:SMUITextfieldCharacterCounter:mount={(event) =>       (characterCounter = event.detail)}     on:SMUITextfieldCharacterCounter:unmount={() =>       (characterCounter = undefined)}     {...prefixFilter($$restProps, 'helperLine$')}     >
    function create_default_slot$W(ctx) {
    	let current;
    	const helper_slot_template = /*#slots*/ ctx[51].helper;
    	const helper_slot = create_slot(helper_slot_template, ctx, /*$$scope*/ ctx[90], get_helper_slot_context);

    	const block = {
    		c: function create() {
    			if (helper_slot) helper_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (helper_slot) {
    				helper_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (helper_slot) {
    				if (helper_slot.p && (!current || dirty[2] & /*$$scope*/ 268435456)) {
    					update_slot_base(
    						helper_slot,
    						helper_slot_template,
    						ctx,
    						/*$$scope*/ ctx[90],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[90])
    						: get_slot_changes(helper_slot_template, /*$$scope*/ ctx[90], dirty, get_helper_slot_changes),
    						get_helper_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(helper_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(helper_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (helper_slot) helper_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$W.name,
    		type: "slot",
    		source: "(218:2) <HelperLine     on:SMUITextfieldHelperText:id={(event) => (helperId = event.detail)}     on:SMUITextfieldHelperText:mount={(event) => (helperText = event.detail)}     on:SMUITextfieldHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     on:SMUITextfieldCharacterCounter:mount={(event) =>       (characterCounter = event.detail)}     on:SMUITextfieldCharacterCounter:unmount={() =>       (characterCounter = undefined)}     {...prefixFilter($$restProps, 'helperLine$')}     >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1D(ctx) {
    	let current_block_type_index;
    	let if_block0;
    	let t;
    	let if_block1_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$o, create_else_block_1$7];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*valued*/ ctx[36]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*$$slots*/ ctx[42].helper && create_if_block$J(ctx);

    	const block = {
    		c: function create() {
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1$3("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if_block0.p(ctx, dirty);

    			if (/*$$slots*/ ctx[42].helper) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[1] & /*$$slots*/ 2048) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$J(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$g = ([name, value]) => `${name}: ${value};`;
    const func_1$1 = ([name, value]) => `${name}: ${value};`;

    function instance_1$l($$self, $$props, $$invalidate) {
    	let inputElement;

    	const omit_props_names = [
    		"use","class","style","ripple","disabled","required","textarea","variant","noLabel","label","type","value","files","invalid","updateInvalid","dirty","prefix","suffix","validateOnValueChange","useNativeValidation","withLeadingIcon","withTrailingIcon","input","floatingLabel","lineRipple","notchedOutline","focus","blur","layout","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots('Textfield', slots, [
    		'label','leadingIcon','default','internalCounter','prefix','suffix','trailingIcon','ripple','helper'
    	]);

    	const $$slots = compute_slots(slots);
    	const { applyPassive } = events;
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { ripple = true } = $$props;
    	let { disabled = false } = $$props;
    	let { required = false } = $$props;
    	let { textarea = false } = $$props;
    	let { variant = textarea ? 'outlined' : 'standard' } = $$props;
    	let { noLabel = false } = $$props;
    	let { label = undefined } = $$props;
    	let { type = 'text' } = $$props;

    	let { value = $$restProps.input$emptyValueUndefined
    	? undefined
    	: uninitializedValue } = $$props;

    	let { files = uninitializedValue } = $$props;
    	const valued = !isUninitializedValue(value) || !isUninitializedValue(files);

    	if (isUninitializedValue(value)) {
    		value = undefined;
    	}

    	if (isUninitializedValue(files)) {
    		files = null;
    	}

    	let { invalid = uninitializedValue } = $$props;
    	let { updateInvalid = isUninitializedValue(invalid) } = $$props;

    	if (isUninitializedValue(invalid)) {
    		invalid = false;
    	}

    	let { dirty = false } = $$props;
    	let { prefix = undefined } = $$props;
    	let { suffix = undefined } = $$props;
    	let { validateOnValueChange = updateInvalid } = $$props;
    	let { useNativeValidation = updateInvalid } = $$props;
    	let { withLeadingIcon = uninitializedValue } = $$props;
    	let { withTrailingIcon = uninitializedValue } = $$props;
    	let { input = undefined } = $$props;
    	let { floatingLabel = undefined } = $$props;
    	let { lineRipple = undefined } = $$props;
    	let { notchedOutline = undefined } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};
    	let helperId = undefined;
    	let focused = false;
    	let addLayoutListener = getContext('SMUI:addLayoutListener');
    	let removeLayoutListener;
    	let initPromiseResolve;
    	let initPromise = new Promise(resolve => initPromiseResolve = resolve);

    	// These are instances, not accessors.
    	let leadingIcon = undefined;

    	let trailingIcon = undefined;
    	let helperText = undefined;
    	let characterCounter = undefined;

    	// React to changes of value from outside component.
    	let previousValue = value;

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	onMount(() => {
    		$$invalidate(49, instance = new MDCTextFieldFoundation({
    				// getRootAdapterMethods_
    				addClass,
    				removeClass,
    				hasClass,
    				registerTextFieldInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
    				deregisterTextFieldInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler),
    				registerValidationAttributeChangeHandler: handler => {
    					const getAttributesList = mutationsList => {
    						return mutationsList.map(mutation => mutation.attributeName).filter(attributeName => attributeName);
    					};

    					const observer = new MutationObserver(mutationsList => {
    							if (useNativeValidation) {
    								handler(getAttributesList(mutationsList));
    							}
    						});

    					const config = { attributes: true };

    					if (input) {
    						observer.observe(input.getElement(), config);
    					}

    					return observer;
    				},
    				deregisterValidationAttributeChangeHandler: observer => {
    					observer.disconnect();
    				},
    				// getInputAdapterMethods_
    				getNativeInput: () => {
    					var _a;

    					return (_a = input === null || input === void 0
    					? void 0
    					: input.getElement()) !== null && _a !== void 0
    					? _a
    					: null;
    				},
    				setInputAttr: (name, value) => {
    					input === null || input === void 0
    					? void 0
    					: input.addAttr(name, value);
    				},
    				removeInputAttr: name => {
    					input === null || input === void 0
    					? void 0
    					: input.removeAttr(name);
    				},
    				isFocused: () => document.activeElement === (input === null || input === void 0
    				? void 0
    				: input.getElement()),
    				registerInputInteractionHandler: (evtType, handler) => {
    					input === null || input === void 0
    					? void 0
    					: input.getElement().addEventListener(evtType, handler, applyPassive());
    				},
    				deregisterInputInteractionHandler: (evtType, handler) => {
    					input === null || input === void 0
    					? void 0
    					: input.getElement().removeEventListener(evtType, handler, applyPassive());
    				},
    				// getLabelAdapterMethods_
    				floatLabel: shouldFloat => floatingLabel && floatingLabel.float(shouldFloat),
    				getLabelWidth: () => floatingLabel ? floatingLabel.getWidth() : 0,
    				hasLabel: () => !!floatingLabel,
    				shakeLabel: shouldShake => floatingLabel && floatingLabel.shake(shouldShake),
    				setLabelRequired: isRequired => floatingLabel && floatingLabel.setRequired(isRequired),
    				// getLineRippleAdapterMethods_
    				activateLineRipple: () => lineRipple && lineRipple.activate(),
    				deactivateLineRipple: () => lineRipple && lineRipple.deactivate(),
    				setLineRippleTransformOrigin: normalizedX => lineRipple && lineRipple.setRippleCenter(normalizedX),
    				// getOutlineAdapterMethods_
    				closeOutline: () => notchedOutline && notchedOutline.closeNotch(),
    				hasOutline: () => !!notchedOutline,
    				notchOutline: labelWidth => notchedOutline && notchedOutline.notch(labelWidth)
    			},
    		{
    				get helperText() {
    					return helperText;
    				},
    				get characterCounter() {
    					return characterCounter;
    				},
    				get leadingIcon() {
    					return leadingIcon;
    				},
    				get trailingIcon() {
    					return trailingIcon;
    				}
    			}));

    		if (valued) {
    			if (input == null) {
    				throw new Error('SMUI Textfield initialized without Input component.');
    			}

    			instance.init();
    		} else {
    			tick().then(() => {
    				if (input == null) {
    					throw new Error('SMUI Textfield initialized without Input component.');
    				}

    				instance.init();
    			});
    		}

    		initPromiseResolve();

    		return () => {
    			instance.destroy();
    		};
    	});

    	onDestroy(() => {
    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function hasClass(className) {
    		var _a;

    		return className in internalClasses
    		? (_a = internalClasses[className]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(25, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(25, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(26, internalStyles);
    			} else {
    				$$invalidate(26, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function focus() {
    		input === null || input === void 0
    		? void 0
    		: input.focus();
    	}

    	function blur() {
    		input === null || input === void 0
    		? void 0
    		: input.blur();
    	}

    	function layout() {
    		if (instance) {
    			const openNotch = instance.shouldFloat;
    			instance.notchOutline(openNotch);
    		}
    	}

    	function getElement() {
    		return element;
    	}

    	function floatinglabel_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			floatingLabel = $$value;
    			$$invalidate(5, floatingLabel);
    		});
    	}

    	function floatinglabel_binding_1($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			floatingLabel = $$value;
    			$$invalidate(5, floatingLabel);
    		});
    	}

    	function notchedoutline_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			notchedOutline = $$value;
    			$$invalidate(7, notchedOutline);
    		});
    	}

    	function textarea_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(2, input);
    		});
    	}

    	function textarea_1_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function textarea_1_dirty_binding(value) {
    		dirty = value;
    		$$invalidate(4, dirty);
    	}

    	function textarea_1_invalid_binding(value) {
    		invalid = value;
    		(($$invalidate(1, invalid), $$invalidate(49, instance)), $$invalidate(19, updateInvalid));
    	}

    	const blur_handler = () => $$invalidate(28, focused = false);
    	const focus_handler = () => $$invalidate(28, focused = true);
    	const blur_handler_1 = event => dispatch(element, 'blur', event);
    	const focus_handler_1 = event => dispatch(element, 'focus', event);

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(2, input);
    		});
    	}

    	function input_1_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function input_1_files_binding(value) {
    		files = value;
    		$$invalidate(3, files);
    	}

    	function input_1_dirty_binding(value) {
    		dirty = value;
    		$$invalidate(4, dirty);
    	}

    	function input_1_invalid_binding(value) {
    		invalid = value;
    		(($$invalidate(1, invalid), $$invalidate(49, instance)), $$invalidate(19, updateInvalid));
    	}

    	const blur_handler_2 = () => $$invalidate(28, focused = false);
    	const focus_handler_2 = () => $$invalidate(28, focused = true);
    	const blur_handler_3 = event => dispatch(element, 'blur', event);
    	const focus_handler_3 = event => dispatch(element, 'focus', event);

    	function lineripple_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			lineRipple = $$value;
    			$$invalidate(6, lineRipple);
    		});
    	}

    	function label_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(24, element);
    		});
    	}

    	const SMUITextfieldLeadingIcon_mount_handler = event => $$invalidate(29, leadingIcon = event.detail);
    	const SMUITextfieldLeadingIcon_unmount_handler = () => $$invalidate(29, leadingIcon = undefined);
    	const SMUITextfieldTrailingIcon_mount_handler = event => $$invalidate(30, trailingIcon = event.detail);
    	const SMUITextfieldTrailingIcon_unmount_handler = () => $$invalidate(30, trailingIcon = undefined);
    	const SMUITextfieldCharacterCounter_mount_handler = event => $$invalidate(32, characterCounter = event.detail);
    	const SMUITextfieldCharacterCounter_unmount_handler = () => $$invalidate(32, characterCounter = undefined);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(24, element);
    		});
    	}

    	const SMUITextfieldLeadingIcon_mount_handler_1 = event => $$invalidate(29, leadingIcon = event.detail);
    	const SMUITextfieldLeadingIcon_unmount_handler_1 = () => $$invalidate(29, leadingIcon = undefined);
    	const SMUITextfieldTrailingIcon_mount_handler_1 = event => $$invalidate(30, trailingIcon = event.detail);
    	const SMUITextfieldTrailingIcon_unmount_handler_1 = () => $$invalidate(30, trailingIcon = undefined);
    	const SMUITextfieldHelperText_id_handler = event => $$invalidate(27, helperId = event.detail);
    	const SMUITextfieldHelperText_mount_handler = event => $$invalidate(31, helperText = event.detail);

    	const SMUITextfieldHelperText_unmount_handler = () => {
    		$$invalidate(27, helperId = undefined);
    		$$invalidate(31, helperText = undefined);
    	};

    	const SMUITextfieldCharacterCounter_mount_handler_1 = event => $$invalidate(32, characterCounter = event.detail);
    	const SMUITextfieldCharacterCounter_unmount_handler_1 = () => $$invalidate(32, characterCounter = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(41, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(8, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(9, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(10, style = $$new_props.style);
    		if ('ripple' in $$new_props) $$invalidate(11, ripple = $$new_props.ripple);
    		if ('disabled' in $$new_props) $$invalidate(12, disabled = $$new_props.disabled);
    		if ('required' in $$new_props) $$invalidate(13, required = $$new_props.required);
    		if ('textarea' in $$new_props) $$invalidate(14, textarea = $$new_props.textarea);
    		if ('variant' in $$new_props) $$invalidate(15, variant = $$new_props.variant);
    		if ('noLabel' in $$new_props) $$invalidate(16, noLabel = $$new_props.noLabel);
    		if ('label' in $$new_props) $$invalidate(17, label = $$new_props.label);
    		if ('type' in $$new_props) $$invalidate(18, type = $$new_props.type);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('files' in $$new_props) $$invalidate(3, files = $$new_props.files);
    		if ('invalid' in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$new_props) $$invalidate(19, updateInvalid = $$new_props.updateInvalid);
    		if ('dirty' in $$new_props) $$invalidate(4, dirty = $$new_props.dirty);
    		if ('prefix' in $$new_props) $$invalidate(20, prefix = $$new_props.prefix);
    		if ('suffix' in $$new_props) $$invalidate(21, suffix = $$new_props.suffix);
    		if ('validateOnValueChange' in $$new_props) $$invalidate(43, validateOnValueChange = $$new_props.validateOnValueChange);
    		if ('useNativeValidation' in $$new_props) $$invalidate(44, useNativeValidation = $$new_props.useNativeValidation);
    		if ('withLeadingIcon' in $$new_props) $$invalidate(22, withLeadingIcon = $$new_props.withLeadingIcon);
    		if ('withTrailingIcon' in $$new_props) $$invalidate(23, withTrailingIcon = $$new_props.withTrailingIcon);
    		if ('input' in $$new_props) $$invalidate(2, input = $$new_props.input);
    		if ('floatingLabel' in $$new_props) $$invalidate(5, floatingLabel = $$new_props.floatingLabel);
    		if ('lineRipple' in $$new_props) $$invalidate(6, lineRipple = $$new_props.lineRipple);
    		if ('notchedOutline' in $$new_props) $$invalidate(7, notchedOutline = $$new_props.notchedOutline);
    		if ('$$scope' in $$new_props) $$invalidate(90, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCTextFieldFoundation,
    		events,
    		onMount,
    		onDestroy,
    		getContext,
    		tick,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		ContextFragment,
    		Ripple,
    		FloatingLabel,
    		LineRipple,
    		NotchedOutline,
    		HelperLine,
    		Prefix,
    		Suffix,
    		Input: Input$1,
    		Textarea,
    		applyPassive,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		style,
    		ripple,
    		disabled,
    		required,
    		textarea,
    		variant,
    		noLabel,
    		label,
    		type,
    		value,
    		files,
    		valued,
    		invalid,
    		updateInvalid,
    		dirty,
    		prefix,
    		suffix,
    		validateOnValueChange,
    		useNativeValidation,
    		withLeadingIcon,
    		withTrailingIcon,
    		input,
    		floatingLabel,
    		lineRipple,
    		notchedOutline,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		helperId,
    		focused,
    		addLayoutListener,
    		removeLayoutListener,
    		initPromiseResolve,
    		initPromise,
    		leadingIcon,
    		trailingIcon,
    		helperText,
    		characterCounter,
    		previousValue,
    		hasClass,
    		addClass,
    		removeClass,
    		addStyle,
    		focus,
    		blur,
    		layout,
    		getElement,
    		inputElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(8, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(9, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(10, style = $$new_props.style);
    		if ('ripple' in $$props) $$invalidate(11, ripple = $$new_props.ripple);
    		if ('disabled' in $$props) $$invalidate(12, disabled = $$new_props.disabled);
    		if ('required' in $$props) $$invalidate(13, required = $$new_props.required);
    		if ('textarea' in $$props) $$invalidate(14, textarea = $$new_props.textarea);
    		if ('variant' in $$props) $$invalidate(15, variant = $$new_props.variant);
    		if ('noLabel' in $$props) $$invalidate(16, noLabel = $$new_props.noLabel);
    		if ('label' in $$props) $$invalidate(17, label = $$new_props.label);
    		if ('type' in $$props) $$invalidate(18, type = $$new_props.type);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('files' in $$props) $$invalidate(3, files = $$new_props.files);
    		if ('invalid' in $$props) $$invalidate(1, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$props) $$invalidate(19, updateInvalid = $$new_props.updateInvalid);
    		if ('dirty' in $$props) $$invalidate(4, dirty = $$new_props.dirty);
    		if ('prefix' in $$props) $$invalidate(20, prefix = $$new_props.prefix);
    		if ('suffix' in $$props) $$invalidate(21, suffix = $$new_props.suffix);
    		if ('validateOnValueChange' in $$props) $$invalidate(43, validateOnValueChange = $$new_props.validateOnValueChange);
    		if ('useNativeValidation' in $$props) $$invalidate(44, useNativeValidation = $$new_props.useNativeValidation);
    		if ('withLeadingIcon' in $$props) $$invalidate(22, withLeadingIcon = $$new_props.withLeadingIcon);
    		if ('withTrailingIcon' in $$props) $$invalidate(23, withTrailingIcon = $$new_props.withTrailingIcon);
    		if ('input' in $$props) $$invalidate(2, input = $$new_props.input);
    		if ('floatingLabel' in $$props) $$invalidate(5, floatingLabel = $$new_props.floatingLabel);
    		if ('lineRipple' in $$props) $$invalidate(6, lineRipple = $$new_props.lineRipple);
    		if ('notchedOutline' in $$props) $$invalidate(7, notchedOutline = $$new_props.notchedOutline);
    		if ('element' in $$props) $$invalidate(24, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(49, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(25, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(26, internalStyles = $$new_props.internalStyles);
    		if ('helperId' in $$props) $$invalidate(27, helperId = $$new_props.helperId);
    		if ('focused' in $$props) $$invalidate(28, focused = $$new_props.focused);
    		if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    		if ('initPromiseResolve' in $$props) initPromiseResolve = $$new_props.initPromiseResolve;
    		if ('initPromise' in $$props) $$invalidate(37, initPromise = $$new_props.initPromise);
    		if ('leadingIcon' in $$props) $$invalidate(29, leadingIcon = $$new_props.leadingIcon);
    		if ('trailingIcon' in $$props) $$invalidate(30, trailingIcon = $$new_props.trailingIcon);
    		if ('helperText' in $$props) $$invalidate(31, helperText = $$new_props.helperText);
    		if ('characterCounter' in $$props) $$invalidate(32, characterCounter = $$new_props.characterCounter);
    		if ('previousValue' in $$props) $$invalidate(50, previousValue = $$new_props.previousValue);
    		if ('inputElement' in $$props) $$invalidate(33, inputElement = $$new_props.inputElement);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*input*/ 4) {
    			$$invalidate(33, inputElement = input && input.getElement());
    		}

    		if ($$self.$$.dirty[0] & /*invalid, updateInvalid*/ 524290 | $$self.$$.dirty[1] & /*instance*/ 262144) {
    			if (instance && instance.isValid() !== !invalid) {
    				if (updateInvalid) {
    					$$invalidate(1, invalid = !instance.isValid());
    				} else {
    					instance.setValid(!invalid);
    				}
    			}
    		}

    		if ($$self.$$.dirty[1] & /*instance, validateOnValueChange*/ 266240) {
    			if (instance && instance.getValidateOnValueChange() !== validateOnValueChange) {
    				instance.setValidateOnValueChange(isUninitializedValue(validateOnValueChange)
    				? false
    				: validateOnValueChange);
    			}
    		}

    		if ($$self.$$.dirty[1] & /*instance, useNativeValidation*/ 270336) {
    			if (instance) {
    				instance.setUseNativeValidation(isUninitializedValue(useNativeValidation)
    				? true
    				: useNativeValidation);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*disabled*/ 4096 | $$self.$$.dirty[1] & /*instance*/ 262144) {
    			if (instance) {
    				instance.setDisabled(disabled);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 1 | $$self.$$.dirty[1] & /*instance, previousValue*/ 786432) {
    			if (instance && valued && previousValue !== value) {
    				$$invalidate(50, previousValue = value);

    				// Check the data is flowing down.
    				const stringValue = `${value}`;

    				if (instance.getValue() !== stringValue) {
    					instance.setValue(stringValue);
    				}
    			}
    		}
    	};

    	return [
    		value,
    		invalid,
    		input,
    		files,
    		dirty,
    		floatingLabel,
    		lineRipple,
    		notchedOutline,
    		use,
    		className,
    		style,
    		ripple,
    		disabled,
    		required,
    		textarea,
    		variant,
    		noLabel,
    		label,
    		type,
    		updateInvalid,
    		prefix,
    		suffix,
    		withLeadingIcon,
    		withTrailingIcon,
    		element,
    		internalClasses,
    		internalStyles,
    		helperId,
    		focused,
    		leadingIcon,
    		trailingIcon,
    		helperText,
    		characterCounter,
    		inputElement,
    		forwardEvents,
    		isUninitializedValue,
    		valued,
    		initPromise,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		$$slots,
    		validateOnValueChange,
    		useNativeValidation,
    		focus,
    		blur,
    		layout,
    		getElement,
    		instance,
    		previousValue,
    		slots,
    		floatinglabel_binding,
    		floatinglabel_binding_1,
    		notchedoutline_binding,
    		textarea_1_binding,
    		textarea_1_value_binding,
    		textarea_1_dirty_binding,
    		textarea_1_invalid_binding,
    		blur_handler,
    		focus_handler,
    		blur_handler_1,
    		focus_handler_1,
    		input_1_binding,
    		input_1_value_binding,
    		input_1_files_binding,
    		input_1_dirty_binding,
    		input_1_invalid_binding,
    		blur_handler_2,
    		focus_handler_2,
    		blur_handler_3,
    		focus_handler_3,
    		lineripple_binding,
    		label_1_binding,
    		SMUITextfieldLeadingIcon_mount_handler,
    		SMUITextfieldLeadingIcon_unmount_handler,
    		SMUITextfieldTrailingIcon_mount_handler,
    		SMUITextfieldTrailingIcon_unmount_handler,
    		SMUITextfieldCharacterCounter_mount_handler,
    		SMUITextfieldCharacterCounter_unmount_handler,
    		div_binding,
    		SMUITextfieldLeadingIcon_mount_handler_1,
    		SMUITextfieldLeadingIcon_unmount_handler_1,
    		SMUITextfieldTrailingIcon_mount_handler_1,
    		SMUITextfieldTrailingIcon_unmount_handler_1,
    		SMUITextfieldHelperText_id_handler,
    		SMUITextfieldHelperText_mount_handler,
    		SMUITextfieldHelperText_unmount_handler,
    		SMUITextfieldCharacterCounter_mount_handler_1,
    		SMUITextfieldCharacterCounter_unmount_handler_1,
    		$$scope
    	];
    }

    class Textfield extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$l,
    			create_fragment$1D,
    			safe_not_equal,
    			{
    				use: 8,
    				class: 9,
    				style: 10,
    				ripple: 11,
    				disabled: 12,
    				required: 13,
    				textarea: 14,
    				variant: 15,
    				noLabel: 16,
    				label: 17,
    				type: 18,
    				value: 0,
    				files: 3,
    				invalid: 1,
    				updateInvalid: 19,
    				dirty: 4,
    				prefix: 20,
    				suffix: 21,
    				validateOnValueChange: 43,
    				useNativeValidation: 44,
    				withLeadingIcon: 22,
    				withTrailingIcon: 23,
    				input: 2,
    				floatingLabel: 5,
    				lineRipple: 6,
    				notchedOutline: 7,
    				focus: 45,
    				blur: 46,
    				layout: 47,
    				getElement: 48
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Textfield",
    			options,
    			id: create_fragment$1D.name
    		});
    	}

    	get use() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textarea() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textarea(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noLabel() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noLabel(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get files() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set files(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateInvalid() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateInvalid(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dirty() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dirty(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validateOnValueChange() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validateOnValueChange(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get useNativeValidation() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set useNativeValidation(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get withLeadingIcon() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set withLeadingIcon(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get withTrailingIcon() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set withTrailingIcon(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get floatingLabel() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set floatingLabel(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lineRipple() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lineRipple(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notchedOutline() {
    		throw new Error_1$3("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set notchedOutline(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[45];
    	}

    	set focus(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blur() {
    		return this.$$.ctx[46];
    	}

    	set blur(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[47];
    	}

    	set layout(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[48];
    	}

    	set getElement(value) {
    		throw new Error_1$3("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Input = Input$1;

    /* node_modules/@smui/textfield/dist/icon/Icon.svelte generated by Svelte v3.44.3 */

    const file$1e = "node_modules/@smui/textfield/dist/icon/Icon.svelte";

    // (17:32) {:else}
    function create_else_block$f(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*content*/ ctx[7]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content*/ 128) set_data_dev(t, /*content*/ ctx[7]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$f.name,
    		type: "else",
    		source: "(17:32) {:else}",
    		ctx
    	});

    	return block;
    }

    // (17:3) {#if content == null}
    function create_if_block$I(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$I.name,
    		type: "if",
    		source: "(17:3) {#if content == null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1C(ctx) {
    	let i;
    	let current_block_type_index;
    	let if_block;
    	let i_class_value;
    	let i_aria_hidden_value;
    	let i_aria_disabled_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$I, create_else_block$f];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*content*/ ctx[7] == null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let i_levels = [
    		{
    			class: i_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-text-field__icon': true,
    				'mdc-text-field__icon--leading': /*leading*/ ctx[10],
    				'mdc-text-field__icon--trailing': !/*leading*/ ctx[10]
    			})
    		},
    		{ tabindex: /*tabindex*/ ctx[3] },
    		{
    			"aria-hidden": i_aria_hidden_value = /*tabindex*/ ctx[3] === -1 ? 'true' : 'false'
    		},
    		{
    			"aria-disabled": i_aria_disabled_value = /*role*/ ctx[2] === 'button'
    			? /*disabled*/ ctx[4] ? 'true' : 'false'
    			: undefined
    		},
    		{ role: /*role*/ ctx[2] },
    		/*internalAttrs*/ ctx[6],
    		/*$$restProps*/ ctx[11]
    	];

    	let i_data = {};

    	for (let i = 0; i < i_levels.length; i += 1) {
    		i_data = assign(i_data, i_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			i = element("i");
    			if_block.c();
    			set_attributes(i, i_data);
    			add_location(i, file$1e, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			if_blocks[current_block_type_index].m(i, null);
    			/*i_binding*/ ctx[15](i);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, i, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[8].call(null, i))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(i, null);
    			}

    			set_attributes(i, i_data = get_spread_update(i_levels, [
    				(!current || dirty & /*className*/ 2 && i_class_value !== (i_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-text-field__icon': true,
    					'mdc-text-field__icon--leading': /*leading*/ ctx[10],
    					'mdc-text-field__icon--trailing': !/*leading*/ ctx[10]
    				}))) && { class: i_class_value },
    				(!current || dirty & /*tabindex*/ 8) && { tabindex: /*tabindex*/ ctx[3] },
    				(!current || dirty & /*tabindex*/ 8 && i_aria_hidden_value !== (i_aria_hidden_value = /*tabindex*/ ctx[3] === -1 ? 'true' : 'false')) && { "aria-hidden": i_aria_hidden_value },
    				(!current || dirty & /*role, disabled*/ 20 && i_aria_disabled_value !== (i_aria_disabled_value = /*role*/ ctx[2] === 'button'
    				? /*disabled*/ ctx[4] ? 'true' : 'false'
    				: undefined)) && { "aria-disabled": i_aria_disabled_value },
    				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
    				dirty & /*internalAttrs*/ 64 && /*internalAttrs*/ ctx[6],
    				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			if_blocks[current_block_type_index].d();
    			/*i_binding*/ ctx[15](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance_1$k($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","role","tabindex","disabled","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $leadingStore;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { role = undefined } = $$props;
    	let { tabindex = role === 'button' ? 0 : -1 } = $$props;
    	let { disabled = false } = $$props;
    	let element;
    	let instance;
    	let internalAttrs = {};
    	const leadingStore = getContext('SMUI:textfield:icon:leading');
    	validate_store(leadingStore, 'leadingStore');
    	component_subscribe($$self, leadingStore, value => $$invalidate(17, $leadingStore = value));
    	const leading = $leadingStore;
    	let content = undefined;

    	onMount(() => {
    		instance = new MDCTextFieldIconFoundation({
    				getAttr,
    				setAttr: addAttr,
    				removeAttr,
    				setContent: value => {
    					$$invalidate(7, content = value);
    				},
    				registerInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
    				deregisterInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler),
    				notifyIconAction: () => dispatch(getElement(), 'SMUITextField:icon', undefined, undefined, true)
    			});

    		dispatch(
    			getElement(),
    			leading
    			? 'SMUITextfieldLeadingIcon:mount'
    			: 'SMUITextfieldTrailingIcon:mount',
    			instance
    		);

    		instance.init();

    		return () => {
    			dispatch(
    				getElement(),
    				leading
    				? 'SMUITextfieldLeadingIcon:unmount'
    				: 'SMUITextfieldTrailingIcon:unmount',
    				instance
    			);

    			instance.destroy();
    		};
    	});

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(6, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function removeAttr(name) {
    		if (!(name in internalAttrs) || internalAttrs[name] != null) {
    			$$invalidate(6, internalAttrs[name] = undefined, internalAttrs);
    		}
    	}

    	function getElement() {
    		return element;
    	}

    	function i_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('role' in $$new_props) $$invalidate(2, role = $$new_props.role);
    		if ('tabindex' in $$new_props) $$invalidate(3, tabindex = $$new_props.tabindex);
    		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
    		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCTextFieldIconFoundation,
    		onMount,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		forwardEvents,
    		use,
    		className,
    		role,
    		tabindex,
    		disabled,
    		element,
    		instance,
    		internalAttrs,
    		leadingStore,
    		leading,
    		content,
    		getAttr,
    		addAttr,
    		removeAttr,
    		getElement,
    		$leadingStore
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('role' in $$props) $$invalidate(2, role = $$new_props.role);
    		if ('tabindex' in $$props) $$invalidate(3, tabindex = $$new_props.tabindex);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$new_props.disabled);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('instance' in $$props) instance = $$new_props.instance;
    		if ('internalAttrs' in $$props) $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
    		if ('content' in $$props) $$invalidate(7, content = $$new_props.content);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		role,
    		tabindex,
    		disabled,
    		element,
    		internalAttrs,
    		content,
    		forwardEvents,
    		leadingStore,
    		leading,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		i_binding
    	];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$k, create_fragment$1C, safe_not_equal, {
    			use: 0,
    			class: 1,
    			role: 2,
    			tabindex: 3,
    			disabled: 4,
    			getElement: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$1C.name
    		});
    	}

    	get use() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get role() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set role(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabindex() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabindex(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[12];
    	}

    	set getElement(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Searchbar.svelte generated by Svelte v3.44.3 */
    const file$1d = "src/components/Searchbar.svelte";

    // (10:4) <Icon class="material-icons">
    function create_default_slot_1$F(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("search");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$F.name,
    		type: "slot",
    		source: "(10:4) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (9:2) <Paper class="solo-paper" elevation={6}>
    function create_default_slot$V(ctx) {
    	let icon;
    	let t;
    	let input;
    	let updating_value;
    	let current;

    	icon = new Icon({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_1$F] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function input_value_binding(value) {
    		/*input_value_binding*/ ctx[2](value);
    	}

    	let input_props = {
    		placeholder: /*$l*/ ctx[1].search,
    		class: "solo-input font-color"
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		input_props.value = /*value*/ ctx[0];
    	}

    	input = new Input({ props: input_props, $$inline: true });
    	binding_callbacks.push(() => bind(input, 'value', input_value_binding));

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(input.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(input, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const input_changes = {};
    			if (dirty & /*$l*/ 2) input_changes.placeholder = /*$l*/ ctx[1].search;

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				input_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			input.$set(input_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(input.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(input.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(input, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$V.name,
    		type: "slot",
    		source: "(9:2) <Paper class=\\\"solo-paper\\\" elevation={6}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1B(ctx) {
    	let div;
    	let paper;
    	let current;

    	paper = new Paper({
    			props: {
    				class: "solo-paper",
    				elevation: 6,
    				$$slots: { default: [create_default_slot$V] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(paper.$$.fragment);
    			attr_dev(div, "class", "solo-container svelte-bhs0a0");
    			add_location(div, file$1d, 7, 0, 200);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(paper, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const paper_changes = {};

    			if (dirty & /*$$scope, $l, value*/ 11) {
    				paper_changes.$$scope = { dirty, ctx };
    			}

    			paper.$set(paper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(paper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(paper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(paper);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1h($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(1, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Searchbar', slots, []);
    	let { value = "" } = $$props;
    	const writable_props = ['value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Searchbar> was created with unknown prop '${key}'`);
    	});

    	function input_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({ l, Paper, Input, Icon, value, $l });

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, $l, input_value_binding];
    }

    class Searchbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1h, create_fragment$1B, safe_not_equal, { value: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Searchbar",
    			options,
    			id: create_fragment$1B.name
    		});
    	}

    	get value() {
    		throw new Error("<Searchbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Searchbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/fab/dist/Fab.svelte generated by Svelte v3.44.3 */
    const file$1c = "node_modules/@smui/fab/dist/Fab.svelte";

    // (37:10) {#if touch}
    function create_if_block$H(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "mdc-fab__touch");
    			add_location(div, file$1c, 36, 21, 783);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$H.name,
    		type: "if",
    		source: "(37:10) {#if touch}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-fab': true,     'mdc-fab--mini': mini,     'mdc-fab--exited': exited,     'mdc-fab--extended': extended,     'smui-fab--color-primary': color === 'primary',     'mdc-fab--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {href}   {...$$restProps}   >
    function create_default_slot$U(ctx) {
    	let div;
    	let t;
    	let if_block_anchor;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);
    	let if_block = /*touch*/ ctx[8] && create_if_block$H(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			if (default_slot) default_slot.c();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div, "class", "mdc-fab__ripple");
    			add_location(div, file$1c, 35, 3, 730);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[22],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*touch*/ ctx[8]) {
    				if (if_block) ; else {
    					if_block = create_if_block$H(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$U.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-fab': true,     'mdc-fab--mini': mini,     'mdc-fab--exited': exited,     'mdc-fab--extended': extended,     'smui-fab--color-primary': color === 'primary',     'mdc-fab--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {href}   {...$$restProps}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1A(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				[
    					Ripple,
    					{
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						color: /*color*/ ctx[4],
    						disabled: !!/*$$restProps*/ ctx[18].disabled,
    						addClass: /*addClass*/ ctx[15],
    						removeClass: /*removeClass*/ ctx[16],
    						addStyle: /*addStyle*/ ctx[17]
    					}
    				],
    				/*forwardEvents*/ ctx[14],
    				.../*use*/ ctx[0]
    			]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-fab': true,
    				'mdc-fab--mini': /*mini*/ ctx[5],
    				'mdc-fab--exited': /*exited*/ ctx[6],
    				'mdc-fab--extended': /*extended*/ ctx[7],
    				'smui-fab--color-primary': /*color*/ ctx[4] === 'primary',
    				'mdc-fab--touch': /*touch*/ ctx[8],
    				.../*internalClasses*/ ctx[12]
    			})
    		},
    		{
    			style: Object.entries(/*internalStyles*/ ctx[13]).map(func$f).concat([/*style*/ ctx[2]]).join(' ')
    		},
    		{ href: /*href*/ ctx[9] },
    		/*$$restProps*/ ctx[18]
    	];

    	var switch_value = /*component*/ ctx[10];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$U] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[21](switch_instance);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, classMap, className, mini, exited, extended, touch, internalClasses, Object, internalStyles, style, href*/ 521215)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 507929 && {
    						use: [
    							[
    								Ripple,
    								{
    									ripple: /*ripple*/ ctx[3],
    									unbounded: false,
    									color: /*color*/ ctx[4],
    									disabled: !!/*$$restProps*/ ctx[18].disabled,
    									addClass: /*addClass*/ ctx[15],
    									removeClass: /*removeClass*/ ctx[16],
    									addStyle: /*addStyle*/ ctx[17]
    								}
    							],
    							/*forwardEvents*/ ctx[14],
    							.../*use*/ ctx[0]
    						]
    					},
    					dirty & /*classMap, className, mini, exited, extended, color, touch, internalClasses*/ 4594 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-fab': true,
    							'mdc-fab--mini': /*mini*/ ctx[5],
    							'mdc-fab--exited': /*exited*/ ctx[6],
    							'mdc-fab--extended': /*extended*/ ctx[7],
    							'smui-fab--color-primary': /*color*/ ctx[4] === 'primary',
    							'mdc-fab--touch': /*touch*/ ctx[8],
    							.../*internalClasses*/ ctx[12]
    						})
    					},
    					dirty & /*Object, internalStyles, style*/ 8196 && {
    						style: Object.entries(/*internalStyles*/ ctx[13]).map(func$f).concat([/*style*/ ctx[2]]).join(' ')
    					},
    					dirty & /*href*/ 512 && { href: /*href*/ ctx[9] },
    					dirty & /*$$restProps*/ 262144 && get_spread_object(/*$$restProps*/ ctx[18])
    				])
    			: {};

    			if (dirty & /*$$scope, touch*/ 4194560) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[10])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[21](switch_instance);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[21](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$f = ([name, value]) => `${name}: ${value};`;

    function instance$1g($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","ripple","color","mini","exited","extended","touch","href","component","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Fab', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { ripple = true } = $$props;
    	let { color = 'secondary' } = $$props;
    	let { mini = false } = $$props;
    	let { exited = false } = $$props;
    	let { extended = false } = $$props;
    	let { touch = false } = $$props;
    	let { href = undefined } = $$props;
    	let element;
    	let internalClasses = {};
    	let internalStyles = {};
    	let { component = href == null ? Button : A } = $$props;
    	setContext('SMUI:label:context', 'fab');
    	setContext('SMUI:icon:context', 'fab');

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(12, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(12, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(13, internalStyles);
    			} else {
    				$$invalidate(13, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(11, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
    		if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ('mini' in $$new_props) $$invalidate(5, mini = $$new_props.mini);
    		if ('exited' in $$new_props) $$invalidate(6, exited = $$new_props.exited);
    		if ('extended' in $$new_props) $$invalidate(7, extended = $$new_props.extended);
    		if ('touch' in $$new_props) $$invalidate(8, touch = $$new_props.touch);
    		if ('href' in $$new_props) $$invalidate(9, href = $$new_props.href);
    		if ('component' in $$new_props) $$invalidate(10, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		Ripple,
    		A,
    		Button,
    		forwardEvents,
    		use,
    		className,
    		style,
    		ripple,
    		color,
    		mini,
    		exited,
    		extended,
    		touch,
    		href,
    		element,
    		internalClasses,
    		internalStyles,
    		component,
    		addClass,
    		removeClass,
    		addStyle,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
    		if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
    		if ('mini' in $$props) $$invalidate(5, mini = $$new_props.mini);
    		if ('exited' in $$props) $$invalidate(6, exited = $$new_props.exited);
    		if ('extended' in $$props) $$invalidate(7, extended = $$new_props.extended);
    		if ('touch' in $$props) $$invalidate(8, touch = $$new_props.touch);
    		if ('href' in $$props) $$invalidate(9, href = $$new_props.href);
    		if ('element' in $$props) $$invalidate(11, element = $$new_props.element);
    		if ('internalClasses' in $$props) $$invalidate(12, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(13, internalStyles = $$new_props.internalStyles);
    		if ('component' in $$props) $$invalidate(10, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		style,
    		ripple,
    		color,
    		mini,
    		exited,
    		extended,
    		touch,
    		href,
    		component,
    		element,
    		internalClasses,
    		internalStyles,
    		forwardEvents,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		getElement,
    		slots,
    		switch_instance_binding,
    		$$scope
    	];
    }

    class Fab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1g, create_fragment$1A, safe_not_equal, {
    			use: 0,
    			class: 1,
    			style: 2,
    			ripple: 3,
    			color: 4,
    			mini: 5,
    			exited: 6,
    			extended: 7,
    			touch: 8,
    			href: 9,
    			component: 10,
    			getElement: 19
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Fab",
    			options,
    			id: create_fragment$1A.name
    		});
    	}

    	get use() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mini() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mini(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get exited() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set exited(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extended() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extended(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[19];
    	}

    	set getElement(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/FloatingActionButton.svelte generated by Svelte v3.44.3 */
    const file$1b = "src/components/FloatingActionButton.svelte";

    // (19:4) <Icon class="material-icons">
    function create_default_slot_2$B(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*icon*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*icon*/ 1) set_data_dev(t, /*icon*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$B.name,
    		type: "slot",
    		source: "(19:4) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (20:4) {#if extended}
    function create_if_block$G(ctx) {
    	let label_1;
    	let current;

    	label_1 = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_1$E] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_1_changes = {};

    			if (dirty & /*$$scope, label*/ 130) {
    				label_1_changes.$$scope = { dirty, ctx };
    			}

    			label_1.$set(label_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$G.name,
    		type: "if",
    		source: "(20:4) {#if extended}",
    		ctx
    	});

    	return block;
    }

    // (21:4) <Label>
    function create_default_slot_1$E(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*label*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$E.name,
    		type: "slot",
    		source: "(21:4) <Label>",
    		ctx
    	});

    	return block;
    }

    // (18:2) <Fab color="primary" on:click={doDispatch} {extended}>
    function create_default_slot$T(ctx) {
    	let icon_1;
    	let t;
    	let if_block_anchor;
    	let current;

    	icon_1 = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_2$B] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*extended*/ ctx[2] && create_if_block$G(ctx);

    	const block = {
    		c: function create() {
    			create_component(icon_1.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon_1, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_1_changes = {};

    			if (dirty & /*$$scope, icon*/ 129) {
    				icon_1_changes.$$scope = { dirty, ctx };
    			}

    			icon_1.$set(icon_1_changes);

    			if (/*extended*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*extended*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$G(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon_1, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$T.name,
    		type: "slot",
    		source: "(18:2) <Fab color=\\\"primary\\\" on:click={doDispatch} {extended}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1z(ctx) {
    	let div;
    	let fab;
    	let div_class_value;
    	let current;

    	fab = new Fab({
    			props: {
    				color: "primary",
    				extended: /*extended*/ ctx[2],
    				$$slots: { default: [create_default_slot$T] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	fab.$on("click", /*doDispatch*/ ctx[4]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(fab.$$.fragment);
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*containerClass*/ ctx[3]) + " svelte-xwldxa"));
    			add_location(div, file$1b, 16, 0, 448);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(fab, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const fab_changes = {};
    			if (dirty & /*extended*/ 4) fab_changes.extended = /*extended*/ ctx[2];

    			if (dirty & /*$$scope, label, extended, icon*/ 135) {
    				fab_changes.$$scope = { dirty, ctx };
    			}

    			fab.$set(fab_changes);

    			if (!current || dirty & /*containerClass*/ 8 && div_class_value !== (div_class_value = "" + (null_to_empty(/*containerClass*/ ctx[3]) + " svelte-xwldxa"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(fab);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FloatingActionButton', slots, []);
    	let { icon = 'add' } = $$props;
    	let { label = '' } = $$props;
    	let { float = true } = $$props;
    	const dispatch = createEventDispatcher();

    	function doDispatch() {
    		dispatch('click');
    	}

    	let extended = false;
    	let containerClass = '';
    	const writable_props = ['icon', 'label', 'float'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FloatingActionButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('float' in $$props) $$invalidate(5, float = $$props.float);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		Fab,
    		Label,
    		Icon: Icon$1,
    		icon,
    		label,
    		float,
    		dispatch,
    		doDispatch,
    		extended,
    		containerClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('float' in $$props) $$invalidate(5, float = $$props.float);
    		if ('extended' in $$props) $$invalidate(2, extended = $$props.extended);
    		if ('containerClass' in $$props) $$invalidate(3, containerClass = $$props.containerClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*label*/ 2) {
    			$$invalidate(2, extended = label !== undefined && label !== null && label !== '');
    		}

    		if ($$self.$$.dirty & /*float*/ 32) {
    			$$invalidate(3, containerClass = float ? 'float' : '');
    		}
    	};

    	return [icon, label, extended, containerClass, doDispatch, float];
    }

    class FloatingActionButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1f, create_fragment$1z, safe_not_equal, { icon: 0, label: 1, float: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FloatingActionButton",
    			options,
    			id: create_fragment$1z.name
    		});
    	}

    	get icon() {
    		throw new Error("<FloatingActionButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<FloatingActionButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<FloatingActionButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<FloatingActionButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get float() {
    		throw new Error("<FloatingActionButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set float(value) {
    		throw new Error("<FloatingActionButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$h = {
        ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
        ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
        ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
        ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',
        ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
        ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
        BACKGROUND: 'mdc-checkbox__background',
        CHECKED: 'mdc-checkbox--checked',
        CHECKMARK: 'mdc-checkbox__checkmark',
        CHECKMARK_PATH: 'mdc-checkbox__checkmark-path',
        DISABLED: 'mdc-checkbox--disabled',
        INDETERMINATE: 'mdc-checkbox--indeterminate',
        MIXEDMARK: 'mdc-checkbox__mixedmark',
        NATIVE_CONTROL: 'mdc-checkbox__native-control',
        ROOT: 'mdc-checkbox',
        SELECTED: 'mdc-checkbox--selected',
        UPGRADED: 'mdc-checkbox--upgraded',
    };
    var strings$j = {
        ARIA_CHECKED_ATTR: 'aria-checked',
        ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',
        DATA_INDETERMINATE_ATTR: 'data-indeterminate',
        NATIVE_CONTROL_SELECTOR: '.mdc-checkbox__native-control',
        TRANSITION_STATE_CHECKED: 'checked',
        TRANSITION_STATE_INDETERMINATE: 'indeterminate',
        TRANSITION_STATE_INIT: 'init',
        TRANSITION_STATE_UNCHECKED: 'unchecked',
    };
    var numbers$7 = {
        ANIM_END_LATCH_MS: 250,
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCCheckboxFoundation = /** @class */ (function (_super) {
        __extends(MDCCheckboxFoundation, _super);
        function MDCCheckboxFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCCheckboxFoundation.defaultAdapter), adapter)) || this;
            _this.currentCheckState = strings$j.TRANSITION_STATE_INIT;
            _this.currentAnimationClass = '';
            _this.animEndLatchTimer = 0;
            _this.enableAnimationEndHandler = false;
            return _this;
        }
        Object.defineProperty(MDCCheckboxFoundation, "cssClasses", {
            get: function () {
                return cssClasses$h;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCCheckboxFoundation, "strings", {
            get: function () {
                return strings$j;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCCheckboxFoundation, "numbers", {
            get: function () {
                return numbers$7;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCCheckboxFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    forceLayout: function () { return undefined; },
                    hasNativeControl: function () { return false; },
                    isAttachedToDOM: function () { return false; },
                    isChecked: function () { return false; },
                    isIndeterminate: function () { return false; },
                    removeClass: function () { return undefined; },
                    removeNativeControlAttr: function () { return undefined; },
                    setNativeControlAttr: function () { return undefined; },
                    setNativeControlDisabled: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCCheckboxFoundation.prototype.init = function () {
            this.currentCheckState = this.determineCheckState();
            this.updateAriaChecked();
            this.adapter.addClass(cssClasses$h.UPGRADED);
        };
        MDCCheckboxFoundation.prototype.destroy = function () {
            clearTimeout(this.animEndLatchTimer);
        };
        MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {
            this.adapter.setNativeControlDisabled(disabled);
            if (disabled) {
                this.adapter.addClass(cssClasses$h.DISABLED);
            }
            else {
                this.adapter.removeClass(cssClasses$h.DISABLED);
            }
        };
        /**
         * Handles the animationend event for the checkbox
         */
        MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {
            var _this = this;
            if (!this.enableAnimationEndHandler) {
                return;
            }
            clearTimeout(this.animEndLatchTimer);
            this.animEndLatchTimer = setTimeout(function () {
                _this.adapter.removeClass(_this.currentAnimationClass);
                _this.enableAnimationEndHandler = false;
            }, numbers$7.ANIM_END_LATCH_MS);
        };
        /**
         * Handles the change event for the checkbox
         */
        MDCCheckboxFoundation.prototype.handleChange = function () {
            this.transitionCheckState();
        };
        MDCCheckboxFoundation.prototype.transitionCheckState = function () {
            if (!this.adapter.hasNativeControl()) {
                return;
            }
            var oldState = this.currentCheckState;
            var newState = this.determineCheckState();
            if (oldState === newState) {
                return;
            }
            this.updateAriaChecked();
            var TRANSITION_STATE_UNCHECKED = strings$j.TRANSITION_STATE_UNCHECKED;
            var SELECTED = cssClasses$h.SELECTED;
            if (newState === TRANSITION_STATE_UNCHECKED) {
                this.adapter.removeClass(SELECTED);
            }
            else {
                this.adapter.addClass(SELECTED);
            }
            // Check to ensure that there isn't a previously existing animation class, in case for example
            // the user interacted with the checkbox before the animation was finished.
            if (this.currentAnimationClass.length > 0) {
                clearTimeout(this.animEndLatchTimer);
                this.adapter.forceLayout();
                this.adapter.removeClass(this.currentAnimationClass);
            }
            this.currentAnimationClass =
                this.getTransitionAnimationClass(oldState, newState);
            this.currentCheckState = newState;
            // Check for parentNode so that animations are only run when the element is attached
            // to the DOM.
            if (this.adapter.isAttachedToDOM() &&
                this.currentAnimationClass.length > 0) {
                this.adapter.addClass(this.currentAnimationClass);
                this.enableAnimationEndHandler = true;
            }
        };
        MDCCheckboxFoundation.prototype.determineCheckState = function () {
            var TRANSITION_STATE_INDETERMINATE = strings$j.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = strings$j.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings$j.TRANSITION_STATE_UNCHECKED;
            if (this.adapter.isIndeterminate()) {
                return TRANSITION_STATE_INDETERMINATE;
            }
            return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED :
                TRANSITION_STATE_UNCHECKED;
        };
        MDCCheckboxFoundation.prototype.getTransitionAnimationClass = function (oldState, newState) {
            var TRANSITION_STATE_INIT = strings$j.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = strings$j.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings$j.TRANSITION_STATE_UNCHECKED;
            var _a = MDCCheckboxFoundation.cssClasses, ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;
            switch (oldState) {
                case TRANSITION_STATE_INIT:
                    if (newState === TRANSITION_STATE_UNCHECKED) {
                        return '';
                    }
                    return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
                case TRANSITION_STATE_UNCHECKED:
                    return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
                case TRANSITION_STATE_CHECKED:
                    return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
                default: // TRANSITION_STATE_INDETERMINATE
                    return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
            }
        };
        MDCCheckboxFoundation.prototype.updateAriaChecked = function () {
            // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.
            if (this.adapter.isIndeterminate()) {
                this.adapter.setNativeControlAttr(strings$j.ARIA_CHECKED_ATTR, strings$j.ARIA_CHECKED_INDETERMINATE_VALUE);
            }
            else {
                // The on/off state does not need to keep track of aria-checked, since
                // the screenreader uses the checked property on the checkbox element.
                this.adapter.removeNativeControlAttr(strings$j.ARIA_CHECKED_ATTR);
            }
        };
        return MDCCheckboxFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * CSS class names used in component.
     */
    var cssClasses$g = {
        CELL: 'mdc-data-table__cell',
        CELL_NUMERIC: 'mdc-data-table__cell--numeric',
        CONTENT: 'mdc-data-table__content',
        HEADER_CELL: 'mdc-data-table__header-cell',
        HEADER_CELL_LABEL: 'mdc-data-table__header-cell-label',
        HEADER_CELL_SORTED: 'mdc-data-table__header-cell--sorted',
        HEADER_CELL_SORTED_DESCENDING: 'mdc-data-table__header-cell--sorted-descending',
        HEADER_CELL_WITH_SORT: 'mdc-data-table__header-cell--with-sort',
        HEADER_CELL_WRAPPER: 'mdc-data-table__header-cell-wrapper',
        HEADER_ROW: 'mdc-data-table__header-row',
        HEADER_ROW_CHECKBOX: 'mdc-data-table__header-row-checkbox',
        IN_PROGRESS: 'mdc-data-table--in-progress',
        LINEAR_PROGRESS: 'mdc-data-table__linear-progress',
        PAGINATION_ROWS_PER_PAGE_LABEL: 'mdc-data-table__pagination-rows-per-page-label',
        PAGINATION_ROWS_PER_PAGE_SELECT: 'mdc-data-table__pagination-rows-per-page-select',
        PROGRESS_INDICATOR: 'mdc-data-table__progress-indicator',
        ROOT: 'mdc-data-table',
        ROW: 'mdc-data-table__row',
        ROW_CHECKBOX: 'mdc-data-table__row-checkbox',
        ROW_SELECTED: 'mdc-data-table__row--selected',
        SORT_ICON_BUTTON: 'mdc-data-table__sort-icon-button',
        SORT_STATUS_LABEL: 'mdc-data-table__sort-status-label',
        TABLE_CONTAINER: 'mdc-data-table__table-container',
    };
    /**
     * DOM attributes used in component.
     */
    var attributes = {
        ARIA_SELECTED: 'aria-selected',
        ARIA_SORT: 'aria-sort',
    };
    /**
     * List of data attributes used in component.
     */
    var dataAttributes = {
        COLUMN_ID: 'data-column-id',
        ROW_ID: 'data-row-id',
    };
    /**
     * CSS selectors used in component.
     */
    var selectors = {
        CONTENT: "." + cssClasses$g.CONTENT,
        HEADER_CELL: "." + cssClasses$g.HEADER_CELL,
        HEADER_CELL_WITH_SORT: "." + cssClasses$g.HEADER_CELL_WITH_SORT,
        HEADER_ROW: "." + cssClasses$g.HEADER_ROW,
        HEADER_ROW_CHECKBOX: "." + cssClasses$g.HEADER_ROW_CHECKBOX,
        PROGRESS_INDICATOR: "." + cssClasses$g.PROGRESS_INDICATOR,
        ROW: "." + cssClasses$g.ROW,
        ROW_CHECKBOX: "." + cssClasses$g.ROW_CHECKBOX,
        ROW_SELECTED: "." + cssClasses$g.ROW_SELECTED,
        SORT_ICON_BUTTON: "." + cssClasses$g.SORT_ICON_BUTTON,
        SORT_STATUS_LABEL: "." + cssClasses$g.SORT_STATUS_LABEL,
    };
    /**
     * Attributes and selectors used in component.
     * @deprecated Use `attributes`, `dataAttributes` and `selectors` instead.
     */
    var strings$i = {
        ARIA_SELECTED: attributes.ARIA_SELECTED,
        ARIA_SORT: attributes.ARIA_SORT,
        DATA_ROW_ID_ATTR: dataAttributes.ROW_ID,
        HEADER_ROW_CHECKBOX_SELECTOR: selectors.HEADER_ROW_CHECKBOX,
        ROW_CHECKBOX_SELECTOR: selectors.ROW_CHECKBOX,
        ROW_SELECTED_SELECTOR: selectors.ROW_SELECTED,
        ROW_SELECTOR: selectors.ROW,
    };
    /**
     * Sort values defined by ARIA.
     * See https://www.w3.org/WAI/PF/aria/states_and_properties#aria-sort
     */
    var SortValue;
    (function (SortValue) {
        // Items are sorted in ascending order by this column.
        SortValue["ASCENDING"] = "ascending";
        // Items are sorted in descending order by this column.
        SortValue["DESCENDING"] = "descending";
        // There is no defined sort applied to the column.
        SortValue["NONE"] = "none";
        // A sort algorithm other than ascending or descending has been applied.
        SortValue["OTHER"] = "other";
    })(SortValue || (SortValue = {}));

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * The Foundation of data table component containing pure business logic, any
     * logic requiring DOM manipulation are delegated to adapter methods.
     */
    var MDCDataTableFoundation = /** @class */ (function (_super) {
        __extends(MDCDataTableFoundation, _super);
        function MDCDataTableFoundation(adapter) {
            return _super.call(this, __assign(__assign({}, MDCDataTableFoundation.defaultAdapter), adapter)) || this;
        }
        Object.defineProperty(MDCDataTableFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    addClassAtRowIndex: function () { return undefined; },
                    getAttributeByHeaderCellIndex: function () { return ''; },
                    getHeaderCellCount: function () { return 0; },
                    getHeaderCellElements: function () { return []; },
                    getRowCount: function () { return 0; },
                    getRowElements: function () { return []; },
                    getRowIdAtIndex: function () { return ''; },
                    getRowIndexByChildElement: function () { return 0; },
                    getSelectedRowCount: function () { return 0; },
                    getTableContainerHeight: function () { return 0; },
                    getTableHeaderHeight: function () { return 0; },
                    isCheckboxAtRowIndexChecked: function () { return false; },
                    isHeaderRowCheckboxChecked: function () { return false; },
                    isRowsSelectable: function () { return false; },
                    notifyRowSelectionChanged: function () { return undefined; },
                    notifySelectedAll: function () { return undefined; },
                    notifySortAction: function () { return undefined; },
                    notifyUnselectedAll: function () { return undefined; },
                    notifyRowClick: function () { return undefined; },
                    registerHeaderRowCheckbox: function () { return undefined; },
                    registerRowCheckboxes: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    removeClassAtRowIndex: function () { return undefined; },
                    removeClassNameByHeaderCellIndex: function () { return undefined; },
                    setAttributeAtRowIndex: function () { return undefined; },
                    setAttributeByHeaderCellIndex: function () { return undefined; },
                    setClassNameByHeaderCellIndex: function () { return undefined; },
                    setHeaderRowCheckboxChecked: function () { return undefined; },
                    setHeaderRowCheckboxIndeterminate: function () { return undefined; },
                    setProgressIndicatorStyles: function () { return undefined; },
                    setRowCheckboxCheckedAtIndex: function () { return undefined; },
                    setSortStatusLabelByHeaderCellIndex: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Re-initializes header row checkbox and row checkboxes when selectable rows
         * are added or removed from table. Use this if registering checkbox is
         * synchronous.
         */
        MDCDataTableFoundation.prototype.layout = function () {
            if (this.adapter.isRowsSelectable()) {
                this.adapter.registerHeaderRowCheckbox();
                this.adapter.registerRowCheckboxes();
                this.setHeaderRowCheckboxState();
            }
        };
        /**
         * Re-initializes header row checkbox and row checkboxes when selectable rows
         * are added or removed from table. Use this if registering checkbox is
         * asynchronous.
         */
        MDCDataTableFoundation.prototype.layoutAsync = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.adapter.isRowsSelectable()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.adapter.registerHeaderRowCheckbox()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.adapter.registerRowCheckboxes()];
                        case 2:
                            _a.sent();
                            this.setHeaderRowCheckboxState();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @return Returns array of row elements.
         */
        MDCDataTableFoundation.prototype.getRows = function () {
            return this.adapter.getRowElements();
        };
        /**
         * @return Array of header cell elements.
         */
        MDCDataTableFoundation.prototype.getHeaderCells = function () {
            return this.adapter.getHeaderCellElements();
        };
        /**
         * Sets selected row ids. Overwrites previously selected rows.
         * @param rowIds Array of row ids that needs to be selected.
         */
        MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {
            for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                var rowId = this.adapter.getRowIdAtIndex(rowIndex);
                var isSelected = false;
                if (rowId && rowIds.indexOf(rowId) >= 0) {
                    isSelected = true;
                }
                this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);
                this.selectRowAtIndex(rowIndex, isSelected);
            }
            this.setHeaderRowCheckboxState();
        };
        /**
         * @return Returns array of all row ids.
         */
        MDCDataTableFoundation.prototype.getRowIds = function () {
            var rowIds = [];
            for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
            }
            return rowIds;
        };
        /**
         * @return Returns array of selected row ids.
         */
        MDCDataTableFoundation.prototype.getSelectedRowIds = function () {
            var selectedRowIds = [];
            for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {
                    selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
                }
            }
            return selectedRowIds;
        };
        /**
         * Handles header row checkbox change event.
         */
        MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {
            var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();
            for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);
                this.selectRowAtIndex(rowIndex, isHeaderChecked);
            }
            if (isHeaderChecked) {
                this.adapter.notifySelectedAll();
            }
            else {
                this.adapter.notifyUnselectedAll();
            }
        };
        /**
         * Handles change event originated from row checkboxes.
         */
        MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {
            var rowIndex = this.adapter.getRowIndexByChildElement(event.target);
            if (rowIndex === -1) {
                return;
            }
            var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);
            this.selectRowAtIndex(rowIndex, selected);
            this.setHeaderRowCheckboxState();
            var rowId = this.adapter.getRowIdAtIndex(rowIndex);
            this.adapter.notifyRowSelectionChanged({ rowId: rowId, rowIndex: rowIndex, selected: selected });
        };
        /**
         * Handles sort action on sortable header cell.
         */
        MDCDataTableFoundation.prototype.handleSortAction = function (eventData) {
            var columnId = eventData.columnId, columnIndex = eventData.columnIndex, headerCell = eventData.headerCell;
            // Reset sort attributes / classes on other header cells.
            for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {
                if (index === columnIndex) {
                    continue;
                }
                this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses$g.HEADER_CELL_SORTED);
                this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses$g.HEADER_CELL_SORTED_DESCENDING);
                this.adapter.setAttributeByHeaderCellIndex(index, strings$i.ARIA_SORT, SortValue.NONE);
                this.adapter.setSortStatusLabelByHeaderCellIndex(index, SortValue.NONE);
            }
            // Set appropriate sort attributes / classes on target header cell.
            this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses$g.HEADER_CELL_SORTED);
            var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, strings$i.ARIA_SORT);
            var sortValue = SortValue.NONE;
            // Set to descending if sorted on ascending order.
            if (currentSortValue === SortValue.ASCENDING) {
                this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses$g.HEADER_CELL_SORTED_DESCENDING);
                this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$i.ARIA_SORT, SortValue.DESCENDING);
                sortValue = SortValue.DESCENDING;
                // Set to ascending if sorted on descending order.
            }
            else if (currentSortValue === SortValue.DESCENDING) {
                this.adapter.removeClassNameByHeaderCellIndex(columnIndex, cssClasses$g.HEADER_CELL_SORTED_DESCENDING);
                this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$i.ARIA_SORT, SortValue.ASCENDING);
                sortValue = SortValue.ASCENDING;
            }
            else {
                // Set to ascending by default when not sorted.
                this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$i.ARIA_SORT, SortValue.ASCENDING);
                sortValue = SortValue.ASCENDING;
            }
            this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);
            this.adapter.notifySortAction({
                columnId: columnId,
                columnIndex: columnIndex,
                headerCell: headerCell,
                sortValue: sortValue,
            });
        };
        /**
         * Handles data table row click event.
         */
        MDCDataTableFoundation.prototype.handleRowClick = function (_a) {
            var rowId = _a.rowId, row = _a.row;
            this.adapter.notifyRowClick({
                rowId: rowId,
                row: row,
            });
        };
        /**
         * Shows progress indicator blocking only the table body content when in
         * loading state.
         */
        MDCDataTableFoundation.prototype.showProgress = function () {
            var tableHeaderHeight = this.adapter.getTableHeaderHeight();
            // Calculate the height of table content (Not scroll content) excluding
            // header row height.
            var height = this.adapter.getTableContainerHeight() - tableHeaderHeight;
            var top = tableHeaderHeight;
            this.adapter.setProgressIndicatorStyles({
                height: height + "px",
                top: top + "px",
            });
            this.adapter.addClass(cssClasses$g.IN_PROGRESS);
        };
        /**
         * Hides progress indicator when data table is finished loading.
         */
        MDCDataTableFoundation.prototype.hideProgress = function () {
            this.adapter.removeClass(cssClasses$g.IN_PROGRESS);
        };
        /**
         * Updates header row checkbox state based on number of rows selected.
         */
        MDCDataTableFoundation.prototype.setHeaderRowCheckboxState = function () {
            if (this.adapter.getSelectedRowCount() === 0) {
                this.adapter.setHeaderRowCheckboxChecked(false);
                this.adapter.setHeaderRowCheckboxIndeterminate(false);
            }
            else if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {
                this.adapter.setHeaderRowCheckboxChecked(true);
                this.adapter.setHeaderRowCheckboxIndeterminate(false);
            }
            else {
                this.adapter.setHeaderRowCheckboxIndeterminate(true);
                this.adapter.setHeaderRowCheckboxChecked(false);
            }
        };
        /**
         * Sets the attributes of row element based on selection state.
         */
        MDCDataTableFoundation.prototype.selectRowAtIndex = function (rowIndex, selected) {
            if (selected) {
                this.adapter.addClassAtRowIndex(rowIndex, cssClasses$g.ROW_SELECTED);
                this.adapter.setAttributeAtRowIndex(rowIndex, strings$i.ARIA_SELECTED, 'true');
            }
            else {
                this.adapter.removeClassAtRowIndex(rowIndex, cssClasses$g.ROW_SELECTED);
                this.adapter.setAttributeAtRowIndex(rowIndex, strings$i.ARIA_SELECTED, 'false');
            }
        };
        return MDCDataTableFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/data-table/dist/DataTable.svelte generated by Svelte v3.44.3 */

    const { Error: Error_1$2 } = globals;

    const file$1a = "node_modules/@smui/data-table/dist/DataTable.svelte";
    const get_paginate_slot_changes = dirty => ({});
    const get_paginate_slot_context = ctx => ({});
    const get_progress_slot_changes = dirty => ({});
    const get_progress_slot_context = ctx => ({});

    // (45:2) {#if $$slots.progress}
    function create_if_block$F(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let div1_style_value;
    	let current;
    	const progress_slot_template = /*#slots*/ ctx[33].progress;
    	const progress_slot = create_slot(progress_slot_template, ctx, /*$$scope*/ ctx[32], get_progress_slot_context);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			if (progress_slot) progress_slot.c();
    			attr_dev(div0, "class", "mdc-data-table__scrim");
    			add_location(div0, file$1a, 51, 6, 1604);
    			attr_dev(div1, "class", "mdc-data-table__progress-indicator");
    			attr_dev(div1, "style", div1_style_value = Object.entries(/*progressIndicatorStyles*/ ctx[13]).map(func$e).join(' '));
    			add_location(div1, file$1a, 45, 4, 1411);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t);

    			if (progress_slot) {
    				progress_slot.m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (progress_slot) {
    				if (progress_slot.p && (!current || dirty[1] & /*$$scope*/ 2)) {
    					update_slot_base(
    						progress_slot,
    						progress_slot_template,
    						ctx,
    						/*$$scope*/ ctx[32],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[32])
    						: get_slot_changes(progress_slot_template, /*$$scope*/ ctx[32], dirty, get_progress_slot_changes),
    						get_progress_slot_context
    					);
    				}
    			}

    			if (!current || dirty[0] & /*progressIndicatorStyles*/ 8192 && div1_style_value !== (div1_style_value = Object.entries(/*progressIndicatorStyles*/ ctx[13]).map(func$e).join(' '))) {
    				attr_dev(div1, "style", div1_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(progress_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(progress_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (progress_slot) progress_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$F.name,
    		type: "if",
    		source: "(45:2) {#if $$slots.progress}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1y(ctx) {
    	let div1;
    	let div0;
    	let table;
    	let table_class_value;
    	let useActions_action;
    	let div0_class_value;
    	let useActions_action_1;
    	let t0;
    	let t1;
    	let div1_class_value;
    	let useActions_action_2;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[33].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[32], null);

    	let table_levels = [
    		{
    			class: table_class_value = classMap({
    				[/*table$class*/ ctx[6]]: true,
    				'mdc-data-table__table': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[22], 'table$')
    	];

    	let table_data = {};

    	for (let i = 0; i < table_levels.length; i += 1) {
    		table_data = assign(table_data, table_levels[i]);
    	}

    	let div0_levels = [
    		{
    			class: div0_class_value = classMap({
    				[/*container$class*/ ctx[4]]: true,
    				'mdc-data-table__table-container': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[22], 'container$')
    	];

    	let div0_data = {};

    	for (let i = 0; i < div0_levels.length; i += 1) {
    		div0_data = assign(div0_data, div0_levels[i]);
    	}

    	let if_block = /*$$slots*/ ctx[21].progress && create_if_block$F(ctx);
    	const paginate_slot_template = /*#slots*/ ctx[33].paginate;
    	const paginate_slot = create_slot(paginate_slot_template, ctx, /*$$scope*/ ctx[32], get_paginate_slot_context);

    	let div1_levels = [
    		{
    			class: div1_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-data-table': true,
    				'mdc-data-table--sticky-header': /*stickyHeader*/ ctx[2],
    				.../*internalClasses*/ ctx[12]
    			})
    		},
    		exclude(/*$$restProps*/ ctx[22], ['container$', 'table$'])
    	];

    	let div1_data = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div1_data = assign(div1_data, div1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			table = element("table");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			if (paginate_slot) paginate_slot.c();
    			set_attributes(table, table_data);
    			add_location(table, file$1a, 32, 4, 1149);
    			set_attributes(div0, div0_data);
    			add_location(div0, file$1a, 23, 2, 918);
    			set_attributes(div1, div1_data);
    			add_location(div1, file$1a, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, table);

    			if (default_slot) {
    				default_slot.m(table, null);
    			}

    			/*div0_binding*/ ctx[34](div0);
    			append_dev(div1, t0);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t1);

    			if (paginate_slot) {
    				paginate_slot.m(div1, null);
    			}

    			/*div1_binding*/ ctx[35](div1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, table, /*table$use*/ ctx[5])),
    					action_destroyer(useActions_action_1 = useActions.call(null, div0, /*container$use*/ ctx[3])),
    					action_destroyer(useActions_action_2 = useActions.call(null, div1, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[15].call(null, div1)),
    					listen_dev(div1, "SMUICheckbox:mount", /*SMUICheckbox_mount_handler*/ ctx[36], false, false, false),
    					listen_dev(div1, "SMUIDataTableHeader:mount", /*SMUIDataTableHeader_mount_handler*/ ctx[37], false, false, false),
    					listen_dev(div1, "SMUIDataTableHeader:unmount", /*SMUIDataTableHeader_unmount_handler*/ ctx[38], false, false, false),
    					listen_dev(div1, "SMUIDataTableBody:mount", /*SMUIDataTableBody_mount_handler*/ ctx[39], false, false, false),
    					listen_dev(div1, "SMUIDataTableBody:unmount", /*SMUIDataTableBody_unmount_handler*/ ctx[40], false, false, false),
    					listen_dev(div1, "SMUIDataTableHeaderCheckbox:change", /*SMUIDataTableHeaderCheckbox_change_handler*/ ctx[41], false, false, false),
    					listen_dev(div1, "SMUIDataTableHeader:click", /*handleHeaderRowClick*/ ctx[19], false, false, false),
    					listen_dev(div1, "SMUIDataTableRow:click", /*handleRowClick*/ ctx[20], false, false, false),
    					listen_dev(div1, "SMUIDataTableBodyCheckbox:change", /*SMUIDataTableBodyCheckbox_change_handler*/ ctx[42], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[32],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[32])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[32], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(table, table_data = get_spread_update(table_levels, [
    				(!current || dirty[0] & /*table$class*/ 64 && table_class_value !== (table_class_value = classMap({
    					[/*table$class*/ ctx[6]]: true,
    					'mdc-data-table__table': true
    				}))) && { class: table_class_value },
    				dirty[0] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[22], 'table$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*table$use*/ 32) useActions_action.update.call(null, /*table$use*/ ctx[5]);

    			set_attributes(div0, div0_data = get_spread_update(div0_levels, [
    				(!current || dirty[0] & /*container$class*/ 16 && div0_class_value !== (div0_class_value = classMap({
    					[/*container$class*/ ctx[4]]: true,
    					'mdc-data-table__table-container': true
    				}))) && { class: div0_class_value },
    				dirty[0] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[22], 'container$')
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*container$use*/ 8) useActions_action_1.update.call(null, /*container$use*/ ctx[3]);

    			if (/*$$slots*/ ctx[21].progress) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*$$slots*/ 2097152) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$F(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (paginate_slot) {
    				if (paginate_slot.p && (!current || dirty[1] & /*$$scope*/ 2)) {
    					update_slot_base(
    						paginate_slot,
    						paginate_slot_template,
    						ctx,
    						/*$$scope*/ ctx[32],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[32])
    						: get_slot_changes(paginate_slot_template, /*$$scope*/ ctx[32], dirty, get_paginate_slot_changes),
    						get_paginate_slot_context
    					);
    				}
    			}

    			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
    				(!current || dirty[0] & /*className, stickyHeader, internalClasses*/ 4102 && div1_class_value !== (div1_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-data-table': true,
    					'mdc-data-table--sticky-header': /*stickyHeader*/ ctx[2],
    					.../*internalClasses*/ ctx[12]
    				}))) && { class: div1_class_value },
    				dirty[0] & /*$$restProps*/ 4194304 && exclude(/*$$restProps*/ ctx[22], ['container$', 'table$'])
    			]));

    			if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*use*/ 1) useActions_action_2.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block);
    			transition_in(paginate_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block);
    			transition_out(paginate_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			/*div0_binding*/ ctx[34](null);
    			if (if_block) if_block.d();
    			if (paginate_slot) paginate_slot.d(detaching);
    			/*div1_binding*/ ctx[35](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$e = ([name, value]) => `${name}: ${value};`;

    function instance_1$j($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","stickyHeader","sortable","sort","sortDirection","sortAscendingAriaLabel","sortDescendingAriaLabel","container$use","container$class","table$use","table$class","layout","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $progressClosed;
    	let $sortDirectionStore;
    	let $sortStore;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DataTable', slots, ['default','progress','paginate']);
    	const $$slots = compute_slots(slots);
    	const { closest } = ponyfill;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { stickyHeader = false } = $$props;
    	let { sortable = false } = $$props;
    	let { sort = null } = $$props;
    	let { sortDirection = 'ascending' } = $$props;
    	let { sortAscendingAriaLabel = 'sorted, ascending' } = $$props;
    	let { sortDescendingAriaLabel = 'sorted, descending' } = $$props;
    	let { container$use = [] } = $$props;
    	let { container$class = '' } = $$props;
    	let { table$use = [] } = $$props;
    	let { table$class = '' } = $$props;
    	let element;
    	let instance;
    	let container;
    	let header = undefined;
    	let body = undefined;
    	let internalClasses = {};
    	let progressIndicatorStyles = { height: 'auto', top: 'initial' };
    	let addLayoutListener = getContext('SMUI:addLayoutListener');
    	let removeLayoutListener;
    	let postMount = false;
    	let progressClosed = writable(false);
    	validate_store(progressClosed, 'progressClosed');
    	component_subscribe($$self, progressClosed, value => $$invalidate(31, $progressClosed = value));
    	let sortStore = writable(sort);
    	validate_store(sortStore, 'sortStore');
    	component_subscribe($$self, sortStore, value => $$invalidate(45, $sortStore = value));
    	let sortDirectionStore = writable(sortDirection);
    	validate_store(sortDirectionStore, 'sortDirectionStore');
    	component_subscribe($$self, sortDirectionStore, value => $$invalidate(44, $sortDirectionStore = value));
    	setContext('SMUI:checkbox:context', 'data-table');
    	setContext('SMUI:linear-progress:context', 'data-table');
    	setContext('SMUI:linear-progress:closed', progressClosed);
    	setContext('SMUI:data-table:sortable', sortable);
    	setContext('SMUI:data-table:sort', sortStore);
    	setContext('SMUI:data-table:sortDirection', sortDirectionStore);
    	setContext('SMUI:data-table:sortAscendingAriaLabel', sortAscendingAriaLabel);
    	setContext('SMUI:data-table:sortDescendingAriaLabel', sortDescendingAriaLabel);

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	let previousProgressClosed = undefined;

    	onMount(() => {
    		$$invalidate(7, instance = new MDCDataTableFoundation({
    				addClass,
    				removeClass,
    				getHeaderCellElements: () => {
    					var _a;

    					return (_a = header === null || header === void 0
    					? void 0
    					: header.cells.map(accessor => accessor.element)) !== null && _a !== void 0
    					? _a
    					: [];
    				},
    				getHeaderCellCount: () => {
    					var _a;

    					return (_a = header === null || header === void 0
    					? void 0
    					: header.cells.length) !== null && _a !== void 0
    					? _a
    					: 0;
    				},
    				getAttributeByHeaderCellIndex: (index, name) => {
    					var _a;

    					return (_a = header === null || header === void 0
    					? void 0
    					: header.orderedCells[index].getAttr(name)) !== null && _a !== void 0
    					? _a
    					: null;
    				},
    				setAttributeByHeaderCellIndex: (index, name, value) => {
    					header === null || header === void 0
    					? void 0
    					: header.orderedCells[index].addAttr(name, value);
    				},
    				setClassNameByHeaderCellIndex: (index, className) => {
    					header === null || header === void 0
    					? void 0
    					: header.orderedCells[index].addClass(className);
    				},
    				removeClassNameByHeaderCellIndex: (index, className) => {
    					header === null || header === void 0
    					? void 0
    					: header.orderedCells[index].removeClass(className);
    				},
    				notifySortAction: data => {
    					$$invalidate(23, sort = data.columnId);
    					$$invalidate(24, sortDirection = data.sortValue);
    					dispatch(getElement(), 'SMUIDataTable:sorted', data, undefined, true);
    				},
    				getTableContainerHeight: () => container.getBoundingClientRect().height,
    				getTableHeaderHeight: () => {
    					const tableHeader = getElement().querySelector('.mdc-data-table__header-row');

    					if (!tableHeader) {
    						throw new Error('MDCDataTable: Table header element not found.');
    					}

    					return tableHeader.getBoundingClientRect().height;
    				},
    				setProgressIndicatorStyles: styles => {
    					$$invalidate(13, progressIndicatorStyles = styles);
    				},
    				addClassAtRowIndex: (rowIndex, className) => {
    					body === null || body === void 0
    					? void 0
    					: body.orderedRows[rowIndex].addClass(className);
    				},
    				getRowCount: () => {
    					var _a;

    					return (_a = body === null || body === void 0
    					? void 0
    					: body.rows.length) !== null && _a !== void 0
    					? _a
    					: 0;
    				},
    				getRowElements: () => {
    					var _a;

    					return (_a = body === null || body === void 0
    					? void 0
    					: body.rows.map(accessor => accessor.element)) !== null && _a !== void 0
    					? _a
    					: [];
    				},
    				getRowIdAtIndex: rowIndex => {
    					var _a;

    					return (_a = body === null || body === void 0
    					? void 0
    					: body.orderedRows[rowIndex].rowId) !== null && _a !== void 0
    					? _a
    					: null;
    				},
    				getRowIndexByChildElement: el => {
    					var _a;

    					return (_a = body === null || body === void 0
    					? void 0
    					: body.orderedRows.map(accessor => accessor.element).indexOf(closest(el, '.mdc-data-table__row'))) !== null && _a !== void 0
    					? _a
    					: -1;
    				},
    				getSelectedRowCount: () => {
    					var _a;

    					return (_a = body === null || body === void 0
    					? void 0
    					: body.rows.filter(accessor => accessor.selected).length) !== null && _a !== void 0
    					? _a
    					: 0;
    				},
    				isCheckboxAtRowIndexChecked: rowIndex => {
    					const checkbox = body === null || body === void 0
    					? void 0
    					: body.orderedRows[rowIndex].checkbox;

    					if (checkbox) {
    						return checkbox.checked;
    					}

    					return false;
    				},
    				isHeaderRowCheckboxChecked: () => {
    					const checkbox = header === null || header === void 0
    					? void 0
    					: header.checkbox;

    					if (checkbox) {
    						return checkbox.checked;
    					}

    					return false;
    				},
    				isRowsSelectable: () => !!getElement().querySelector('.mdc-data-table__row-checkbox') || !!getElement().querySelector('.mdc-data-table__header-row-checkbox'),
    				notifyRowSelectionChanged: data => {
    					const row = body === null || body === void 0
    					? void 0
    					: body.orderedRows[data.rowIndex];

    					if (row) {
    						dispatch(
    							getElement(),
    							'SMUIDataTable:rowSelectionChanged',
    							{
    								row: row.element,
    								rowId: row.rowId,
    								rowIndex: data.rowIndex,
    								selected: data.selected
    							},
    							undefined,
    							true
    						);
    					}
    				},
    				notifySelectedAll: () => {
    					setHeaderRowCheckboxIndeterminate(false);
    					dispatch(getElement(), 'SMUIDataTable:selectedAll', undefined, undefined, true);
    				},
    				notifyUnselectedAll: () => {
    					setHeaderRowCheckboxIndeterminate(false);
    					dispatch(getElement(), 'SMUIDataTable:unselectedAll', undefined, undefined, true);
    				},
    				notifyRowClick: detail => {
    					dispatch(getElement(), 'SMUIDataTable:rowClick', detail, undefined, true);
    				},
    				registerHeaderRowCheckbox: () => {
    					
    				}, // Handled automatically.
    				registerRowCheckboxes: () => {
    					
    				}, // Handled automatically.
    				removeClassAtRowIndex: (rowIndex, className) => {
    					body === null || body === void 0
    					? void 0
    					: body.orderedRows[rowIndex].removeClass(className);
    				},
    				setAttributeAtRowIndex: (rowIndex, name, value) => {
    					body === null || body === void 0
    					? void 0
    					: body.orderedRows[rowIndex].addAttr(name, value);
    				},
    				setHeaderRowCheckboxChecked: checked => {
    					const checkbox = header === null || header === void 0
    					? void 0
    					: header.checkbox;

    					if (checkbox) {
    						checkbox.checked = checked;
    					}
    				},
    				setHeaderRowCheckboxIndeterminate,
    				setRowCheckboxCheckedAtIndex: (rowIndex, checked) => {
    					const checkbox = body === null || body === void 0
    					? void 0
    					: body.orderedRows[rowIndex].checkbox;

    					if (checkbox) {
    						checkbox.checked = checked;
    					}
    				},
    				setSortStatusLabelByHeaderCellIndex: (_columnIndex, _sortValue) => {
    					
    				}, // Handled automatically.
    				
    			}));

    		instance.init();
    		instance.layout();
    		$$invalidate(14, postMount = true);

    		return () => {
    			instance.destroy();
    		};
    	});

    	onDestroy(() => {
    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(12, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(12, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function setHeaderRowCheckboxIndeterminate(indeterminate) {
    		const checkbox = header === null || header === void 0
    		? void 0
    		: header.checkbox;

    		if (checkbox) {
    			checkbox.indeterminate = indeterminate;
    		}
    	}

    	function handleHeaderRowClick(event) {
    		if (!instance || !event.detail.target) {
    			return;
    		}

    		const headerCell = closest(event.detail.target, '.mdc-data-table__header-cell--with-sort');

    		if (headerCell) {
    			handleSortAction(headerCell);
    		}
    	}

    	function handleRowClick(event) {
    		if (!instance || !event.detail.target) {
    			return;
    		}

    		const row = closest(event.detail.target, '.mdc-data-table__row');

    		if (row && instance) {
    			instance.handleRowClick({ rowId: event.detail.rowId, row });
    		}
    	}

    	function handleSortAction(headerCell) {
    		var _a, _b;

    		const orderedCells = (_a = header === null || header === void 0
    		? void 0
    		: header.orderedCells) !== null && _a !== void 0
    		? _a
    		: [];

    		const columnIndex = orderedCells.map(accessor => accessor.element).indexOf(headerCell);

    		if (columnIndex === -1) {
    			return;
    		}

    		const columnId = (_b = orderedCells[columnIndex].columnId) !== null && _b !== void 0
    		? _b
    		: null;

    		instance.handleSortAction({ columnId, columnIndex, headerCell });
    	}

    	function layout() {
    		return instance.layout();
    	}

    	function getElement() {
    		return element;
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(9, container);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(8, element);
    		});
    	}

    	const SMUICheckbox_mount_handler = () => instance && postMount && instance.layout();
    	const SMUIDataTableHeader_mount_handler = event => $$invalidate(10, header = event.detail);
    	const SMUIDataTableHeader_unmount_handler = () => $$invalidate(10, header = undefined);
    	const SMUIDataTableBody_mount_handler = event => $$invalidate(11, body = event.detail);
    	const SMUIDataTableBody_unmount_handler = () => $$invalidate(11, body = undefined);
    	const SMUIDataTableHeaderCheckbox_change_handler = () => instance && instance.handleHeaderRowCheckboxChange();
    	const SMUIDataTableBodyCheckbox_change_handler = event => instance && instance.handleRowCheckboxChange(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(22, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('stickyHeader' in $$new_props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
    		if ('sortable' in $$new_props) $$invalidate(25, sortable = $$new_props.sortable);
    		if ('sort' in $$new_props) $$invalidate(23, sort = $$new_props.sort);
    		if ('sortDirection' in $$new_props) $$invalidate(24, sortDirection = $$new_props.sortDirection);
    		if ('sortAscendingAriaLabel' in $$new_props) $$invalidate(26, sortAscendingAriaLabel = $$new_props.sortAscendingAriaLabel);
    		if ('sortDescendingAriaLabel' in $$new_props) $$invalidate(27, sortDescendingAriaLabel = $$new_props.sortDescendingAriaLabel);
    		if ('container$use' in $$new_props) $$invalidate(3, container$use = $$new_props.container$use);
    		if ('container$class' in $$new_props) $$invalidate(4, container$class = $$new_props.container$class);
    		if ('table$use' in $$new_props) $$invalidate(5, table$use = $$new_props.table$use);
    		if ('table$class' in $$new_props) $$invalidate(6, table$class = $$new_props.table$class);
    		if ('$$scope' in $$new_props) $$invalidate(32, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCDataTableFoundation,
    		ponyfill,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		writable,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		closest,
    		forwardEvents,
    		use,
    		className,
    		stickyHeader,
    		sortable,
    		sort,
    		sortDirection,
    		sortAscendingAriaLabel,
    		sortDescendingAriaLabel,
    		container$use,
    		container$class,
    		table$use,
    		table$class,
    		element,
    		instance,
    		container,
    		header,
    		body,
    		internalClasses,
    		progressIndicatorStyles,
    		addLayoutListener,
    		removeLayoutListener,
    		postMount,
    		progressClosed,
    		sortStore,
    		sortDirectionStore,
    		previousProgressClosed,
    		addClass,
    		removeClass,
    		setHeaderRowCheckboxIndeterminate,
    		handleHeaderRowClick,
    		handleRowClick,
    		handleSortAction,
    		layout,
    		getElement,
    		$progressClosed,
    		$sortDirectionStore,
    		$sortStore
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('stickyHeader' in $$props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
    		if ('sortable' in $$props) $$invalidate(25, sortable = $$new_props.sortable);
    		if ('sort' in $$props) $$invalidate(23, sort = $$new_props.sort);
    		if ('sortDirection' in $$props) $$invalidate(24, sortDirection = $$new_props.sortDirection);
    		if ('sortAscendingAriaLabel' in $$props) $$invalidate(26, sortAscendingAriaLabel = $$new_props.sortAscendingAriaLabel);
    		if ('sortDescendingAriaLabel' in $$props) $$invalidate(27, sortDescendingAriaLabel = $$new_props.sortDescendingAriaLabel);
    		if ('container$use' in $$props) $$invalidate(3, container$use = $$new_props.container$use);
    		if ('container$class' in $$props) $$invalidate(4, container$class = $$new_props.container$class);
    		if ('table$use' in $$props) $$invalidate(5, table$use = $$new_props.table$use);
    		if ('table$class' in $$props) $$invalidate(6, table$class = $$new_props.table$class);
    		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(7, instance = $$new_props.instance);
    		if ('container' in $$props) $$invalidate(9, container = $$new_props.container);
    		if ('header' in $$props) $$invalidate(10, header = $$new_props.header);
    		if ('body' in $$props) $$invalidate(11, body = $$new_props.body);
    		if ('internalClasses' in $$props) $$invalidate(12, internalClasses = $$new_props.internalClasses);
    		if ('progressIndicatorStyles' in $$props) $$invalidate(13, progressIndicatorStyles = $$new_props.progressIndicatorStyles);
    		if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    		if ('postMount' in $$props) $$invalidate(14, postMount = $$new_props.postMount);
    		if ('progressClosed' in $$props) $$invalidate(16, progressClosed = $$new_props.progressClosed);
    		if ('sortStore' in $$props) $$invalidate(17, sortStore = $$new_props.sortStore);
    		if ('sortDirectionStore' in $$props) $$invalidate(18, sortDirectionStore = $$new_props.sortDirectionStore);
    		if ('previousProgressClosed' in $$props) $$invalidate(30, previousProgressClosed = $$new_props.previousProgressClosed);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*sort*/ 8388608) {
    			set_store_value(sortStore, $sortStore = sort, $sortStore);
    		}

    		if ($$self.$$.dirty[0] & /*sortDirection*/ 16777216) {
    			set_store_value(sortDirectionStore, $sortDirectionStore = sortDirection, $sortDirectionStore);
    		}

    		if ($$self.$$.dirty[0] & /*instance, previousProgressClosed*/ 1073741952 | $$self.$$.dirty[1] & /*$progressClosed*/ 1) {
    			if ($$slots.progress && instance && previousProgressClosed !== $progressClosed) {
    				$$invalidate(30, previousProgressClosed = $progressClosed);

    				if ($progressClosed) {
    					instance.hideProgress();
    				} else {
    					instance.showProgress();
    				}
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		stickyHeader,
    		container$use,
    		container$class,
    		table$use,
    		table$class,
    		instance,
    		element,
    		container,
    		header,
    		body,
    		internalClasses,
    		progressIndicatorStyles,
    		postMount,
    		forwardEvents,
    		progressClosed,
    		sortStore,
    		sortDirectionStore,
    		handleHeaderRowClick,
    		handleRowClick,
    		$$slots,
    		$$restProps,
    		sort,
    		sortDirection,
    		sortable,
    		sortAscendingAriaLabel,
    		sortDescendingAriaLabel,
    		layout,
    		getElement,
    		previousProgressClosed,
    		$progressClosed,
    		$$scope,
    		slots,
    		div0_binding,
    		div1_binding,
    		SMUICheckbox_mount_handler,
    		SMUIDataTableHeader_mount_handler,
    		SMUIDataTableHeader_unmount_handler,
    		SMUIDataTableBody_mount_handler,
    		SMUIDataTableBody_unmount_handler,
    		SMUIDataTableHeaderCheckbox_change_handler,
    		SMUIDataTableBodyCheckbox_change_handler
    	];
    }

    class DataTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$j,
    			create_fragment$1y,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				stickyHeader: 2,
    				sortable: 25,
    				sort: 23,
    				sortDirection: 24,
    				sortAscendingAriaLabel: 26,
    				sortDescendingAriaLabel: 27,
    				container$use: 3,
    				container$class: 4,
    				table$use: 5,
    				table$class: 6,
    				layout: 28,
    				getElement: 29
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DataTable",
    			options,
    			id: create_fragment$1y.name
    		});
    	}

    	get use() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stickyHeader() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stickyHeader(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortable() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortable(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sort() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sort(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortDirection() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortDirection(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortAscendingAriaLabel() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortAscendingAriaLabel(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortDescendingAriaLabel() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortDescendingAriaLabel(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container$use() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container$use(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container$class() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container$class(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get table$use() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set table$use(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get table$class() {
    		throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set table$class(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[28];
    	}

    	set layout(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[29];
    	}

    	set getElement(value) {
    		throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/data-table/dist/Head.svelte generated by Svelte v3.44.3 */
    const file$19 = "node_modules/@smui/data-table/dist/Head.svelte";

    function create_fragment$1x(ctx) {
    	let thead;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
    	let thead_levels = [/*$$restProps*/ ctx[6]];
    	let thead_data = {};

    	for (let i = 0; i < thead_levels.length; i += 1) {
    		thead_data = assign(thead_data, thead_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			thead = element("thead");
    			if (default_slot) default_slot.c();
    			set_attributes(thead, thead_data);
    			add_location(thead, file$19, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, thead, anchor);

    			if (default_slot) {
    				default_slot.m(thead, null);
    			}

    			/*thead_binding*/ ctx[10](thead);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, thead, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[3].call(null, thead)),
    					listen_dev(thead, "SMUICheckbox:mount", /*SMUICheckbox_mount_handler*/ ctx[11], false, false, false),
    					listen_dev(thead, "SMUICheckbox:unmount", /*SMUICheckbox_unmount_handler*/ ctx[12], false, false, false),
    					listen_dev(thead, "SMUIDataTableCell:mount", /*handleCellMount*/ ctx[4], false, false, false),
    					listen_dev(thead, "SMUIDataTableCell:unmount", /*handleCellUnmount*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(thead, thead_data = get_spread_update(thead_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(thead);
    			if (default_slot) default_slot.d(detaching);
    			/*thead_binding*/ ctx[10](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1e($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Head', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let element;
    	let checkbox = undefined;
    	let cells = [];
    	const cellAccessorMap = new WeakMap();
    	setContext('SMUI:data-table:row:header', true);

    	onMount(() => {
    		const accessor = {
    			get cells() {
    				return cells;
    			},
    			get orderedCells() {
    				return getOrderedCells();
    			},
    			get checkbox() {
    				return checkbox;
    			}
    		};

    		dispatch(getElement(), 'SMUIDataTableHeader:mount', accessor);

    		return () => {
    			dispatch(getElement(), 'SMUIDataTableHeader:unmount', accessor);
    		};
    	});

    	function handleCellMount(event) {
    		cells.push(event.detail);
    		cellAccessorMap.set(event.detail.element, event.detail);
    		event.stopPropagation();
    	}

    	function handleCellUnmount(event) {
    		const idx = cells.indexOf(event.detail);

    		if (idx !== -1) {
    			cells.splice(idx, 1);
    			cells = cells;
    		}

    		cellAccessorMap.delete(event.detail.element);
    		event.stopPropagation();
    	}

    	function getOrderedCells() {
    		return [...getElement().querySelectorAll('.mdc-data-table__header-cell')].map(element => cellAccessorMap.get(element)).filter(accessor => accessor && accessor._smui_data_table_header_cell_accessor);
    	}

    	function getElement() {
    		return element;
    	}

    	function thead_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	const SMUICheckbox_mount_handler = event => $$invalidate(2, checkbox = event.detail);
    	const SMUICheckbox_unmount_handler = () => $$invalidate(2, checkbox = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		useActions,
    		dispatch,
    		forwardEvents,
    		use,
    		element,
    		checkbox,
    		cells,
    		cellAccessorMap,
    		handleCellMount,
    		handleCellUnmount,
    		getOrderedCells,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    		if ('checkbox' in $$props) $$invalidate(2, checkbox = $$new_props.checkbox);
    		if ('cells' in $$props) cells = $$new_props.cells;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		element,
    		checkbox,
    		forwardEvents,
    		handleCellMount,
    		handleCellUnmount,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		thead_binding,
    		SMUICheckbox_mount_handler,
    		SMUICheckbox_unmount_handler
    	];
    }

    class Head$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1e, create_fragment$1x, safe_not_equal, { use: 0, getElement: 7 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Head",
    			options,
    			id: create_fragment$1x.name
    		});
    	}

    	get use() {
    		throw new Error("<Head>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Head>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[7];
    	}

    	set getElement(value) {
    		throw new Error("<Head>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/data-table/dist/Body.svelte generated by Svelte v3.44.3 */

    const file$18 = "node_modules/@smui/data-table/dist/Body.svelte";

    function create_fragment$1w(ctx) {
    	let tbody;
    	let tbody_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	let tbody_levels = [
    		{
    			class: tbody_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-data-table__content': true
    			})
    		},
    		/*$$restProps*/ ctx[6]
    	];

    	let tbody_data = {};

    	for (let i = 0; i < tbody_levels.length; i += 1) {
    		tbody_data = assign(tbody_data, tbody_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			tbody = element("tbody");
    			if (default_slot) default_slot.c();
    			set_attributes(tbody, tbody_data);
    			add_location(tbody, file$18, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tbody, anchor);

    			if (default_slot) {
    				default_slot.m(tbody, null);
    			}

    			/*tbody_binding*/ ctx[10](tbody);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, tbody, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[3].call(null, tbody)),
    					listen_dev(tbody, "SMUIDataTableRow:mount", /*handleRowMount*/ ctx[4], false, false, false),
    					listen_dev(tbody, "SMUIDataTableRow:unmount", /*handleRowUnmount*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
    				(!current || dirty & /*className*/ 2 && tbody_class_value !== (tbody_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-data-table__content': true
    				}))) && { class: tbody_class_value },
    				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tbody);
    			if (default_slot) default_slot.d(detaching);
    			/*tbody_binding*/ ctx[10](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1d($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Body', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let element;
    	let rows = [];
    	const rowAccessorMap = new WeakMap();
    	setContext('SMUI:data-table:row:header', false);

    	onMount(() => {
    		const accessor = {
    			get rows() {
    				return rows;
    			},
    			get orderedRows() {
    				return getOrderedRows();
    			}
    		};

    		dispatch(getElement(), 'SMUIDataTableBody:mount', accessor);

    		return () => {
    			dispatch(getElement(), 'SMUIDataTableBody:unmount', accessor);
    		};
    	});

    	function handleRowMount(event) {
    		rows.push(event.detail);
    		rowAccessorMap.set(event.detail.element, event.detail);
    		event.stopPropagation();
    	}

    	function handleRowUnmount(event) {
    		const idx = rows.indexOf(event.detail);

    		if (idx !== -1) {
    			rows.splice(idx, 1);
    			rows = rows;
    		}

    		rowAccessorMap.delete(event.detail.element);
    		event.stopPropagation();
    	}

    	function getOrderedRows() {
    		return [...getElement().querySelectorAll('.mdc-data-table__row')].map(element => rowAccessorMap.get(element)).filter(accessor => accessor && accessor._smui_data_table_row_accessor);
    	}

    	function getElement() {
    		return element;
    	}

    	function tbody_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		forwardEvents,
    		use,
    		className,
    		element,
    		rows,
    		rowAccessorMap,
    		handleRowMount,
    		handleRowUnmount,
    		getOrderedRows,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
    		if ('rows' in $$props) rows = $$new_props.rows;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		element,
    		forwardEvents,
    		handleRowMount,
    		handleRowUnmount,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		tbody_binding
    	];
    }

    class Body$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1d, create_fragment$1w, safe_not_equal, { use: 0, class: 1, getElement: 7 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Body",
    			options,
    			id: create_fragment$1w.name
    		});
    	}

    	get use() {
    		throw new Error("<Body>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Body>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Body>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Body>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[7];
    	}

    	set getElement(value) {
    		throw new Error("<Body>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/data-table/dist/Row.svelte generated by Svelte v3.44.3 */

    const file$17 = "node_modules/@smui/data-table/dist/Row.svelte";

    function create_fragment$1v(ctx) {
    	let tr;
    	let tr_class_value;
    	let tr_aria_selected_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

    	let tr_levels = [
    		{
    			class: tr_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-data-table__header-row': /*header*/ ctx[7],
    				'mdc-data-table__row': !/*header*/ ctx[7],
    				'mdc-data-table__row--selected': !/*header*/ ctx[7] && /*checkbox*/ ctx[3] && /*checkbox*/ ctx[3].checked,
    				.../*internalClasses*/ ctx[4]
    			})
    		},
    		{
    			"aria-selected": tr_aria_selected_value = /*checkbox*/ ctx[3]
    			? /*checkbox*/ ctx[3].checked ? 'true' : 'false'
    			: undefined
    		},
    		/*internalAttrs*/ ctx[5],
    		/*$$restProps*/ ctx[10]
    	];

    	let tr_data = {};

    	for (let i = 0; i < tr_levels.length; i += 1) {
    		tr_data = assign(tr_data, tr_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			if (default_slot) default_slot.c();
    			set_attributes(tr, tr_data);
    			add_location(tr, file$17, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			if (default_slot) {
    				default_slot.m(tr, null);
    			}

    			/*tr_binding*/ ctx[15](tr);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, tr, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[6].call(null, tr)),
    					listen_dev(tr, "click", /*click_handler*/ ctx[16], false, false, false),
    					listen_dev(tr, "SMUICheckbox:mount", /*SMUICheckbox_mount_handler*/ ctx[17], false, false, false),
    					listen_dev(tr, "SMUICheckbox:unmount", /*SMUICheckbox_unmount_handler*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(tr, tr_data = get_spread_update(tr_levels, [
    				(!current || dirty & /*className, checkbox, internalClasses*/ 26 && tr_class_value !== (tr_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-data-table__header-row': /*header*/ ctx[7],
    					'mdc-data-table__row': !/*header*/ ctx[7],
    					'mdc-data-table__row--selected': !/*header*/ ctx[7] && /*checkbox*/ ctx[3] && /*checkbox*/ ctx[3].checked,
    					.../*internalClasses*/ ctx[4]
    				}))) && { class: tr_class_value },
    				(!current || dirty & /*checkbox*/ 8 && tr_aria_selected_value !== (tr_aria_selected_value = /*checkbox*/ ctx[3]
    				? /*checkbox*/ ctx[3].checked ? 'true' : 'false'
    				: undefined)) && { "aria-selected": tr_aria_selected_value },
    				dirty & /*internalAttrs*/ 32 && /*internalAttrs*/ ctx[5],
    				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if (default_slot) default_slot.d(detaching);
    			/*tr_binding*/ ctx[15](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let counter$6 = 0;

    function instance$1c($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","rowId","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Row', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { rowId = 'SMUI-data-table-row-' + counter$6++ } = $$props;
    	let element;
    	let checkbox = undefined;
    	let internalClasses = {};
    	let internalAttrs = {};
    	let header = getContext('SMUI:data-table:row:header');

    	onMount(() => {
    		const accessor = header
    		? {
    				_smui_data_table_row_accessor: false,
    				get element() {
    					return getElement();
    				},
    				get checkbox() {
    					return checkbox;
    				},
    				get rowId() {
    					return undefined;
    				},
    				get selected() {
    					var _a;

    					return (_a = checkbox && checkbox.checked) !== null && _a !== void 0
    					? _a
    					: false;
    				},
    				addClass,
    				removeClass,
    				getAttr,
    				addAttr
    			}
    		: {
    				_smui_data_table_row_accessor: true,
    				get element() {
    					return getElement();
    				},
    				get checkbox() {
    					return checkbox;
    				},
    				get rowId() {
    					return rowId;
    				},
    				get selected() {
    					var _a;

    					return (_a = checkbox && checkbox.checked) !== null && _a !== void 0
    					? _a
    					: false;
    				},
    				addClass,
    				removeClass,
    				getAttr,
    				addAttr
    			};

    		dispatch(getElement(), 'SMUIDataTableRow:mount', accessor);

    		return () => {
    			dispatch(getElement(), 'SMUIDataTableRow:unmount', accessor);
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(4, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(4, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(5, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function notifyHeaderClick(event) {
    		dispatch(getElement(), 'SMUIDataTableHeader:click', event);
    	}

    	function notifyRowClick(event) {
    		dispatch(getElement(), 'SMUIDataTableRow:click', { rowId, target: event.target });
    	}

    	function getElement() {
    		return element;
    	}

    	function tr_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	const click_handler = event => header
    	? notifyHeaderClick(event)
    	: notifyRowClick(event);

    	const SMUICheckbox_mount_handler = event => $$invalidate(3, checkbox = event.detail);
    	const SMUICheckbox_unmount_handler = () => $$invalidate(3, checkbox = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('rowId' in $$new_props) $$invalidate(11, rowId = $$new_props.rowId);
    		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$6,
    		onMount,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		forwardEvents,
    		use,
    		className,
    		rowId,
    		element,
    		checkbox,
    		internalClasses,
    		internalAttrs,
    		header,
    		addClass,
    		removeClass,
    		getAttr,
    		addAttr,
    		notifyHeaderClick,
    		notifyRowClick,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('rowId' in $$props) $$invalidate(11, rowId = $$new_props.rowId);
    		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
    		if ('checkbox' in $$props) $$invalidate(3, checkbox = $$new_props.checkbox);
    		if ('internalClasses' in $$props) $$invalidate(4, internalClasses = $$new_props.internalClasses);
    		if ('internalAttrs' in $$props) $$invalidate(5, internalAttrs = $$new_props.internalAttrs);
    		if ('header' in $$props) $$invalidate(7, header = $$new_props.header);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		element,
    		checkbox,
    		internalClasses,
    		internalAttrs,
    		forwardEvents,
    		header,
    		notifyHeaderClick,
    		notifyRowClick,
    		$$restProps,
    		rowId,
    		getElement,
    		$$scope,
    		slots,
    		tr_binding,
    		click_handler,
    		SMUICheckbox_mount_handler,
    		SMUICheckbox_unmount_handler
    	];
    }

    class Row$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1c, create_fragment$1v, safe_not_equal, {
    			use: 0,
    			class: 1,
    			rowId: 11,
    			getElement: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Row",
    			options,
    			id: create_fragment$1v.name
    		});
    	}

    	get use() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rowId() {
    		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rowId(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[12];
    	}

    	set getElement(value) {
    		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/data-table/dist/Cell.svelte generated by Svelte v3.44.3 */

    const file$16 = "node_modules/@smui/data-table/dist/Cell.svelte";

    // (43:0) {:else}
    function create_else_block_1$6(ctx) {
    	let td;
    	let td_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	let td_levels = [
    		{
    			class: td_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-data-table__cell': true,
    				'mdc-data-table__cell--numeric': /*numeric*/ ctx[2],
    				'mdc-data-table__cell--checkbox': /*checkbox*/ ctx[3],
    				.../*internalClasses*/ ctx[7]
    			})
    		},
    		/*internalAttrs*/ ctx[8],
    		/*$$restProps*/ ctx[19]
    	];

    	let td_data = {};

    	for (let i = 0; i < td_levels.length; i += 1) {
    		td_data = assign(td_data, td_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			td = element("td");
    			if (default_slot) default_slot.c();
    			set_attributes(td, td_data);
    			add_location(td, file$16, 43, 2, 1231);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);

    			if (default_slot) {
    				default_slot.m(td, null);
    			}

    			/*td_binding*/ ctx[25](td);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, td, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[11].call(null, td)),
    					listen_dev(td, "change", /*change_handler_1*/ ctx[26], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(td, td_data = get_spread_update(td_levels, [
    				(!current || dirty & /*className, numeric, checkbox, internalClasses*/ 142 && td_class_value !== (td_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-data-table__cell': true,
    					'mdc-data-table__cell--numeric': /*numeric*/ ctx[2],
    					'mdc-data-table__cell--checkbox': /*checkbox*/ ctx[3],
    					.../*internalClasses*/ ctx[7]
    				}))) && { class: td_class_value },
    				dirty & /*internalAttrs*/ 256 && /*internalAttrs*/ ctx[8],
    				dirty & /*$$restProps*/ 524288 && /*$$restProps*/ ctx[19]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    			if (default_slot) default_slot.d(detaching);
    			/*td_binding*/ ctx[25](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$6.name,
    		type: "else",
    		source: "(43:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if header}
    function create_if_block$E(ctx) {
    	let th;
    	let current_block_type_index;
    	let if_block;
    	let th_class_value;
    	let th_aria_sort_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$n, create_else_block$e];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*sortable*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let th_levels = [
    		{
    			class: th_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-data-table__header-cell': true,
    				'mdc-data-table__header-cell--numeric': /*numeric*/ ctx[2],
    				'mdc-data-table__header-cell--checkbox': /*checkbox*/ ctx[3],
    				'mdc-data-table__header-cell--with-sort': /*sortable*/ ctx[5],
    				'mdc-data-table__header-cell--sorted': /*sortable*/ ctx[5] && /*$sort*/ ctx[9] === /*columnId*/ ctx[4],
    				.../*internalClasses*/ ctx[7]
    			})
    		},
    		{ role: "columnheader" },
    		{ scope: "col" },
    		{ "data-column-id": /*columnId*/ ctx[4] },
    		{
    			"aria-sort": th_aria_sort_value = /*sortable*/ ctx[5]
    			? /*$sort*/ ctx[9] === /*columnId*/ ctx[4]
    				? /*$sortDirection*/ ctx[10]
    				: 'none'
    			: undefined
    		},
    		/*internalAttrs*/ ctx[8],
    		/*$$restProps*/ ctx[19]
    	];

    	let th_data = {};

    	for (let i = 0; i < th_levels.length; i += 1) {
    		th_data = assign(th_data, th_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			th = element("th");
    			if_block.c();
    			set_attributes(th, th_data);
    			add_location(th, file$16, 1, 2, 15);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			if_blocks[current_block_type_index].m(th, null);
    			/*th_binding*/ ctx[23](th);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, th, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[11].call(null, th)),
    					listen_dev(th, "change", /*change_handler*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(th, null);
    			}

    			set_attributes(th, th_data = get_spread_update(th_levels, [
    				(!current || dirty & /*className, numeric, checkbox, sortable, $sort, columnId, internalClasses*/ 702 && th_class_value !== (th_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-data-table__header-cell': true,
    					'mdc-data-table__header-cell--numeric': /*numeric*/ ctx[2],
    					'mdc-data-table__header-cell--checkbox': /*checkbox*/ ctx[3],
    					'mdc-data-table__header-cell--with-sort': /*sortable*/ ctx[5],
    					'mdc-data-table__header-cell--sorted': /*sortable*/ ctx[5] && /*$sort*/ ctx[9] === /*columnId*/ ctx[4],
    					.../*internalClasses*/ ctx[7]
    				}))) && { class: th_class_value },
    				{ role: "columnheader" },
    				{ scope: "col" },
    				(!current || dirty & /*columnId*/ 16) && { "data-column-id": /*columnId*/ ctx[4] },
    				(!current || dirty & /*sortable, $sort, columnId, $sortDirection*/ 1584 && th_aria_sort_value !== (th_aria_sort_value = /*sortable*/ ctx[5]
    				? /*$sort*/ ctx[9] === /*columnId*/ ctx[4]
    					? /*$sortDirection*/ ctx[10]
    					: 'none'
    				: undefined)) && { "aria-sort": th_aria_sort_value },
    				dirty & /*internalAttrs*/ 256 && /*internalAttrs*/ ctx[8],
    				dirty & /*$$restProps*/ 524288 && /*$$restProps*/ ctx[19]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    			if_blocks[current_block_type_index].d();
    			/*th_binding*/ ctx[23](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$E.name,
    		type: "if",
    		source: "(1:0) {#if header}",
    		ctx
    	});

    	return block;
    }

    // (41:4) {:else}
    function create_else_block$e(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$e.name,
    		type: "else",
    		source: "(41:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (26:5) {#if sortable}
    function create_if_block_1$n(ctx) {
    	let div1;
    	let t0;
    	let div0;

    	let t1_value = (/*$sort*/ ctx[9] === /*columnId*/ ctx[4]
    	? /*$sortDirection*/ ctx[10] === 'ascending'
    		? /*sortAscendingAriaLabel*/ ctx[15]
    		: /*sortDescendingAriaLabel*/ ctx[16]
    	: '') + "";

    	let t1;
    	let div0_id_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			div0 = element("div");
    			t1 = text(t1_value);
    			attr_dev(div0, "class", "mdc-data-table__sort-status-label");
    			attr_dev(div0, "aria-hidden", "true");
    			attr_dev(div0, "id", div0_id_value = "" + (/*columnId*/ ctx[4] + "-status-label"));
    			add_location(div0, file$16, 28, 8, 853);
    			attr_dev(div1, "class", "mdc-data-table__header-cell-wrapper");
    			add_location(div1, file$16, 26, 6, 778);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}

    			if ((!current || dirty & /*$sort, columnId, $sortDirection*/ 1552) && t1_value !== (t1_value = (/*$sort*/ ctx[9] === /*columnId*/ ctx[4]
    			? /*$sortDirection*/ ctx[10] === 'ascending'
    				? /*sortAscendingAriaLabel*/ ctx[15]
    				: /*sortDescendingAriaLabel*/ ctx[16]
    			: '') + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*columnId*/ 16 && div0_id_value !== (div0_id_value = "" + (/*columnId*/ ctx[4] + "-status-label"))) {
    				attr_dev(div0, "id", div0_id_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$n.name,
    		type: "if",
    		source: "(26:5) {#if sortable}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1u(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$E, create_else_block_1$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*header*/ ctx[12]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let counter$5 = 0;

    function instance$1b($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","numeric","checkbox","columnId","sortable","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $sort;
    	let $sortDirection;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Cell', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let header = getContext('SMUI:data-table:row:header');
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { numeric = false } = $$props;
    	let { checkbox = false } = $$props;

    	let { columnId = header
    	? 'SMUI-data-table-column-' + counter$5++
    	: 'SMUI-data-table-unused' } = $$props;

    	let { sortable = getContext('SMUI:data-table:sortable') } = $$props;
    	let element;
    	let internalClasses = {};
    	let internalAttrs = {};
    	let sort = getContext('SMUI:data-table:sort');
    	validate_store(sort, 'sort');
    	component_subscribe($$self, sort, value => $$invalidate(9, $sort = value));
    	let sortDirection = getContext('SMUI:data-table:sortDirection');
    	validate_store(sortDirection, 'sortDirection');
    	component_subscribe($$self, sortDirection, value => $$invalidate(10, $sortDirection = value));
    	let sortAscendingAriaLabel = getContext('SMUI:data-table:sortAscendingAriaLabel');
    	let sortDescendingAriaLabel = getContext('SMUI:data-table:sortDescendingAriaLabel');

    	if (sortable) {
    		setContext('SMUI:label:context', 'data-table:sortable-header-cell');
    		setContext('SMUI:icon-button:context', 'data-table:sortable-header-cell');
    		setContext('SMUI:icon-button:aria-describedby', columnId + '-status-label');
    	}

    	onMount(() => {
    		const accessor = header
    		? {
    				_smui_data_table_header_cell_accessor: true,
    				get element() {
    					return getElement();
    				},
    				get columnId() {
    					return columnId;
    				},
    				addClass,
    				removeClass,
    				getAttr,
    				addAttr
    			}
    		: {
    				_smui_data_table_header_cell_accessor: false,
    				get element() {
    					return getElement();
    				},
    				get columnId() {
    					return undefined;
    				},
    				addClass,
    				removeClass,
    				getAttr,
    				addAttr
    			};

    		dispatch(getElement(), 'SMUIDataTableCell:mount', accessor);

    		return () => {
    			dispatch(getElement(), 'SMUIDataTableCell:unmount', accessor);
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(7, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(7, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(8, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function notifyHeaderChange(event) {
    		dispatch(getElement(), 'SMUIDataTableHeaderCheckbox:change', event);
    	}

    	function notifyBodyChange(event) {
    		dispatch(getElement(), 'SMUIDataTableBodyCheckbox:change', event);
    	}

    	function getElement() {
    		return element;
    	}

    	function th_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(6, element);
    		});
    	}

    	const change_handler = event => checkbox && notifyHeaderChange(event);

    	function td_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(6, element);
    		});
    	}

    	const change_handler_1 = event => checkbox && notifyBodyChange(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('numeric' in $$new_props) $$invalidate(2, numeric = $$new_props.numeric);
    		if ('checkbox' in $$new_props) $$invalidate(3, checkbox = $$new_props.checkbox);
    		if ('columnId' in $$new_props) $$invalidate(4, columnId = $$new_props.columnId);
    		if ('sortable' in $$new_props) $$invalidate(5, sortable = $$new_props.sortable);
    		if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$5,
    		onMount,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		forwardEvents,
    		header,
    		use,
    		className,
    		numeric,
    		checkbox,
    		columnId,
    		sortable,
    		element,
    		internalClasses,
    		internalAttrs,
    		sort,
    		sortDirection,
    		sortAscendingAriaLabel,
    		sortDescendingAriaLabel,
    		addClass,
    		removeClass,
    		getAttr,
    		addAttr,
    		notifyHeaderChange,
    		notifyBodyChange,
    		getElement,
    		$sort,
    		$sortDirection
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('header' in $$props) $$invalidate(12, header = $$new_props.header);
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('numeric' in $$props) $$invalidate(2, numeric = $$new_props.numeric);
    		if ('checkbox' in $$props) $$invalidate(3, checkbox = $$new_props.checkbox);
    		if ('columnId' in $$props) $$invalidate(4, columnId = $$new_props.columnId);
    		if ('sortable' in $$props) $$invalidate(5, sortable = $$new_props.sortable);
    		if ('element' in $$props) $$invalidate(6, element = $$new_props.element);
    		if ('internalClasses' in $$props) $$invalidate(7, internalClasses = $$new_props.internalClasses);
    		if ('internalAttrs' in $$props) $$invalidate(8, internalAttrs = $$new_props.internalAttrs);
    		if ('sort' in $$props) $$invalidate(13, sort = $$new_props.sort);
    		if ('sortDirection' in $$props) $$invalidate(14, sortDirection = $$new_props.sortDirection);
    		if ('sortAscendingAriaLabel' in $$props) $$invalidate(15, sortAscendingAriaLabel = $$new_props.sortAscendingAriaLabel);
    		if ('sortDescendingAriaLabel' in $$props) $$invalidate(16, sortDescendingAriaLabel = $$new_props.sortDescendingAriaLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		numeric,
    		checkbox,
    		columnId,
    		sortable,
    		element,
    		internalClasses,
    		internalAttrs,
    		$sort,
    		$sortDirection,
    		forwardEvents,
    		header,
    		sort,
    		sortDirection,
    		sortAscendingAriaLabel,
    		sortDescendingAriaLabel,
    		notifyHeaderChange,
    		notifyBodyChange,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		th_binding,
    		change_handler,
    		td_binding,
    		change_handler_1
    	];
    }

    class Cell$3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1b, create_fragment$1u, safe_not_equal, {
    			use: 0,
    			class: 1,
    			numeric: 2,
    			checkbox: 3,
    			columnId: 4,
    			sortable: 5,
    			getElement: 20
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cell",
    			options,
    			id: create_fragment$1u.name
    		});
    	}

    	get use() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get numeric() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numeric(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checkbox() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checkbox(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get columnId() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set columnId(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortable() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortable(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[20];
    	}

    	set getElement(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Head = Head$1;
    const Body = Body$1;
    const Row = Row$1;
    const Cell$2 = Cell$3;

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$f = {
        ICON_BUTTON_ON: 'mdc-icon-button--on',
        ROOT: 'mdc-icon-button',
    };
    var strings$h = {
        ARIA_LABEL: 'aria-label',
        ARIA_PRESSED: 'aria-pressed',
        DATA_ARIA_LABEL_OFF: 'data-aria-label-off',
        DATA_ARIA_LABEL_ON: 'data-aria-label-on',
        CHANGE_EVENT: 'MDCIconButtonToggle:change',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCIconButtonToggleFoundation = /** @class */ (function (_super) {
        __extends(MDCIconButtonToggleFoundation, _super);
        function MDCIconButtonToggleFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation.defaultAdapter), adapter)) || this;
            /**
             * Whether the icon button has an aria label that changes depending on
             * toggled state.
             */
            _this.hasToggledAriaLabel = false;
            return _this;
        }
        Object.defineProperty(MDCIconButtonToggleFoundation, "cssClasses", {
            get: function () {
                return cssClasses$f;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCIconButtonToggleFoundation, "strings", {
            get: function () {
                return strings$h;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCIconButtonToggleFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    notifyChange: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    getAttr: function () { return null; },
                    setAttr: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCIconButtonToggleFoundation.prototype.init = function () {
            var ariaLabelOn = this.adapter.getAttr(strings$h.DATA_ARIA_LABEL_ON);
            var ariaLabelOff = this.adapter.getAttr(strings$h.DATA_ARIA_LABEL_OFF);
            if (ariaLabelOn && ariaLabelOff) {
                if (this.adapter.getAttr(strings$h.ARIA_PRESSED) !== null) {
                    throw new Error('MDCIconButtonToggleFoundation: Button should not set ' +
                        '`aria-pressed` if it has a toggled aria label.');
                }
                this.hasToggledAriaLabel = true;
            }
            else {
                this.adapter.setAttr(strings$h.ARIA_PRESSED, String(this.isOn()));
            }
        };
        MDCIconButtonToggleFoundation.prototype.handleClick = function () {
            this.toggle();
            this.adapter.notifyChange({ isOn: this.isOn() });
        };
        MDCIconButtonToggleFoundation.prototype.isOn = function () {
            return this.adapter.hasClass(cssClasses$f.ICON_BUTTON_ON);
        };
        MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {
            if (isOn === void 0) { isOn = !this.isOn(); }
            // Toggle UI based on state.
            if (isOn) {
                this.adapter.addClass(cssClasses$f.ICON_BUTTON_ON);
            }
            else {
                this.adapter.removeClass(cssClasses$f.ICON_BUTTON_ON);
            }
            // Toggle aria attributes based on state.
            if (this.hasToggledAriaLabel) {
                var ariaLabel = isOn ?
                    this.adapter.getAttr(strings$h.DATA_ARIA_LABEL_ON) :
                    this.adapter.getAttr(strings$h.DATA_ARIA_LABEL_OFF);
                this.adapter.setAttr(strings$h.ARIA_LABEL, ariaLabel || '');
            }
            else {
                this.adapter.setAttr(strings$h.ARIA_PRESSED, "" + isOn);
            }
        };
        return MDCIconButtonToggleFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/icon-button/dist/IconButton.svelte generated by Svelte v3.44.3 */
    const file$15 = "node_modules/@smui/icon-button/dist/IconButton.svelte";

    // (61:10) {#if touch}
    function create_if_block$D(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "mdc-icon-button__touch");
    			add_location(div, file$15, 60, 21, 1955);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$D.name,
    		type: "if",
    		source: "(61:10) {#if touch}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: true,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-icon-button': true,     'mdc-icon-button--on': !isUninitializedValue(pressed) && pressed,     'mdc-icon-button--touch': touch,     'mdc-icon-button--display-flex': displayFlex,     'smui-icon-button--size-button': size === 'button',     'mdc-icon-button--reduced-size': size === 'mini' || size === 'button',     'mdc-card__action': context === 'card:action',     'mdc-card__action--icon': context === 'card:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__dismiss': context === 'snackbar:actions',     'mdc-data-table__pagination-button': context === 'data-table:pagination',     'mdc-data-table__sort-icon-button':       context === 'data-table:sortable-header-cell',     'mdc-dialog__close': context === 'dialog:header' && action === 'close',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   aria-pressed={!isUninitializedValue(pressed)     ? pressed       ? 'true'       : 'false'     : null}   aria-label={pressed ? ariaLabelOn : ariaLabelOff}   data-aria-label-on={ariaLabelOn}   data-aria-label-off={ariaLabelOff}   aria-describedby={ariaDescribedby}   on:click={() => instance && instance.handleClick()}   on:click={() =>     context === 'top-app-bar:navigation' &&     dispatch(getElement(), 'SMUITopAppBarIconButton:nav')}   {href}   {...actionProp}   {...internalAttrs}   {...$$restProps}   >
    function create_default_slot$S(ctx) {
    	let div;
    	let t;
    	let if_block_anchor;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[32].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[36], null);
    	let if_block = /*touch*/ ctx[8] && create_if_block$D(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			if (default_slot) default_slot.c();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div, "class", "mdc-icon-button__ripple");
    			add_location(div, file$15, 59, 3, 1894);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[36], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*touch*/ ctx[8]) {
    				if (if_block) ; else {
    					if_block = create_if_block$D(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$S.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: true,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-icon-button': true,     'mdc-icon-button--on': !isUninitializedValue(pressed) && pressed,     'mdc-icon-button--touch': touch,     'mdc-icon-button--display-flex': displayFlex,     'smui-icon-button--size-button': size === 'button',     'mdc-icon-button--reduced-size': size === 'mini' || size === 'button',     'mdc-card__action': context === 'card:action',     'mdc-card__action--icon': context === 'card:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__dismiss': context === 'snackbar:actions',     'mdc-data-table__pagination-button': context === 'data-table:pagination',     'mdc-data-table__sort-icon-button':       context === 'data-table:sortable-header-cell',     'mdc-dialog__close': context === 'dialog:header' && action === 'close',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   aria-pressed={!isUninitializedValue(pressed)     ? pressed       ? 'true'       : 'false'     : null}   aria-label={pressed ? ariaLabelOn : ariaLabelOff}   data-aria-label-on={ariaLabelOn}   data-aria-label-off={ariaLabelOff}   aria-describedby={ariaDescribedby}   on:click={() => instance && instance.handleClick()}   on:click={() =>     context === 'top-app-bar:navigation' &&     dispatch(getElement(), 'SMUITopAppBarIconButton:nav')}   {href}   {...actionProp}   {...internalAttrs}   {...$$restProps}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1t(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				[
    					Ripple,
    					{
    						ripple: /*ripple*/ ctx[4],
    						unbounded: true,
    						color: /*color*/ ctx[5],
    						disabled: !!/*$$restProps*/ ctx[28].disabled,
    						addClass: /*addClass*/ ctx[25],
    						removeClass: /*removeClass*/ ctx[26],
    						addStyle: /*addStyle*/ ctx[27]
    					}
    				],
    				/*forwardEvents*/ ctx[21],
    				.../*use*/ ctx[1]
    			]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[2]]: true,
    				'mdc-icon-button': true,
    				'mdc-icon-button--on': !/*isUninitializedValue*/ ctx[22](/*pressed*/ ctx[0]) && /*pressed*/ ctx[0],
    				'mdc-icon-button--touch': /*touch*/ ctx[8],
    				'mdc-icon-button--display-flex': /*displayFlex*/ ctx[9],
    				'smui-icon-button--size-button': /*size*/ ctx[10] === 'button',
    				'mdc-icon-button--reduced-size': /*size*/ ctx[10] === 'mini' || /*size*/ ctx[10] === 'button',
    				'mdc-card__action': /*context*/ ctx[23] === 'card:action',
    				'mdc-card__action--icon': /*context*/ ctx[23] === 'card:action',
    				'mdc-top-app-bar__navigation-icon': /*context*/ ctx[23] === 'top-app-bar:navigation',
    				'mdc-top-app-bar__action-item': /*context*/ ctx[23] === 'top-app-bar:action',
    				'mdc-snackbar__dismiss': /*context*/ ctx[23] === 'snackbar:actions',
    				'mdc-data-table__pagination-button': /*context*/ ctx[23] === 'data-table:pagination',
    				'mdc-data-table__sort-icon-button': /*context*/ ctx[23] === 'data-table:sortable-header-cell',
    				'mdc-dialog__close': /*context*/ ctx[23] === 'dialog:header' && /*action*/ ctx[12] === 'close',
    				.../*internalClasses*/ ctx[17]
    			})
    		},
    		{
    			style: Object.entries(/*internalStyles*/ ctx[18]).map(func$d).concat([/*style*/ ctx[3]]).join(' ')
    		},
    		{
    			"aria-pressed": !/*isUninitializedValue*/ ctx[22](/*pressed*/ ctx[0])
    			? /*pressed*/ ctx[0] ? 'true' : 'false'
    			: null
    		},
    		{
    			"aria-label": /*pressed*/ ctx[0]
    			? /*ariaLabelOn*/ ctx[6]
    			: /*ariaLabelOff*/ ctx[7]
    		},
    		{
    			"data-aria-label-on": /*ariaLabelOn*/ ctx[6]
    		},
    		{
    			"data-aria-label-off": /*ariaLabelOff*/ ctx[7]
    		},
    		{
    			"aria-describedby": /*ariaDescribedby*/ ctx[24]
    		},
    		{ href: /*href*/ ctx[11] },
    		/*actionProp*/ ctx[20],
    		/*internalAttrs*/ ctx[19],
    		/*$$restProps*/ ctx[28]
    	];

    	var switch_value = /*component*/ ctx[13];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$S] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[33](switch_instance);
    		switch_instance.$on("click", /*click_handler*/ ctx[34]);
    		switch_instance.$on("click", /*click_handler_1*/ ctx[35]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, isUninitializedValue, pressed, touch, displayFlex, size, context, action, internalClasses, internalStyles, style, ariaLabelOn, ariaLabelOff, ariaDescribedby, href, actionProp, internalAttrs*/ 536748031)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 505413682 && {
    						use: [
    							[
    								Ripple,
    								{
    									ripple: /*ripple*/ ctx[4],
    									unbounded: true,
    									color: /*color*/ ctx[5],
    									disabled: !!/*$$restProps*/ ctx[28].disabled,
    									addClass: /*addClass*/ ctx[25],
    									removeClass: /*removeClass*/ ctx[26],
    									addStyle: /*addStyle*/ ctx[27]
    								}
    							],
    							/*forwardEvents*/ ctx[21],
    							.../*use*/ ctx[1]
    						]
    					},
    					dirty[0] & /*className, isUninitializedValue, pressed, touch, displayFlex, size, context, action, internalClasses*/ 12719877 && {
    						class: classMap({
    							[/*className*/ ctx[2]]: true,
    							'mdc-icon-button': true,
    							'mdc-icon-button--on': !/*isUninitializedValue*/ ctx[22](/*pressed*/ ctx[0]) && /*pressed*/ ctx[0],
    							'mdc-icon-button--touch': /*touch*/ ctx[8],
    							'mdc-icon-button--display-flex': /*displayFlex*/ ctx[9],
    							'smui-icon-button--size-button': /*size*/ ctx[10] === 'button',
    							'mdc-icon-button--reduced-size': /*size*/ ctx[10] === 'mini' || /*size*/ ctx[10] === 'button',
    							'mdc-card__action': /*context*/ ctx[23] === 'card:action',
    							'mdc-card__action--icon': /*context*/ ctx[23] === 'card:action',
    							'mdc-top-app-bar__navigation-icon': /*context*/ ctx[23] === 'top-app-bar:navigation',
    							'mdc-top-app-bar__action-item': /*context*/ ctx[23] === 'top-app-bar:action',
    							'mdc-snackbar__dismiss': /*context*/ ctx[23] === 'snackbar:actions',
    							'mdc-data-table__pagination-button': /*context*/ ctx[23] === 'data-table:pagination',
    							'mdc-data-table__sort-icon-button': /*context*/ ctx[23] === 'data-table:sortable-header-cell',
    							'mdc-dialog__close': /*context*/ ctx[23] === 'dialog:header' && /*action*/ ctx[12] === 'close',
    							.../*internalClasses*/ ctx[17]
    						})
    					},
    					dirty[0] & /*internalStyles, style*/ 262152 && {
    						style: Object.entries(/*internalStyles*/ ctx[18]).map(func$d).concat([/*style*/ ctx[3]]).join(' ')
    					},
    					dirty[0] & /*isUninitializedValue, pressed*/ 4194305 && {
    						"aria-pressed": !/*isUninitializedValue*/ ctx[22](/*pressed*/ ctx[0])
    						? /*pressed*/ ctx[0] ? 'true' : 'false'
    						: null
    					},
    					dirty[0] & /*pressed, ariaLabelOn, ariaLabelOff*/ 193 && {
    						"aria-label": /*pressed*/ ctx[0]
    						? /*ariaLabelOn*/ ctx[6]
    						: /*ariaLabelOff*/ ctx[7]
    					},
    					dirty[0] & /*ariaLabelOn*/ 64 && {
    						"data-aria-label-on": /*ariaLabelOn*/ ctx[6]
    					},
    					dirty[0] & /*ariaLabelOff*/ 128 && {
    						"data-aria-label-off": /*ariaLabelOff*/ ctx[7]
    					},
    					dirty[0] & /*ariaDescribedby*/ 16777216 && {
    						"aria-describedby": /*ariaDescribedby*/ ctx[24]
    					},
    					dirty[0] & /*href*/ 2048 && { href: /*href*/ ctx[11] },
    					dirty[0] & /*actionProp*/ 1048576 && get_spread_object(/*actionProp*/ ctx[20]),
    					dirty[0] & /*internalAttrs*/ 524288 && get_spread_object(/*internalAttrs*/ ctx[19]),
    					dirty[0] & /*$$restProps*/ 268435456 && get_spread_object(/*$$restProps*/ ctx[28])
    				])
    			: {};

    			if (dirty[0] & /*touch*/ 256 | dirty[1] & /*$$scope*/ 32) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[13])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[33](switch_instance);
    					switch_instance.$on("click", /*click_handler*/ ctx[34]);
    					switch_instance.$on("click", /*click_handler_1*/ ctx[35]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[33](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$d = ([name, value]) => `${name}: ${value};`;

    function instance_1$i($$self, $$props, $$invalidate) {
    	let actionProp;

    	const omit_props_names = [
    		"use","class","style","ripple","color","toggle","pressed","ariaLabelOn","ariaLabelOff","touch","displayFlex","size","href","action","component","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('IconButton', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { ripple = true } = $$props;
    	let { color = undefined } = $$props;
    	let { toggle = false } = $$props;
    	let { pressed = uninitializedValue } = $$props;
    	let { ariaLabelOn = undefined } = $$props;
    	let { ariaLabelOff = undefined } = $$props;
    	let { touch = false } = $$props;
    	let { displayFlex = true } = $$props;
    	let { size = 'normal' } = $$props;
    	let { href = undefined } = $$props;
    	let { action = undefined } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};
    	let internalAttrs = {};
    	let context = getContext('SMUI:icon-button:context');
    	let ariaDescribedby = getContext('SMUI:icon-button:aria-describedby');
    	let { component = href == null ? Button : A } = $$props;
    	let previousDisabled = $$restProps.disabled;
    	setContext('SMUI:icon:context', 'icon-button');
    	let oldToggle = null;

    	onDestroy(() => {
    		instance && instance.destroy();
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(17, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(17, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(18, internalStyles);
    			} else {
    				$$invalidate(18, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(19, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function handleChange(evtData) {
    		$$invalidate(0, pressed = evtData.isOn);
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(15, element);
    		});
    	}

    	const click_handler = () => instance && instance.handleClick();
    	const click_handler_1 = () => context === 'top-app-bar:navigation' && dispatch(getElement(), 'SMUITopAppBarIconButton:nav');

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(28, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
    		if ('ripple' in $$new_props) $$invalidate(4, ripple = $$new_props.ripple);
    		if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
    		if ('toggle' in $$new_props) $$invalidate(29, toggle = $$new_props.toggle);
    		if ('pressed' in $$new_props) $$invalidate(0, pressed = $$new_props.pressed);
    		if ('ariaLabelOn' in $$new_props) $$invalidate(6, ariaLabelOn = $$new_props.ariaLabelOn);
    		if ('ariaLabelOff' in $$new_props) $$invalidate(7, ariaLabelOff = $$new_props.ariaLabelOff);
    		if ('touch' in $$new_props) $$invalidate(8, touch = $$new_props.touch);
    		if ('displayFlex' in $$new_props) $$invalidate(9, displayFlex = $$new_props.displayFlex);
    		if ('size' in $$new_props) $$invalidate(10, size = $$new_props.size);
    		if ('href' in $$new_props) $$invalidate(11, href = $$new_props.href);
    		if ('action' in $$new_props) $$invalidate(12, action = $$new_props.action);
    		if ('component' in $$new_props) $$invalidate(13, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(36, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCIconButtonToggleFoundation,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		dispatch,
    		Ripple,
    		A,
    		Button,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		style,
    		ripple,
    		color,
    		toggle,
    		pressed,
    		ariaLabelOn,
    		ariaLabelOff,
    		touch,
    		displayFlex,
    		size,
    		href,
    		action,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		context,
    		ariaDescribedby,
    		component,
    		previousDisabled,
    		oldToggle,
    		hasClass,
    		addClass,
    		removeClass,
    		addStyle,
    		getAttr,
    		addAttr,
    		handleChange,
    		getElement,
    		actionProp
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(3, style = $$new_props.style);
    		if ('ripple' in $$props) $$invalidate(4, ripple = $$new_props.ripple);
    		if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
    		if ('toggle' in $$props) $$invalidate(29, toggle = $$new_props.toggle);
    		if ('pressed' in $$props) $$invalidate(0, pressed = $$new_props.pressed);
    		if ('ariaLabelOn' in $$props) $$invalidate(6, ariaLabelOn = $$new_props.ariaLabelOn);
    		if ('ariaLabelOff' in $$props) $$invalidate(7, ariaLabelOff = $$new_props.ariaLabelOff);
    		if ('touch' in $$props) $$invalidate(8, touch = $$new_props.touch);
    		if ('displayFlex' in $$props) $$invalidate(9, displayFlex = $$new_props.displayFlex);
    		if ('size' in $$props) $$invalidate(10, size = $$new_props.size);
    		if ('href' in $$props) $$invalidate(11, href = $$new_props.href);
    		if ('action' in $$props) $$invalidate(12, action = $$new_props.action);
    		if ('element' in $$props) $$invalidate(15, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(16, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(17, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(18, internalStyles = $$new_props.internalStyles);
    		if ('internalAttrs' in $$props) $$invalidate(19, internalAttrs = $$new_props.internalAttrs);
    		if ('context' in $$props) $$invalidate(23, context = $$new_props.context);
    		if ('ariaDescribedby' in $$props) $$invalidate(24, ariaDescribedby = $$new_props.ariaDescribedby);
    		if ('component' in $$props) $$invalidate(13, component = $$new_props.component);
    		if ('previousDisabled' in $$props) $$invalidate(30, previousDisabled = $$new_props.previousDisabled);
    		if ('oldToggle' in $$props) $$invalidate(31, oldToggle = $$new_props.oldToggle);
    		if ('actionProp' in $$props) $$invalidate(20, actionProp = $$new_props.actionProp);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*action*/ 4096) {
    			$$invalidate(20, actionProp = (() => {
    				if (context === 'data-table:pagination') {
    					switch (action) {
    						case 'first-page':
    							return { 'data-first-page': 'true' };
    						case 'prev-page':
    							return { 'data-prev-page': 'true' };
    						case 'next-page':
    							return { 'data-next-page': 'true' };
    						case 'last-page':
    							return { 'data-last-page': 'true' };
    						default:
    							return { 'data-action': 'true' };
    					}
    				} else if (context === 'dialog:header') {
    					return { 'data-mdc-dialog-action': action };
    				} else {
    					return { action };
    				}
    			})());
    		}

    		if (previousDisabled !== $$restProps.disabled) {
    			const elem = getElement();

    			if ('blur' in elem) {
    				elem.blur();
    			}

    			$$invalidate(30, previousDisabled = $$restProps.disabled);
    		}

    		if ($$self.$$.dirty[0] & /*element, toggle, instance*/ 536969216 | $$self.$$.dirty[1] & /*oldToggle*/ 1) {
    			if (element && getElement() && toggle !== oldToggle) {
    				if (toggle && !instance) {
    					$$invalidate(16, instance = new MDCIconButtonToggleFoundation({
    							addClass,
    							hasClass,
    							notifyChange: evtData => {
    								handleChange(evtData);
    								dispatch(getElement(), 'SMUIIconButtonToggle:change', evtData, undefined, true);
    							},
    							removeClass,
    							getAttr,
    							setAttr: addAttr
    						}));

    					instance.init();
    				} else if (!toggle && instance) {
    					instance.destroy();
    					$$invalidate(16, instance = undefined);
    					$$invalidate(17, internalClasses = {});
    					$$invalidate(19, internalAttrs = {});
    				}

    				$$invalidate(31, oldToggle = toggle);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, pressed*/ 65537) {
    			if (instance && !isUninitializedValue(pressed) && instance.isOn() !== pressed) {
    				instance.toggle(pressed);
    			}
    		}
    	};

    	return [
    		pressed,
    		use,
    		className,
    		style,
    		ripple,
    		color,
    		ariaLabelOn,
    		ariaLabelOff,
    		touch,
    		displayFlex,
    		size,
    		href,
    		action,
    		component,
    		getElement,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		actionProp,
    		forwardEvents,
    		isUninitializedValue,
    		context,
    		ariaDescribedby,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		toggle,
    		previousDisabled,
    		oldToggle,
    		slots,
    		switch_instance_binding,
    		click_handler,
    		click_handler_1,
    		$$scope
    	];
    }

    class IconButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$i,
    			create_fragment$1t,
    			safe_not_equal,
    			{
    				use: 1,
    				class: 2,
    				style: 3,
    				ripple: 4,
    				color: 5,
    				toggle: 29,
    				pressed: 0,
    				ariaLabelOn: 6,
    				ariaLabelOff: 7,
    				touch: 8,
    				displayFlex: 9,
    				size: 10,
    				href: 11,
    				action: 12,
    				component: 13,
    				getElement: 14
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IconButton",
    			options,
    			id: create_fragment$1t.name
    		});
    	}

    	get use() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get toggle() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggle(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pressed() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pressed(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaLabelOn() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaLabelOn(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaLabelOff() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaLabelOff(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get displayFlex() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set displayFlex(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[14];
    	}

    	set getElement(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/Clients.svelte generated by Svelte v3.44.3 */

    function get_each_context$j(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (51:8) <IconButton class="material-icons">
    function create_default_slot_28$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28$3.name,
    		type: "slot",
    		source: "(51:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (52:8) <Label>
    function create_default_slot_27$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("ID");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27$3.name,
    		type: "slot",
    		source: "(52:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (50:6) <Cell numeric columnId="id">
    function create_default_slot_26$4(ctx) {
    	let iconbutton;
    	let t;
    	let label;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_28$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_27$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26$4.name,
    		type: "slot",
    		source: "(50:6) <Cell numeric columnId=\\\"id\\\">",
    		ctx
    	});

    	return block;
    }

    // (54:6) {#if adminMode}
    function create_if_block_1$m(ctx) {
    	let cell;
    	let current;

    	cell = new Cell$2({
    			props: {
    				columnId: "supervisor",
    				$$slots: { default: [create_default_slot_23$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$m.name,
    		type: "if",
    		source: "(54:6) {#if adminMode}",
    		ctx
    	});

    	return block;
    }

    // (56:8) <Label>
    function create_default_slot_25$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Mitarbeiter");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25$4.name,
    		type: "slot",
    		source: "(56:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (57:8) <IconButton class="material-icons">
    function create_default_slot_24$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24$5.name,
    		type: "slot",
    		source: "(57:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (55:6) <Cell columnId="supervisor">
    function create_default_slot_23$5(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_25$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_24$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23$5.name,
    		type: "slot",
    		source: "(55:6) <Cell columnId=\\\"supervisor\\\">",
    		ctx
    	});

    	return block;
    }

    // (61:8) <Label>
    function create_default_slot_22$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$5.name,
    		type: "slot",
    		source: "(61:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (62:8) <IconButton class="material-icons">
    function create_default_slot_21$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$5.name,
    		type: "slot",
    		source: "(62:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (60:6) <Cell columnId="fullName" style="width: 100%;">
    function create_default_slot_20$7(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_22$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_21$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$7.name,
    		type: "slot",
    		source: "(60:6) <Cell columnId=\\\"fullName\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:8) <Label>
    function create_default_slot_19$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Email");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$7.name,
    		type: "slot",
    		source: "(65:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (66:8) <IconButton class="material-icons">
    function create_default_slot_18$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$7.name,
    		type: "slot",
    		source: "(66:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (64:6) <Cell columnId="email">
    function create_default_slot_17$8(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_19$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_18$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$8.name,
    		type: "slot",
    		source: "(64:6) <Cell columnId=\\\"email\\\">",
    		ctx
    	});

    	return block;
    }

    // (69:8) <Label>
    function create_default_slot_16$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Zip Code");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$8.name,
    		type: "slot",
    		source: "(69:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (70:8) <IconButton class="material-icons">
    function create_default_slot_15$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$9.name,
    		type: "slot",
    		source: "(70:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (68:6) <Cell columnId="zipCode">
    function create_default_slot_14$c(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_16$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_15$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$c.name,
    		type: "slot",
    		source: "(68:6) <Cell columnId=\\\"zipCode\\\">",
    		ctx
    	});

    	return block;
    }

    // (73:8) <Label>
    function create_default_slot_13$e(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("City");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$e.name,
    		type: "slot",
    		source: "(73:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (74:8) <IconButton class="material-icons">
    function create_default_slot_12$e(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$e.name,
    		type: "slot",
    		source: "(74:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (72:6) <Cell columnId="city">
    function create_default_slot_11$e(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_13$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_12$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$e.name,
    		type: "slot",
    		source: "(72:6) <Cell columnId=\\\"city\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:4) <Row>
    function create_default_slot_10$e(ctx) {
    	let cell0;
    	let t0;
    	let t1;
    	let cell1;
    	let t2;
    	let cell2;
    	let t3;
    	let cell3;
    	let t4;
    	let cell4;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				numeric: true,
    				columnId: "id",
    				$$slots: { default: [create_default_slot_26$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*adminMode*/ ctx[0] && create_if_block_1$m(ctx);

    	cell1 = new Cell$2({
    			props: {
    				columnId: "fullName",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_20$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				columnId: "email",
    				$$slots: { default: [create_default_slot_17$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				columnId: "zipCode",
    				$$slots: { default: [create_default_slot_14$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell$2({
    			props: {
    				columnId: "city",
    				$$slots: { default: [create_default_slot_11$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			create_component(cell1.$$.fragment);
    			t2 = space();
    			create_component(cell2.$$.fragment);
    			t3 = space();
    			create_component(cell3.$$.fragment);
    			t4 = space();
    			create_component(cell4.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell4, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);

    			if (/*adminMode*/ ctx[0]) {
    				if (if_block) {
    					if (dirty & /*adminMode*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$m(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t1.parentNode, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const cell1_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell4, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$e.name,
    		type: "slot",
    		source: "(49:4) <Row>",
    		ctx
    	});

    	return block;
    }

    // (48:2) <Head>
    function create_default_slot_9$f(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_10$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope, adminMode*/ 32769) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$f.name,
    		type: "slot",
    		source: "(48:2) <Head>",
    		ctx
    	});

    	return block;
    }

    // (81:8) <Cell numeric>
    function create_default_slot_8$h(ctx) {
    	let t_value = /*item*/ ctx[12].id + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 16 && t_value !== (t_value = /*item*/ ctx[12].id + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$h.name,
    		type: "slot",
    		source: "(81:8) <Cell numeric>",
    		ctx
    	});

    	return block;
    }

    // (82:8) {#if adminMode}
    function create_if_block$C(ctx) {
    	let cell;
    	let current;

    	cell = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_7$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, filtered*/ 32784) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$C.name,
    		type: "if",
    		source: "(82:8) {#if adminMode}",
    		ctx
    	});

    	return block;
    }

    // (83:8) <Cell>
    function create_default_slot_7$i(ctx) {
    	let t_value = /*item*/ ctx[12].supervisor + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 16 && t_value !== (t_value = /*item*/ ctx[12].supervisor + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$i.name,
    		type: "slot",
    		source: "(83:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (85:8) <Cell>
    function create_default_slot_6$n(ctx) {
    	let t0_value = /*item*/ ctx[12].firstName + "";
    	let t0;
    	let t1;
    	let t2_value = /*item*/ ctx[12].lastName + "";
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			t2 = text(t2_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 16 && t0_value !== (t0_value = /*item*/ ctx[12].firstName + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*filtered*/ 16 && t2_value !== (t2_value = /*item*/ ctx[12].lastName + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$n.name,
    		type: "slot",
    		source: "(85:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (86:8) <Cell>
    function create_default_slot_5$p(ctx) {
    	let t_value = /*item*/ ctx[12].email + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 16 && t_value !== (t_value = /*item*/ ctx[12].email + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$p.name,
    		type: "slot",
    		source: "(86:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (87:8) <Cell>
    function create_default_slot_4$s(ctx) {
    	let t_value = /*item*/ ctx[12].zipCode + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 16 && t_value !== (t_value = /*item*/ ctx[12].zipCode + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$s.name,
    		type: "slot",
    		source: "(87:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (88:8) <Cell>
    function create_default_slot_3$w(ctx) {
    	let t_value = /*item*/ ctx[12].city + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 16 && t_value !== (t_value = /*item*/ ctx[12].city + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$w.name,
    		type: "slot",
    		source: "(88:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (80:6) <Row on:click={() => navigate("client/" + item.id)}>
    function create_default_slot_2$A(ctx) {
    	let cell0;
    	let t0;
    	let t1;
    	let cell1;
    	let t2;
    	let cell2;
    	let t3;
    	let cell3;
    	let t4;
    	let cell4;
    	let t5;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_8$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*adminMode*/ ctx[0] && create_if_block$C(ctx);

    	cell1 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_6$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_5$p] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_4$s] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_3$w] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			create_component(cell1.$$.fragment);
    			t2 = space();
    			create_component(cell2.$$.fragment);
    			t3 = space();
    			create_component(cell3.$$.fragment);
    			t4 = space();
    			create_component(cell4.$$.fragment);
    			t5 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t5, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, filtered*/ 32784) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);

    			if (/*adminMode*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*adminMode*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$C(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t1.parentNode, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const cell1_changes = {};

    			if (dirty & /*$$scope, filtered*/ 32784) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, filtered*/ 32784) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, filtered*/ 32784) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, filtered*/ 32784) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$A.name,
    		type: "slot",
    		source: "(80:6) <Row on:click={() => navigate(\\\"client/\\\" + item.id)}>",
    		ctx
    	});

    	return block;
    }

    // (79:4) {#each filtered as item (item.id)}
    function create_each_block$j(key_1, ctx) {
    	let first;
    	let row;
    	let current;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[9](/*item*/ ctx[12]);
    	}

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_2$A] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row.$on("click", click_handler_1);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(row.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const row_changes = {};

    			if (dirty & /*$$scope, filtered, adminMode*/ 32785) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$j.name,
    		type: "each",
    		source: "(79:4) {#each filtered as item (item.id)}",
    		ctx
    	});

    	return block;
    }

    // (78:2) <Body>
    function create_default_slot_1$D(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[4];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[12].id;
    	validate_each_keys(ctx, each_value, get_each_context$j, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$j(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$j(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*navigate, filtered, adminMode*/ 17) {
    				each_value = /*filtered*/ ctx[4];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$j, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$j, each_1_anchor, get_each_context$j);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$D.name,
    		type: "slot",
    		source: "(78:2) <Body>",
    		ctx
    	});

    	return block;
    }

    // (40:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={handleSort}   table$aria-label="Client list"   style="width: 100%;" >
    function create_default_slot$R(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_9$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_1$D] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope, adminMode*/ 32769) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered, adminMode*/ 32785) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$R.name,
    		type: "slot",
    		source: "(40:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={handleSort}   table$aria-label=\\\"Client list\\\"   style=\\\"width: 100%;\\\" >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1s(ctx) {
    	let searchbar;
    	let updating_value;
    	let t0;
    	let floatingactionbutton;
    	let t1;
    	let datatable;
    	let updating_sort;
    	let updating_sortDirection;
    	let current;

    	function searchbar_value_binding(value) {
    		/*searchbar_value_binding*/ ctx[7](value);
    	}

    	let searchbar_props = {};

    	if (/*filterValue*/ ctx[1] !== void 0) {
    		searchbar_props.value = /*filterValue*/ ctx[1];
    	}

    	searchbar = new Searchbar({ props: searchbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(searchbar, 'value', searchbar_value_binding));
    	floatingactionbutton = new FloatingActionButton({ $$inline: true });
    	floatingactionbutton.$on("click", /*click_handler*/ ctx[8]);

    	function datatable_sort_binding(value) {
    		/*datatable_sort_binding*/ ctx[10](value);
    	}

    	function datatable_sortDirection_binding(value) {
    		/*datatable_sortDirection_binding*/ ctx[11](value);
    	}

    	let datatable_props = {
    		sortable: true,
    		"table$aria-label": "Client list",
    		style: "width: 100%;",
    		$$slots: { default: [create_default_slot$R] },
    		$$scope: { ctx }
    	};

    	if (/*sort*/ ctx[2] !== void 0) {
    		datatable_props.sort = /*sort*/ ctx[2];
    	}

    	if (/*sortDirection*/ ctx[3] !== void 0) {
    		datatable_props.sortDirection = /*sortDirection*/ ctx[3];
    	}

    	datatable = new DataTable({ props: datatable_props, $$inline: true });
    	binding_callbacks.push(() => bind(datatable, 'sort', datatable_sort_binding));
    	binding_callbacks.push(() => bind(datatable, 'sortDirection', datatable_sortDirection_binding));
    	datatable.$on("MDCDataTable:sorted", /*handleSort*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(searchbar.$$.fragment);
    			t0 = space();
    			create_component(floatingactionbutton.$$.fragment);
    			t1 = space();
    			create_component(datatable.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(floatingactionbutton, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const searchbar_changes = {};

    			if (!updating_value && dirty & /*filterValue*/ 2) {
    				updating_value = true;
    				searchbar_changes.value = /*filterValue*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			searchbar.$set(searchbar_changes);
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered, adminMode*/ 32785) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_sort && dirty & /*sort*/ 4) {
    				updating_sort = true;
    				datatable_changes.sort = /*sort*/ ctx[2];
    				add_flush_callback(() => updating_sort = false);
    			}

    			if (!updating_sortDirection && dirty & /*sortDirection*/ 8) {
    				updating_sortDirection = true;
    				datatable_changes.sortDirection = /*sortDirection*/ ctx[3];
    				add_flush_callback(() => updating_sortDirection = false);
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);
    			transition_in(floatingactionbutton.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			transition_out(floatingactionbutton.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(floatingactionbutton, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1a($$self, $$props, $$invalidate) {
    	let filterValue;
    	let filtered;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Clients', slots, []);
    	let sort = "id";
    	let sortDirection = "ascending";
    	let items = [];
    	let adminMode = false;
    	admin.subscribe(value => $$invalidate(0, adminMode = value));

    	function handleSort() {
    		items.sort((a, b) => {
    			const [aVal, bVal] = [a[sort], b[sort]][sortDirection === "ascending" ? "slice" : "reverse"]();

    			if (typeof aVal === "string" && typeof bVal === "string") {
    				return aVal.localeCompare(bVal);
    			}

    			return Number(aVal) - Number(bVal);
    		});

    		($$invalidate(6, items), $$invalidate(0, adminMode));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Clients> was created with unknown prop '${key}'`);
    	});

    	function searchbar_value_binding(value) {
    		filterValue = value;
    		$$invalidate(1, filterValue);
    	}

    	const click_handler = () => navigate("client/new");
    	const click_handler_1 = item => navigate("client/" + item.id);

    	function datatable_sort_binding(value) {
    		sort = value;
    		$$invalidate(2, sort);
    	}

    	function datatable_sortDirection_binding(value) {
    		sortDirection = value;
    		$$invalidate(3, sortDirection);
    	}

    	$$self.$capture_state = () => ({
    		navigate,
    		Searchbar,
    		FloatingActionButton,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		IconButton,
    		ClientService,
    		admin,
    		sort,
    		sortDirection,
    		items,
    		adminMode,
    		handleSort,
    		filterValue,
    		filtered
    	});

    	$$self.$inject_state = $$props => {
    		if ('sort' in $$props) $$invalidate(2, sort = $$props.sort);
    		if ('sortDirection' in $$props) $$invalidate(3, sortDirection = $$props.sortDirection);
    		if ('items' in $$props) $$invalidate(6, items = $$props.items);
    		if ('adminMode' in $$props) $$invalidate(0, adminMode = $$props.adminMode);
    		if ('filterValue' in $$props) $$invalidate(1, filterValue = $$props.filterValue);
    		if ('filtered' in $$props) $$invalidate(4, filtered = $$props.filtered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*adminMode*/ 1) {
    			if (adminMode) {
    				ClientService.listAll().then(clients => $$invalidate(6, items = clients));
    			} else {
    				ClientService.list().then(clients => $$invalidate(6, items = clients));
    			}
    		}

    		if ($$self.$$.dirty & /*items, filterValue*/ 66) {
    			$$invalidate(4, filtered = items.filter(s => s.firstName.includes(filterValue) || s.lastName.includes(filterValue) || s.email.includes(filterValue) || s.zipCode.includes(filterValue) || s.city.includes(filterValue)));
    		}
    	};

    	$$invalidate(1, filterValue = "");

    	return [
    		adminMode,
    		filterValue,
    		sort,
    		sortDirection,
    		filtered,
    		handleSort,
    		items,
    		searchbar_value_binding,
    		click_handler,
    		click_handler_1,
    		datatable_sort_binding,
    		datatable_sortDirection_binding
    	];
    }

    class Clients extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1a, create_fragment$1s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Clients",
    			options,
    			id: create_fragment$1s.name
    		});
    	}
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$e = {
        ACTIVE: 'mdc-tab-indicator--active',
        FADE: 'mdc-tab-indicator--fade',
        NO_TRANSITION: 'mdc-tab-indicator--no-transition',
    };
    var strings$g = {
        CONTENT_SELECTOR: '.mdc-tab-indicator__content',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabIndicatorFoundation = /** @class */ (function (_super) {
        __extends(MDCTabIndicatorFoundation, _super);
        function MDCTabIndicatorFoundation(adapter) {
            return _super.call(this, __assign(__assign({}, MDCTabIndicatorFoundation.defaultAdapter), adapter)) || this;
        }
        Object.defineProperty(MDCTabIndicatorFoundation, "cssClasses", {
            get: function () {
                return cssClasses$e;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabIndicatorFoundation, "strings", {
            get: function () {
                return strings$g;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabIndicatorFoundation, "defaultAdapter", {
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    computeContentClientRect: function () {
                        return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
                    },
                    setContentStyleProperty: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCTabIndicatorFoundation.prototype.computeContentClientRect = function () {
            return this.adapter.computeContentClientRect();
        };
        return MDCTabIndicatorFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /* istanbul ignore next: subclass is not a branch statement */
    var MDCFadingTabIndicatorFoundation = /** @class */ (function (_super) {
        __extends(MDCFadingTabIndicatorFoundation, _super);
        function MDCFadingTabIndicatorFoundation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCFadingTabIndicatorFoundation.prototype.activate = function () {
            this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
        };
        MDCFadingTabIndicatorFoundation.prototype.deactivate = function () {
            this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
        };
        return MDCFadingTabIndicatorFoundation;
    }(MDCTabIndicatorFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /* istanbul ignore next: subclass is not a branch statement */
    var MDCSlidingTabIndicatorFoundation = /** @class */ (function (_super) {
        __extends(MDCSlidingTabIndicatorFoundation, _super);
        function MDCSlidingTabIndicatorFoundation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCSlidingTabIndicatorFoundation.prototype.activate = function (previousIndicatorClientRect) {
            // Early exit if no indicator is present to handle cases where an indicator
            // may be activated without a prior indicator state
            if (!previousIndicatorClientRect) {
                this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                return;
            }
            // This animation uses the FLIP approach. You can read more about it at the link below:
            // https://aerotwist.com/blog/flip-your-animations/
            // Calculate the dimensions based on the dimensions of the previous indicator
            var currentClientRect = this.computeContentClientRect();
            var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
            var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
            this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
            this.adapter.setContentStyleProperty('transform', "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")");
            // Force repaint before updating classes and transform to ensure the transform properly takes effect
            this.computeContentClientRect();
            this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
            this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
            this.adapter.setContentStyleProperty('transform', '');
        };
        MDCSlidingTabIndicatorFoundation.prototype.deactivate = function () {
            this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
        };
        return MDCSlidingTabIndicatorFoundation;
    }(MDCTabIndicatorFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$d = {
        ACTIVE: 'mdc-tab--active',
    };
    var strings$f = {
        ARIA_SELECTED: 'aria-selected',
        CONTENT_SELECTOR: '.mdc-tab__content',
        INTERACTED_EVENT: 'MDCTab:interacted',
        RIPPLE_SELECTOR: '.mdc-tab__ripple',
        TABINDEX: 'tabIndex',
        TAB_INDICATOR_SELECTOR: '.mdc-tab-indicator',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabFoundation = /** @class */ (function (_super) {
        __extends(MDCTabFoundation, _super);
        function MDCTabFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation.defaultAdapter), adapter)) || this;
            _this.focusOnActivate = true;
            return _this;
        }
        Object.defineProperty(MDCTabFoundation, "cssClasses", {
            get: function () {
                return cssClasses$d;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabFoundation, "strings", {
            get: function () {
                return strings$f;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabFoundation, "defaultAdapter", {
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setAttr: function () { return undefined; },
                    activateIndicator: function () { return undefined; },
                    deactivateIndicator: function () { return undefined; },
                    notifyInteracted: function () { return undefined; },
                    getOffsetLeft: function () { return 0; },
                    getOffsetWidth: function () { return 0; },
                    getContentOffsetLeft: function () { return 0; },
                    getContentOffsetWidth: function () { return 0; },
                    focus: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCTabFoundation.prototype.handleClick = function () {
            // It's up to the parent component to keep track of the active Tab and
            // ensure we don't activate a Tab that's already active.
            this.adapter.notifyInteracted();
        };
        MDCTabFoundation.prototype.isActive = function () {
            return this.adapter.hasClass(cssClasses$d.ACTIVE);
        };
        /**
         * Sets whether the tab should focus itself when activated
         */
        MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {
            this.focusOnActivate = focusOnActivate;
        };
        /**
         * Activates the Tab
         */
        MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {
            this.adapter.addClass(cssClasses$d.ACTIVE);
            this.adapter.setAttr(strings$f.ARIA_SELECTED, 'true');
            this.adapter.setAttr(strings$f.TABINDEX, '0');
            this.adapter.activateIndicator(previousIndicatorClientRect);
            if (this.focusOnActivate) {
                this.adapter.focus();
            }
        };
        /**
         * Deactivates the Tab
         */
        MDCTabFoundation.prototype.deactivate = function () {
            // Early exit
            if (!this.isActive()) {
                return;
            }
            this.adapter.removeClass(cssClasses$d.ACTIVE);
            this.adapter.setAttr(strings$f.ARIA_SELECTED, 'false');
            this.adapter.setAttr(strings$f.TABINDEX, '-1');
            this.adapter.deactivateIndicator();
        };
        /**
         * Returns the dimensions of the Tab
         */
        MDCTabFoundation.prototype.computeDimensions = function () {
            var rootWidth = this.adapter.getOffsetWidth();
            var rootLeft = this.adapter.getOffsetLeft();
            var contentWidth = this.adapter.getContentOffsetWidth();
            var contentLeft = this.adapter.getContentOffsetLeft();
            return {
                contentLeft: rootLeft + contentLeft,
                contentRight: rootLeft + contentLeft + contentWidth,
                rootLeft: rootLeft,
                rootRight: rootLeft + rootWidth,
            };
        };
        return MDCTabFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/tab-indicator/dist/TabIndicator.svelte generated by Svelte v3.44.3 */

    const file$14 = "node_modules/@smui/tab-indicator/dist/TabIndicator.svelte";

    function create_fragment$1r(ctx) {
    	let span1;
    	let span0;
    	let span0_class_value;
    	let span0_style_value;
    	let span0_aria_hidden_value;
    	let useActions_action;
    	let span1_class_value;
    	let useActions_action_1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[21].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

    	let span0_levels = [
    		{
    			class: span0_class_value = classMap({
    				[/*content$class*/ ctx[6]]: true,
    				'mdc-tab-indicator__content': true,
    				'mdc-tab-indicator__content--underline': /*type*/ ctx[3] === 'underline',
    				'mdc-tab-indicator__content--icon': /*type*/ ctx[3] === 'icon'
    			})
    		},
    		{
    			style: span0_style_value = Object.entries(/*contentStyles*/ ctx[10]).map(func$c).join(' ')
    		},
    		{
    			"aria-hidden": span0_aria_hidden_value = /*type*/ ctx[3] === 'icon' ? 'true' : undefined
    		},
    		prefixFilter(/*$$restProps*/ ctx[12], 'content$')
    	];

    	let span0_data = {};

    	for (let i = 0; i < span0_levels.length; i += 1) {
    		span0_data = assign(span0_data, span0_levels[i]);
    	}

    	let span1_levels = [
    		{
    			class: span1_class_value = classMap({
    				[/*className*/ ctx[2]]: true,
    				'mdc-tab-indicator': true,
    				'mdc-tab-indicator--active': /*active*/ ctx[0],
    				'mdc-tab-indicator--fade': /*transition*/ ctx[4] === 'fade',
    				.../*internalClasses*/ ctx[9]
    			})
    		},
    		exclude(/*$$restProps*/ ctx[12], ['content$'])
    	];

    	let span1_data = {};

    	for (let i = 0; i < span1_levels.length; i += 1) {
    		span1_data = assign(span1_data, span1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span1 = element("span");
    			span0 = element("span");
    			if (default_slot) default_slot.c();
    			set_attributes(span0, span0_data);
    			add_location(span0, file$14, 13, 2, 316);
    			set_attributes(span1, span1_data);
    			add_location(span1, file$14, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span1, anchor);
    			append_dev(span1, span0);

    			if (default_slot) {
    				default_slot.m(span0, null);
    			}

    			/*span0_binding*/ ctx[22](span0);
    			/*span1_binding*/ ctx[23](span1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span0, /*content$use*/ ctx[5])),
    					action_destroyer(useActions_action_1 = useActions.call(null, span1, /*use*/ ctx[1])),
    					action_destroyer(/*forwardEvents*/ ctx[11].call(null, span1))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[20],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[20], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(span0, span0_data = get_spread_update(span0_levels, [
    				(!current || dirty & /*content$class, type*/ 72 && span0_class_value !== (span0_class_value = classMap({
    					[/*content$class*/ ctx[6]]: true,
    					'mdc-tab-indicator__content': true,
    					'mdc-tab-indicator__content--underline': /*type*/ ctx[3] === 'underline',
    					'mdc-tab-indicator__content--icon': /*type*/ ctx[3] === 'icon'
    				}))) && { class: span0_class_value },
    				(!current || dirty & /*contentStyles*/ 1024 && span0_style_value !== (span0_style_value = Object.entries(/*contentStyles*/ ctx[10]).map(func$c).join(' '))) && { style: span0_style_value },
    				(!current || dirty & /*type*/ 8 && span0_aria_hidden_value !== (span0_aria_hidden_value = /*type*/ ctx[3] === 'icon' ? 'true' : undefined)) && { "aria-hidden": span0_aria_hidden_value },
    				dirty & /*$$restProps*/ 4096 && prefixFilter(/*$$restProps*/ ctx[12], 'content$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*content$use*/ 32) useActions_action.update.call(null, /*content$use*/ ctx[5]);

    			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
    				(!current || dirty & /*className, active, transition, internalClasses*/ 533 && span1_class_value !== (span1_class_value = classMap({
    					[/*className*/ ctx[2]]: true,
    					'mdc-tab-indicator': true,
    					'mdc-tab-indicator--active': /*active*/ ctx[0],
    					'mdc-tab-indicator--fade': /*transition*/ ctx[4] === 'fade',
    					.../*internalClasses*/ ctx[9]
    				}))) && { class: span1_class_value },
    				dirty & /*$$restProps*/ 4096 && exclude(/*$$restProps*/ ctx[12], ['content$'])
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/ 2) useActions_action_1.update.call(null, /*use*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span1);
    			if (default_slot) default_slot.d(detaching);
    			/*span0_binding*/ ctx[22](null);
    			/*span1_binding*/ ctx[23](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$c = ([name, value]) => `${name}: ${value};`;

    function instance_1$h($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","active","type","transition","content$use","content$class","activate","deactivate","computeContentClientRect","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabIndicator', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { active = false } = $$props;
    	let { type = 'underline' } = $$props;
    	let { transition = 'slide' } = $$props;
    	let { content$use = [] } = $$props;
    	let { content$class = '' } = $$props;
    	let element;
    	let instance;
    	let content;
    	let internalClasses = {};
    	let contentStyles = {};
    	let changeSets = [];
    	let oldTransition = transition;

    	onMount(() => {
    		$$invalidate(17, instance = getInstance());
    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function getInstance() {
    		const Foundation = ({
    			fade: MDCFadingTabIndicatorFoundation,
    			slide: MDCSlidingTabIndicatorFoundation
    		})[transition] || MDCSlidingTabIndicatorFoundation;

    		return new Foundation({
    				addClass: (...props) => doChange(() => addClass(...props)),
    				removeClass: (...props) => doChange(() => removeClass(...props)),
    				computeContentClientRect,
    				setContentStyleProperty: (...props) => doChange(() => addContentStyle(...props))
    			});
    	}

    	function doChange(fn) {
    		if (changeSets.length) {
    			changeSets[changeSets.length - 1].push(fn);
    		} else {
    			fn();
    		}
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(9, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(9, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addContentStyle(name, value) {
    		if (contentStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete contentStyles[name];
    				((($$invalidate(10, contentStyles), $$invalidate(19, oldTransition)), $$invalidate(4, transition)), $$invalidate(17, instance));
    			} else {
    				$$invalidate(10, contentStyles[name] = value, contentStyles);
    			}
    		}
    	}

    	function activate(previousIndicatorClientRect) {
    		$$invalidate(0, active = true);
    		instance.activate(previousIndicatorClientRect);
    	}

    	function deactivate() {
    		$$invalidate(0, active = false);
    		instance.deactivate();
    	}

    	function computeContentClientRect() {
    		changeSets.push([]);
    		$$invalidate(18, changeSets);
    		return content.getBoundingClientRect();
    	}

    	function getElement() {
    		return element;
    	}

    	function span0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			content = $$value;
    			$$invalidate(8, content);
    		});
    	}

    	function span1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
    		if ('type' in $$new_props) $$invalidate(3, type = $$new_props.type);
    		if ('transition' in $$new_props) $$invalidate(4, transition = $$new_props.transition);
    		if ('content$use' in $$new_props) $$invalidate(5, content$use = $$new_props.content$use);
    		if ('content$class' in $$new_props) $$invalidate(6, content$class = $$new_props.content$class);
    		if ('$$scope' in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCFadingTabIndicatorFoundation,
    		MDCSlidingTabIndicatorFoundation,
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		active,
    		type,
    		transition,
    		content$use,
    		content$class,
    		element,
    		instance,
    		content,
    		internalClasses,
    		contentStyles,
    		changeSets,
    		oldTransition,
    		getInstance,
    		doChange,
    		addClass,
    		removeClass,
    		addContentStyle,
    		activate,
    		deactivate,
    		computeContentClientRect,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('active' in $$props) $$invalidate(0, active = $$new_props.active);
    		if ('type' in $$props) $$invalidate(3, type = $$new_props.type);
    		if ('transition' in $$props) $$invalidate(4, transition = $$new_props.transition);
    		if ('content$use' in $$props) $$invalidate(5, content$use = $$new_props.content$use);
    		if ('content$class' in $$props) $$invalidate(6, content$class = $$new_props.content$class);
    		if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(17, instance = $$new_props.instance);
    		if ('content' in $$props) $$invalidate(8, content = $$new_props.content);
    		if ('internalClasses' in $$props) $$invalidate(9, internalClasses = $$new_props.internalClasses);
    		if ('contentStyles' in $$props) $$invalidate(10, contentStyles = $$new_props.contentStyles);
    		if ('changeSets' in $$props) $$invalidate(18, changeSets = $$new_props.changeSets);
    		if ('oldTransition' in $$props) $$invalidate(19, oldTransition = $$new_props.oldTransition);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*oldTransition, transition, instance*/ 655376) {
    			if (oldTransition !== transition) {
    				$$invalidate(19, oldTransition = transition);
    				instance && instance.destroy();
    				$$invalidate(9, internalClasses = {});
    				$$invalidate(10, contentStyles = {});
    				$$invalidate(17, instance = getInstance());
    				instance.init();
    			}
    		}

    		if ($$self.$$.dirty & /*changeSets*/ 262144) {
    			// Use sets of changes for DOM updates, to facilitate animations.
    			if (changeSets.length) {
    				requestAnimationFrame(() => {
    					var _a;

    					const changeSet = (_a = changeSets.shift()) !== null && _a !== void 0
    					? _a
    					: [];

    					$$invalidate(18, changeSets);

    					for (const fn of changeSet) {
    						fn();
    					}
    				});
    			}
    		}
    	};

    	return [
    		active,
    		use,
    		className,
    		type,
    		transition,
    		content$use,
    		content$class,
    		element,
    		content,
    		internalClasses,
    		contentStyles,
    		forwardEvents,
    		$$restProps,
    		activate,
    		deactivate,
    		computeContentClientRect,
    		getElement,
    		instance,
    		changeSets,
    		oldTransition,
    		$$scope,
    		slots,
    		span0_binding,
    		span1_binding
    	];
    }

    class TabIndicator extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$h, create_fragment$1r, safe_not_equal, {
    			use: 1,
    			class: 2,
    			active: 0,
    			type: 3,
    			transition: 4,
    			content$use: 5,
    			content$class: 6,
    			activate: 13,
    			deactivate: 14,
    			computeContentClientRect: 15,
    			getElement: 16
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabIndicator",
    			options,
    			id: create_fragment$1r.name
    		});
    	}

    	get use() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content$use() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content$use(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content$class() {
    		throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content$class(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activate() {
    		return this.$$.ctx[13];
    	}

    	set activate(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deactivate() {
    		return this.$$.ctx[14];
    	}

    	set deactivate(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get computeContentClientRect() {
    		return this.$$.ctx[15];
    	}

    	set computeContentClientRect(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[16];
    	}

    	set getElement(value) {
    		throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/tab/dist/Tab.svelte generated by Svelte v3.44.3 */

    const { Error: Error_1$1 } = globals;
    const file$13 = "node_modules/@smui/tab/dist/Tab.svelte";
    const get_tab_indicator_slot_changes_1 = dirty => ({});
    const get_tab_indicator_slot_context_1 = ctx => ({});
    const get_tab_indicator_slot_changes = dirty => ({});
    const get_tab_indicator_slot_context = ctx => ({});

    // (48:4) {#if indicatorSpanOnlyContent}
    function create_if_block_1$l(ctx) {
    	let tabindicator;
    	let current;

    	const tabindicator_spread_levels = [
    		{ active: /*active*/ ctx[18] },
    		prefixFilter(/*$$restProps*/ ctx[24], 'tabIndicator$')
    	];

    	let tabindicator_props = {
    		$$slots: { default: [create_default_slot_2$z] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < tabindicator_spread_levels.length; i += 1) {
    		tabindicator_props = assign(tabindicator_props, tabindicator_spread_levels[i]);
    	}

    	tabindicator = new TabIndicator({
    			props: tabindicator_props,
    			$$inline: true
    		});

    	/*tabindicator_binding*/ ctx[31](tabindicator);

    	const block = {
    		c: function create() {
    			create_component(tabindicator.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tabindicator, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tabindicator_changes = (dirty[0] & /*active, $$restProps*/ 17039360)
    			? get_spread_update(tabindicator_spread_levels, [
    					dirty[0] & /*active*/ 262144 && { active: /*active*/ ctx[18] },
    					dirty[0] & /*$$restProps*/ 16777216 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[24], 'tabIndicator$'))
    				])
    			: {};

    			if (dirty[1] & /*$$scope*/ 32) {
    				tabindicator_changes.$$scope = { dirty, ctx };
    			}

    			tabindicator.$set(tabindicator_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabindicator.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabindicator.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*tabindicator_binding*/ ctx[31](null);
    			destroy_component(tabindicator, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$l.name,
    		type: "if",
    		source: "(48:4) {#if indicatorSpanOnlyContent}",
    		ctx
    	});

    	return block;
    }

    // (49:6) <TabIndicator         bind:this={tabIndicator}         {active}         {...prefixFilter($$restProps, 'tabIndicator$')}         >
    function create_default_slot_2$z(ctx) {
    	let current;
    	const tab_indicator_slot_template = /*#slots*/ ctx[30]["tab-indicator"];
    	const tab_indicator_slot = create_slot(tab_indicator_slot_template, ctx, /*$$scope*/ ctx[36], get_tab_indicator_slot_context);

    	const block = {
    		c: function create() {
    			if (tab_indicator_slot) tab_indicator_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (tab_indicator_slot) {
    				tab_indicator_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (tab_indicator_slot) {
    				if (tab_indicator_slot.p && (!current || dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						tab_indicator_slot,
    						tab_indicator_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(tab_indicator_slot_template, /*$$scope*/ ctx[36], dirty, get_tab_indicator_slot_changes),
    						get_tab_indicator_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab_indicator_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab_indicator_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (tab_indicator_slot) tab_indicator_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$z.name,
    		type: "slot",
    		source: "(49:6) <TabIndicator         bind:this={tabIndicator}         {active}         {...prefixFilter($$restProps, 'tabIndicator$')}         >",
    		ctx
    	});

    	return block;
    }

    // (57:2) {#if !indicatorSpanOnlyContent}
    function create_if_block$B(ctx) {
    	let tabindicator;
    	let current;

    	const tabindicator_spread_levels = [
    		{ active: /*active*/ ctx[18] },
    		prefixFilter(/*$$restProps*/ ctx[24], 'tabIndicator$')
    	];

    	let tabindicator_props = {
    		$$slots: { default: [create_default_slot_1$C] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < tabindicator_spread_levels.length; i += 1) {
    		tabindicator_props = assign(tabindicator_props, tabindicator_spread_levels[i]);
    	}

    	tabindicator = new TabIndicator({
    			props: tabindicator_props,
    			$$inline: true
    		});

    	/*tabindicator_binding_1*/ ctx[33](tabindicator);

    	const block = {
    		c: function create() {
    			create_component(tabindicator.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tabindicator, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tabindicator_changes = (dirty[0] & /*active, $$restProps*/ 17039360)
    			? get_spread_update(tabindicator_spread_levels, [
    					dirty[0] & /*active*/ 262144 && { active: /*active*/ ctx[18] },
    					dirty[0] & /*$$restProps*/ 16777216 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[24], 'tabIndicator$'))
    				])
    			: {};

    			if (dirty[1] & /*$$scope*/ 32) {
    				tabindicator_changes.$$scope = { dirty, ctx };
    			}

    			tabindicator.$set(tabindicator_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabindicator.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabindicator.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*tabindicator_binding_1*/ ctx[33](null);
    			destroy_component(tabindicator, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$B.name,
    		type: "if",
    		source: "(57:2) {#if !indicatorSpanOnlyContent}",
    		ctx
    	});

    	return block;
    }

    // (58:4) <TabIndicator       bind:this={tabIndicator}       {active}       {...prefixFilter($$restProps, 'tabIndicator$')}       >
    function create_default_slot_1$C(ctx) {
    	let current;
    	const tab_indicator_slot_template = /*#slots*/ ctx[30]["tab-indicator"];
    	const tab_indicator_slot = create_slot(tab_indicator_slot_template, ctx, /*$$scope*/ ctx[36], get_tab_indicator_slot_context_1);

    	const block = {
    		c: function create() {
    			if (tab_indicator_slot) tab_indicator_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (tab_indicator_slot) {
    				tab_indicator_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (tab_indicator_slot) {
    				if (tab_indicator_slot.p && (!current || dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						tab_indicator_slot,
    						tab_indicator_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(tab_indicator_slot_template, /*$$scope*/ ctx[36], dirty, get_tab_indicator_slot_changes_1),
    						get_tab_indicator_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab_indicator_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab_indicator_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (tab_indicator_slot) tab_indicator_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$C.name,
    		type: "slot",
    		source: "(58:4) <TabIndicator       bind:this={tabIndicator}       {active}       {...prefixFilter($$restProps, 'tabIndicator$')}       >",
    		ctx
    	});

    	return block;
    }

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-tab': true,     'mdc-tab--active': active,     'mdc-tab--stacked': stacked,     'mdc-tab--min-width': minWidth,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   role="tab"   aria-selected={active ? 'true' : 'false'}   tabindex={active || forceAccessible ? '0' : '-1'}   {href}   on:click={() => instance && instance.handleClick()}   {...internalAttrs}   {...exclude($$restProps, ['content$', 'tabIndicator$'])} >
    function create_default_slot$Q(ctx) {
    	let span0;
    	let t0;
    	let span0_class_value;
    	let useActions_action;
    	let t1;
    	let t2;
    	let span1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[30].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[36], null);
    	let if_block0 = /*indicatorSpanOnlyContent*/ ctx[6] && create_if_block_1$l(ctx);

    	let span0_levels = [
    		{
    			class: span0_class_value = classMap({
    				[/*content$class*/ ctx[9]]: true,
    				'mdc-tab__content': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[24], 'content$')
    	];

    	let span0_data = {};

    	for (let i = 0; i < span0_levels.length; i += 1) {
    		span0_data = assign(span0_data, span0_levels[i]);
    	}

    	let if_block1 = !/*indicatorSpanOnlyContent*/ ctx[6] && create_if_block$B(ctx);

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			span1 = element("span");
    			set_attributes(span0, span0_data);
    			add_location(span0, file$13, 37, 2, 824);
    			attr_dev(span1, "class", "mdc-tab__ripple");
    			add_location(span1, file$13, 64, 2, 1503);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);

    			if (default_slot) {
    				default_slot.m(span0, null);
    			}

    			append_dev(span0, t0);
    			if (if_block0) if_block0.m(span0, null);
    			/*span0_binding*/ ctx[32](span0);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, span1, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(useActions_action = useActions.call(null, span0, /*content$use*/ ctx[8]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[36], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*indicatorSpanOnlyContent*/ ctx[6]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*indicatorSpanOnlyContent*/ 64) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$l(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(span0, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			set_attributes(span0, span0_data = get_spread_update(span0_levels, [
    				(!current || dirty[0] & /*content$class*/ 512 && span0_class_value !== (span0_class_value = classMap({
    					[/*content$class*/ ctx[9]]: true,
    					'mdc-tab__content': true
    				}))) && { class: span0_class_value },
    				dirty[0] & /*$$restProps*/ 16777216 && prefixFilter(/*$$restProps*/ ctx[24], 'content$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*content$use*/ 256) useActions_action.update.call(null, /*content$use*/ ctx[8]);

    			if (!/*indicatorSpanOnlyContent*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*indicatorSpanOnlyContent*/ 64) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$B(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t2.parentNode, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block0) if_block0.d();
    			/*span0_binding*/ ctx[32](null);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(span1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$Q.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-tab': true,     'mdc-tab--active': active,     'mdc-tab--stacked': stacked,     'mdc-tab--min-width': minWidth,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   role=\\\"tab\\\"   aria-selected={active ? 'true' : 'false'}   tabindex={active || forceAccessible ? '0' : '-1'}   {href}   on:click={() => instance && instance.handleClick()}   {...internalAttrs}   {...exclude($$restProps, ['content$', 'tabIndicator$'])} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1q(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				[
    					Ripple,
    					{
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						addClass: /*addClass*/ ctx[21],
    						removeClass: /*removeClass*/ ctx[22],
    						addStyle: /*addStyle*/ ctx[23]
    					}
    				],
    				/*forwardEvents*/ ctx[20],
    				.../*use*/ ctx[0]
    			]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-tab': true,
    				'mdc-tab--active': /*active*/ ctx[18],
    				'mdc-tab--stacked': /*stacked*/ ctx[4],
    				'mdc-tab--min-width': /*minWidth*/ ctx[5],
    				.../*internalClasses*/ ctx[15]
    			})
    		},
    		{
    			style: Object.entries(/*internalStyles*/ ctx[16]).map(func$b).concat([/*style*/ ctx[2]]).join(' ')
    		},
    		{ role: "tab" },
    		{
    			"aria-selected": /*active*/ ctx[18] ? 'true' : 'false'
    		},
    		{
    			tabindex: /*active*/ ctx[18] || /*forceAccessible*/ ctx[19]
    			? '0'
    			: '-1'
    		},
    		{ href: /*href*/ ctx[7] },
    		/*internalAttrs*/ ctx[17],
    		exclude(/*$$restProps*/ ctx[24], ['content$', 'tabIndicator$'])
    	];

    	var switch_value = /*component*/ ctx[10];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$Q] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[34](switch_instance);
    		switch_instance.$on("click", /*click_handler*/ ctx[35]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*ripple, addClass, removeClass, addStyle, forwardEvents, use, className, active, stacked, minWidth, internalClasses, internalStyles, style, forceAccessible, href, internalAttrs, $$restProps*/ 33521855)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty[0] & /*ripple, addClass, removeClass, addStyle, forwardEvents, use*/ 15728649 && {
    						use: [
    							[
    								Ripple,
    								{
    									ripple: /*ripple*/ ctx[3],
    									unbounded: false,
    									addClass: /*addClass*/ ctx[21],
    									removeClass: /*removeClass*/ ctx[22],
    									addStyle: /*addStyle*/ ctx[23]
    								}
    							],
    							/*forwardEvents*/ ctx[20],
    							.../*use*/ ctx[0]
    						]
    					},
    					dirty[0] & /*className, active, stacked, minWidth, internalClasses*/ 294962 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-tab': true,
    							'mdc-tab--active': /*active*/ ctx[18],
    							'mdc-tab--stacked': /*stacked*/ ctx[4],
    							'mdc-tab--min-width': /*minWidth*/ ctx[5],
    							.../*internalClasses*/ ctx[15]
    						})
    					},
    					dirty[0] & /*internalStyles, style*/ 65540 && {
    						style: Object.entries(/*internalStyles*/ ctx[16]).map(func$b).concat([/*style*/ ctx[2]]).join(' ')
    					},
    					switch_instance_spread_levels[3],
    					dirty[0] & /*active*/ 262144 && {
    						"aria-selected": /*active*/ ctx[18] ? 'true' : 'false'
    					},
    					dirty[0] & /*active, forceAccessible*/ 786432 && {
    						tabindex: /*active*/ ctx[18] || /*forceAccessible*/ ctx[19]
    						? '0'
    						: '-1'
    					},
    					dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
    					dirty[0] & /*internalAttrs*/ 131072 && get_spread_object(/*internalAttrs*/ ctx[17]),
    					dirty[0] & /*$$restProps*/ 16777216 && get_spread_object(exclude(/*$$restProps*/ ctx[24], ['content$', 'tabIndicator$']))
    				])
    			: {};

    			if (dirty[0] & /*active, $$restProps, tabIndicator, indicatorSpanOnlyContent, content$class, content, content$use*/ 17064768 | dirty[1] & /*$$scope*/ 32) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[10])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[34](switch_instance);
    					switch_instance.$on("click", /*click_handler*/ ctx[35]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[34](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$b = ([name, value]) => `${name}: ${value};`;

    function instance_1$g($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","tab","ripple","stacked","minWidth","indicatorSpanOnlyContent","href","content$use","content$class","component","activate","deactivate","focus","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tab', slots, ['default','tab-indicator']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { tab: tabId } = $$props;
    	let { ripple = true } = $$props;
    	let { stacked = false } = $$props;
    	let { minWidth = false } = $$props;
    	let { indicatorSpanOnlyContent = false } = $$props;
    	let { href = undefined } = $$props;
    	let { content$use = [] } = $$props;
    	let { content$class = '' } = $$props;
    	let element;
    	let instance;
    	let content;
    	let tabIndicator;
    	let internalClasses = {};
    	let internalStyles = {};
    	let internalAttrs = {};
    	let focusOnActivate = getContext('SMUI:tab:focusOnActivate');
    	let active = tabId === getContext('SMUI:tab:initialActive');
    	let forceAccessible = false;
    	let { component = href == null ? Button : A } = $$props;
    	setContext('SMUI:label:context', 'tab');
    	setContext('SMUI:icon:context', 'tab');

    	if (!tabId) {
    		throw new Error('The tab property is required! It should be passed down from the TabBar to the Tab.');
    	}

    	onMount(() => {
    		$$invalidate(11, instance = new MDCTabFoundation({
    				setAttr: addAttr,
    				addClass,
    				removeClass,
    				hasClass,
    				activateIndicator: previousIndicatorClientRect => tabIndicator.activate(previousIndicatorClientRect),
    				deactivateIndicator: () => tabIndicator.deactivate(),
    				notifyInteracted: () => dispatch(getElement(), 'SMUITab:interacted', { tabId }, undefined, true),
    				getOffsetLeft: () => getElement().offsetLeft,
    				getOffsetWidth: () => getElement().offsetWidth,
    				getContentOffsetLeft: () => content.offsetLeft,
    				getContentOffsetWidth: () => content.offsetWidth,
    				focus
    			}));

    		const accessor = {
    			tabId,
    			get element() {
    				return getElement();
    			},
    			get active() {
    				return active;
    			},
    			forceAccessible(accessible) {
    				$$invalidate(19, forceAccessible = accessible);
    			},
    			computeIndicatorClientRect: () => tabIndicator.computeContentClientRect(),
    			computeDimensions: () => instance.computeDimensions(),
    			focus,
    			activate,
    			deactivate
    		};

    		dispatch(getElement(), 'SMUITab:mount', accessor);
    		instance.init();

    		return () => {
    			dispatch(getElement(), 'SMUITab:unmount', accessor);
    			instance.destroy();
    		};
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(15, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(15, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(16, internalStyles);
    			} else {
    				$$invalidate(16, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(17, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function activate(previousIndicatorClientRect, skipFocus) {
    		$$invalidate(18, active = true);

    		if (skipFocus) {
    			instance.setFocusOnActivate(false);
    		}

    		instance.activate(previousIndicatorClientRect);

    		if (skipFocus) {
    			instance.setFocusOnActivate(focusOnActivate);
    		}
    	}

    	function deactivate() {
    		$$invalidate(18, active = false);
    		instance.deactivate();
    	}

    	function focus() {
    		getElement().focus();
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function tabindicator_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			tabIndicator = $$value;
    			$$invalidate(14, tabIndicator);
    		});
    	}

    	function span0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			content = $$value;
    			$$invalidate(13, content);
    		});
    	}

    	function tabindicator_binding_1($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			tabIndicator = $$value;
    			$$invalidate(14, tabIndicator);
    		});
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(12, element);
    		});
    	}

    	const click_handler = () => instance && instance.handleClick();

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(24, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
    		if ('tab' in $$new_props) $$invalidate(25, tabId = $$new_props.tab);
    		if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('stacked' in $$new_props) $$invalidate(4, stacked = $$new_props.stacked);
    		if ('minWidth' in $$new_props) $$invalidate(5, minWidth = $$new_props.minWidth);
    		if ('indicatorSpanOnlyContent' in $$new_props) $$invalidate(6, indicatorSpanOnlyContent = $$new_props.indicatorSpanOnlyContent);
    		if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
    		if ('content$use' in $$new_props) $$invalidate(8, content$use = $$new_props.content$use);
    		if ('content$class' in $$new_props) $$invalidate(9, content$class = $$new_props.content$class);
    		if ('component' in $$new_props) $$invalidate(10, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(36, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCTabFoundation,
    		onMount,
    		setContext,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		Ripple,
    		A,
    		Button,
    		TabIndicator,
    		forwardEvents,
    		use,
    		className,
    		style,
    		tabId,
    		ripple,
    		stacked,
    		minWidth,
    		indicatorSpanOnlyContent,
    		href,
    		content$use,
    		content$class,
    		element,
    		instance,
    		content,
    		tabIndicator,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		focusOnActivate,
    		active,
    		forceAccessible,
    		component,
    		hasClass,
    		addClass,
    		removeClass,
    		addStyle,
    		addAttr,
    		activate,
    		deactivate,
    		focus,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
    		if ('tabId' in $$props) $$invalidate(25, tabId = $$new_props.tabId);
    		if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('stacked' in $$props) $$invalidate(4, stacked = $$new_props.stacked);
    		if ('minWidth' in $$props) $$invalidate(5, minWidth = $$new_props.minWidth);
    		if ('indicatorSpanOnlyContent' in $$props) $$invalidate(6, indicatorSpanOnlyContent = $$new_props.indicatorSpanOnlyContent);
    		if ('href' in $$props) $$invalidate(7, href = $$new_props.href);
    		if ('content$use' in $$props) $$invalidate(8, content$use = $$new_props.content$use);
    		if ('content$class' in $$props) $$invalidate(9, content$class = $$new_props.content$class);
    		if ('element' in $$props) $$invalidate(12, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(11, instance = $$new_props.instance);
    		if ('content' in $$props) $$invalidate(13, content = $$new_props.content);
    		if ('tabIndicator' in $$props) $$invalidate(14, tabIndicator = $$new_props.tabIndicator);
    		if ('internalClasses' in $$props) $$invalidate(15, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(16, internalStyles = $$new_props.internalStyles);
    		if ('internalAttrs' in $$props) $$invalidate(17, internalAttrs = $$new_props.internalAttrs);
    		if ('focusOnActivate' in $$props) $$invalidate(37, focusOnActivate = $$new_props.focusOnActivate);
    		if ('active' in $$props) $$invalidate(18, active = $$new_props.active);
    		if ('forceAccessible' in $$props) $$invalidate(19, forceAccessible = $$new_props.forceAccessible);
    		if ('component' in $$props) $$invalidate(10, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*instance*/ 2048) {
    			if (instance) {
    				instance.setFocusOnActivate(focusOnActivate);
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		style,
    		ripple,
    		stacked,
    		minWidth,
    		indicatorSpanOnlyContent,
    		href,
    		content$use,
    		content$class,
    		component,
    		instance,
    		element,
    		content,
    		tabIndicator,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		active,
    		forceAccessible,
    		forwardEvents,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		tabId,
    		activate,
    		deactivate,
    		focus,
    		getElement,
    		slots,
    		tabindicator_binding,
    		span0_binding,
    		tabindicator_binding_1,
    		switch_instance_binding,
    		click_handler,
    		$$scope
    	];
    }

    class Tab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$g,
    			create_fragment$1q,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				style: 2,
    				tab: 25,
    				ripple: 3,
    				stacked: 4,
    				minWidth: 5,
    				indicatorSpanOnlyContent: 6,
    				href: 7,
    				content$use: 8,
    				content$class: 9,
    				component: 10,
    				activate: 26,
    				deactivate: 27,
    				focus: 28,
    				getElement: 29
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tab",
    			options,
    			id: create_fragment$1q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*tabId*/ ctx[25] === undefined && !('tab' in props)) {
    			console.warn("<Tab> was created without expected prop 'tab'");
    		}
    	}

    	get use() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tab() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tab(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stacked() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stacked(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get minWidth() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set minWidth(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indicatorSpanOnlyContent() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indicatorSpanOnlyContent(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content$use() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content$use(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content$class() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content$class(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error_1$1("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activate() {
    		return this.$$.ctx[26];
    	}

    	set activate(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deactivate() {
    		return this.$$.ctx[27];
    	}

    	set deactivate(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[28];
    	}

    	set focus(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[29];
    	}

    	set getElement(value) {
    		throw new Error_1$1("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$c = {
        ANIMATING: 'mdc-tab-scroller--animating',
        SCROLL_AREA_SCROLL: 'mdc-tab-scroller__scroll-area--scroll',
        SCROLL_TEST: 'mdc-tab-scroller__test',
    };
    var strings$e = {
        AREA_SELECTOR: '.mdc-tab-scroller__scroll-area',
        CONTENT_SELECTOR: '.mdc-tab-scroller__scroll-content',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabScrollerRTL = /** @class */ (function () {
        function MDCTabScrollerRTL(adapter) {
            this.adapter = adapter;
        }
        return MDCTabScrollerRTL;
    }());

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabScrollerRTLDefault = /** @class */ (function (_super) {
        __extends(MDCTabScrollerRTLDefault, _super);
        function MDCTabScrollerRTLDefault() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCTabScrollerRTLDefault.prototype.getScrollPositionRTL = function () {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var right = this.calculateScrollEdges().right;
            // Scroll values on most browsers are ints instead of floats so we round
            return Math.round(right - currentScrollLeft);
        };
        MDCTabScrollerRTLDefault.prototype.scrollToRTL = function (scrollX) {
            var edges = this.calculateScrollEdges();
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var clampedScrollLeft = this.clampScrollValue(edges.right - scrollX);
            return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft,
            };
        };
        MDCTabScrollerRTLDefault.prototype.incrementScrollRTL = function (scrollX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
            return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft,
            };
        };
        MDCTabScrollerRTLDefault.prototype.getAnimatingScrollPosition = function (scrollX) {
            return scrollX;
        };
        MDCTabScrollerRTLDefault.prototype.calculateScrollEdges = function () {
            var contentWidth = this.adapter.getScrollContentOffsetWidth();
            var rootWidth = this.adapter.getScrollAreaOffsetWidth();
            return {
                left: 0,
                right: contentWidth - rootWidth,
            };
        };
        MDCTabScrollerRTLDefault.prototype.clampScrollValue = function (scrollX) {
            var edges = this.calculateScrollEdges();
            return Math.min(Math.max(edges.left, scrollX), edges.right);
        };
        return MDCTabScrollerRTLDefault;
    }(MDCTabScrollerRTL));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabScrollerRTLNegative = /** @class */ (function (_super) {
        __extends(MDCTabScrollerRTLNegative, _super);
        function MDCTabScrollerRTLNegative() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCTabScrollerRTLNegative.prototype.getScrollPositionRTL = function (translateX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            return Math.round(translateX - currentScrollLeft);
        };
        MDCTabScrollerRTLNegative.prototype.scrollToRTL = function (scrollX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var clampedScrollLeft = this.clampScrollValue(-scrollX);
            return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft,
            };
        };
        MDCTabScrollerRTLNegative.prototype.incrementScrollRTL = function (scrollX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
            return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft,
            };
        };
        MDCTabScrollerRTLNegative.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
            return scrollX - translateX;
        };
        MDCTabScrollerRTLNegative.prototype.calculateScrollEdges = function () {
            var contentWidth = this.adapter.getScrollContentOffsetWidth();
            var rootWidth = this.adapter.getScrollAreaOffsetWidth();
            return {
                left: rootWidth - contentWidth,
                right: 0,
            };
        };
        MDCTabScrollerRTLNegative.prototype.clampScrollValue = function (scrollX) {
            var edges = this.calculateScrollEdges();
            return Math.max(Math.min(edges.right, scrollX), edges.left);
        };
        return MDCTabScrollerRTLNegative;
    }(MDCTabScrollerRTL));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabScrollerRTLReverse = /** @class */ (function (_super) {
        __extends(MDCTabScrollerRTLReverse, _super);
        function MDCTabScrollerRTLReverse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCTabScrollerRTLReverse.prototype.getScrollPositionRTL = function (translateX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            // Scroll values on most browsers are ints instead of floats so we round
            return Math.round(currentScrollLeft - translateX);
        };
        MDCTabScrollerRTLReverse.prototype.scrollToRTL = function (scrollX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var clampedScrollLeft = this.clampScrollValue(scrollX);
            return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: currentScrollLeft - clampedScrollLeft,
            };
        };
        MDCTabScrollerRTLReverse.prototype.incrementScrollRTL = function (scrollX) {
            var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
            var clampedScrollLeft = this.clampScrollValue(currentScrollLeft + scrollX);
            return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: currentScrollLeft - clampedScrollLeft,
            };
        };
        MDCTabScrollerRTLReverse.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
            return scrollX + translateX;
        };
        MDCTabScrollerRTLReverse.prototype.calculateScrollEdges = function () {
            var contentWidth = this.adapter.getScrollContentOffsetWidth();
            var rootWidth = this.adapter.getScrollAreaOffsetWidth();
            return {
                left: contentWidth - rootWidth,
                right: 0,
            };
        };
        MDCTabScrollerRTLReverse.prototype.clampScrollValue = function (scrollX) {
            var edges = this.calculateScrollEdges();
            return Math.min(Math.max(edges.right, scrollX), edges.left);
        };
        return MDCTabScrollerRTLReverse;
    }(MDCTabScrollerRTL));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTabScrollerFoundation = /** @class */ (function (_super) {
        __extends(MDCTabScrollerFoundation, _super);
        function MDCTabScrollerFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation.defaultAdapter), adapter)) || this;
            /**
             * Controls whether we should handle the transitionend and interaction events during the animation.
             */
            _this.isAnimating = false;
            return _this;
        }
        Object.defineProperty(MDCTabScrollerFoundation, "cssClasses", {
            get: function () {
                return cssClasses$c;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabScrollerFoundation, "strings", {
            get: function () {
                return strings$e;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabScrollerFoundation, "defaultAdapter", {
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    eventTargetMatchesSelector: function () { return false; },
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    addScrollAreaClass: function () { return undefined; },
                    setScrollAreaStyleProperty: function () { return undefined; },
                    setScrollContentStyleProperty: function () { return undefined; },
                    getScrollContentStyleValue: function () { return ''; },
                    setScrollAreaScrollLeft: function () { return undefined; },
                    getScrollAreaScrollLeft: function () { return 0; },
                    getScrollContentOffsetWidth: function () { return 0; },
                    getScrollAreaOffsetWidth: function () { return 0; },
                    computeScrollAreaClientRect: function () {
                        return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
                    },
                    computeScrollContentClientRect: function () {
                        return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
                    },
                    computeHorizontalScrollbarHeight: function () { return 0; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCTabScrollerFoundation.prototype.init = function () {
            // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll
            // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.
            var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();
            this.adapter.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');
            this.adapter.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);
        };
        /**
         * Computes the current visual scroll position
         */
        MDCTabScrollerFoundation.prototype.getScrollPosition = function () {
            if (this.isRTL()) {
                return this.computeCurrentScrollPositionRTL();
            }
            var currentTranslateX = this.calculateCurrentTranslateX();
            var scrollLeft = this.adapter.getScrollAreaScrollLeft();
            return scrollLeft - currentTranslateX;
        };
        /**
         * Handles interaction events that occur during transition
         */
        MDCTabScrollerFoundation.prototype.handleInteraction = function () {
            // Early exit if we aren't animating
            if (!this.isAnimating) {
                return;
            }
            // Prevent other event listeners from handling this event
            this.stopScrollAnimation();
        };
        /**
         * Handles the transitionend event
         */
        MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {
            // Early exit if we aren't animating or the event was triggered by a different element.
            var evtTarget = evt.target;
            if (!this.isAnimating ||
                !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {
                return;
            }
            this.isAnimating = false;
            this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
        };
        /**
         * Increment the scroll value by the scrollXIncrement using animation.
         * @param scrollXIncrement The value by which to increment the scroll position
         */
        MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {
            // Early exit for non-operational increment values
            if (scrollXIncrement === 0) {
                return;
            }
            this.animate(this.getIncrementScrollOperation(scrollXIncrement));
        };
        /**
         * Increment the scroll value by the scrollXIncrement without animation.
         * @param scrollXIncrement The value by which to increment the scroll position
         */
        MDCTabScrollerFoundation.prototype.incrementScrollImmediate = function (scrollXIncrement) {
            // Early exit for non-operational increment values
            if (scrollXIncrement === 0) {
                return;
            }
            var operation = this.getIncrementScrollOperation(scrollXIncrement);
            if (operation.scrollDelta === 0) {
                return;
            }
            this.stopScrollAnimation();
            this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);
        };
        /**
         * Scrolls to the given scrollX value
         */
        MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {
            if (this.isRTL()) {
                this.scrollToImplRTL(scrollX);
                return;
            }
            this.scrollToImpl(scrollX);
        };
        /**
         * @return Browser-specific {@link MDCTabScrollerRTL} instance.
         */
        MDCTabScrollerFoundation.prototype.getRTLScroller = function () {
            if (!this.rtlScrollerInstance) {
                this.rtlScrollerInstance = this.rtlScrollerFactory();
            }
            return this.rtlScrollerInstance;
        };
        /**
         * @return translateX value from a CSS matrix transform function string.
         */
        MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX = function () {
            var transformValue = this.adapter.getScrollContentStyleValue('transform');
            // Early exit if no transform is present
            if (transformValue === 'none') {
                return 0;
            }
            // The transform value comes back as a matrix transformation in the form
            // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so
            // we're going to grab all the parenthesized values, strip out tx, and
            // parse it.
            var match = /\((.+?)\)/.exec(transformValue);
            if (!match) {
                return 0;
            }
            var matrixParams = match[1];
            // tslint:disable-next-line:ban-ts-ignore "Unused vars" should be a linter warning, not a compiler error.
            // @ts-ignore These unused variables should retain their semantic names for clarity.
            var _a = __read(matrixParams.split(','), 6); _a[0]; _a[1]; _a[2]; _a[3]; var tx = _a[4]; _a[5];
            return parseFloat(tx); // tslint:disable-line:ban
        };
        /**
         * Calculates a safe scroll value that is > 0 and < the max scroll value
         * @param scrollX The distance to scroll
         */
        MDCTabScrollerFoundation.prototype.clampScrollValue = function (scrollX) {
            var edges = this.calculateScrollEdges();
            return Math.min(Math.max(edges.left, scrollX), edges.right);
        };
        MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL = function () {
            var translateX = this.calculateCurrentTranslateX();
            return this.getRTLScroller().getScrollPositionRTL(translateX);
        };
        MDCTabScrollerFoundation.prototype.calculateScrollEdges = function () {
            var contentWidth = this.adapter.getScrollContentOffsetWidth();
            var rootWidth = this.adapter.getScrollAreaOffsetWidth();
            return {
                left: 0,
                right: contentWidth - rootWidth,
            };
        };
        /**
         * Internal scroll method
         * @param scrollX The new scroll position
         */
        MDCTabScrollerFoundation.prototype.scrollToImpl = function (scrollX) {
            var currentScrollX = this.getScrollPosition();
            var safeScrollX = this.clampScrollValue(scrollX);
            var scrollDelta = safeScrollX - currentScrollX;
            this.animate({
                finalScrollPosition: safeScrollX,
                scrollDelta: scrollDelta,
            });
        };
        /**
         * Internal RTL scroll method
         * @param scrollX The new scroll position
         */
        MDCTabScrollerFoundation.prototype.scrollToImplRTL = function (scrollX) {
            var animation = this.getRTLScroller().scrollToRTL(scrollX);
            this.animate(animation);
        };
        /**
         * Internal method to compute the increment scroll operation values.
         * @param scrollX The desired scroll position increment
         * @return MDCTabScrollerAnimation with the sanitized values for performing the scroll operation.
         */
        MDCTabScrollerFoundation.prototype.getIncrementScrollOperation = function (scrollX) {
            if (this.isRTL()) {
                return this.getRTLScroller().incrementScrollRTL(scrollX);
            }
            var currentScrollX = this.getScrollPosition();
            var targetScrollX = scrollX + currentScrollX;
            var safeScrollX = this.clampScrollValue(targetScrollX);
            var scrollDelta = safeScrollX - currentScrollX;
            return {
                finalScrollPosition: safeScrollX,
                scrollDelta: scrollDelta,
            };
        };
        /**
         * Animates the tab scrolling
         * @param animation The animation to apply
         */
        MDCTabScrollerFoundation.prototype.animate = function (animation) {
            var _this = this;
            // Early exit if translateX is 0, which means there's no animation to perform
            if (animation.scrollDelta === 0) {
                return;
            }
            this.stopScrollAnimation();
            // This animation uses the FLIP approach.
            // Read more here: https://aerotwist.com/blog/flip-your-animations/
            this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);
            this.adapter.setScrollContentStyleProperty('transform', "translateX(" + animation.scrollDelta + "px)");
            // Force repaint
            this.adapter.computeScrollAreaClientRect();
            requestAnimationFrame(function () {
                _this.adapter.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
                _this.adapter.setScrollContentStyleProperty('transform', 'none');
            });
            this.isAnimating = true;
        };
        /**
         * Stops scroll animation
         */
        MDCTabScrollerFoundation.prototype.stopScrollAnimation = function () {
            this.isAnimating = false;
            var currentScrollPosition = this.getAnimatingScrollPosition();
            this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
            this.adapter.setScrollContentStyleProperty('transform', 'translateX(0px)');
            this.adapter.setScrollAreaScrollLeft(currentScrollPosition);
        };
        /**
         * Gets the current scroll position during animation
         */
        MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition = function () {
            var currentTranslateX = this.calculateCurrentTranslateX();
            var scrollLeft = this.adapter.getScrollAreaScrollLeft();
            if (this.isRTL()) {
                return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
            }
            return scrollLeft - currentTranslateX;
        };
        /**
         * Determines the RTL Scroller to use
         */
        MDCTabScrollerFoundation.prototype.rtlScrollerFactory = function () {
            // Browsers have three different implementations of scrollLeft in RTL mode,
            // dependent on the browser. The behavior is based off the max LTR
            // scrollLeft value and 0.
            //
            // * Default scrolling in RTL *
            //    - Left-most value: 0
            //    - Right-most value: Max LTR scrollLeft value
            //
            // * Negative scrolling in RTL *
            //    - Left-most value: Negated max LTR scrollLeft value
            //    - Right-most value: 0
            //
            // * Reverse scrolling in RTL *
            //    - Left-most value: Max LTR scrollLeft value
            //    - Right-most value: 0
            //
            // We use those principles below to determine which RTL scrollLeft
            // behavior is implemented in the current browser.
            var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();
            this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);
            var newScrollLeft = this.adapter.getScrollAreaScrollLeft();
            // If the newScrollLeft value is negative,then we know that the browser has
            // implemented negative RTL scrolling, since all other implementations have
            // only positive values.
            if (newScrollLeft < 0) {
                // Undo the scrollLeft test check
                this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
                return new MDCTabScrollerRTLNegative(this.adapter);
            }
            var rootClientRect = this.adapter.computeScrollAreaClientRect();
            var contentClientRect = this.adapter.computeScrollContentClientRect();
            var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);
            // Undo the scrollLeft test check
            this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
            // By calculating the clientRect of the root element and the clientRect of
            // the content element, we can determine how much the scroll value changed
            // when we performed the scrollLeft subtraction above.
            if (rightEdgeDelta === newScrollLeft) {
                return new MDCTabScrollerRTLReverse(this.adapter);
            }
            return new MDCTabScrollerRTLDefault(this.adapter);
        };
        MDCTabScrollerFoundation.prototype.isRTL = function () {
            return this.adapter.getScrollContentStyleValue('direction') === 'rtl';
        };
        return MDCTabScrollerFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * Stores result from computeHorizontalScrollbarHeight to avoid redundant processing.
     */
    var horizontalScrollbarHeight_;
    /**
     * Computes the height of browser-rendered horizontal scrollbars using a self-created test element.
     * May return 0 (e.g. on OS X browsers under default configuration).
     */
    function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
        if (shouldCacheResult === void 0) { shouldCacheResult = true; }
        if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== 'undefined') {
            return horizontalScrollbarHeight_;
        }
        var el = documentObj.createElement('div');
        el.classList.add(cssClasses$c.SCROLL_TEST);
        documentObj.body.appendChild(el);
        var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
        documentObj.body.removeChild(el);
        if (shouldCacheResult) {
            horizontalScrollbarHeight_ = horizontalScrollbarHeight;
        }
        return horizontalScrollbarHeight;
    }

    var util$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        computeHorizontalScrollbarHeight: computeHorizontalScrollbarHeight
    });

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$d = {
        ARROW_LEFT_KEY: 'ArrowLeft',
        ARROW_RIGHT_KEY: 'ArrowRight',
        END_KEY: 'End',
        ENTER_KEY: 'Enter',
        HOME_KEY: 'Home',
        SPACE_KEY: 'Space',
        TAB_ACTIVATED_EVENT: 'MDCTabBar:activated',
        TAB_SCROLLER_SELECTOR: '.mdc-tab-scroller',
        TAB_SELECTOR: '.mdc-tab',
    };
    var numbers$6 = {
        ARROW_LEFT_KEYCODE: 37,
        ARROW_RIGHT_KEYCODE: 39,
        END_KEYCODE: 35,
        ENTER_KEYCODE: 13,
        EXTRA_SCROLL_AMOUNT: 20,
        HOME_KEYCODE: 36,
        SPACE_KEYCODE: 32,
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var ACCEPTABLE_KEYS = new Set();
    // IE11 has no support for new Set with iterable so we need to initialize this by hand
    ACCEPTABLE_KEYS.add(strings$d.ARROW_LEFT_KEY);
    ACCEPTABLE_KEYS.add(strings$d.ARROW_RIGHT_KEY);
    ACCEPTABLE_KEYS.add(strings$d.END_KEY);
    ACCEPTABLE_KEYS.add(strings$d.HOME_KEY);
    ACCEPTABLE_KEYS.add(strings$d.ENTER_KEY);
    ACCEPTABLE_KEYS.add(strings$d.SPACE_KEY);
    var KEYCODE_MAP = new Map();
    // IE11 has no support for new Map with iterable so we need to initialize this by hand
    KEYCODE_MAP.set(numbers$6.ARROW_LEFT_KEYCODE, strings$d.ARROW_LEFT_KEY);
    KEYCODE_MAP.set(numbers$6.ARROW_RIGHT_KEYCODE, strings$d.ARROW_RIGHT_KEY);
    KEYCODE_MAP.set(numbers$6.END_KEYCODE, strings$d.END_KEY);
    KEYCODE_MAP.set(numbers$6.HOME_KEYCODE, strings$d.HOME_KEY);
    KEYCODE_MAP.set(numbers$6.ENTER_KEYCODE, strings$d.ENTER_KEY);
    KEYCODE_MAP.set(numbers$6.SPACE_KEYCODE, strings$d.SPACE_KEY);
    var MDCTabBarFoundation = /** @class */ (function (_super) {
        __extends(MDCTabBarFoundation, _super);
        function MDCTabBarFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCTabBarFoundation.defaultAdapter), adapter)) || this;
            _this.useAutomaticActivation = false;
            return _this;
        }
        Object.defineProperty(MDCTabBarFoundation, "strings", {
            get: function () {
                return strings$d;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabBarFoundation, "numbers", {
            get: function () {
                return numbers$6;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCTabBarFoundation, "defaultAdapter", {
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    scrollTo: function () { return undefined; },
                    incrementScroll: function () { return undefined; },
                    getScrollPosition: function () { return 0; },
                    getScrollContentWidth: function () { return 0; },
                    getOffsetWidth: function () { return 0; },
                    isRTL: function () { return false; },
                    setActiveTab: function () { return undefined; },
                    activateTabAtIndex: function () { return undefined; },
                    deactivateTabAtIndex: function () { return undefined; },
                    focusTabAtIndex: function () { return undefined; },
                    getTabIndicatorClientRectAtIndex: function () {
                        return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
                    },
                    getTabDimensionsAtIndex: function () {
                        return ({ rootLeft: 0, rootRight: 0, contentLeft: 0, contentRight: 0 });
                    },
                    getPreviousActiveTabIndex: function () { return -1; },
                    getFocusedTabIndex: function () { return -1; },
                    getIndexOfTabById: function () { return -1; },
                    getTabListLength: function () { return 0; },
                    notifyTabActivated: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Switches between automatic and manual activation modes.
         * See https://www.w3.org/TR/wai-aria-practices/#tabpanel for examples.
         */
        MDCTabBarFoundation.prototype.setUseAutomaticActivation = function (useAutomaticActivation) {
            this.useAutomaticActivation = useAutomaticActivation;
        };
        MDCTabBarFoundation.prototype.activateTab = function (index) {
            var previousActiveIndex = this.adapter.getPreviousActiveTabIndex();
            if (!this.indexIsInRange(index) || index === previousActiveIndex) {
                return;
            }
            var previousClientRect;
            if (previousActiveIndex !== -1) {
                this.adapter.deactivateTabAtIndex(previousActiveIndex);
                previousClientRect =
                    this.adapter.getTabIndicatorClientRectAtIndex(previousActiveIndex);
            }
            this.adapter.activateTabAtIndex(index, previousClientRect);
            this.scrollIntoView(index);
            this.adapter.notifyTabActivated(index);
        };
        MDCTabBarFoundation.prototype.handleKeyDown = function (evt) {
            // Get the key from the event
            var key = this.getKeyFromEvent(evt);
            // Early exit if the event key isn't one of the keyboard navigation keys
            if (key === undefined) {
                return;
            }
            // Prevent default behavior for movement keys, but not for activation keys, since :active is used to apply ripple
            if (!this.isActivationKey(key)) {
                evt.preventDefault();
            }
            if (this.useAutomaticActivation) {
                if (this.isActivationKey(key)) {
                    return;
                }
                var index = this.determineTargetFromKey(this.adapter.getPreviousActiveTabIndex(), key);
                this.adapter.setActiveTab(index);
                this.scrollIntoView(index);
            }
            else {
                var focusedTabIndex = this.adapter.getFocusedTabIndex();
                if (this.isActivationKey(key)) {
                    this.adapter.setActiveTab(focusedTabIndex);
                }
                else {
                    var index = this.determineTargetFromKey(focusedTabIndex, key);
                    this.adapter.focusTabAtIndex(index);
                    this.scrollIntoView(index);
                }
            }
        };
        /**
         * Handles the MDCTab:interacted event
         */
        MDCTabBarFoundation.prototype.handleTabInteraction = function (evt) {
            this.adapter.setActiveTab(this.adapter.getIndexOfTabById(evt.detail.tabId));
        };
        /**
         * Scrolls the tab at the given index into view
         * @param index The tab index to make visible
         */
        MDCTabBarFoundation.prototype.scrollIntoView = function (index) {
            // Early exit if the index is out of range
            if (!this.indexIsInRange(index)) {
                return;
            }
            // Always scroll to 0 if scrolling to the 0th index
            if (index === 0) {
                this.adapter.scrollTo(0);
                return;
            }
            // Always scroll to the max value if scrolling to the Nth index
            // MDCTabScroller.scrollTo() will never scroll past the max possible value
            if (index === this.adapter.getTabListLength() - 1) {
                this.adapter.scrollTo(this.adapter.getScrollContentWidth());
                return;
            }
            if (this.isRTL()) {
                this.scrollIntoViewImplRTL(index);
                return;
            }
            this.scrollIntoViewImpl(index);
        };
        /**
         * Private method for determining the index of the destination tab based on what key was pressed
         * @param origin The original index from which to determine the destination
         * @param key The name of the key
         */
        MDCTabBarFoundation.prototype.determineTargetFromKey = function (origin, key) {
            var isRTL = this.isRTL();
            var maxIndex = this.adapter.getTabListLength() - 1;
            var shouldGoToEnd = key === strings$d.END_KEY;
            var shouldDecrement = key === strings$d.ARROW_LEFT_KEY && !isRTL || key === strings$d.ARROW_RIGHT_KEY && isRTL;
            var shouldIncrement = key === strings$d.ARROW_RIGHT_KEY && !isRTL || key === strings$d.ARROW_LEFT_KEY && isRTL;
            var index = origin;
            if (shouldGoToEnd) {
                index = maxIndex;
            }
            else if (shouldDecrement) {
                index -= 1;
            }
            else if (shouldIncrement) {
                index += 1;
            }
            else {
                index = 0;
            }
            if (index < 0) {
                index = maxIndex;
            }
            else if (index > maxIndex) {
                index = 0;
            }
            return index;
        };
        /**
         * Calculates the scroll increment that will make the tab at the given index visible
         * @param index The index of the tab
         * @param nextIndex The index of the next tab
         * @param scrollPosition The current scroll position
         * @param barWidth The width of the Tab Bar
         */
        MDCTabBarFoundation.prototype.calculateScrollIncrement = function (index, nextIndex, scrollPosition, barWidth) {
            var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
            var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
            var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
            var leftIncrement = relativeContentRight - numbers$6.EXTRA_SCROLL_AMOUNT;
            var rightIncrement = relativeContentLeft + numbers$6.EXTRA_SCROLL_AMOUNT;
            if (nextIndex < index) {
                return Math.min(leftIncrement, 0);
            }
            return Math.max(rightIncrement, 0);
        };
        /**
         * Calculates the scroll increment that will make the tab at the given index visible in RTL
         * @param index The index of the tab
         * @param nextIndex The index of the next tab
         * @param scrollPosition The current scroll position
         * @param barWidth The width of the Tab Bar
         * @param scrollContentWidth The width of the scroll content
         */
        MDCTabBarFoundation.prototype.calculateScrollIncrementRTL = function (index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
            var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
            var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
            var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
            var leftIncrement = relativeContentRight + numbers$6.EXTRA_SCROLL_AMOUNT;
            var rightIncrement = relativeContentLeft - numbers$6.EXTRA_SCROLL_AMOUNT;
            if (nextIndex > index) {
                return Math.max(leftIncrement, 0);
            }
            return Math.min(rightIncrement, 0);
        };
        /**
         * Determines the index of the adjacent tab closest to either edge of the Tab Bar
         * @param index The index of the tab
         * @param tabDimensions The dimensions of the tab
         * @param scrollPosition The current scroll position
         * @param barWidth The width of the tab bar
         */
        MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdge = function (index, tabDimensions, scrollPosition, barWidth) {
            /**
             * Tabs are laid out in the Tab Scroller like this:
             *
             *    Scroll Position
             *    +---+
             *    |   |   Bar Width
             *    |   +-----------------------------------+
             *    |   |                                   |
             *    |   V                                   V
             *    |   +-----------------------------------+
             *    V   |             Tab Scroller          |
             *    +------------+--------------+-------------------+
             *    |    Tab     |      Tab     |        Tab        |
             *    +------------+--------------+-------------------+
             *        |                                   |
             *        +-----------------------------------+
             *
             * To determine the next adjacent index, we look at the Tab root left and
             * Tab root right, both relative to the scroll position. If the Tab root
             * left is less than 0, then we know it's out of view to the left. If the
             * Tab root right minus the bar width is greater than 0, we know the Tab is
             * out of view to the right. From there, we either increment or decrement
             * the index.
             */
            var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
            var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
            var relativeRootDelta = relativeRootLeft + relativeRootRight;
            var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
            var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;
            if (leftEdgeIsCloser) {
                return index - 1;
            }
            if (rightEdgeIsCloser) {
                return index + 1;
            }
            return -1;
        };
        /**
         * Determines the index of the adjacent tab closest to either edge of the Tab Bar in RTL
         * @param index The index of the tab
         * @param tabDimensions The dimensions of the tab
         * @param scrollPosition The current scroll position
         * @param barWidth The width of the tab bar
         * @param scrollContentWidth The width of the scroller content
         */
        MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdgeRTL = function (index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
            var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
            var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
            var rootDelta = rootLeft + rootRight;
            var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
            var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;
            if (leftEdgeIsCloser) {
                return index + 1;
            }
            if (rightEdgeIsCloser) {
                return index - 1;
            }
            return -1;
        };
        /**
         * Returns the key associated with a keydown event
         * @param evt The keydown event
         */
        MDCTabBarFoundation.prototype.getKeyFromEvent = function (evt) {
            if (ACCEPTABLE_KEYS.has(evt.key)) {
                return evt.key;
            }
            return KEYCODE_MAP.get(evt.keyCode);
        };
        MDCTabBarFoundation.prototype.isActivationKey = function (key) {
            return key === strings$d.SPACE_KEY || key === strings$d.ENTER_KEY;
        };
        /**
         * Returns whether a given index is inclusively between the ends
         * @param index The index to test
         */
        MDCTabBarFoundation.prototype.indexIsInRange = function (index) {
            return index >= 0 && index < this.adapter.getTabListLength();
        };
        /**
         * Returns the view's RTL property
         */
        MDCTabBarFoundation.prototype.isRTL = function () {
            return this.adapter.isRTL();
        };
        /**
         * Scrolls the tab at the given index into view for left-to-right user agents.
         * @param index The index of the tab to scroll into view
         */
        MDCTabBarFoundation.prototype.scrollIntoViewImpl = function (index) {
            var scrollPosition = this.adapter.getScrollPosition();
            var barWidth = this.adapter.getOffsetWidth();
            var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
            var nextIndex = this.findAdjacentTabIndexClosestToEdge(index, tabDimensions, scrollPosition, barWidth);
            if (!this.indexIsInRange(nextIndex)) {
                return;
            }
            var scrollIncrement = this.calculateScrollIncrement(index, nextIndex, scrollPosition, barWidth);
            this.adapter.incrementScroll(scrollIncrement);
        };
        /**
         * Scrolls the tab at the given index into view in RTL
         * @param index The tab index to make visible
         */
        MDCTabBarFoundation.prototype.scrollIntoViewImplRTL = function (index) {
            var scrollPosition = this.adapter.getScrollPosition();
            var barWidth = this.adapter.getOffsetWidth();
            var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
            var scrollWidth = this.adapter.getScrollContentWidth();
            var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL(index, tabDimensions, scrollPosition, barWidth, scrollWidth);
            if (!this.indexIsInRange(nextIndex)) {
                return;
            }
            var scrollIncrement = this.calculateScrollIncrementRTL(index, nextIndex, scrollPosition, barWidth, scrollWidth);
            this.adapter.incrementScroll(scrollIncrement);
        };
        return MDCTabBarFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/tab-scroller/dist/TabScroller.svelte generated by Svelte v3.44.3 */

    const file$12 = "node_modules/@smui/tab-scroller/dist/TabScroller.svelte";

    function create_fragment$1p(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let div0_class_value;
    	let div0_style_value;
    	let useActions_action;
    	let div1_class_value;
    	let div1_style_value;
    	let useActions_action_1;
    	let div2_class_value;
    	let useActions_action_2;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

    	let div0_levels = [
    		{
    			class: div0_class_value = classMap({
    				[/*scrollContent$class*/ ctx[6]]: true,
    				'mdc-tab-scroller__scroll-content': true
    			})
    		},
    		{
    			style: div0_style_value = Object.entries(/*scrollContentStyles*/ ctx[14]).map(func$a).join(' ')
    		},
    		prefixFilter(/*$$restProps*/ ctx[16], 'scrollContent$')
    	];

    	let div0_data = {};

    	for (let i = 0; i < div0_levels.length; i += 1) {
    		div0_data = assign(div0_data, div0_levels[i]);
    	}

    	let div1_levels = [
    		{
    			class: div1_class_value = classMap({
    				[/*scrollArea$class*/ ctx[4]]: true,
    				'mdc-tab-scroller__scroll-area': true,
    				.../*scrollAreaClasses*/ ctx[12]
    			})
    		},
    		{
    			style: div1_style_value = Object.entries(/*scrollAreaStyles*/ ctx[13]).map(func_1).join(' ')
    		},
    		prefixFilter(/*$$restProps*/ ctx[16], 'scrollArea$')
    	];

    	let div1_data = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div1_data = assign(div1_data, div1_levels[i]);
    	}

    	let div2_levels = [
    		{
    			class: div2_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-tab-scroller': true,
    				'mdc-tab-scroller--align-start': /*align*/ ctx[2] === 'start',
    				'mdc-tab-scroller--align-end': /*align*/ ctx[2] === 'end',
    				'mdc-tab-scroller--align-center': /*align*/ ctx[2] === 'center',
    				.../*internalClasses*/ ctx[11]
    			})
    		},
    		exclude(/*$$restProps*/ ctx[16], ['scrollArea$', 'scrollContent$'])
    	];

    	let div2_data = {};

    	for (let i = 0; i < div2_levels.length; i += 1) {
    		div2_data = assign(div2_data, div2_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div0, div0_data);
    			add_location(div0, file$12, 32, 4, 1108);
    			set_attributes(div1, div1_data);
    			add_location(div1, file$12, 14, 2, 406);
    			set_attributes(div2, div2_data);
    			add_location(div2, file$12, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[24](div0);
    			/*div1_binding*/ ctx[26](div1);
    			/*div2_binding*/ ctx[32](div2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div0, /*scrollContent$use*/ ctx[5])),
    					listen_dev(div0, "transitionend", /*transitionend_handler*/ ctx[25], false, false, false),
    					action_destroyer(useActions_action_1 = useActions.call(null, div1, /*scrollArea$use*/ ctx[3])),
    					listen_dev(div1, "wheel", /*wheel_handler*/ ctx[27], { passive: true }, false, false),
    					listen_dev(div1, "touchstart", /*touchstart_handler*/ ctx[28], { passive: true }, false, false),
    					listen_dev(div1, "pointerdown", /*pointerdown_handler*/ ctx[29], false, false, false),
    					listen_dev(div1, "mousedown", /*mousedown_handler*/ ctx[30], false, false, false),
    					listen_dev(div1, "keydown", /*keydown_handler*/ ctx[31], false, false, false),
    					action_destroyer(useActions_action_2 = useActions.call(null, div2, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[15].call(null, div2))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[22],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div0, div0_data = get_spread_update(div0_levels, [
    				(!current || dirty[0] & /*scrollContent$class*/ 64 && div0_class_value !== (div0_class_value = classMap({
    					[/*scrollContent$class*/ ctx[6]]: true,
    					'mdc-tab-scroller__scroll-content': true
    				}))) && { class: div0_class_value },
    				(!current || dirty[0] & /*scrollContentStyles*/ 16384 && div0_style_value !== (div0_style_value = Object.entries(/*scrollContentStyles*/ ctx[14]).map(func$a).join(' '))) && { style: div0_style_value },
    				dirty[0] & /*$$restProps*/ 65536 && prefixFilter(/*$$restProps*/ ctx[16], 'scrollContent$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*scrollContent$use*/ 32) useActions_action.update.call(null, /*scrollContent$use*/ ctx[5]);

    			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
    				(!current || dirty[0] & /*scrollArea$class, scrollAreaClasses*/ 4112 && div1_class_value !== (div1_class_value = classMap({
    					[/*scrollArea$class*/ ctx[4]]: true,
    					'mdc-tab-scroller__scroll-area': true,
    					.../*scrollAreaClasses*/ ctx[12]
    				}))) && { class: div1_class_value },
    				(!current || dirty[0] & /*scrollAreaStyles*/ 8192 && div1_style_value !== (div1_style_value = Object.entries(/*scrollAreaStyles*/ ctx[13]).map(func_1).join(' '))) && { style: div1_style_value },
    				dirty[0] & /*$$restProps*/ 65536 && prefixFilter(/*$$restProps*/ ctx[16], 'scrollArea$')
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*scrollArea$use*/ 8) useActions_action_1.update.call(null, /*scrollArea$use*/ ctx[3]);

    			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
    				(!current || dirty[0] & /*className, align, internalClasses*/ 2054 && div2_class_value !== (div2_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-tab-scroller': true,
    					'mdc-tab-scroller--align-start': /*align*/ ctx[2] === 'start',
    					'mdc-tab-scroller--align-end': /*align*/ ctx[2] === 'end',
    					'mdc-tab-scroller--align-center': /*align*/ ctx[2] === 'center',
    					.../*internalClasses*/ ctx[11]
    				}))) && { class: div2_class_value },
    				dirty[0] & /*$$restProps*/ 65536 && exclude(/*$$restProps*/ ctx[16], ['scrollArea$', 'scrollContent$'])
    			]));

    			if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*use*/ 1) useActions_action_2.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (default_slot) default_slot.d(detaching);
    			/*div0_binding*/ ctx[24](null);
    			/*div1_binding*/ ctx[26](null);
    			/*div2_binding*/ ctx[32](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$a = ([name, value]) => `${name}: ${value};`;
    const func_1 = ([name, value]) => `${name}: ${value};`;

    function instance_1$f($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","align","scrollArea$use","scrollArea$class","scrollContent$use","scrollContent$class","getScrollPosition","getScrollContentWidth","incrementScroll","scrollTo","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabScroller', slots, ['default']);
    	const { matches } = ponyfill;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { align = undefined } = $$props;
    	let { scrollArea$use = [] } = $$props;
    	let { scrollArea$class = '' } = $$props;
    	let { scrollContent$use = [] } = $$props;
    	let { scrollContent$class = '' } = $$props;
    	let element;
    	let instance;
    	let scrollArea;
    	let scrollContent;
    	let internalClasses = {};
    	let scrollAreaClasses = {};
    	let scrollAreaStyles = {};
    	let scrollContentStyles = {};

    	onMount(() => {
    		$$invalidate(8, instance = new MDCTabScrollerFoundation({
    				eventTargetMatchesSelector: (evtTarget, selector) => matches(evtTarget, selector),
    				addClass,
    				removeClass,
    				addScrollAreaClass,
    				setScrollAreaStyleProperty: addScrollAreaStyle,
    				setScrollContentStyleProperty: addScrollContentStyle,
    				getScrollContentStyleValue: getScrollContentStyle,
    				setScrollAreaScrollLeft: scrollX => $$invalidate(9, scrollArea.scrollLeft = scrollX, scrollArea),
    				getScrollAreaScrollLeft: () => scrollArea.scrollLeft,
    				getScrollContentOffsetWidth: () => scrollContent.offsetWidth,
    				getScrollAreaOffsetWidth: () => scrollArea.offsetWidth,
    				computeScrollAreaClientRect: () => scrollArea.getBoundingClientRect(),
    				computeScrollContentClientRect: () => scrollContent.getBoundingClientRect(),
    				computeHorizontalScrollbarHeight: () => computeHorizontalScrollbarHeight(document)
    			}));

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(11, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(11, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addScrollAreaClass(className) {
    		if (!scrollAreaClasses[className]) {
    			$$invalidate(12, scrollAreaClasses[className] = true, scrollAreaClasses);
    		}
    	}

    	function addScrollAreaStyle(name, value) {
    		if (scrollAreaStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete scrollAreaStyles[name];
    				$$invalidate(13, scrollAreaStyles);
    			} else {
    				$$invalidate(13, scrollAreaStyles[name] = value, scrollAreaStyles);
    			}
    		}
    	}

    	function addScrollContentStyle(name, value) {
    		if (scrollContentStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete scrollContentStyles[name];
    				$$invalidate(14, scrollContentStyles);
    			} else {
    				$$invalidate(14, scrollContentStyles[name] = value, scrollContentStyles);
    			}
    		}
    	}

    	function getScrollContentStyle(name) {
    		return name in scrollContentStyles
    		? scrollContentStyles[name]
    		: getComputedStyle(scrollContent).getPropertyValue(name);
    	}

    	function getScrollPosition() {
    		return instance.getScrollPosition();
    	}

    	function getScrollContentWidth() {
    		return scrollContent.offsetWidth;
    	}

    	function incrementScroll(scrollXIncrement) {
    		instance.incrementScroll(scrollXIncrement);
    	}

    	function scrollTo(scrollX) {
    		instance.scrollTo(scrollX);
    	}

    	function getElement() {
    		return element;
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			scrollContent = $$value;
    			$$invalidate(10, scrollContent);
    		});
    	}

    	const transitionend_handler = event => instance && instance.handleTransitionEnd(event);

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			scrollArea = $$value;
    			$$invalidate(9, scrollArea);
    		});
    	}

    	const wheel_handler = () => instance && instance.handleInteraction();
    	const touchstart_handler = () => instance && instance.handleInteraction();
    	const pointerdown_handler = () => instance && instance.handleInteraction();
    	const mousedown_handler = () => instance && instance.handleInteraction();
    	const keydown_handler = () => instance && instance.handleInteraction();

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('align' in $$new_props) $$invalidate(2, align = $$new_props.align);
    		if ('scrollArea$use' in $$new_props) $$invalidate(3, scrollArea$use = $$new_props.scrollArea$use);
    		if ('scrollArea$class' in $$new_props) $$invalidate(4, scrollArea$class = $$new_props.scrollArea$class);
    		if ('scrollContent$use' in $$new_props) $$invalidate(5, scrollContent$use = $$new_props.scrollContent$use);
    		if ('scrollContent$class' in $$new_props) $$invalidate(6, scrollContent$class = $$new_props.scrollContent$class);
    		if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCTabScrollerFoundation,
    		util: util$2,
    		ponyfill,
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		matches,
    		forwardEvents,
    		use,
    		className,
    		align,
    		scrollArea$use,
    		scrollArea$class,
    		scrollContent$use,
    		scrollContent$class,
    		element,
    		instance,
    		scrollArea,
    		scrollContent,
    		internalClasses,
    		scrollAreaClasses,
    		scrollAreaStyles,
    		scrollContentStyles,
    		addClass,
    		removeClass,
    		addScrollAreaClass,
    		addScrollAreaStyle,
    		addScrollContentStyle,
    		getScrollContentStyle,
    		getScrollPosition,
    		getScrollContentWidth,
    		incrementScroll,
    		scrollTo,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('align' in $$props) $$invalidate(2, align = $$new_props.align);
    		if ('scrollArea$use' in $$props) $$invalidate(3, scrollArea$use = $$new_props.scrollArea$use);
    		if ('scrollArea$class' in $$props) $$invalidate(4, scrollArea$class = $$new_props.scrollArea$class);
    		if ('scrollContent$use' in $$props) $$invalidate(5, scrollContent$use = $$new_props.scrollContent$use);
    		if ('scrollContent$class' in $$props) $$invalidate(6, scrollContent$class = $$new_props.scrollContent$class);
    		if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(8, instance = $$new_props.instance);
    		if ('scrollArea' in $$props) $$invalidate(9, scrollArea = $$new_props.scrollArea);
    		if ('scrollContent' in $$props) $$invalidate(10, scrollContent = $$new_props.scrollContent);
    		if ('internalClasses' in $$props) $$invalidate(11, internalClasses = $$new_props.internalClasses);
    		if ('scrollAreaClasses' in $$props) $$invalidate(12, scrollAreaClasses = $$new_props.scrollAreaClasses);
    		if ('scrollAreaStyles' in $$props) $$invalidate(13, scrollAreaStyles = $$new_props.scrollAreaStyles);
    		if ('scrollContentStyles' in $$props) $$invalidate(14, scrollContentStyles = $$new_props.scrollContentStyles);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		align,
    		scrollArea$use,
    		scrollArea$class,
    		scrollContent$use,
    		scrollContent$class,
    		element,
    		instance,
    		scrollArea,
    		scrollContent,
    		internalClasses,
    		scrollAreaClasses,
    		scrollAreaStyles,
    		scrollContentStyles,
    		forwardEvents,
    		$$restProps,
    		getScrollPosition,
    		getScrollContentWidth,
    		incrementScroll,
    		scrollTo,
    		getElement,
    		$$scope,
    		slots,
    		div0_binding,
    		transitionend_handler,
    		div1_binding,
    		wheel_handler,
    		touchstart_handler,
    		pointerdown_handler,
    		mousedown_handler,
    		keydown_handler,
    		div2_binding
    	];
    }

    class TabScroller extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$f,
    			create_fragment$1p,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				align: 2,
    				scrollArea$use: 3,
    				scrollArea$class: 4,
    				scrollContent$use: 5,
    				scrollContent$class: 6,
    				getScrollPosition: 17,
    				getScrollContentWidth: 18,
    				incrementScroll: 19,
    				scrollTo: 20,
    				getElement: 21
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabScroller",
    			options,
    			id: create_fragment$1p.name
    		});
    	}

    	get use() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get align() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set align(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollArea$use() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollArea$use(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollArea$class() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollArea$class(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollContent$use() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollContent$use(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollContent$class() {
    		throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollContent$class(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getScrollPosition() {
    		return this.$$.ctx[17];
    	}

    	set getScrollPosition(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getScrollContentWidth() {
    		return this.$$.ctx[18];
    	}

    	set getScrollContentWidth(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get incrementScroll() {
    		return this.$$.ctx[19];
    	}

    	set incrementScroll(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollTo() {
    		return this.$$.ctx[20];
    	}

    	set scrollTo(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[21];
    	}

    	set getElement(value) {
    		throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/tab-bar/dist/TabBar.svelte generated by Svelte v3.44.3 */
    const file$11 = "node_modules/@smui/tab-bar/dist/TabBar.svelte";

    function get_each_context$i(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	return child_ctx;
    }

    const get_default_slot_changes$2 = dirty => ({ tab: dirty[0] & /*tabs*/ 4 });
    const get_default_slot_context$2 = ctx => ({ tab: /*tab*/ ctx[30] });

    // (21:4) {#each tabs as tab (key(tab))}
    function create_each_block$i(key_2, ctx) {
    	let first;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], get_default_slot_context$2);

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			first = empty();
    			if (default_slot) default_slot.c();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope, tabs*/ 33554436)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[25],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, get_default_slot_changes$2),
    						get_default_slot_context$2
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$i.name,
    		type: "each",
    		source: "(21:4) {#each tabs as tab (key(tab))}",
    		ctx
    	});

    	return block;
    }

    // (17:2) <TabScroller     bind:this={tabScroller}     {...prefixFilter($$restProps, 'tabScroller$')}   >
    function create_default_slot$P(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*tabs*/ ctx[2];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*key*/ ctx[3](/*tab*/ ctx[30]);
    	validate_each_keys(ctx, each_value, get_each_context$i, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$i(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$i(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$$scope, tabs, key*/ 33554444) {
    				each_value = /*tabs*/ ctx[2];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$i, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$i, each_1_anchor, get_each_context$i);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$P.name,
    		type: "slot",
    		source: "(17:2) <TabScroller     bind:this={tabScroller}     {...prefixFilter($$restProps, 'tabScroller$')}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1o(ctx) {
    	let div;
    	let tabscroller;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const tabscroller_spread_levels = [prefixFilter(/*$$restProps*/ ctx[10], 'tabScroller$')];

    	let tabscroller_props = {
    		$$slots: { default: [create_default_slot$P] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < tabscroller_spread_levels.length; i += 1) {
    		tabscroller_props = assign(tabscroller_props, tabscroller_spread_levels[i]);
    	}

    	tabscroller = new TabScroller({ props: tabscroller_props, $$inline: true });
    	/*tabscroller_binding*/ ctx[21](tabscroller);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-tab-bar': true
    			})
    		},
    		{ role: "tablist" },
    		exclude(/*$$restProps*/ ctx[10], ['tabScroller$'])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tabscroller.$$.fragment);
    			set_attributes(div, div_data);
    			add_location(div, file$11, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tabscroller, div, null);
    			/*div_binding*/ ctx[22](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, div)),
    					listen_dev(div, "SMUITab:mount", /*handleTabMount*/ ctx[8], false, false, false),
    					listen_dev(div, "SMUITab:unmount", /*handleTabUnmount*/ ctx[9], false, false, false),
    					listen_dev(div, "SMUITab:interacted", /*SMUITab_interacted_handler*/ ctx[23], false, false, false),
    					listen_dev(div, "keydown", /*keydown_handler*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const tabscroller_changes = (dirty[0] & /*$$restProps*/ 1024)
    			? get_spread_update(tabscroller_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[10], 'tabScroller$'))])
    			: {};

    			if (dirty[0] & /*$$scope, tabs*/ 33554436) {
    				tabscroller_changes.$$scope = { dirty, ctx };
    			}

    			tabscroller.$set(tabscroller_changes);

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty[0] & /*className*/ 2 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-tab-bar': true
    				}))) && { class: div_class_value },
    				{ role: "tablist" },
    				dirty[0] & /*$$restProps*/ 1024 && exclude(/*$$restProps*/ ctx[10], ['tabScroller$'])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabscroller.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabscroller.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*tabscroller_binding*/ ctx[21](null);
    			destroy_component(tabscroller);
    			/*div_binding*/ ctx[22](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance_1$e($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","tabs","key","focusOnActivate","focusOnProgrammatic","useAutomaticActivation","active","scrollIntoView","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabBar', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { tabs = [] } = $$props;
    	let { key = tab => tab } = $$props;
    	let { focusOnActivate = true } = $$props;
    	let { focusOnProgrammatic = false } = $$props;
    	let { useAutomaticActivation = true } = $$props;
    	let { active = undefined } = $$props;
    	let element;
    	let instance;
    	let tabScroller;
    	let activeIndex = tabs.indexOf(active);
    	let tabAccessorMap = {};
    	let tabAccessorWeakMap = new WeakMap();
    	let skipFocus = false;
    	setContext('SMUI:tab:focusOnActivate', focusOnActivate);
    	setContext('SMUI:tab:initialActive', active);

    	onMount(() => {
    		$$invalidate(4, instance = new MDCTabBarFoundation({
    				scrollTo: scrollX => tabScroller.scrollTo(scrollX),
    				incrementScroll: scrollXIncrement => tabScroller.incrementScroll(scrollXIncrement),
    				getScrollPosition: () => tabScroller.getScrollPosition(),
    				getScrollContentWidth: () => tabScroller.getScrollContentWidth(),
    				getOffsetWidth: () => getElement().offsetWidth,
    				isRTL: () => getComputedStyle(getElement()).getPropertyValue('direction') === 'rtl',
    				setActiveTab: index => {
    					$$invalidate(11, active = tabs[index]);
    					$$invalidate(17, activeIndex = index);
    					instance.activateTab(index);
    				},
    				activateTabAtIndex: (index, clientRect) => {
    					var _a;

    					return (_a = getAccessor(tabs[index])) === null || _a === void 0
    					? void 0
    					: _a.activate(clientRect, skipFocus);
    				},
    				deactivateTabAtIndex: index => {
    					var _a;

    					return (_a = getAccessor(tabs[index])) === null || _a === void 0
    					? void 0
    					: _a.deactivate();
    				},
    				focusTabAtIndex: index => {
    					var _a;

    					return (_a = getAccessor(tabs[index])) === null || _a === void 0
    					? void 0
    					: _a.focus();
    				},
    				getTabIndicatorClientRectAtIndex: index => {
    					var _a, _b;

    					return (_b = (_a = getAccessor(tabs[index])) === null || _a === void 0
    					? void 0
    					: _a.computeIndicatorClientRect()) !== null && _b !== void 0
    					? _b
    					: new DOMRect();
    				},
    				getTabDimensionsAtIndex: index => {
    					var _a, _b;

    					return (_b = (_a = getAccessor(tabs[index])) === null || _a === void 0
    					? void 0
    					: _a.computeDimensions()) !== null && _b !== void 0
    					? _b
    					: {
    							rootLeft: 0,
    							rootRight: 0,
    							contentLeft: 0,
    							contentRight: 0
    						};
    				},
    				getPreviousActiveTabIndex: () => {
    					var _a;

    					for (let i = 0; i < tabs.length; i++) {
    						if ((_a = getAccessor(tabs[i])) === null || _a === void 0
    						? void 0
    						: _a.active) {
    							return i;
    						}
    					}

    					return -1;
    				},
    				getFocusedTabIndex: () => {
    					const tabElements = tabs.map(tab => {
    						var _a;

    						return (_a = getAccessor(tab)) === null || _a === void 0
    						? void 0
    						: _a.element;
    					});

    					const activeElement = document.activeElement;
    					return tabElements.indexOf(activeElement);
    				},
    				getIndexOfTabById: id => tabs.indexOf(id),
    				getTabListLength: () => tabs.length,
    				notifyTabActivated: index => dispatch(getElement(), 'SMUITabBar:activated', { index }, undefined, true)
    			}));

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function handleTabMount(event) {
    		const accessor = event.detail;
    		addAccessor(accessor.tabId, accessor);
    	}

    	function handleTabUnmount(event) {
    		const accessor = event.detail;
    		removeAccessor(accessor.tabId);
    	}

    	function getAccessor(tabId) {
    		return tabId instanceof Object
    		? tabAccessorWeakMap.get(tabId)
    		: tabAccessorMap[tabId];
    	}

    	function addAccessor(tabId, accessor) {
    		if (tabId instanceof Object) {
    			tabAccessorWeakMap.set(tabId, accessor);
    			$$invalidate(19, tabAccessorWeakMap);
    		} else {
    			$$invalidate(18, tabAccessorMap[tabId] = accessor, tabAccessorMap);
    			$$invalidate(18, tabAccessorMap);
    		}
    	}

    	function removeAccessor(tabId) {
    		if (tabId instanceof Object) {
    			tabAccessorWeakMap.delete(tabId);
    			$$invalidate(19, tabAccessorWeakMap);
    		} else {
    			delete tabAccessorMap[tabId];
    			$$invalidate(18, tabAccessorMap);
    		}
    	}

    	function scrollIntoView(index) {
    		instance.scrollIntoView(index);
    	}

    	function getElement() {
    		return element;
    	}

    	function tabscroller_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			tabScroller = $$value;
    			$$invalidate(6, tabScroller);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	const SMUITab_interacted_handler = event => instance && instance.handleTabInteraction(event);
    	const keydown_handler = event => instance && instance.handleKeyDown(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('tabs' in $$new_props) $$invalidate(2, tabs = $$new_props.tabs);
    		if ('key' in $$new_props) $$invalidate(3, key = $$new_props.key);
    		if ('focusOnActivate' in $$new_props) $$invalidate(12, focusOnActivate = $$new_props.focusOnActivate);
    		if ('focusOnProgrammatic' in $$new_props) $$invalidate(13, focusOnProgrammatic = $$new_props.focusOnProgrammatic);
    		if ('useAutomaticActivation' in $$new_props) $$invalidate(14, useAutomaticActivation = $$new_props.useAutomaticActivation);
    		if ('active' in $$new_props) $$invalidate(11, active = $$new_props.active);
    		if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCTabBarFoundation,
    		onMount,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		TabScroller,
    		forwardEvents,
    		use,
    		className,
    		tabs,
    		key,
    		focusOnActivate,
    		focusOnProgrammatic,
    		useAutomaticActivation,
    		active,
    		element,
    		instance,
    		tabScroller,
    		activeIndex,
    		tabAccessorMap,
    		tabAccessorWeakMap,
    		skipFocus,
    		handleTabMount,
    		handleTabUnmount,
    		getAccessor,
    		addAccessor,
    		removeAccessor,
    		scrollIntoView,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('tabs' in $$props) $$invalidate(2, tabs = $$new_props.tabs);
    		if ('key' in $$props) $$invalidate(3, key = $$new_props.key);
    		if ('focusOnActivate' in $$props) $$invalidate(12, focusOnActivate = $$new_props.focusOnActivate);
    		if ('focusOnProgrammatic' in $$props) $$invalidate(13, focusOnProgrammatic = $$new_props.focusOnProgrammatic);
    		if ('useAutomaticActivation' in $$props) $$invalidate(14, useAutomaticActivation = $$new_props.useAutomaticActivation);
    		if ('active' in $$props) $$invalidate(11, active = $$new_props.active);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(4, instance = $$new_props.instance);
    		if ('tabScroller' in $$props) $$invalidate(6, tabScroller = $$new_props.tabScroller);
    		if ('activeIndex' in $$props) $$invalidate(17, activeIndex = $$new_props.activeIndex);
    		if ('tabAccessorMap' in $$props) $$invalidate(18, tabAccessorMap = $$new_props.tabAccessorMap);
    		if ('tabAccessorWeakMap' in $$props) $$invalidate(19, tabAccessorWeakMap = $$new_props.tabAccessorWeakMap);
    		if ('skipFocus' in $$props) skipFocus = $$new_props.skipFocus;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*active, tabs, activeIndex, instance, focusOnProgrammatic*/ 141332) {
    			if (active !== tabs[activeIndex]) {
    				$$invalidate(17, activeIndex = tabs.indexOf(active));

    				if (instance) {
    					skipFocus = !focusOnProgrammatic;
    					instance.activateTab(activeIndex);
    					skipFocus = false;
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tabs, tabAccessorWeakMap, tabAccessorMap, activeIndex*/ 917508) {
    			if (tabs.length) {
    				// Manually get the accessor so it is reactive.
    				const accessor = tabs[0] instanceof Object
    				? tabAccessorWeakMap.get(tabs[0])
    				: tabAccessorMap[tabs[0]];

    				if (accessor) {
    					accessor.forceAccessible(activeIndex === -1);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, useAutomaticActivation*/ 16400) {
    			if (instance) {
    				instance.setUseAutomaticActivation(useAutomaticActivation);
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		tabs,
    		key,
    		instance,
    		element,
    		tabScroller,
    		forwardEvents,
    		handleTabMount,
    		handleTabUnmount,
    		$$restProps,
    		active,
    		focusOnActivate,
    		focusOnProgrammatic,
    		useAutomaticActivation,
    		scrollIntoView,
    		getElement,
    		activeIndex,
    		tabAccessorMap,
    		tabAccessorWeakMap,
    		slots,
    		tabscroller_binding,
    		div_binding,
    		SMUITab_interacted_handler,
    		keydown_handler,
    		$$scope
    	];
    }

    class TabBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$e,
    			create_fragment$1o,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				tabs: 2,
    				key: 3,
    				focusOnActivate: 12,
    				focusOnProgrammatic: 13,
    				useAutomaticActivation: 14,
    				active: 11,
    				scrollIntoView: 15,
    				getElement: 16
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabBar",
    			options,
    			id: create_fragment$1o.name
    		});
    	}

    	get use() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabs() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabs(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focusOnActivate() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set focusOnActivate(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focusOnProgrammatic() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set focusOnProgrammatic(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get useAutomaticActivation() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set useAutomaticActivation(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollIntoView() {
    		return this.$$.ctx[15];
    	}

    	set scrollIntoView(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[16];
    	}

    	set getElement(value) {
    		throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }

    /* node_modules/@smui/layout-grid/dist/InnerGrid.svelte generated by Svelte v3.44.3 */
    const file$10 = "node_modules/@smui/layout-grid/dist/InnerGrid.svelte";

    function create_fragment$1n(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();

    			attr_dev(div, "class", div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-layout-grid__inner': true
    			}));

    			add_location(div, file$10, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[7](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[3].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*className*/ 2 && div_class_value !== (div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-layout-grid__inner': true
    			}))) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[7](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$19($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InnerGrid', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	const writable_props = ['use', 'class'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InnerGrid> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('use' in $$props) $$invalidate(0, use = $$props.use);
    		if ('class' in $$props) $$invalidate(1, className = $$props.class);
    		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$props => {
    		if ('use' in $$props) $$invalidate(0, use = $$props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('element' in $$props) $$invalidate(2, element = $$props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		element,
    		forwardEvents,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class InnerGrid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$19, create_fragment$1n, safe_not_equal, { use: 0, class: 1, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InnerGrid",
    			options,
    			id: create_fragment$1n.name
    		});
    	}

    	get use() {
    		throw new Error("<InnerGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<InnerGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<InnerGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<InnerGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<InnerGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/layout-grid/dist/LayoutGrid.svelte generated by Svelte v3.44.3 */
    const file$$ = "node_modules/@smui/layout-grid/dist/LayoutGrid.svelte";

    // (13:2) <InnerGrid {...prefixFilter($$restProps, 'innerGrid$')}>
    function create_default_slot$O(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$O.name,
    		type: "slot",
    		source: "(13:2) <InnerGrid {...prefixFilter($$restProps, 'innerGrid$')}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1m(ctx) {
    	let div;
    	let innergrid;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const innergrid_spread_levels = [prefixFilter(/*$$restProps*/ ctx[6], 'innerGrid$')];

    	let innergrid_props = {
    		$$slots: { default: [create_default_slot$O] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < innergrid_spread_levels.length; i += 1) {
    		innergrid_props = assign(innergrid_props, innergrid_spread_levels[i]);
    	}

    	innergrid = new InnerGrid({ props: innergrid_props, $$inline: true });

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-layout-grid': true,
    				'mdc-layout-grid--fixed-column-width': /*fixedColumnWidth*/ ctx[2],
    				['mdc-layout-grid--align-' + /*align*/ ctx[3]]: /*align*/ ctx[3] != null
    			})
    		},
    		exclude(/*$$restProps*/ ctx[6], ['innerGrid$'])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(innergrid.$$.fragment);
    			set_attributes(div, div_data);
    			add_location(div, file$$, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(innergrid, div, null);
    			/*div_binding*/ ctx[9](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[5].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const innergrid_changes = (dirty & /*prefixFilter, $$restProps*/ 64)
    			? get_spread_update(innergrid_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[6], 'innerGrid$'))])
    			: {};

    			if (dirty & /*$$scope*/ 1024) {
    				innergrid_changes.$$scope = { dirty, ctx };
    			}

    			innergrid.$set(innergrid_changes);

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, fixedColumnWidth, align*/ 14 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-layout-grid': true,
    					'mdc-layout-grid--fixed-column-width': /*fixedColumnWidth*/ ctx[2],
    					['mdc-layout-grid--align-' + /*align*/ ctx[3]]: /*align*/ ctx[3] != null
    				}))) && { class: div_class_value },
    				dirty & /*$$restProps*/ 64 && exclude(/*$$restProps*/ ctx[6], ['innerGrid$'])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(innergrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(innergrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(innergrid);
    			/*div_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$18($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","fixedColumnWidth","align","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LayoutGrid', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { fixedColumnWidth = false } = $$props;
    	let { align = undefined } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('fixedColumnWidth' in $$new_props) $$invalidate(2, fixedColumnWidth = $$new_props.fixedColumnWidth);
    		if ('align' in $$new_props) $$invalidate(3, align = $$new_props.align);
    		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		InnerGrid,
    		forwardEvents,
    		use,
    		className,
    		fixedColumnWidth,
    		align,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('fixedColumnWidth' in $$props) $$invalidate(2, fixedColumnWidth = $$new_props.fixedColumnWidth);
    		if ('align' in $$props) $$invalidate(3, align = $$new_props.align);
    		if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		fixedColumnWidth,
    		align,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		slots,
    		div_binding,
    		$$scope
    	];
    }

    class LayoutGrid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$18, create_fragment$1m, safe_not_equal, {
    			use: 0,
    			class: 1,
    			fixedColumnWidth: 2,
    			align: 3,
    			getElement: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LayoutGrid",
    			options,
    			id: create_fragment$1m.name
    		});
    	}

    	get use() {
    		throw new Error("<LayoutGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<LayoutGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<LayoutGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<LayoutGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixedColumnWidth() {
    		throw new Error("<LayoutGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixedColumnWidth(value) {
    		throw new Error("<LayoutGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get align() {
    		throw new Error("<LayoutGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set align(value) {
    		throw new Error("<LayoutGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[7];
    	}

    	set getElement(value) {
    		throw new Error("<LayoutGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/layout-grid/dist/Cell.svelte generated by Svelte v3.44.3 */
    const file$_ = "node_modules/@smui/layout-grid/dist/Cell.svelte";

    function create_fragment$1l(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-layout-grid__cell': true,
    				['mdc-layout-grid__cell--align-' + /*align*/ ctx[2]]: /*align*/ ctx[2] != null,
    				['mdc-layout-grid__cell--order-' + /*order*/ ctx[3]]: /*order*/ ctx[3] != null,
    				['mdc-layout-grid__cell--span-' + /*span*/ ctx[4]]: /*span*/ ctx[4] != null,
    				...Object.fromEntries(Object.entries(/*spanDevices*/ ctx[5]).map(func$9))
    			})
    		},
    		/*$$restProps*/ ctx[8]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$_, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[12](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, align, order, span, spanDevices*/ 62 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-layout-grid__cell': true,
    					['mdc-layout-grid__cell--align-' + /*align*/ ctx[2]]: /*align*/ ctx[2] != null,
    					['mdc-layout-grid__cell--order-' + /*order*/ ctx[3]]: /*order*/ ctx[3] != null,
    					['mdc-layout-grid__cell--span-' + /*span*/ ctx[4]]: /*span*/ ctx[4] != null,
    					...Object.fromEntries(Object.entries(/*spanDevices*/ ctx[5]).map(func$9))
    				}))) && { class: div_class_value },
    				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[12](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$9 = ([device, span]) => [`mdc-layout-grid__cell--span-${span}-${device}`, true];

    function instance$17($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","align","order","span","spanDevices","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Cell', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { align = undefined } = $$props;
    	let { order = undefined } = $$props;
    	let { span = undefined } = $$props;
    	let { spanDevices = {} } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(6, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('align' in $$new_props) $$invalidate(2, align = $$new_props.align);
    		if ('order' in $$new_props) $$invalidate(3, order = $$new_props.order);
    		if ('span' in $$new_props) $$invalidate(4, span = $$new_props.span);
    		if ('spanDevices' in $$new_props) $$invalidate(5, spanDevices = $$new_props.spanDevices);
    		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		align,
    		order,
    		span,
    		spanDevices,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('align' in $$props) $$invalidate(2, align = $$new_props.align);
    		if ('order' in $$props) $$invalidate(3, order = $$new_props.order);
    		if ('span' in $$props) $$invalidate(4, span = $$new_props.span);
    		if ('spanDevices' in $$props) $$invalidate(5, spanDevices = $$new_props.spanDevices);
    		if ('element' in $$props) $$invalidate(6, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		align,
    		order,
    		span,
    		spanDevices,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Cell$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$17, create_fragment$1l, safe_not_equal, {
    			use: 0,
    			class: 1,
    			align: 2,
    			order: 3,
    			span: 4,
    			spanDevices: 5,
    			getElement: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cell",
    			options,
    			id: create_fragment$1l.name
    		});
    	}

    	get use() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get align() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set align(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get order() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set order(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get span() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set span(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spanDevices() {
    		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spanDevices(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[9];
    	}

    	set getElement(value) {
    		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Cell = Cell$1;

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$c = {
        NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control',
    };
    var cssClasses$b = {
        DISABLED: 'mdc-radio--disabled',
        ROOT: 'mdc-radio',
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCRadioFoundation = /** @class */ (function (_super) {
        __extends(MDCRadioFoundation, _super);
        function MDCRadioFoundation(adapter) {
            return _super.call(this, __assign(__assign({}, MDCRadioFoundation.defaultAdapter), adapter)) || this;
        }
        Object.defineProperty(MDCRadioFoundation, "cssClasses", {
            get: function () {
                return cssClasses$b;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCRadioFoundation, "strings", {
            get: function () {
                return strings$c;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCRadioFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    setNativeControlDisabled: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCRadioFoundation.prototype.setDisabled = function (disabled) {
            var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;
            this.adapter.setNativeControlDisabled(disabled);
            if (disabled) {
                this.adapter.addClass(DISABLED);
            }
            else {
                this.adapter.removeClass(DISABLED);
            }
        };
        return MDCRadioFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/radio/dist/Radio.svelte generated by Svelte v3.44.3 */
    const file$Z = "node_modules/@smui/radio/dist/Radio.svelte";

    function create_fragment$1k(ctx) {
    	let div4;
    	let input;
    	let input_class_value;
    	let input_value_value;
    	let useActions_action;
    	let t0;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div3;
    	let div4_class_value;
    	let div4_style_value;
    	let Ripple_action;
    	let useActions_action_1;
    	let mounted;
    	let dispose;

    	let input_levels = [
    		{
    			class: input_class_value = classMap({
    				[/*input$class*/ ctx[9]]: true,
    				'mdc-radio__native-control': true
    			})
    		},
    		{ type: "radio" },
    		/*inputProps*/ ctx[16],
    		{ disabled: /*disabled*/ ctx[0] },
    		{
    			__value: input_value_value = /*isUninitializedValue*/ ctx[15](/*valueKey*/ ctx[7])
    			? /*value*/ ctx[6]
    			: /*valueKey*/ ctx[7]
    		},
    		prefixFilter(/*$$restProps*/ ctx[20], 'input$')
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	let div4_levels = [
    		{
    			class: div4_class_value = classMap({
    				[/*className*/ ctx[3]]: true,
    				'mdc-radio': true,
    				'mdc-radio--disabled': /*disabled*/ ctx[0],
    				'mdc-radio--touch': /*touch*/ ctx[5],
    				.../*internalClasses*/ ctx[11]
    			})
    		},
    		{
    			style: div4_style_value = Object.entries(/*internalStyles*/ ctx[12]).map(func$8).concat([/*style*/ ctx[4]]).join(' ')
    		},
    		exclude(/*$$restProps*/ ctx[20], ['input$'])
    	];

    	let div4_data = {};

    	for (let i = 0; i < div4_levels.length; i += 1) {
    		div4_data = assign(div4_data, div4_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			input = element("input");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div3 = element("div");
    			set_attributes(input, input_data);
    			/*$$binding_groups*/ ctx[26][0].push(input);
    			add_location(input, file$Z, 24, 2, 518);
    			attr_dev(div0, "class", "mdc-radio__outer-circle");
    			add_location(div0, file$Z, 40, 4, 900);
    			attr_dev(div1, "class", "mdc-radio__inner-circle");
    			add_location(div1, file$Z, 41, 4, 944);
    			attr_dev(div2, "class", "mdc-radio__background");
    			add_location(div2, file$Z, 39, 2, 860);
    			attr_dev(div3, "class", "mdc-radio__ripple");
    			add_location(div3, file$Z, 43, 2, 995);
    			set_attributes(div4, div4_data);
    			add_location(div4, file$Z, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, input);
    			if (input.autofocus) input.focus();
    			input.checked = input.__value === /*group*/ ctx[1];
    			append_dev(div4, t0);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			/*div4_binding*/ ctx[27](div4);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, input, /*input$use*/ ctx[8])),
    					listen_dev(input, "change", /*input_change_handler*/ ctx[25]),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[23], false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[24], false, false, false),
    					action_destroyer(Ripple_action = Ripple.call(null, div4, {
    						unbounded: true,
    						active: /*rippleActive*/ ctx[13],
    						addClass: /*addClass*/ ctx[17],
    						removeClass: /*removeClass*/ ctx[18],
    						addStyle: /*addStyle*/ ctx[19]
    					})),
    					action_destroyer(useActions_action_1 = useActions.call(null, div4, /*use*/ ctx[2])),
    					action_destroyer(/*forwardEvents*/ ctx[14].call(null, div4))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				dirty & /*input$class*/ 512 && input_class_value !== (input_class_value = classMap({
    					[/*input$class*/ ctx[9]]: true,
    					'mdc-radio__native-control': true
    				})) && { class: input_class_value },
    				{ type: "radio" },
    				/*inputProps*/ ctx[16],
    				dirty & /*disabled*/ 1 && { disabled: /*disabled*/ ctx[0] },
    				dirty & /*valueKey, value*/ 192 && input_value_value !== (input_value_value = /*isUninitializedValue*/ ctx[15](/*valueKey*/ ctx[7])
    				? /*value*/ ctx[6]
    				: /*valueKey*/ ctx[7]) && { __value: input_value_value },
    				dirty & /*$$restProps*/ 1048576 && prefixFilter(/*$$restProps*/ ctx[20], 'input$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*input$use*/ 256) useActions_action.update.call(null, /*input$use*/ ctx[8]);

    			if (dirty & /*group*/ 2) {
    				input.checked = input.__value === /*group*/ ctx[1];
    			}

    			set_attributes(div4, div4_data = get_spread_update(div4_levels, [
    				dirty & /*className, disabled, touch, internalClasses*/ 2089 && div4_class_value !== (div4_class_value = classMap({
    					[/*className*/ ctx[3]]: true,
    					'mdc-radio': true,
    					'mdc-radio--disabled': /*disabled*/ ctx[0],
    					'mdc-radio--touch': /*touch*/ ctx[5],
    					.../*internalClasses*/ ctx[11]
    				})) && { class: div4_class_value },
    				dirty & /*internalStyles, style*/ 4112 && div4_style_value !== (div4_style_value = Object.entries(/*internalStyles*/ ctx[12]).map(func$8).concat([/*style*/ ctx[4]]).join(' ')) && { style: div4_style_value },
    				dirty & /*$$restProps*/ 1048576 && exclude(/*$$restProps*/ ctx[20], ['input$'])
    			]));

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*rippleActive*/ 8192) Ripple_action.update.call(null, {
    				unbounded: true,
    				active: /*rippleActive*/ ctx[13],
    				addClass: /*addClass*/ ctx[17],
    				removeClass: /*removeClass*/ ctx[18],
    				addStyle: /*addStyle*/ ctx[19]
    			});

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/ 4) useActions_action_1.update.call(null, /*use*/ ctx[2]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			/*$$binding_groups*/ ctx[26][0].splice(/*$$binding_groups*/ ctx[26][0].indexOf(input), 1);
    			/*div4_binding*/ ctx[27](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$8 = ([name, value]) => `${name}: ${value};`;

    function instance_1$d($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","disabled","touch","group","value","valueKey","input$use","input$class","getId","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Radio', slots, []);
    	var _a;
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { disabled = false } = $$props;
    	let { touch = false } = $$props;
    	let { group = undefined } = $$props;
    	let { value = null } = $$props;
    	let { valueKey = uninitializedValue } = $$props;
    	let { input$use = [] } = $$props;
    	let { input$class = '' } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};
    	let rippleActive = false;

    	let inputProps = (_a = getContext('SMUI:generic:input:props')) !== null && _a !== void 0
    	? _a
    	: {};

    	onMount(() => {
    		instance = new MDCRadioFoundation({
    				addClass,
    				removeClass,
    				setNativeControlDisabled: value => $$invalidate(0, disabled = value)
    			});

    		const accessor = {
    			_smui_radio_accessor: true,
    			get element() {
    				return getElement();
    			},
    			get checked() {
    				return group === value;
    			},
    			set checked(checked) {
    				if (checked && group !== value) {
    					$$invalidate(1, group = value);
    				} else if (!checked && group === value) {
    					$$invalidate(1, group = undefined);
    				}
    			},
    			activateRipple() {
    				if (!disabled) {
    					$$invalidate(13, rippleActive = true);
    				}
    			},
    			deactivateRipple() {
    				$$invalidate(13, rippleActive = false);
    			}
    		};

    		dispatch(element, 'SMUIGenericInput:mount', accessor);
    		instance.init();

    		return () => {
    			dispatch(element, 'SMUIGenericInput:unmount', accessor);
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(11, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(11, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(12, internalStyles);
    			} else {
    				$$invalidate(12, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function getId() {
    		return inputProps && inputProps.id;
    	}

    	function getElement() {
    		return element;
    	}

    	const $$binding_groups = [[]];

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_change_handler() {
    		group = this.__value;
    		$$invalidate(1, group);
    	}

    	function div4_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(10, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
    		if ('disabled' in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
    		if ('touch' in $$new_props) $$invalidate(5, touch = $$new_props.touch);
    		if ('group' in $$new_props) $$invalidate(1, group = $$new_props.group);
    		if ('value' in $$new_props) $$invalidate(6, value = $$new_props.value);
    		if ('valueKey' in $$new_props) $$invalidate(7, valueKey = $$new_props.valueKey);
    		if ('input$use' in $$new_props) $$invalidate(8, input$use = $$new_props.input$use);
    		if ('input$class' in $$new_props) $$invalidate(9, input$class = $$new_props.input$class);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		MDCRadioFoundation,
    		onMount,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		Ripple,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		style,
    		disabled,
    		touch,
    		group,
    		value,
    		valueKey,
    		input$use,
    		input$class,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		rippleActive,
    		inputProps,
    		addClass,
    		removeClass,
    		addStyle,
    		getId,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) _a = $$new_props._a;
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$new_props.disabled);
    		if ('touch' in $$props) $$invalidate(5, touch = $$new_props.touch);
    		if ('group' in $$props) $$invalidate(1, group = $$new_props.group);
    		if ('value' in $$props) $$invalidate(6, value = $$new_props.value);
    		if ('valueKey' in $$props) $$invalidate(7, valueKey = $$new_props.valueKey);
    		if ('input$use' in $$props) $$invalidate(8, input$use = $$new_props.input$use);
    		if ('input$class' in $$props) $$invalidate(9, input$class = $$new_props.input$class);
    		if ('element' in $$props) $$invalidate(10, element = $$new_props.element);
    		if ('instance' in $$props) instance = $$new_props.instance;
    		if ('internalClasses' in $$props) $$invalidate(11, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(12, internalStyles = $$new_props.internalStyles);
    		if ('rippleActive' in $$props) $$invalidate(13, rippleActive = $$new_props.rippleActive);
    		if ('inputProps' in $$props) $$invalidate(16, inputProps = $$new_props.inputProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		disabled,
    		group,
    		use,
    		className,
    		style,
    		touch,
    		value,
    		valueKey,
    		input$use,
    		input$class,
    		element,
    		internalClasses,
    		internalStyles,
    		rippleActive,
    		forwardEvents,
    		isUninitializedValue,
    		inputProps,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		getId,
    		getElement,
    		blur_handler,
    		focus_handler,
    		input_change_handler,
    		$$binding_groups,
    		div4_binding
    	];
    }

    class Radio extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$d, create_fragment$1k, safe_not_equal, {
    			use: 2,
    			class: 3,
    			style: 4,
    			disabled: 0,
    			touch: 5,
    			group: 1,
    			value: 6,
    			valueKey: 7,
    			input$use: 8,
    			input$class: 9,
    			getId: 21,
    			getElement: 22
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Radio",
    			options,
    			id: create_fragment$1k.name
    		});
    	}

    	get use() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valueKey() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valueKey(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input$use() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input$use(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input$class() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input$class(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getId() {
    		return this.$$.ctx[21];
    	}

    	set getId(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[22];
    	}

    	set getElement(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$a = {
        ROOT: 'mdc-form-field',
    };
    var strings$b = {
        LABEL_SELECTOR: '.mdc-form-field > label',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFormFieldFoundation = /** @class */ (function (_super) {
        __extends(MDCFormFieldFoundation, _super);
        function MDCFormFieldFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation.defaultAdapter), adapter)) || this;
            _this.click = function () {
                _this.handleClick();
            };
            return _this;
        }
        Object.defineProperty(MDCFormFieldFoundation, "cssClasses", {
            get: function () {
                return cssClasses$a;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCFormFieldFoundation, "strings", {
            get: function () {
                return strings$b;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCFormFieldFoundation, "defaultAdapter", {
            get: function () {
                return {
                    activateInputRipple: function () { return undefined; },
                    deactivateInputRipple: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCFormFieldFoundation.prototype.init = function () {
            this.adapter.registerInteractionHandler('click', this.click);
        };
        MDCFormFieldFoundation.prototype.destroy = function () {
            this.adapter.deregisterInteractionHandler('click', this.click);
        };
        MDCFormFieldFoundation.prototype.handleClick = function () {
            var _this = this;
            this.adapter.activateInputRipple();
            requestAnimationFrame(function () {
                _this.adapter.deactivateInputRipple();
            });
        };
        return MDCFormFieldFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/form-field/dist/FormField.svelte generated by Svelte v3.44.3 */

    const file$Y = "node_modules/@smui/form-field/dist/FormField.svelte";
    const get_label_slot_changes$1 = dirty => ({});
    const get_label_slot_context$1 = ctx => ({});

    function create_fragment$1j(ctx) {
    	let div;
    	let t;
    	let label_1;
    	let useActions_action;
    	let div_class_value;
    	let useActions_action_1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
    	const label_slot_template = /*#slots*/ ctx[13].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[12], get_label_slot_context$1);
    	let label_1_levels = [{ for: /*inputId*/ ctx[4] }, prefixFilter(/*$$restProps*/ ctx[10], 'label$')];
    	let label_1_data = {};

    	for (let i = 0; i < label_1_levels.length; i += 1) {
    		label_1_data = assign(label_1_data, label_1_levels[i]);
    	}

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-form-field': true,
    				'mdc-form-field--align-end': /*align*/ ctx[2] === 'end',
    				'mdc-form-field--nowrap': /*noWrap*/ ctx[3]
    			})
    		},
    		exclude(/*$$restProps*/ ctx[10], ['label$'])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			label_1 = element("label");
    			if (label_slot) label_slot.c();
    			set_attributes(label_1, label_1_data);
    			add_location(label_1, file$Y, 15, 2, 412);
    			set_attributes(div, div_data);
    			add_location(div, file$Y, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			append_dev(div, label_1);

    			if (label_slot) {
    				label_slot.m(label_1, null);
    			}

    			/*label_1_binding*/ ctx[14](label_1);
    			/*div_binding*/ ctx[15](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, label_1, /*label$use*/ ctx[5])),
    					action_destroyer(useActions_action_1 = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[9].call(null, div)),
    					listen_dev(div, "SMUIGenericInput:mount", /*SMUIGenericInput_mount_handler*/ ctx[16], false, false, false),
    					listen_dev(div, "SMUIGenericInput:unmount", /*SMUIGenericInput_unmount_handler*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}

    			if (label_slot) {
    				if (label_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						label_slot,
    						label_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[12], dirty, get_label_slot_changes$1),
    						get_label_slot_context$1
    					);
    				}
    			}

    			set_attributes(label_1, label_1_data = get_spread_update(label_1_levels, [
    				(!current || dirty & /*inputId*/ 16) && { for: /*inputId*/ ctx[4] },
    				dirty & /*$$restProps*/ 1024 && prefixFilter(/*$$restProps*/ ctx[10], 'label$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*label$use*/ 32) useActions_action.update.call(null, /*label$use*/ ctx[5]);

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, align, noWrap*/ 14 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-form-field': true,
    					'mdc-form-field--align-end': /*align*/ ctx[2] === 'end',
    					'mdc-form-field--nowrap': /*noWrap*/ ctx[3]
    				}))) && { class: div_class_value },
    				dirty & /*$$restProps*/ 1024 && exclude(/*$$restProps*/ ctx[10], ['label$'])
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/ 1) useActions_action_1.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (label_slot) label_slot.d(detaching);
    			/*label_1_binding*/ ctx[14](null);
    			/*div_binding*/ ctx[15](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let counter$4 = 0;

    function instance_1$c($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","align","noWrap","inputId","label$use","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FormField', slots, ['default','label']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { align = 'start' } = $$props;
    	let { noWrap = false } = $$props;
    	let { inputId = 'SMUI-form-field-' + counter$4++ } = $$props;
    	let { label$use = [] } = $$props;
    	let element;
    	let instance;
    	let label;
    	let input;
    	setContext('SMUI:generic:input:props', { id: inputId });

    	onMount(() => {
    		instance = new MDCFormFieldFoundation({
    				activateInputRipple: () => {
    					if (input) {
    						input.activateRipple();
    					}
    				},
    				deactivateInputRipple: () => {
    					if (input) {
    						input.deactivateRipple();
    					}
    				},
    				deregisterInteractionHandler: (evtType, handler) => {
    					label.removeEventListener(evtType, handler);
    				},
    				registerInteractionHandler: (evtType, handler) => {
    					label.addEventListener(evtType, handler);
    				}
    			});

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function getElement() {
    		return element;
    	}

    	function label_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			label = $$value;
    			$$invalidate(7, label);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(6, element);
    		});
    	}

    	const SMUIGenericInput_mount_handler = event => $$invalidate(8, input = event.detail);
    	const SMUIGenericInput_unmount_handler = () => $$invalidate(8, input = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('align' in $$new_props) $$invalidate(2, align = $$new_props.align);
    		if ('noWrap' in $$new_props) $$invalidate(3, noWrap = $$new_props.noWrap);
    		if ('inputId' in $$new_props) $$invalidate(4, inputId = $$new_props.inputId);
    		if ('label$use' in $$new_props) $$invalidate(5, label$use = $$new_props.label$use);
    		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$4,
    		MDCFormFieldFoundation,
    		onMount,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		align,
    		noWrap,
    		inputId,
    		label$use,
    		element,
    		instance,
    		label,
    		input,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('align' in $$props) $$invalidate(2, align = $$new_props.align);
    		if ('noWrap' in $$props) $$invalidate(3, noWrap = $$new_props.noWrap);
    		if ('inputId' in $$props) $$invalidate(4, inputId = $$new_props.inputId);
    		if ('label$use' in $$props) $$invalidate(5, label$use = $$new_props.label$use);
    		if ('element' in $$props) $$invalidate(6, element = $$new_props.element);
    		if ('instance' in $$props) instance = $$new_props.instance;
    		if ('label' in $$props) $$invalidate(7, label = $$new_props.label);
    		if ('input' in $$props) $$invalidate(8, input = $$new_props.input);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		align,
    		noWrap,
    		inputId,
    		label$use,
    		element,
    		label,
    		input,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		label_1_binding,
    		div_binding,
    		SMUIGenericInput_mount_handler,
    		SMUIGenericInput_unmount_handler
    	];
    }

    class FormField extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$c, create_fragment$1j, safe_not_equal, {
    			use: 0,
    			class: 1,
    			align: 2,
    			noWrap: 3,
    			inputId: 4,
    			label$use: 5,
    			getElement: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FormField",
    			options,
    			id: create_fragment$1j.name
    		});
    	}

    	get use() {
    		throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get align() {
    		throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set align(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noWrap() {
    		throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noWrap(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label$use() {
    		throw new Error("<FormField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label$use(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[11];
    	}

    	set getElement(value) {
    		throw new Error("<FormField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/button/dist/Button.svelte generated by Svelte v3.44.3 */
    const file$X = "node_modules/@smui/button/dist/Button.svelte";

    // (50:10) {#if touch}
    function create_if_block$A(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "mdc-button__touch");
    			add_location(div, file$X, 49, 21, 1522);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$A.name,
    		type: "if",
    		source: "(50:10) {#if touch}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-button': true,     'mdc-button--raised': variant === 'raised',     'mdc-button--unelevated': variant === 'unelevated',     'mdc-button--outlined': variant === 'outlined',     'smui-button--color-secondary': color === 'secondary',     'mdc-button--touch': touch,     'mdc-card__action': context === 'card:action',     'mdc-card__action--button': context === 'card:action',     'mdc-dialog__button': context === 'dialog:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__action': context === 'snackbar:actions',     'mdc-banner__secondary-action': context === 'banner' && secondary,     'mdc-banner__primary-action': context === 'banner' && !secondary,     'mdc-tooltip__action': context === 'tooltip:rich-actions',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...actionProp}   {...defaultProp}   {...secondaryProp}   {href}   on:click={handleClick}   {...$$restProps}   >
    function create_default_slot$N(ctx) {
    	let div;
    	let t;
    	let if_block_anchor;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[27].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[29], null);
    	let if_block = /*touch*/ ctx[6] && create_if_block$A(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			if (default_slot) default_slot.c();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div, "class", "mdc-button__ripple");
    			add_location(div, file$X, 48, 3, 1466);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[29],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[29], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*touch*/ ctx[6]) {
    				if (if_block) ; else {
    					if_block = create_if_block$A(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$N.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-button': true,     'mdc-button--raised': variant === 'raised',     'mdc-button--unelevated': variant === 'unelevated',     'mdc-button--outlined': variant === 'outlined',     'smui-button--color-secondary': color === 'secondary',     'mdc-button--touch': touch,     'mdc-card__action': context === 'card:action',     'mdc-card__action--button': context === 'card:action',     'mdc-dialog__button': context === 'dialog:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__action': context === 'snackbar:actions',     'mdc-banner__secondary-action': context === 'banner' && secondary,     'mdc-banner__primary-action': context === 'banner' && !secondary,     'mdc-tooltip__action': context === 'tooltip:rich-actions',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...actionProp}   {...defaultProp}   {...secondaryProp}   {href}   on:click={handleClick}   {...$$restProps}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1i(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				[
    					Ripple,
    					{
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						color: /*color*/ ctx[4],
    						disabled: !!/*$$restProps*/ ctx[22].disabled,
    						addClass: /*addClass*/ ctx[18],
    						removeClass: /*removeClass*/ ctx[19],
    						addStyle: /*addStyle*/ ctx[20]
    					}
    				],
    				/*forwardEvents*/ ctx[16],
    				.../*use*/ ctx[0]
    			]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-button': true,
    				'mdc-button--raised': /*variant*/ ctx[5] === 'raised',
    				'mdc-button--unelevated': /*variant*/ ctx[5] === 'unelevated',
    				'mdc-button--outlined': /*variant*/ ctx[5] === 'outlined',
    				'smui-button--color-secondary': /*color*/ ctx[4] === 'secondary',
    				'mdc-button--touch': /*touch*/ ctx[6],
    				'mdc-card__action': /*context*/ ctx[17] === 'card:action',
    				'mdc-card__action--button': /*context*/ ctx[17] === 'card:action',
    				'mdc-dialog__button': /*context*/ ctx[17] === 'dialog:action',
    				'mdc-top-app-bar__navigation-icon': /*context*/ ctx[17] === 'top-app-bar:navigation',
    				'mdc-top-app-bar__action-item': /*context*/ ctx[17] === 'top-app-bar:action',
    				'mdc-snackbar__action': /*context*/ ctx[17] === 'snackbar:actions',
    				'mdc-banner__secondary-action': /*context*/ ctx[17] === 'banner' && /*secondary*/ ctx[8],
    				'mdc-banner__primary-action': /*context*/ ctx[17] === 'banner' && !/*secondary*/ ctx[8],
    				'mdc-tooltip__action': /*context*/ ctx[17] === 'tooltip:rich-actions',
    				.../*internalClasses*/ ctx[11]
    			})
    		},
    		{
    			style: Object.entries(/*internalStyles*/ ctx[12]).map(func$7).concat([/*style*/ ctx[2]]).join(' ')
    		},
    		/*actionProp*/ ctx[15],
    		/*defaultProp*/ ctx[14],
    		/*secondaryProp*/ ctx[13],
    		{ href: /*href*/ ctx[7] },
    		/*$$restProps*/ ctx[22]
    	];

    	var switch_value = /*component*/ ctx[9];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$N] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[28](switch_instance);
    		switch_instance.$on("click", /*handleClick*/ ctx[21]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, classMap, className, variant, touch, context, secondary, internalClasses, Object, internalStyles, style, actionProp, defaultProp, secondaryProp, href*/ 6289919)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 6094873 && {
    						use: [
    							[
    								Ripple,
    								{
    									ripple: /*ripple*/ ctx[3],
    									unbounded: false,
    									color: /*color*/ ctx[4],
    									disabled: !!/*$$restProps*/ ctx[22].disabled,
    									addClass: /*addClass*/ ctx[18],
    									removeClass: /*removeClass*/ ctx[19],
    									addStyle: /*addStyle*/ ctx[20]
    								}
    							],
    							/*forwardEvents*/ ctx[16],
    							.../*use*/ ctx[0]
    						]
    					},
    					dirty & /*classMap, className, variant, color, touch, context, secondary, internalClasses*/ 133490 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-button': true,
    							'mdc-button--raised': /*variant*/ ctx[5] === 'raised',
    							'mdc-button--unelevated': /*variant*/ ctx[5] === 'unelevated',
    							'mdc-button--outlined': /*variant*/ ctx[5] === 'outlined',
    							'smui-button--color-secondary': /*color*/ ctx[4] === 'secondary',
    							'mdc-button--touch': /*touch*/ ctx[6],
    							'mdc-card__action': /*context*/ ctx[17] === 'card:action',
    							'mdc-card__action--button': /*context*/ ctx[17] === 'card:action',
    							'mdc-dialog__button': /*context*/ ctx[17] === 'dialog:action',
    							'mdc-top-app-bar__navigation-icon': /*context*/ ctx[17] === 'top-app-bar:navigation',
    							'mdc-top-app-bar__action-item': /*context*/ ctx[17] === 'top-app-bar:action',
    							'mdc-snackbar__action': /*context*/ ctx[17] === 'snackbar:actions',
    							'mdc-banner__secondary-action': /*context*/ ctx[17] === 'banner' && /*secondary*/ ctx[8],
    							'mdc-banner__primary-action': /*context*/ ctx[17] === 'banner' && !/*secondary*/ ctx[8],
    							'mdc-tooltip__action': /*context*/ ctx[17] === 'tooltip:rich-actions',
    							.../*internalClasses*/ ctx[11]
    						})
    					},
    					dirty & /*Object, internalStyles, style*/ 4100 && {
    						style: Object.entries(/*internalStyles*/ ctx[12]).map(func$7).concat([/*style*/ ctx[2]]).join(' ')
    					},
    					dirty & /*actionProp*/ 32768 && get_spread_object(/*actionProp*/ ctx[15]),
    					dirty & /*defaultProp*/ 16384 && get_spread_object(/*defaultProp*/ ctx[14]),
    					dirty & /*secondaryProp*/ 8192 && get_spread_object(/*secondaryProp*/ ctx[13]),
    					dirty & /*href*/ 128 && { href: /*href*/ ctx[7] },
    					dirty & /*$$restProps*/ 4194304 && get_spread_object(/*$$restProps*/ ctx[22])
    				])
    			: {};

    			if (dirty & /*$$scope, touch*/ 536870976) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[9])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[28](switch_instance);
    					switch_instance.$on("click", /*handleClick*/ ctx[21]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[28](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$7 = ([name, value]) => `${name}: ${value};`;

    function instance$16($$self, $$props, $$invalidate) {
    	let actionProp;
    	let defaultProp;
    	let secondaryProp;

    	const omit_props_names = [
    		"use","class","style","ripple","color","variant","touch","href","action","defaultAction","secondary","component","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { ripple = true } = $$props;
    	let { color = 'primary' } = $$props;
    	let { variant = 'text' } = $$props;
    	let { touch = false } = $$props;
    	let { href = undefined } = $$props;
    	let { action = 'close' } = $$props;
    	let { defaultAction = false } = $$props;
    	let { secondary = false } = $$props;
    	let element;
    	let internalClasses = {};
    	let internalStyles = {};
    	let context = getContext('SMUI:button:context');
    	let { component = href == null ? Button : A } = $$props;
    	let previousDisabled = $$restProps.disabled;
    	setContext('SMUI:label:context', 'button');
    	setContext('SMUI:icon:context', 'button');

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(11, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(11, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(12, internalStyles);
    			} else {
    				$$invalidate(12, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function handleClick() {
    		if (context === 'banner') {
    			dispatch(getElement(), secondary
    			? 'SMUIBannerButton:secondaryActionClick'
    			: 'SMUIBannerButton:primaryActionClick');
    		}
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(10, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(30, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(22, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
    		if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ('variant' in $$new_props) $$invalidate(5, variant = $$new_props.variant);
    		if ('touch' in $$new_props) $$invalidate(6, touch = $$new_props.touch);
    		if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
    		if ('action' in $$new_props) $$invalidate(23, action = $$new_props.action);
    		if ('defaultAction' in $$new_props) $$invalidate(24, defaultAction = $$new_props.defaultAction);
    		if ('secondary' in $$new_props) $$invalidate(8, secondary = $$new_props.secondary);
    		if ('component' in $$new_props) $$invalidate(9, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(29, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		dispatch,
    		Ripple,
    		A,
    		Button,
    		forwardEvents,
    		use,
    		className,
    		style,
    		ripple,
    		color,
    		variant,
    		touch,
    		href,
    		action,
    		defaultAction,
    		secondary,
    		element,
    		internalClasses,
    		internalStyles,
    		context,
    		component,
    		previousDisabled,
    		addClass,
    		removeClass,
    		addStyle,
    		handleClick,
    		getElement,
    		secondaryProp,
    		defaultProp,
    		actionProp
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(30, $$props = assign(assign({}, $$props), $$new_props));
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
    		if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
    		if ('variant' in $$props) $$invalidate(5, variant = $$new_props.variant);
    		if ('touch' in $$props) $$invalidate(6, touch = $$new_props.touch);
    		if ('href' in $$props) $$invalidate(7, href = $$new_props.href);
    		if ('action' in $$props) $$invalidate(23, action = $$new_props.action);
    		if ('defaultAction' in $$props) $$invalidate(24, defaultAction = $$new_props.defaultAction);
    		if ('secondary' in $$props) $$invalidate(8, secondary = $$new_props.secondary);
    		if ('element' in $$props) $$invalidate(10, element = $$new_props.element);
    		if ('internalClasses' in $$props) $$invalidate(11, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(12, internalStyles = $$new_props.internalStyles);
    		if ('context' in $$props) $$invalidate(17, context = $$new_props.context);
    		if ('component' in $$props) $$invalidate(9, component = $$new_props.component);
    		if ('previousDisabled' in $$props) $$invalidate(26, previousDisabled = $$new_props.previousDisabled);
    		if ('secondaryProp' in $$props) $$invalidate(13, secondaryProp = $$new_props.secondaryProp);
    		if ('defaultProp' in $$props) $$invalidate(14, defaultProp = $$new_props.defaultProp);
    		if ('actionProp' in $$props) $$invalidate(15, actionProp = $$new_props.actionProp);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(15, actionProp = context === 'dialog:action' && action != null
    		? { 'data-mdc-dialog-action': action }
    		: { action: $$props.action });

    		$$invalidate(14, defaultProp = context === 'dialog:action' && defaultAction
    		? { 'data-mdc-dialog-button-default': '' }
    		: { default: $$props.default });

    		$$invalidate(13, secondaryProp = context === 'banner'
    		? {}
    		: { secondary: $$props.secondary });

    		if (previousDisabled !== $$restProps.disabled) {
    			getElement().blur();
    			$$invalidate(26, previousDisabled = $$restProps.disabled);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		style,
    		ripple,
    		color,
    		variant,
    		touch,
    		href,
    		secondary,
    		component,
    		element,
    		internalClasses,
    		internalStyles,
    		secondaryProp,
    		defaultProp,
    		actionProp,
    		forwardEvents,
    		context,
    		addClass,
    		removeClass,
    		addStyle,
    		handleClick,
    		$$restProps,
    		action,
    		defaultAction,
    		getElement,
    		previousDisabled,
    		slots,
    		switch_instance_binding,
    		$$scope
    	];
    }

    class Button_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$16, create_fragment$1i, safe_not_equal, {
    			use: 0,
    			class: 1,
    			style: 2,
    			ripple: 3,
    			color: 4,
    			variant: 5,
    			touch: 6,
    			href: 7,
    			action: 23,
    			defaultAction: 24,
    			secondary: 8,
    			component: 9,
    			getElement: 25
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button_1",
    			options,
    			id: create_fragment$1i.name
    		});
    	}

    	get use() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get defaultAction() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set defaultAction(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get secondary() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set secondary(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[25];
    	}

    	set getElement(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$9 = {
        ANCHOR: 'mdc-menu-surface--anchor',
        ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
        ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
        FIXED: 'mdc-menu-surface--fixed',
        IS_OPEN_BELOW: 'mdc-menu-surface--is-open-below',
        OPEN: 'mdc-menu-surface--open',
        ROOT: 'mdc-menu-surface',
    };
    // tslint:disable:object-literal-sort-keys
    var strings$a = {
        CLOSED_EVENT: 'MDCMenuSurface:closed',
        CLOSING_EVENT: 'MDCMenuSurface:closing',
        OPENED_EVENT: 'MDCMenuSurface:opened',
        FOCUSABLE_ELEMENTS: [
            'button:not(:disabled)',
            '[href]:not([aria-disabled="true"])',
            'input:not(:disabled)',
            'select:not(:disabled)',
            'textarea:not(:disabled)',
            '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])',
        ].join(', '),
    };
    // tslint:enable:object-literal-sort-keys
    var numbers$5 = {
        /** Total duration of menu-surface open animation. */
        TRANSITION_OPEN_DURATION: 120,
        /** Total duration of menu-surface close animation. */
        TRANSITION_CLOSE_DURATION: 75,
        /**
         * Margin left to the edge of the viewport when menu-surface is at maximum
         * possible height. Also used as a viewport margin.
         */
        MARGIN_TO_EDGE: 32,
        /**
         * Ratio of anchor width to menu-surface width for switching from corner
         * positioning to center positioning.
         */
        ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
        /**
         * Amount of time to wait before restoring focus when closing the menu
         * surface. This is important because if a touch event triggered the menu
         * close, and the subsequent mouse event occurs after focus is restored, then
         * the restored focus would be lost.
         */
        TOUCH_EVENT_WAIT_MS: 30,
    };
    /**
     * Enum for bits in the {@see Corner) bitmap.
     */
    var CornerBit;
    (function (CornerBit) {
        CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
        CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
        CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
        CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
    })(CornerBit || (CornerBit = {}));
    /**
     * Enum for representing an element corner for positioning the menu-surface.
     *
     * The START constants map to LEFT if element directionality is left
     * to right and RIGHT if the directionality is right to left.
     * Likewise END maps to RIGHT or LEFT depending on the directionality.
     */
    var Corner;
    (function (Corner) {
        Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
        Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
        Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
        Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
        Corner[Corner["TOP_START"] = 8] = "TOP_START";
        Corner[Corner["TOP_END"] = 12] = "TOP_END";
        Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
        Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
    })(Corner || (Corner = {}));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var _a$1, _b;
    var cssClasses$8 = {
        LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
        LIST_ITEM_CLASS: 'mdc-list-item',
        LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
        LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
        LIST_ITEM_TEXT_CLASS: 'mdc-list-item__text',
        LIST_ITEM_PRIMARY_TEXT_CLASS: 'mdc-list-item__primary-text',
        ROOT: 'mdc-list',
    };
    (_a$1 = {},
        _a$1["" + cssClasses$8.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-list-item--activated',
        _a$1["" + cssClasses$8.LIST_ITEM_CLASS] = 'mdc-list-item',
        _a$1["" + cssClasses$8.LIST_ITEM_DISABLED_CLASS] = 'mdc-list-item--disabled',
        _a$1["" + cssClasses$8.LIST_ITEM_SELECTED_CLASS] = 'mdc-list-item--selected',
        _a$1["" + cssClasses$8.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-list-item__primary-text',
        _a$1["" + cssClasses$8.ROOT] = 'mdc-list',
        _a$1);
    var deprecatedClassNameMap = (_b = {},
        _b["" + cssClasses$8.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-deprecated-list-item--activated',
        _b["" + cssClasses$8.LIST_ITEM_CLASS] = 'mdc-deprecated-list-item',
        _b["" + cssClasses$8.LIST_ITEM_DISABLED_CLASS] = 'mdc-deprecated-list-item--disabled',
        _b["" + cssClasses$8.LIST_ITEM_SELECTED_CLASS] = 'mdc-deprecated-list-item--selected',
        _b["" + cssClasses$8.LIST_ITEM_TEXT_CLASS] = 'mdc-deprecated-list-item__text',
        _b["" + cssClasses$8.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-deprecated-list-item__primary-text',
        _b["" + cssClasses$8.ROOT] = 'mdc-deprecated-list',
        _b);
    var strings$9 = {
        ACTION_EVENT: 'MDCList:action',
        ARIA_CHECKED: 'aria-checked',
        ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
        ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
        ARIA_CURRENT: 'aria-current',
        ARIA_DISABLED: 'aria-disabled',
        ARIA_ORIENTATION: 'aria-orientation',
        ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
        ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
        ARIA_SELECTED: 'aria-selected',
        ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]',
        ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]',
        CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
        CHECKBOX_SELECTOR: 'input[type="checkbox"]',
        CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses$8.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$8.LIST_ITEM_CLASS + " a,\n    ." + deprecatedClassNameMap[cssClasses$8.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$8.LIST_ITEM_CLASS] + " a\n  ",
        DEPRECATED_SELECTOR: '.mdc-deprecated-list',
        FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses$8.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$8.LIST_ITEM_CLASS + " a,\n    ." + cssClasses$8.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses$8.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$8.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$8.LIST_ITEM_CLASS] + " a,\n    ." + deprecatedClassNameMap[cssClasses$8.LIST_ITEM_CLASS] + " input[type=\"radio\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$8.LIST_ITEM_CLASS] + " input[type=\"checkbox\"]:not(:disabled)\n  ",
        RADIO_SELECTOR: 'input[type="radio"]',
        SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]',
    };
    var numbers$4 = {
        UNSET_INDEX: -1,
        TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
    };

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];
    /**
     * Ensures that preventDefault is only called if the containing element
     * doesn't consume the event, and it will cause an unintended scroll.
     *
     * @param evt keyboard event to be prevented.
     */
    var preventDefaultEvent = function (evt) {
        var target = evt.target;
        if (!target) {
            return;
        }
        var tagName = ("" + target.tagName).toLowerCase();
        if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
            evt.preventDefault();
        }
    };

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * Initializes a state object for typeahead. Use the same reference for calls to
     * typeahead functions.
     *
     * @return The current state of the typeahead process. Each state reference
     *     represents a typeahead instance as the reference is typically mutated
     *     in-place.
     */
    function initState() {
        var state = {
            bufferClearTimeout: 0,
            currentFirstChar: '',
            sortedIndexCursor: 0,
            typeaheadBuffer: '',
        };
        return state;
    }
    /**
     * Initializes typeahead state by indexing the current list items by primary
     * text into the sortedIndexByFirstChar data structure.
     *
     * @param listItemCount numer of items in the list
     * @param getPrimaryTextByItemIndex function that returns the primary text at a
     *     given index
     *
     * @return Map that maps the first character of the primary text to the full
     *     list text and it's index
     */
    function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {
        var sortedIndexByFirstChar = new Map();
        // Aggregate item text to index mapping
        for (var i = 0; i < listItemCount; i++) {
            var primaryText = getPrimaryTextByItemIndex(i).trim();
            if (!primaryText) {
                continue;
            }
            var firstChar = primaryText[0].toLowerCase();
            if (!sortedIndexByFirstChar.has(firstChar)) {
                sortedIndexByFirstChar.set(firstChar, []);
            }
            sortedIndexByFirstChar.get(firstChar).push({ text: primaryText.toLowerCase(), index: i });
        }
        // Sort the mapping
        // TODO(b/157162694): Investigate replacing forEach with Map.values()
        sortedIndexByFirstChar.forEach(function (values) {
            values.sort(function (first, second) {
                return first.index - second.index;
            });
        });
        return sortedIndexByFirstChar;
    }
    /**
     * Given the next desired character from the user, it attempts to find the next
     * list option matching the buffer. Wraps around if at the end of options.
     *
     * @param opts Options and accessors
     *   - nextChar - the next character to match against items
     *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
     *   - focusedItemIndex - the index of the currently focused item
     *   - focusItemAtIndex - function that focuses a list item at given index
     *   - skipFocus - whether or not to focus the matched item
     *   - isItemAtIndexDisabled - function that determines whether an item at a
     *        given index is disabled
     * @param state The typeahead state instance. See `initState`.
     *
     * @return The index of the matched item, or -1 if no match.
     */
    function matchItem(opts, state) {
        var nextChar = opts.nextChar, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, focusedItemIndex = opts.focusedItemIndex, skipFocus = opts.skipFocus, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
        clearTimeout(state.bufferClearTimeout);
        state.bufferClearTimeout = setTimeout(function () {
            clearBuffer(state);
        }, numbers$4.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);
        state.typeaheadBuffer = state.typeaheadBuffer + nextChar;
        var index;
        if (state.typeaheadBuffer.length === 1) {
            index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);
        }
        else {
            index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);
        }
        if (index !== -1 && !skipFocus) {
            focusItemAtIndex(index);
        }
        return index;
    }
    /**
     * Matches the user's single input character in the buffer to the
     * next option that begins with such character. Wraps around if at
     * end of options. Returns -1 if no match is found.
     */
    function matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {
        var firstChar = state.typeaheadBuffer[0];
        var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
        if (!itemsMatchingFirstChar) {
            return -1;
        }
        // Has the same firstChar been recently matched?
        // Also, did starting index remain the same between key presses?
        // If both hold true, simply increment index.
        if (firstChar === state.currentFirstChar &&
            itemsMatchingFirstChar[state.sortedIndexCursor].index ===
                focusedItemIndex) {
            state.sortedIndexCursor =
                (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
            var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;
            if (!isItemAtIndexDisabled(newIndex)) {
                return newIndex;
            }
        }
        // If we're here, it means one of the following happened:
        // - either firstChar or startingIndex has changed, invalidating the
        // cursor.
        // - The next item of typeahead is disabled, so we have to look further.
        state.currentFirstChar = firstChar;
        var newCursorPosition = -1;
        var cursorPosition;
        // Find the first non-disabled item as a fallback.
        for (cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
            if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
                newCursorPosition = cursorPosition;
                break;
            }
        }
        // Advance cursor to first item matching the firstChar that is positioned
        // after starting item. Cursor is unchanged from fallback if there's no
        // such item.
        for (; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
            if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex &&
                !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
                newCursorPosition = cursorPosition;
                break;
            }
        }
        if (newCursorPosition !== -1) {
            state.sortedIndexCursor = newCursorPosition;
            return itemsMatchingFirstChar[state.sortedIndexCursor].index;
        }
        return -1;
    }
    /**
     * Attempts to find the next item that matches all of the typeahead buffer.
     * Wraps around if at end of options. Returns -1 if no match is found.
     */
    function matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {
        var firstChar = state.typeaheadBuffer[0];
        var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
        if (!itemsMatchingFirstChar) {
            return -1;
        }
        // Do nothing if text already matches
        var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];
        if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 &&
            !isItemAtIndexDisabled(startingItem.index)) {
            return startingItem.index;
        }
        // Find next item that matches completely; if no match, we'll eventually
        // loop around to same position
        var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
        var nextCursorPosition = -1;
        while (cursorPosition !== state.sortedIndexCursor) {
            var currentItem = itemsMatchingFirstChar[cursorPosition];
            var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;
            var isEnabled = !isItemAtIndexDisabled(currentItem.index);
            if (matches && isEnabled) {
                nextCursorPosition = cursorPosition;
                break;
            }
            cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;
        }
        if (nextCursorPosition !== -1) {
            state.sortedIndexCursor = nextCursorPosition;
            return itemsMatchingFirstChar[state.sortedIndexCursor].index;
        }
        return -1;
    }
    /**
     * Whether or not the given typeahead instaance state is currently typing.
     *
     * @param state The typeahead state instance. See `initState`.
     */
    function isTypingInProgress(state) {
        return state.typeaheadBuffer.length > 0;
    }
    /**
     * Clears the typeahaed buffer so that it resets item matching to the first
     * character.
     *
     * @param state The typeahead state instance. See `initState`.
     */
    function clearBuffer(state) {
        state.typeaheadBuffer = '';
    }
    /**
     * Given a keydown event, it calculates whether or not to automatically focus a
     * list item depending on what was typed mimicing the typeahead functionality of
     * a standard <select> element that is open.
     *
     * @param opts Options and accessors
     *   - event - the KeyboardEvent to handle and parse
     *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
     *   - focusedItemIndex - the index of the currently focused item
     *   - focusItemAtIndex - function that focuses a list item at given index
     *   - isItemAtFocusedIndexDisabled - whether or not the currently focused item
     *      is disabled
     *   - isTargetListItem - whether or not the event target is a list item
     * @param state The typeahead state instance. See `initState`.
     *
     * @returns index of the item matched by the keydown. -1 if not matched.
     */
    function handleKeydown(opts, state) {
        var event = opts.event, isTargetListItem = opts.isTargetListItem, focusedItemIndex = opts.focusedItemIndex, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
        var isArrowLeft = normalizeKey(event) === 'ArrowLeft';
        var isArrowUp = normalizeKey(event) === 'ArrowUp';
        var isArrowRight = normalizeKey(event) === 'ArrowRight';
        var isArrowDown = normalizeKey(event) === 'ArrowDown';
        var isHome = normalizeKey(event) === 'Home';
        var isEnd = normalizeKey(event) === 'End';
        var isEnter = normalizeKey(event) === 'Enter';
        var isSpace = normalizeKey(event) === 'Spacebar';
        if (event.ctrlKey || event.metaKey || isArrowLeft || isArrowUp ||
            isArrowRight || isArrowDown || isHome || isEnd || isEnter) {
            return -1;
        }
        var isCharacterKey = !isSpace && event.key.length === 1;
        if (isCharacterKey) {
            preventDefaultEvent(event);
            var matchItemOpts = {
                focusItemAtIndex: focusItemAtIndex,
                focusedItemIndex: focusedItemIndex,
                nextChar: event.key.toLowerCase(),
                sortedIndexByFirstChar: sortedIndexByFirstChar,
                skipFocus: false,
                isItemAtIndexDisabled: isItemAtIndexDisabled,
            };
            return matchItem(matchItemOpts, state);
        }
        if (!isSpace) {
            return -1;
        }
        if (isTargetListItem) {
            preventDefaultEvent(event);
        }
        var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);
        if (typeaheadOnListItem) {
            var matchItemOpts = {
                focusItemAtIndex: focusItemAtIndex,
                focusedItemIndex: focusedItemIndex,
                nextChar: ' ',
                sortedIndexByFirstChar: sortedIndexByFirstChar,
                skipFocus: false,
                isItemAtIndexDisabled: isItemAtIndexDisabled,
            };
            // space participates in typeahead matching if in rapid typing mode
            return matchItem(matchItemOpts, state);
        }
        return -1;
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    function isNumberArray(selectedIndex) {
        return selectedIndex instanceof Array;
    }
    var MDCListFoundation = /** @class */ (function (_super) {
        __extends(MDCListFoundation, _super);
        function MDCListFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;
            _this.wrapFocus = false;
            _this.isVertical = true;
            _this.isSingleSelectionList = false;
            _this.selectedIndex = numbers$4.UNSET_INDEX;
            _this.focusedItemIndex = numbers$4.UNSET_INDEX;
            _this.useActivatedClass = false;
            _this.useSelectedAttr = false;
            _this.ariaCurrentAttrValue = null;
            _this.isCheckboxList = false;
            _this.isRadioList = false;
            _this.hasTypeahead = false;
            // Transiently holds current typeahead prefix from user.
            _this.typeaheadState = initState();
            _this.sortedIndexByFirstChar = new Map();
            return _this;
        }
        Object.defineProperty(MDCListFoundation, "strings", {
            get: function () {
                return strings$9;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCListFoundation, "cssClasses", {
            get: function () {
                return cssClasses$8;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCListFoundation, "numbers", {
            get: function () {
                return numbers$4;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCListFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClassForElementIndex: function () { return undefined; },
                    focusItemAtIndex: function () { return undefined; },
                    getAttributeForElementIndex: function () { return null; },
                    getFocusedElementIndex: function () { return 0; },
                    getListItemCount: function () { return 0; },
                    hasCheckboxAtIndex: function () { return false; },
                    hasRadioAtIndex: function () { return false; },
                    isCheckboxCheckedAtIndex: function () { return false; },
                    isFocusInsideList: function () { return false; },
                    isRootFocused: function () { return false; },
                    listItemAtIndexHasClass: function () { return false; },
                    notifyAction: function () { return undefined; },
                    removeClassForElementIndex: function () { return undefined; },
                    setAttributeForElementIndex: function () { return undefined; },
                    setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },
                    setTabIndexForListItemChildren: function () { return undefined; },
                    getPrimaryTextAtIndex: function () { return ''; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCListFoundation.prototype.layout = function () {
            if (this.adapter.getListItemCount() === 0) {
                return;
            }
            // TODO(b/172274142): consider all items when determining the list's type.
            if (this.adapter.hasCheckboxAtIndex(0)) {
                this.isCheckboxList = true;
            }
            else if (this.adapter.hasRadioAtIndex(0)) {
                this.isRadioList = true;
            }
            else {
                this.maybeInitializeSingleSelection();
            }
            if (this.hasTypeahead) {
                this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
            }
        };
        /** Returns the index of the item that was last focused. */
        MDCListFoundation.prototype.getFocusedItemIndex = function () {
            return this.focusedItemIndex;
        };
        /** Toggles focus wrapping with keyboard navigation. */
        MDCListFoundation.prototype.setWrapFocus = function (value) {
            this.wrapFocus = value;
        };
        /**
         * Toggles orientation direction for keyboard navigation (true for vertical,
         * false for horizontal).
         */
        MDCListFoundation.prototype.setVerticalOrientation = function (value) {
            this.isVertical = value;
        };
        /** Toggles single-selection behavior. */
        MDCListFoundation.prototype.setSingleSelection = function (value) {
            this.isSingleSelectionList = value;
            if (value) {
                this.maybeInitializeSingleSelection();
                this.selectedIndex = this.getSelectedIndexFromDOM();
            }
        };
        /**
         * Automatically determines whether the list is single selection list. If so,
         * initializes the internal state to match the selected item.
         */
        MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {
            var selectedItemIndex = this.getSelectedIndexFromDOM();
            if (selectedItemIndex === numbers$4.UNSET_INDEX)
                return;
            var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, cssClasses$8.LIST_ITEM_ACTIVATED_CLASS);
            if (hasActivatedClass) {
                this.setUseActivatedClass(true);
            }
            this.isSingleSelectionList = true;
            this.selectedIndex = selectedItemIndex;
        };
        /** @return Index of the first selected item based on the DOM state. */
        MDCListFoundation.prototype.getSelectedIndexFromDOM = function () {
            var selectedIndex = numbers$4.UNSET_INDEX;
            var listItemsCount = this.adapter.getListItemCount();
            for (var i = 0; i < listItemsCount; i++) {
                var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses$8.LIST_ITEM_SELECTED_CLASS);
                var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses$8.LIST_ITEM_ACTIVATED_CLASS);
                if (!(hasSelectedClass || hasActivatedClass)) {
                    continue;
                }
                selectedIndex = i;
                break;
            }
            return selectedIndex;
        };
        /**
         * Sets whether typeahead is enabled on the list.
         * @param hasTypeahead Whether typeahead is enabled.
         */
        MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {
            this.hasTypeahead = hasTypeahead;
            if (hasTypeahead) {
                this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
            }
        };
        /**
         * @return Whether typeahead is currently matching a user-specified prefix.
         */
        MDCListFoundation.prototype.isTypeaheadInProgress = function () {
            return this.hasTypeahead &&
                isTypingInProgress(this.typeaheadState);
        };
        /** Toggle use of the "activated" CSS class. */
        MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {
            this.useActivatedClass = useActivated;
        };
        /**
         * Toggles use of the selected attribute (true for aria-selected, false for
         * aria-checked).
         */
        MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {
            this.useSelectedAttr = useSelected;
        };
        MDCListFoundation.prototype.getSelectedIndex = function () {
            return this.selectedIndex;
        };
        MDCListFoundation.prototype.setSelectedIndex = function (index, _a) {
            var _b = _a === void 0 ? {} : _a, forceUpdate = _b.forceUpdate;
            if (!this.isIndexValid(index)) {
                return;
            }
            if (this.isCheckboxList) {
                this.setCheckboxAtIndex(index);
            }
            else if (this.isRadioList) {
                this.setRadioAtIndex(index);
            }
            else {
                this.setSingleSelectionAtIndex(index, { forceUpdate: forceUpdate });
            }
        };
        /**
         * Focus in handler for the list items.
         */
        MDCListFoundation.prototype.handleFocusIn = function (listItemIndex) {
            if (listItemIndex >= 0) {
                this.focusedItemIndex = listItemIndex;
                this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');
                this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');
            }
        };
        /**
         * Focus out handler for the list items.
         */
        MDCListFoundation.prototype.handleFocusOut = function (listItemIndex) {
            var _this = this;
            if (listItemIndex >= 0) {
                this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');
                this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');
            }
            /**
             * Between Focusout & Focusin some browsers do not have focus on any
             * element. Setting a delay to wait till the focus is moved to next element.
             */
            setTimeout(function () {
                if (!_this.adapter.isFocusInsideList()) {
                    _this.setTabindexToFirstSelectedOrFocusedItem();
                }
            }, 0);
        };
        /**
         * Key handler for the list.
         */
        MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {
            var _this = this;
            var isArrowLeft = normalizeKey(event) === 'ArrowLeft';
            var isArrowUp = normalizeKey(event) === 'ArrowUp';
            var isArrowRight = normalizeKey(event) === 'ArrowRight';
            var isArrowDown = normalizeKey(event) === 'ArrowDown';
            var isHome = normalizeKey(event) === 'Home';
            var isEnd = normalizeKey(event) === 'End';
            var isEnter = normalizeKey(event) === 'Enter';
            var isSpace = normalizeKey(event) === 'Spacebar';
            // Have to check both upper and lower case, because having caps lock on
            // affects the value.
            var isLetterA = event.key === 'A' || event.key === 'a';
            if (this.adapter.isRootFocused()) {
                if (isArrowUp || isEnd) {
                    event.preventDefault();
                    this.focusLastElement();
                }
                else if (isArrowDown || isHome) {
                    event.preventDefault();
                    this.focusFirstElement();
                }
                if (this.hasTypeahead) {
                    var handleKeydownOpts = {
                        event: event,
                        focusItemAtIndex: function (index) {
                            _this.focusItemAtIndex(index);
                        },
                        focusedItemIndex: -1,
                        isTargetListItem: isRootListItem,
                        sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                        isItemAtIndexDisabled: function (index) {
                            return _this.adapter.listItemAtIndexHasClass(index, cssClasses$8.LIST_ITEM_DISABLED_CLASS);
                        },
                    };
                    handleKeydown(handleKeydownOpts, this.typeaheadState);
                }
                return;
            }
            var currentIndex = this.adapter.getFocusedElementIndex();
            if (currentIndex === -1) {
                currentIndex = listItemIndex;
                if (currentIndex < 0) {
                    // If this event doesn't have a mdc-list-item ancestor from the
                    // current list (not from a sublist), return early.
                    return;
                }
            }
            if ((this.isVertical && isArrowDown) ||
                (!this.isVertical && isArrowRight)) {
                preventDefaultEvent(event);
                this.focusNextElement(currentIndex);
            }
            else if ((this.isVertical && isArrowUp) || (!this.isVertical && isArrowLeft)) {
                preventDefaultEvent(event);
                this.focusPrevElement(currentIndex);
            }
            else if (isHome) {
                preventDefaultEvent(event);
                this.focusFirstElement();
            }
            else if (isEnd) {
                preventDefaultEvent(event);
                this.focusLastElement();
            }
            else if (isLetterA && event.ctrlKey && this.isCheckboxList) {
                event.preventDefault();
                this.toggleAll(this.selectedIndex === numbers$4.UNSET_INDEX ?
                    [] :
                    this.selectedIndex);
            }
            else if (isEnter || isSpace) {
                if (isRootListItem) {
                    // Return early if enter key is pressed on anchor element which triggers
                    // synthetic MouseEvent event.
                    var target = event.target;
                    if (target && target.tagName === 'A' && isEnter) {
                        return;
                    }
                    preventDefaultEvent(event);
                    if (this.adapter.listItemAtIndexHasClass(currentIndex, cssClasses$8.LIST_ITEM_DISABLED_CLASS)) {
                        return;
                    }
                    if (!this.isTypeaheadInProgress()) {
                        if (this.isSelectableList()) {
                            this.setSelectedIndexOnAction(currentIndex);
                        }
                        this.adapter.notifyAction(currentIndex);
                    }
                }
            }
            if (this.hasTypeahead) {
                var handleKeydownOpts = {
                    event: event,
                    focusItemAtIndex: function (index) {
                        _this.focusItemAtIndex(index);
                    },
                    focusedItemIndex: this.focusedItemIndex,
                    isTargetListItem: isRootListItem,
                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                    isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses$8.LIST_ITEM_DISABLED_CLASS); },
                };
                handleKeydown(handleKeydownOpts, this.typeaheadState);
            }
        };
        /**
         * Click handler for the list.
         */
        MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {
            if (index === numbers$4.UNSET_INDEX) {
                return;
            }
            if (this.adapter.listItemAtIndexHasClass(index, cssClasses$8.LIST_ITEM_DISABLED_CLASS)) {
                return;
            }
            if (this.isSelectableList()) {
                this.setSelectedIndexOnAction(index, toggleCheckbox);
            }
            this.adapter.notifyAction(index);
        };
        /**
         * Focuses the next element on the list.
         */
        MDCListFoundation.prototype.focusNextElement = function (index) {
            var count = this.adapter.getListItemCount();
            var nextIndex = index + 1;
            if (nextIndex >= count) {
                if (this.wrapFocus) {
                    nextIndex = 0;
                }
                else {
                    // Return early because last item is already focused.
                    return index;
                }
            }
            this.focusItemAtIndex(nextIndex);
            return nextIndex;
        };
        /**
         * Focuses the previous element on the list.
         */
        MDCListFoundation.prototype.focusPrevElement = function (index) {
            var prevIndex = index - 1;
            if (prevIndex < 0) {
                if (this.wrapFocus) {
                    prevIndex = this.adapter.getListItemCount() - 1;
                }
                else {
                    // Return early because first item is already focused.
                    return index;
                }
            }
            this.focusItemAtIndex(prevIndex);
            return prevIndex;
        };
        MDCListFoundation.prototype.focusFirstElement = function () {
            this.focusItemAtIndex(0);
            return 0;
        };
        MDCListFoundation.prototype.focusLastElement = function () {
            var lastIndex = this.adapter.getListItemCount() - 1;
            this.focusItemAtIndex(lastIndex);
            return lastIndex;
        };
        MDCListFoundation.prototype.focusInitialElement = function () {
            var initialIndex = this.getFirstSelectedOrFocusedItemIndex();
            this.focusItemAtIndex(initialIndex);
            return initialIndex;
        };
        /**
         * @param itemIndex Index of the list item
         * @param isEnabled Sets the list item to enabled or disabled.
         */
        MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {
            if (!this.isIndexValid(itemIndex)) {
                return;
            }
            if (isEnabled) {
                this.adapter.removeClassForElementIndex(itemIndex, cssClasses$8.LIST_ITEM_DISABLED_CLASS);
                this.adapter.setAttributeForElementIndex(itemIndex, strings$9.ARIA_DISABLED, 'false');
            }
            else {
                this.adapter.addClassForElementIndex(itemIndex, cssClasses$8.LIST_ITEM_DISABLED_CLASS);
                this.adapter.setAttributeForElementIndex(itemIndex, strings$9.ARIA_DISABLED, 'true');
            }
        };
        MDCListFoundation.prototype.setSingleSelectionAtIndex = function (index, _a) {
            var _b = _a === void 0 ? {} : _a, forceUpdate = _b.forceUpdate;
            if (this.selectedIndex === index && !forceUpdate) {
                return;
            }
            var selectedClassName = cssClasses$8.LIST_ITEM_SELECTED_CLASS;
            if (this.useActivatedClass) {
                selectedClassName = cssClasses$8.LIST_ITEM_ACTIVATED_CLASS;
            }
            if (this.selectedIndex !== numbers$4.UNSET_INDEX) {
                this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);
            }
            this.setAriaForSingleSelectionAtIndex(index);
            this.setTabindexAtIndex(index);
            if (index !== numbers$4.UNSET_INDEX) {
                this.adapter.addClassForElementIndex(index, selectedClassName);
            }
            this.selectedIndex = index;
        };
        /**
         * Sets aria attribute for single selection at given index.
         */
        MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function (index) {
            // Detect the presence of aria-current and get the value only during list
            // initialization when it is in unset state.
            if (this.selectedIndex === numbers$4.UNSET_INDEX) {
                this.ariaCurrentAttrValue =
                    this.adapter.getAttributeForElementIndex(index, strings$9.ARIA_CURRENT);
            }
            var isAriaCurrent = this.ariaCurrentAttrValue !== null;
            var ariaAttribute = isAriaCurrent ? strings$9.ARIA_CURRENT : strings$9.ARIA_SELECTED;
            if (this.selectedIndex !== numbers$4.UNSET_INDEX) {
                this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');
            }
            if (index !== numbers$4.UNSET_INDEX) {
                var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';
                this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
            }
        };
        /**
         * Returns the attribute to use for indicating selection status.
         */
        MDCListFoundation.prototype.getSelectionAttribute = function () {
            return this.useSelectedAttr ? strings$9.ARIA_SELECTED : strings$9.ARIA_CHECKED;
        };
        /**
         * Toggles radio at give index. Radio doesn't change the checked state if it
         * is already checked.
         */
        MDCListFoundation.prototype.setRadioAtIndex = function (index) {
            var selectionAttribute = this.getSelectionAttribute();
            this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);
            if (this.selectedIndex !== numbers$4.UNSET_INDEX) {
                this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');
            }
            this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');
            this.selectedIndex = index;
        };
        MDCListFoundation.prototype.setCheckboxAtIndex = function (index) {
            var selectionAttribute = this.getSelectionAttribute();
            for (var i = 0; i < this.adapter.getListItemCount(); i++) {
                var isChecked = false;
                if (index.indexOf(i) >= 0) {
                    isChecked = true;
                }
                this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
                this.adapter.setAttributeForElementIndex(i, selectionAttribute, isChecked ? 'true' : 'false');
            }
            this.selectedIndex = index;
        };
        MDCListFoundation.prototype.setTabindexAtIndex = function (index) {
            if (this.focusedItemIndex === numbers$4.UNSET_INDEX && index !== 0) {
                // If some list item was selected set first list item's tabindex to -1.
                // Generally, tabindex is set to 0 on first list item of list that has no
                // preselected items.
                this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');
            }
            else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {
                this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');
            }
            // Set the previous selection's tabindex to -1. We need this because
            // in selection menus that are not visible, programmatically setting an
            // option will not change focus but will change where tabindex should be 0.
            if (!(this.selectedIndex instanceof Array) &&
                this.selectedIndex !== index) {
                this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');
            }
            if (index !== numbers$4.UNSET_INDEX) {
                this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');
            }
        };
        /**
         * @return Return true if it is single selectin list, checkbox list or radio
         *     list.
         */
        MDCListFoundation.prototype.isSelectableList = function () {
            return this.isSingleSelectionList || this.isCheckboxList ||
                this.isRadioList;
        };
        MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {
            var targetIndex = this.getFirstSelectedOrFocusedItemIndex();
            this.setTabindexAtIndex(targetIndex);
        };
        MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {
            // Action lists retain focus on the most recently focused item.
            if (!this.isSelectableList()) {
                return Math.max(this.focusedItemIndex, 0);
            }
            // Single-selection lists focus the selected item.
            if (typeof this.selectedIndex === 'number' &&
                this.selectedIndex !== numbers$4.UNSET_INDEX) {
                return this.selectedIndex;
            }
            // Multiple-selection lists focus the first selected item.
            if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {
                return this.selectedIndex.reduce(function (minIndex, currentIndex) { return Math.min(minIndex, currentIndex); });
            }
            // Selection lists without a selection focus the first item.
            return 0;
        };
        MDCListFoundation.prototype.isIndexValid = function (index) {
            var _this = this;
            if (index instanceof Array) {
                if (!this.isCheckboxList) {
                    throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
                }
                if (index.length === 0) {
                    return true;
                }
                else {
                    return index.some(function (i) { return _this.isIndexInRange(i); });
                }
            }
            else if (typeof index === 'number') {
                if (this.isCheckboxList) {
                    throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + index);
                }
                return this.isIndexInRange(index) ||
                    this.isSingleSelectionList && index === numbers$4.UNSET_INDEX;
            }
            else {
                return false;
            }
        };
        MDCListFoundation.prototype.isIndexInRange = function (index) {
            var listSize = this.adapter.getListItemCount();
            return index >= 0 && index < listSize;
        };
        /**
         * Sets selected index on user action, toggles checkbox / radio based on
         * toggleCheckbox value. User interaction should not toggle list item(s) when
         * disabled.
         */
        MDCListFoundation.prototype.setSelectedIndexOnAction = function (index, toggleCheckbox) {
            if (toggleCheckbox === void 0) { toggleCheckbox = true; }
            if (this.isCheckboxList) {
                this.toggleCheckboxAtIndex(index, toggleCheckbox);
            }
            else {
                this.setSelectedIndex(index);
            }
        };
        MDCListFoundation.prototype.toggleCheckboxAtIndex = function (index, toggleCheckbox) {
            var selectionAttribute = this.getSelectionAttribute();
            var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);
            if (toggleCheckbox) {
                isChecked = !isChecked;
                this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
            }
            this.adapter.setAttributeForElementIndex(index, selectionAttribute, isChecked ? 'true' : 'false');
            // If none of the checkbox items are selected and selectedIndex is not
            // initialized then provide a default value.
            var selectedIndexes = this.selectedIndex === numbers$4.UNSET_INDEX ?
                [] :
                this.selectedIndex.slice();
            if (isChecked) {
                selectedIndexes.push(index);
            }
            else {
                selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });
            }
            this.selectedIndex = selectedIndexes;
        };
        MDCListFoundation.prototype.focusItemAtIndex = function (index) {
            this.adapter.focusItemAtIndex(index);
            this.focusedItemIndex = index;
        };
        MDCListFoundation.prototype.toggleAll = function (currentlySelectedIndexes) {
            var count = this.adapter.getListItemCount();
            // If all items are selected, deselect everything.
            if (currentlySelectedIndexes.length === count) {
                this.setCheckboxAtIndex([]);
            }
            else {
                // Otherwise select all enabled options.
                var allIndexes = [];
                for (var i = 0; i < count; i++) {
                    if (!this.adapter.listItemAtIndexHasClass(i, cssClasses$8.LIST_ITEM_DISABLED_CLASS) ||
                        currentlySelectedIndexes.indexOf(i) > -1) {
                        allIndexes.push(i);
                    }
                }
                this.setCheckboxAtIndex(allIndexes);
            }
        };
        /**
         * Given the next desired character from the user, adds it to the typeahead
         * buffer. Then, attempts to find the next option matching the buffer. Wraps
         * around if at the end of options.
         *
         * @param nextChar The next character to add to the prefix buffer.
         * @param startingIndex The index from which to start matching. Only relevant
         *     when starting a new match sequence. To start a new match sequence,
         *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
         *     to clear after a set interval defined in list foundation. Defaults to
         *     the currently focused index.
         * @return The index of the matched item, or -1 if no match.
         */
        MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {
            var _this = this;
            if (skipFocus === void 0) { skipFocus = false; }
            var opts = {
                focusItemAtIndex: function (index) {
                    _this.focusItemAtIndex(index);
                },
                focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,
                nextChar: nextChar,
                sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                skipFocus: skipFocus,
                isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses$8.LIST_ITEM_DISABLED_CLASS); }
            };
            return matchItem(opts, this.typeaheadState);
        };
        /**
         * Initializes the MDCListTextAndIndex data structure by indexing the current
         * list items by primary text.
         *
         * @return The primary texts of all the list items sorted by first character.
         */
        MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {
            return initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
        };
        /**
         * Clears the typeahead buffer.
         */
        MDCListFoundation.prototype.clearTypeaheadBuffer = function () {
            clearBuffer(this.typeaheadState);
        };
        return MDCListFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCMenuSurfaceFoundation = /** @class */ (function (_super) {
        __extends(MDCMenuSurfaceFoundation, _super);
        function MDCMenuSurfaceFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation.defaultAdapter), adapter)) || this;
            _this.isSurfaceOpen = false;
            _this.isQuickOpen = false;
            _this.isHoistedElement = false;
            _this.isFixedPosition = false;
            _this.isHorizontallyCenteredOnViewport = false;
            _this.maxHeight = 0;
            _this.openAnimationEndTimerId = 0;
            _this.closeAnimationEndTimerId = 0;
            _this.animationRequestId = 0;
            _this.anchorCorner = Corner.TOP_START;
            /**
             * Corner of the menu surface to which menu surface is attached to anchor.
             *
             *  Anchor corner --->+----------+
             *                    |  ANCHOR  |
             *                    +----------+
             *  Origin corner --->+--------------+
             *                    |              |
             *                    |              |
             *                    | MENU SURFACE |
             *                    |              |
             *                    |              |
             *                    +--------------+
             */
            _this.originCorner = Corner.TOP_START;
            _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };
            _this.position = { x: 0, y: 0 };
            return _this;
        }
        Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
            get: function () {
                return cssClasses$9;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
            get: function () {
                return strings$a;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
            get: function () {
                return numbers$5;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
            get: function () {
                return Corner;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
            /**
             * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    hasAnchor: function () { return false; },
                    isElementInContainer: function () { return false; },
                    isFocused: function () { return false; },
                    isRtl: function () { return false; },
                    getInnerDimensions: function () { return ({ height: 0, width: 0 }); },
                    getAnchorDimensions: function () { return null; },
                    getWindowDimensions: function () { return ({ height: 0, width: 0 }); },
                    getBodyDimensions: function () { return ({ height: 0, width: 0 }); },
                    getWindowScroll: function () { return ({ x: 0, y: 0 }); },
                    setPosition: function () { return undefined; },
                    setMaxHeight: function () { return undefined; },
                    setTransformOrigin: function () { return undefined; },
                    saveFocus: function () { return undefined; },
                    restoreFocus: function () { return undefined; },
                    notifyClose: function () { return undefined; },
                    notifyOpen: function () { return undefined; },
                    notifyClosing: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCMenuSurfaceFoundation.prototype.init = function () {
            var _a = MDCMenuSurfaceFoundation.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;
            if (!this.adapter.hasClass(ROOT)) {
                throw new Error(ROOT + " class required in root element.");
            }
            if (this.adapter.hasClass(OPEN)) {
                this.isSurfaceOpen = true;
            }
        };
        MDCMenuSurfaceFoundation.prototype.destroy = function () {
            clearTimeout(this.openAnimationEndTimerId);
            clearTimeout(this.closeAnimationEndTimerId);
            // Cancel any currently running animations.
            cancelAnimationFrame(this.animationRequestId);
        };
        /**
         * @param corner Default anchor corner alignment of top-left menu surface
         *     corner.
         */
        MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {
            this.anchorCorner = corner;
        };
        /**
         * Flip menu corner horizontally.
         */
        MDCMenuSurfaceFoundation.prototype.flipCornerHorizontally = function () {
            this.originCorner = this.originCorner ^ CornerBit.RIGHT;
        };
        /**
         * @param margin Set of margin values from anchor.
         */
        MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {
            this.anchorMargin.top = margin.top || 0;
            this.anchorMargin.right = margin.right || 0;
            this.anchorMargin.bottom = margin.bottom || 0;
            this.anchorMargin.left = margin.left || 0;
        };
        /** Used to indicate if the menu-surface is hoisted to the body. */
        MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {
            this.isHoistedElement = isHoisted;
        };
        /**
         * Used to set the menu-surface calculations based on a fixed position menu.
         */
        MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {
            this.isFixedPosition = isFixedPosition;
        };
        /**
         * @return Returns true if menu is in fixed (`position: fixed`) position.
         */
        MDCMenuSurfaceFoundation.prototype.isFixed = function () {
            return this.isFixedPosition;
        };
        /** Sets the menu-surface position on the page. */
        MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {
            this.position.x = this.isFinite(x) ? x : 0;
            this.position.y = this.isFinite(y) ? y : 0;
        };
        /** Sets whether menu-surface should be horizontally centered to viewport. */
        MDCMenuSurfaceFoundation.prototype.setIsHorizontallyCenteredOnViewport = function (isCentered) {
            this.isHorizontallyCenteredOnViewport = isCentered;
        };
        MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {
            this.isQuickOpen = quickOpen;
        };
        /**
         * Sets maximum menu-surface height on open.
         * @param maxHeight The desired max-height. Set to 0 (default) to
         *     automatically calculate max height based on available viewport space.
         */
        MDCMenuSurfaceFoundation.prototype.setMaxHeight = function (maxHeight) {
            this.maxHeight = maxHeight;
        };
        MDCMenuSurfaceFoundation.prototype.isOpen = function () {
            return this.isSurfaceOpen;
        };
        /**
         * Open the menu surface.
         */
        MDCMenuSurfaceFoundation.prototype.open = function () {
            var _this = this;
            if (this.isSurfaceOpen) {
                return;
            }
            this.adapter.saveFocus();
            if (this.isQuickOpen) {
                this.isSurfaceOpen = true;
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                this.dimensions = this.adapter.getInnerDimensions();
                this.autoposition();
                this.adapter.notifyOpen();
            }
            else {
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
                this.animationRequestId = requestAnimationFrame(function () {
                    _this.dimensions = _this.adapter.getInnerDimensions();
                    _this.autoposition();
                    _this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                    _this.openAnimationEndTimerId = setTimeout(function () {
                        _this.openAnimationEndTimerId = 0;
                        _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
                        _this.adapter.notifyOpen();
                    }, numbers$5.TRANSITION_OPEN_DURATION);
                });
                this.isSurfaceOpen = true;
            }
        };
        /**
         * Closes the menu surface.
         */
        MDCMenuSurfaceFoundation.prototype.close = function (skipRestoreFocus) {
            var _this = this;
            if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }
            if (!this.isSurfaceOpen) {
                return;
            }
            this.adapter.notifyClosing();
            if (this.isQuickOpen) {
                this.isSurfaceOpen = false;
                if (!skipRestoreFocus) {
                    this.maybeRestoreFocus();
                }
                this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
                this.adapter.notifyClose();
                return;
            }
            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
            requestAnimationFrame(function () {
                _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
                _this.closeAnimationEndTimerId = setTimeout(function () {
                    _this.closeAnimationEndTimerId = 0;
                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
                    _this.adapter.notifyClose();
                }, numbers$5.TRANSITION_CLOSE_DURATION);
            });
            this.isSurfaceOpen = false;
            if (!skipRestoreFocus) {
                this.maybeRestoreFocus();
            }
        };
        /** Handle clicks and close if not within menu-surface element. */
        MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {
            var el = evt.target;
            if (this.adapter.isElementInContainer(el)) {
                return;
            }
            this.close();
        };
        /** Handle keys that close the surface. */
        MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {
            var keyCode = evt.keyCode, key = evt.key;
            var isEscape = key === 'Escape' || keyCode === 27;
            if (isEscape) {
                this.close();
            }
        };
        MDCMenuSurfaceFoundation.prototype.autoposition = function () {
            var _a;
            // Compute measurements for autoposition methods reuse.
            this.measurements = this.getAutoLayoutmeasurements();
            var corner = this.getoriginCorner();
            var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
            var verticalAlignment = this.hasBit(corner, CornerBit.BOTTOM) ? 'bottom' : 'top';
            var horizontalAlignment = this.hasBit(corner, CornerBit.RIGHT) ? 'right' : 'left';
            var horizontalOffset = this.getHorizontalOriginOffset(corner);
            var verticalOffset = this.getVerticalOriginOffset(corner);
            var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
            var position = (_a = {},
                _a[horizontalAlignment] = horizontalOffset,
                _a[verticalAlignment] = verticalOffset,
                _a);
            // Center align when anchor width is comparable or greater than menu
            // surface, otherwise keep corner.
            if (anchorSize.width / surfaceSize.width >
                numbers$5.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
                horizontalAlignment = 'center';
            }
            // If the menu-surface has been hoisted to the body, it's no longer relative
            // to the anchor element
            if (this.isHoistedElement || this.isFixedPosition) {
                this.adjustPositionForHoistedElement(position);
            }
            this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
            this.adapter.setPosition(position);
            this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
            // If it is opened from the top then add is-open-below class
            if (!this.hasBit(corner, CornerBit.BOTTOM)) {
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
            }
        };
        /**
         * @return Measurements used to position menu surface popup.
         */
        MDCMenuSurfaceFoundation.prototype.getAutoLayoutmeasurements = function () {
            var anchorRect = this.adapter.getAnchorDimensions();
            var bodySize = this.adapter.getBodyDimensions();
            var viewportSize = this.adapter.getWindowDimensions();
            var windowScroll = this.adapter.getWindowScroll();
            if (!anchorRect) {
                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                anchorRect = {
                    top: this.position.y,
                    right: this.position.x,
                    bottom: this.position.y,
                    left: this.position.x,
                    width: 0,
                    height: 0,
                };
                // tslint:enable:object-literal-sort-keys
            }
            return {
                anchorSize: anchorRect,
                bodySize: bodySize,
                surfaceSize: this.dimensions,
                viewportDistance: {
                    // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                    top: anchorRect.top,
                    right: viewportSize.width - anchorRect.right,
                    bottom: viewportSize.height - anchorRect.bottom,
                    left: anchorRect.left,
                    // tslint:enable:object-literal-sort-keys
                },
                viewportSize: viewportSize,
                windowScroll: windowScroll,
            };
        };
        /**
         * Computes the corner of the anchor from which to animate and position the
         * menu surface.
         *
         * Only LEFT or RIGHT bit is used to position the menu surface ignoring RTL
         * context. E.g., menu surface will be positioned from right side on TOP_END.
         */
        MDCMenuSurfaceFoundation.prototype.getoriginCorner = function () {
            var corner = this.originCorner;
            var _a = this.measurements, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;
            var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
            var isAnchoredToBottom = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
            var availableTop;
            var availableBottom;
            if (isAnchoredToBottom) {
                availableTop =
                    viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;
                availableBottom =
                    viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
            }
            else {
                availableTop =
                    viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
                availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE +
                    anchorSize.height - this.anchorMargin.top;
            }
            var isAvailableBottom = availableBottom - surfaceSize.height > 0;
            if (!isAvailableBottom && availableTop > availableBottom) {
                // Attach bottom side of surface to the anchor.
                corner = this.setBit(corner, CornerBit.BOTTOM);
            }
            var isRtl = this.adapter.isRtl();
            var isFlipRtl = this.hasBit(this.anchorCorner, CornerBit.FLIP_RTL);
            var hasRightBit = this.hasBit(this.anchorCorner, CornerBit.RIGHT) ||
                this.hasBit(corner, CornerBit.RIGHT);
            // Whether surface attached to right side of anchor element.
            var isAnchoredToRight = false;
            // Anchored to start
            if (isRtl && isFlipRtl) {
                isAnchoredToRight = !hasRightBit;
            }
            else {
                // Anchored to right
                isAnchoredToRight = hasRightBit;
            }
            var availableLeft;
            var availableRight;
            if (isAnchoredToRight) {
                availableLeft =
                    viewportDistance.left + anchorSize.width + this.anchorMargin.right;
                availableRight = viewportDistance.right - this.anchorMargin.right;
            }
            else {
                availableLeft = viewportDistance.left + this.anchorMargin.left;
                availableRight =
                    viewportDistance.right + anchorSize.width - this.anchorMargin.left;
            }
            var isAvailableLeft = availableLeft - surfaceSize.width > 0;
            var isAvailableRight = availableRight - surfaceSize.width > 0;
            var isOriginCornerAlignedToEnd = this.hasBit(corner, CornerBit.FLIP_RTL) &&
                this.hasBit(corner, CornerBit.RIGHT);
            if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl ||
                !isAvailableLeft && isOriginCornerAlignedToEnd) {
                // Attach left side of surface to the anchor.
                corner = this.unsetBit(corner, CornerBit.RIGHT);
            }
            else if (isAvailableLeft && isAnchoredToRight && isRtl ||
                (isAvailableLeft && !isAnchoredToRight && hasRightBit) ||
                (!isAvailableRight && availableLeft >= availableRight)) {
                // Attach right side of surface to the anchor.
                corner = this.setBit(corner, CornerBit.RIGHT);
            }
            return corner;
        };
        /**
         * @param corner Origin corner of the menu surface.
         * @return Maximum height of the menu surface, based on available space. 0
         *     indicates should not be set.
         */
        MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight = function (corner) {
            if (this.maxHeight > 0) {
                return this.maxHeight;
            }
            var viewportDistance = this.measurements.viewportDistance;
            var maxHeight = 0;
            var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
            var isBottomAnchored = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
            var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
            // When maximum height is not specified, it is handled from CSS.
            if (isBottomAligned) {
                maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
                if (!isBottomAnchored) {
                    maxHeight += this.measurements.anchorSize.height;
                }
            }
            else {
                maxHeight = viewportDistance.bottom - this.anchorMargin.bottom +
                    this.measurements.anchorSize.height - MARGIN_TO_EDGE;
                if (isBottomAnchored) {
                    maxHeight -= this.measurements.anchorSize.height;
                }
            }
            return maxHeight;
        };
        /**
         * @param corner Origin corner of the menu surface.
         * @return Horizontal offset of menu surface origin corner from corresponding
         *     anchor corner.
         */
        MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset = function (corner) {
            var anchorSize = this.measurements.anchorSize;
            // isRightAligned corresponds to using the 'right' property on the surface.
            var isRightAligned = this.hasBit(corner, CornerBit.RIGHT);
            var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, CornerBit.RIGHT);
            if (isRightAligned) {
                var rightOffset = avoidHorizontalOverlap ?
                    anchorSize.width - this.anchorMargin.left :
                    this.anchorMargin.right;
                // For hoisted or fixed elements, adjust the offset by the difference
                // between viewport width and body width so when we calculate the right
                // value (`adjustPositionForHoistedElement`) based on the element
                // position, the right property is correct.
                if (this.isHoistedElement || this.isFixedPosition) {
                    return rightOffset -
                        (this.measurements.viewportSize.width -
                            this.measurements.bodySize.width);
                }
                return rightOffset;
            }
            return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right :
                this.anchorMargin.left;
        };
        /**
         * @param corner Origin corner of the menu surface.
         * @return Vertical offset of menu surface origin corner from corresponding
         *     anchor corner.
         */
        MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset = function (corner) {
            var anchorSize = this.measurements.anchorSize;
            var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
            var avoidVerticalOverlap = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
            var y = 0;
            if (isBottomAligned) {
                y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top :
                    -this.anchorMargin.bottom;
            }
            else {
                y = avoidVerticalOverlap ?
                    (anchorSize.height + this.anchorMargin.bottom) :
                    this.anchorMargin.top;
            }
            return y;
        };
        /**
         * Calculates the offsets for positioning the menu-surface when the
         * menu-surface has been hoisted to the body.
         */
        MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement = function (position) {
            var e_1, _a;
            var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;
            var props = Object.keys(position);
            try {
                for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    var value = position[prop] || 0;
                    if (this.isHorizontallyCenteredOnViewport &&
                        (prop === 'left' || prop === 'right')) {
                        position[prop] = (viewportSize.width - surfaceSize.width) / 2;
                        continue;
                    }
                    // Hoisted surfaces need to have the anchor elements location on the page
                    // added to the position properties for proper alignment on the body.
                    value += viewportDistance[prop];
                    // Surfaces that are absolutely positioned need to have additional
                    // calculations for scroll and bottom positioning.
                    if (!this.isFixedPosition) {
                        if (prop === 'top') {
                            value += windowScroll.y;
                        }
                        else if (prop === 'bottom') {
                            value -= windowScroll.y;
                        }
                        else if (prop === 'left') {
                            value += windowScroll.x;
                        }
                        else { // prop === 'right'
                            value -= windowScroll.x;
                        }
                    }
                    position[prop] = value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * The last focused element when the menu surface was opened should regain
         * focus, if the user is focused on or within the menu surface when it is
         * closed.
         */
        MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus = function () {
            var _this = this;
            var isRootFocused = this.adapter.isFocused();
            var childHasFocus = document.activeElement &&
                this.adapter.isElementInContainer(document.activeElement);
            if (isRootFocused || childHasFocus) {
                // Wait before restoring focus when closing the menu surface. This is
                // important because if a touch event triggered the menu close, and the
                // subsequent mouse event occurs after focus is restored, then the
                // restored focus would be lost.
                setTimeout(function () {
                    _this.adapter.restoreFocus();
                }, numbers$5.TOUCH_EVENT_WAIT_MS);
            }
        };
        MDCMenuSurfaceFoundation.prototype.hasBit = function (corner, bit) {
            return Boolean(corner & bit); // tslint:disable-line:no-bitwise
        };
        MDCMenuSurfaceFoundation.prototype.setBit = function (corner, bit) {
            return corner | bit; // tslint:disable-line:no-bitwise
        };
        MDCMenuSurfaceFoundation.prototype.unsetBit = function (corner, bit) {
            return corner ^ bit;
        };
        /**
         * isFinite that doesn't force conversion to number type.
         * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
         */
        MDCMenuSurfaceFoundation.prototype.isFinite = function (num) {
            return typeof num === 'number' && isFinite(num);
        };
        return MDCMenuSurfaceFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$7 = {
        MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
        MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
        ROOT: 'mdc-menu',
    };
    var strings$8 = {
        ARIA_CHECKED_ATTR: 'aria-checked',
        ARIA_DISABLED_ATTR: 'aria-disabled',
        CHECKBOX_SELECTOR: 'input[type="checkbox"]',
        LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',
        SELECTED_EVENT: 'MDCMenu:selected',
        SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus',
    };
    var numbers$3 = {
        FOCUS_ROOT_INDEX: -1,
    };
    var DefaultFocusState;
    (function (DefaultFocusState) {
        DefaultFocusState[DefaultFocusState["NONE"] = 0] = "NONE";
        DefaultFocusState[DefaultFocusState["LIST_ROOT"] = 1] = "LIST_ROOT";
        DefaultFocusState[DefaultFocusState["FIRST_ITEM"] = 2] = "FIRST_ITEM";
        DefaultFocusState[DefaultFocusState["LAST_ITEM"] = 3] = "LAST_ITEM";
    })(DefaultFocusState || (DefaultFocusState = {}));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCMenuFoundation = /** @class */ (function (_super) {
        __extends(MDCMenuFoundation, _super);
        function MDCMenuFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;
            _this.closeAnimationEndTimerId = 0;
            _this.defaultFocusState = DefaultFocusState.LIST_ROOT;
            _this.selectedIndex = -1;
            return _this;
        }
        Object.defineProperty(MDCMenuFoundation, "cssClasses", {
            get: function () {
                return cssClasses$7;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuFoundation, "strings", {
            get: function () {
                return strings$8;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuFoundation, "numbers", {
            get: function () {
                return numbers$3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
            /**
             * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClassToElementAtIndex: function () { return undefined; },
                    removeClassFromElementAtIndex: function () { return undefined; },
                    addAttributeToElementAtIndex: function () { return undefined; },
                    removeAttributeFromElementAtIndex: function () { return undefined; },
                    getAttributeFromElementAtIndex: function () { return null; },
                    elementContainsClass: function () { return false; },
                    closeSurface: function () { return undefined; },
                    getElementIndex: function () { return -1; },
                    notifySelected: function () { return undefined; },
                    getMenuItemCount: function () { return 0; },
                    focusItemAtIndex: function () { return undefined; },
                    focusListRoot: function () { return undefined; },
                    getSelectedSiblingOfItemAtIndex: function () { return -1; },
                    isSelectableItemAtIndex: function () { return false; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCMenuFoundation.prototype.destroy = function () {
            if (this.closeAnimationEndTimerId) {
                clearTimeout(this.closeAnimationEndTimerId);
            }
            this.adapter.closeSurface();
        };
        MDCMenuFoundation.prototype.handleKeydown = function (evt) {
            var key = evt.key, keyCode = evt.keyCode;
            var isTab = key === 'Tab' || keyCode === 9;
            if (isTab) {
                this.adapter.closeSurface(/** skipRestoreFocus */ true);
            }
        };
        MDCMenuFoundation.prototype.handleItemAction = function (listItem) {
            var _this = this;
            var index = this.adapter.getElementIndex(listItem);
            if (index < 0) {
                return;
            }
            this.adapter.notifySelected({ index: index });
            var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings$8.SKIP_RESTORE_FOCUS) === 'true';
            this.adapter.closeSurface(skipRestoreFocus);
            // Wait for the menu to close before adding/removing classes that affect styles.
            this.closeAnimationEndTimerId = setTimeout(function () {
                // Recompute the index in case the menu contents have changed.
                var recomputedIndex = _this.adapter.getElementIndex(listItem);
                if (recomputedIndex >= 0 &&
                    _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {
                    _this.setSelectedIndex(recomputedIndex);
                }
            }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
        };
        MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {
            switch (this.defaultFocusState) {
                case DefaultFocusState.FIRST_ITEM:
                    this.adapter.focusItemAtIndex(0);
                    break;
                case DefaultFocusState.LAST_ITEM:
                    this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
                    break;
                case DefaultFocusState.NONE:
                    // Do nothing.
                    break;
                default:
                    this.adapter.focusListRoot();
                    break;
            }
        };
        /**
         * Sets default focus state where the menu should focus every time when menu
         * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
         * default.
         */
        MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {
            this.defaultFocusState = focusState;
        };
        /** @return Index of the currently selected list item within the menu. */
        MDCMenuFoundation.prototype.getSelectedIndex = function () {
            return this.selectedIndex;
        };
        /**
         * Selects the list item at `index` within the menu.
         * @param index Index of list item within the menu.
         */
        MDCMenuFoundation.prototype.setSelectedIndex = function (index) {
            this.validatedIndex(index);
            if (!this.adapter.isSelectableItemAtIndex(index)) {
                throw new Error('MDCMenuFoundation: No selection group at specified index.');
            }
            var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
            if (prevSelectedIndex >= 0) {
                this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings$8.ARIA_CHECKED_ATTR);
                this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses$7.MENU_SELECTED_LIST_ITEM);
            }
            this.adapter.addClassToElementAtIndex(index, cssClasses$7.MENU_SELECTED_LIST_ITEM);
            this.adapter.addAttributeToElementAtIndex(index, strings$8.ARIA_CHECKED_ATTR, 'true');
            this.selectedIndex = index;
        };
        /**
         * Sets the enabled state to isEnabled for the menu item at the given index.
         * @param index Index of the menu item
         * @param isEnabled The desired enabled state of the menu item.
         */
        MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {
            this.validatedIndex(index);
            if (isEnabled) {
                this.adapter.removeClassFromElementAtIndex(index, cssClasses$8.LIST_ITEM_DISABLED_CLASS);
                this.adapter.addAttributeToElementAtIndex(index, strings$8.ARIA_DISABLED_ATTR, 'false');
            }
            else {
                this.adapter.addClassToElementAtIndex(index, cssClasses$8.LIST_ITEM_DISABLED_CLASS);
                this.adapter.addAttributeToElementAtIndex(index, strings$8.ARIA_DISABLED_ATTR, 'true');
            }
        };
        MDCMenuFoundation.prototype.validatedIndex = function (index) {
            var menuSize = this.adapter.getMenuItemCount();
            var isIndexInRange = index >= 0 && index < menuSize;
            if (!isIndexInRange) {
                throw new Error('MDCMenuFoundation: No list item at specified index.');
            }
        };
        return MDCMenuFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/menu-surface/dist/MenuSurface.svelte generated by Svelte v3.44.3 */

    const { document: document_1$1 } = globals;
    const file$W = "node_modules/@smui/menu-surface/dist/MenuSurface.svelte";

    function create_fragment$1h(ctx) {
    	let t;
    	let div;
    	let div_class_value;
    	let div_style_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[31].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[30], null);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[2]]: true,
    				'mdc-menu-surface': true,
    				'mdc-menu-surface--fixed': /*fixed*/ ctx[5],
    				'mdc-menu-surface--open': /*isStatic*/ ctx[4],
    				'smui-menu-surface--static': /*isStatic*/ ctx[4],
    				'mdc-menu-surface--fullwidth': /*fullWidth*/ ctx[7],
    				.../*internalClasses*/ ctx[10]
    			})
    		},
    		{
    			style: div_style_value = Object.entries(/*internalStyles*/ ctx[11]).map(func$6).concat([/*style*/ ctx[3]]).join(' ')
    		},
    		/*$$restProps*/ ctx[13]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			t = space();
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$W, 4, 0, 117);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[33](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(document_1$1.body, "click", /*click_handler*/ ctx[32], true, false, false),
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[1])),
    					action_destroyer(/*forwardEvents*/ ctx[12].call(null, div)),
    					listen_dev(div, "keydown", /*keydown_handler*/ ctx[34], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 1073741824)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[30],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[30])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[30], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty[0] & /*className, fixed, isStatic, fullWidth, internalClasses*/ 1204 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[2]]: true,
    					'mdc-menu-surface': true,
    					'mdc-menu-surface--fixed': /*fixed*/ ctx[5],
    					'mdc-menu-surface--open': /*isStatic*/ ctx[4],
    					'smui-menu-surface--static': /*isStatic*/ ctx[4],
    					'mdc-menu-surface--fullwidth': /*fullWidth*/ ctx[7],
    					.../*internalClasses*/ ctx[10]
    				}))) && { class: div_class_value },
    				(!current || dirty[0] & /*internalStyles, style*/ 2056 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[11]).map(func$6).concat([/*style*/ ctx[3]]).join(' '))) && { style: div_style_value },
    				dirty[0] & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[33](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$6 = ([name, value]) => `${name}: ${value};`;

    function instance_1$b($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","static","anchor","fixed","open","managed","fullWidth","quickOpen","anchorElement","anchorCorner","anchorMargin","maxHeight","horizontallyCenteredOnViewport","isOpen","setOpen","setAbsolutePosition","setIsHoisted","isFixed","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MenuSurface', slots, ['default']);
    	var _a, _b, _c;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { static: isStatic = false } = $$props;
    	let { anchor = true } = $$props;
    	let { fixed = false } = $$props;
    	let { open = isStatic } = $$props;
    	let { managed = false } = $$props;
    	let { fullWidth = false } = $$props;
    	let { quickOpen = false } = $$props;
    	let { anchorElement = undefined } = $$props;
    	let { anchorCorner = undefined } = $$props;
    	let { anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 } } = $$props;
    	let { maxHeight = 0 } = $$props;
    	let { horizontallyCenteredOnViewport = false } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};
    	let previousFocus = undefined;
    	setContext('SMUI:list:role', 'menu');
    	setContext('SMUI:list:item:role', 'menuitem');
    	const iCorner = Corner;

    	onMount(() => {
    		$$invalidate(9, instance = new MDCMenuSurfaceFoundation({
    				addClass,
    				removeClass,
    				hasClass,
    				hasAnchor: () => !!anchorElement,
    				notifyClose: () => {
    					if (!managed) {
    						$$invalidate(0, open = isStatic);
    					}

    					if (!open) {
    						dispatch(element, 'SMUIMenuSurface:closed', undefined, undefined, true);
    					}
    				},
    				notifyClosing: () => {
    					if (!managed) {
    						$$invalidate(0, open = isStatic);
    					}

    					if (!open) {
    						dispatch(element, 'SMUIMenuSurface:closing', undefined, undefined, true);
    					}
    				},
    				notifyOpen: () => {
    					if (!managed) {
    						$$invalidate(0, open = true);
    					}

    					if (open) {
    						dispatch(element, 'SMUIMenuSurface:opened', undefined, undefined, true);
    					}
    				},
    				isElementInContainer: el => element.contains(el),
    				isRtl: () => getComputedStyle(element).getPropertyValue('direction') === 'rtl',
    				setTransformOrigin: origin => {
    					$$invalidate(11, internalStyles['transform-origin'] = origin, internalStyles);
    				},
    				isFocused: () => document.activeElement === element,
    				saveFocus: () => {
    					var _a;

    					previousFocus = (_a = document.activeElement) !== null && _a !== void 0
    					? _a
    					: undefined;
    				},
    				restoreFocus: () => {
    					if ((!element || element.contains(document.activeElement)) && previousFocus && document.contains(previousFocus) && 'focus' in previousFocus) {
    						previousFocus.focus();
    					}
    				},
    				getInnerDimensions: () => {
    					return {
    						width: element.offsetWidth,
    						height: element.offsetHeight
    					};
    				},
    				getAnchorDimensions: () => anchorElement
    				? anchorElement.getBoundingClientRect()
    				: null,
    				getWindowDimensions: () => {
    					return {
    						width: window.innerWidth,
    						height: window.innerHeight
    					};
    				},
    				getBodyDimensions: () => {
    					return {
    						width: document.body.clientWidth,
    						height: document.body.clientHeight
    					};
    				},
    				getWindowScroll: () => {
    					return {
    						x: window.pageXOffset,
    						y: window.pageYOffset
    					};
    				},
    				setPosition: position => {
    					$$invalidate(11, internalStyles.left = 'left' in position ? `${position.left}px` : '', internalStyles);
    					$$invalidate(11, internalStyles.right = 'right' in position ? `${position.right}px` : '', internalStyles);
    					$$invalidate(11, internalStyles.top = 'top' in position ? `${position.top}px` : '', internalStyles);
    					$$invalidate(11, internalStyles.bottom = 'bottom' in position ? `${position.bottom}px` : '', internalStyles);
    				},
    				setMaxHeight: height => {
    					$$invalidate(11, internalStyles.maxHeight = height, internalStyles);
    				}
    			}));

    		const accessor = {
    			get open() {
    				return open;
    			},
    			set open(value) {
    				$$invalidate(0, open = value);
    			},
    			closeProgrammatic
    		};

    		dispatch(element, 'SMUIMenuSurface:mount', accessor);
    		instance.init();

    		return () => {
    			var _a;
    			const isHoisted = instance.isHoistedElement;
    			instance.destroy();

    			if (isHoisted) {
    				(_a = element.parentNode) === null || _a === void 0
    				? void 0
    				: _a.removeChild(element);
    			}
    		};
    	});

    	onDestroy(() => {
    		var _a;

    		if (anchor) {
    			element && ((_a = element.parentElement) === null || _a === void 0
    			? void 0
    			: _a.classList.remove('mdc-menu-surface--anchor'));
    		}
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(10, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(10, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function closeProgrammatic(skipRestoreFocus) {
    		instance.close(skipRestoreFocus);
    		$$invalidate(0, open = false);
    	}

    	function isOpen() {
    		return open;
    	}

    	function setOpen(value) {
    		$$invalidate(0, open = value);
    	}

    	function setAbsolutePosition(x, y) {
    		return instance.setAbsolutePosition(x, y);
    	}

    	function setIsHoisted(isHoisted) {
    		return instance.setIsHoisted(isHoisted);
    	}

    	function isFixed() {
    		return instance.isFixed();
    	}

    	function getElement() {
    		return element;
    	}

    	const click_handler = event => instance && open && !managed && instance.handleBodyClick(event);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(8, element);
    		});
    	}

    	const keydown_handler = event => instance && instance.handleKeydown(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
    		if ('static' in $$new_props) $$invalidate(4, isStatic = $$new_props.static);
    		if ('anchor' in $$new_props) $$invalidate(15, anchor = $$new_props.anchor);
    		if ('fixed' in $$new_props) $$invalidate(5, fixed = $$new_props.fixed);
    		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
    		if ('managed' in $$new_props) $$invalidate(6, managed = $$new_props.managed);
    		if ('fullWidth' in $$new_props) $$invalidate(7, fullWidth = $$new_props.fullWidth);
    		if ('quickOpen' in $$new_props) $$invalidate(16, quickOpen = $$new_props.quickOpen);
    		if ('anchorElement' in $$new_props) $$invalidate(14, anchorElement = $$new_props.anchorElement);
    		if ('anchorCorner' in $$new_props) $$invalidate(17, anchorCorner = $$new_props.anchorCorner);
    		if ('anchorMargin' in $$new_props) $$invalidate(18, anchorMargin = $$new_props.anchorMargin);
    		if ('maxHeight' in $$new_props) $$invalidate(19, maxHeight = $$new_props.maxHeight);
    		if ('horizontallyCenteredOnViewport' in $$new_props) $$invalidate(20, horizontallyCenteredOnViewport = $$new_props.horizontallyCenteredOnViewport);
    		if ('$$scope' in $$new_props) $$invalidate(30, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		_b,
    		_c,
    		MDCMenuSurfaceFoundation,
    		onMount,
    		onDestroy,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		Corner,
    		forwardEvents,
    		use,
    		className,
    		style,
    		isStatic,
    		anchor,
    		fixed,
    		open,
    		managed,
    		fullWidth,
    		quickOpen,
    		anchorElement,
    		anchorCorner,
    		anchorMargin,
    		maxHeight,
    		horizontallyCenteredOnViewport,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		previousFocus,
    		iCorner,
    		hasClass,
    		addClass,
    		removeClass,
    		closeProgrammatic,
    		isOpen,
    		setOpen,
    		setAbsolutePosition,
    		setIsHoisted,
    		isFixed,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) $$invalidate(27, _a = $$new_props._a);
    		if ('_b' in $$props) $$invalidate(28, _b = $$new_props._b);
    		if ('_c' in $$props) $$invalidate(29, _c = $$new_props._c);
    		if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(3, style = $$new_props.style);
    		if ('isStatic' in $$props) $$invalidate(4, isStatic = $$new_props.isStatic);
    		if ('anchor' in $$props) $$invalidate(15, anchor = $$new_props.anchor);
    		if ('fixed' in $$props) $$invalidate(5, fixed = $$new_props.fixed);
    		if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
    		if ('managed' in $$props) $$invalidate(6, managed = $$new_props.managed);
    		if ('fullWidth' in $$props) $$invalidate(7, fullWidth = $$new_props.fullWidth);
    		if ('quickOpen' in $$props) $$invalidate(16, quickOpen = $$new_props.quickOpen);
    		if ('anchorElement' in $$props) $$invalidate(14, anchorElement = $$new_props.anchorElement);
    		if ('anchorCorner' in $$props) $$invalidate(17, anchorCorner = $$new_props.anchorCorner);
    		if ('anchorMargin' in $$props) $$invalidate(18, anchorMargin = $$new_props.anchorMargin);
    		if ('maxHeight' in $$props) $$invalidate(19, maxHeight = $$new_props.maxHeight);
    		if ('horizontallyCenteredOnViewport' in $$props) $$invalidate(20, horizontallyCenteredOnViewport = $$new_props.horizontallyCenteredOnViewport);
    		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(9, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(10, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(11, internalStyles = $$new_props.internalStyles);
    		if ('previousFocus' in $$props) previousFocus = $$new_props.previousFocus;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*element, anchor, _a, _b, _c*/ 939557120) {
    			if (element && anchor && !($$invalidate(27, _a = element.parentElement) === null || _a === void 0
    			? void 0
    			: _a.classList.contains('mdc-menu-surface--anchor'))) {
    				$$invalidate(28, _b = element.parentElement) === null || _b === void 0
    				? void 0
    				: _b.classList.add('mdc-menu-surface--anchor');

    				$$invalidate(14, anchorElement = $$invalidate(29, _c = element.parentElement) !== null && _c !== void 0
    				? _c
    				: undefined);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, open*/ 513) {
    			if (instance && instance.isOpen() !== open) {
    				if (open) {
    					instance.open();
    				} else {
    					instance.close();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, quickOpen*/ 66048) {
    			if (instance) {
    				instance.setQuickOpen(quickOpen);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, fixed*/ 544) {
    			if (instance) {
    				instance.setFixedPosition(fixed);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, maxHeight*/ 524800) {
    			if (instance && maxHeight > 0) {
    				instance.setMaxHeight(maxHeight);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, horizontallyCenteredOnViewport*/ 1049088) {
    			if (instance) {
    				instance.setIsHorizontallyCenteredOnViewport(horizontallyCenteredOnViewport);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, anchorCorner*/ 131584) {
    			if (instance && anchorCorner != null) {
    				if (typeof anchorCorner === 'string') {
    					instance.setAnchorCorner(iCorner[anchorCorner]);
    				} else {
    					instance.setAnchorCorner(anchorCorner);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, anchorMargin*/ 262656) {
    			if (instance) {
    				instance.setAnchorMargin(anchorMargin);
    			}
    		}
    	};

    	return [
    		open,
    		use,
    		className,
    		style,
    		isStatic,
    		fixed,
    		managed,
    		fullWidth,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		forwardEvents,
    		$$restProps,
    		anchorElement,
    		anchor,
    		quickOpen,
    		anchorCorner,
    		anchorMargin,
    		maxHeight,
    		horizontallyCenteredOnViewport,
    		isOpen,
    		setOpen,
    		setAbsolutePosition,
    		setIsHoisted,
    		isFixed,
    		getElement,
    		_a,
    		_b,
    		_c,
    		$$scope,
    		slots,
    		click_handler,
    		div_binding,
    		keydown_handler
    	];
    }

    class MenuSurface extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$b,
    			create_fragment$1h,
    			safe_not_equal,
    			{
    				use: 1,
    				class: 2,
    				style: 3,
    				static: 4,
    				anchor: 15,
    				fixed: 5,
    				open: 0,
    				managed: 6,
    				fullWidth: 7,
    				quickOpen: 16,
    				anchorElement: 14,
    				anchorCorner: 17,
    				anchorMargin: 18,
    				maxHeight: 19,
    				horizontallyCenteredOnViewport: 20,
    				isOpen: 21,
    				setOpen: 22,
    				setAbsolutePosition: 23,
    				setIsHoisted: 24,
    				isFixed: 25,
    				getElement: 26
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MenuSurface",
    			options,
    			id: create_fragment$1h.name
    		});
    	}

    	get use() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get static() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set static(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchor() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchor(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get managed() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set managed(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullWidth() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullWidth(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get quickOpen() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set quickOpen(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorElement() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorElement(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorCorner() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorCorner(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorMargin() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorMargin(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxHeight() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxHeight(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get horizontallyCenteredOnViewport() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set horizontallyCenteredOnViewport(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		return this.$$.ctx[21];
    	}

    	set isOpen(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setOpen() {
    		return this.$$.ctx[22];
    	}

    	set setOpen(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAbsolutePosition() {
    		return this.$$.ctx[23];
    	}

    	set setAbsolutePosition(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setIsHoisted() {
    		return this.$$.ctx[24];
    	}

    	set setIsHoisted(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFixed() {
    		return this.$$.ctx[25];
    	}

    	set isFixed(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[26];
    	}

    	set getElement(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function Anchor(node, { addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className), } = {}) {
        addClass('mdc-menu-surface--anchor');
        return {
            destroy() {
                removeClass('mdc-menu-surface--anchor');
            },
        };
    }

    /* node_modules/@smui/menu/dist/Menu.svelte generated by Svelte v3.44.3 */

    // (1:0) <MenuSurface   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'mdc-menu': true,   })}   bind:open   on:SMUIMenuSurface:mount={handleMenuSurfaceAccessor}   on:SMUIList:mount={handleListAccessor}   on:SMUIMenuSurface:opened={() =>     instance && instance.handleMenuSurfaceOpened()}   on:keydown={handleKeydown}   on:SMUIList:action={(event) =>     instance &&     instance.handleItemAction(       listAccessor.getOrderedList()[event.detail.index].element     )}   {...$$restProps}>
    function create_default_slot$M(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$M.name,
    		type: "slot",
    		source: "(1:0) <MenuSurface   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'mdc-menu': true,   })}   bind:open   on:SMUIMenuSurface:mount={handleMenuSurfaceAccessor}   on:SMUIList:mount={handleListAccessor}   on:SMUIMenuSurface:opened={() =>     instance && instance.handleMenuSurfaceOpened()}   on:keydown={handleKeydown}   on:SMUIList:action={(event) =>     instance &&     instance.handleItemAction(       listAccessor.getOrderedList()[event.detail.index].element     )}   {...$$restProps}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1g(ctx) {
    	let menusurface;
    	let updating_open;
    	let current;

    	const menusurface_spread_levels = [
    		{ use: /*usePass*/ ctx[5] },
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-menu': true
    			})
    		},
    		/*$$restProps*/ ctx[9]
    	];

    	function menusurface_open_binding(value) {
    		/*menusurface_open_binding*/ ctx[18](value);
    	}

    	let menusurface_props = {
    		$$slots: { default: [create_default_slot$M] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < menusurface_spread_levels.length; i += 1) {
    		menusurface_props = assign(menusurface_props, menusurface_spread_levels[i]);
    	}

    	if (/*open*/ ctx[0] !== void 0) {
    		menusurface_props.open = /*open*/ ctx[0];
    	}

    	menusurface = new MenuSurface({ props: menusurface_props, $$inline: true });
    	/*menusurface_binding*/ ctx[17](menusurface);
    	binding_callbacks.push(() => bind(menusurface, 'open', menusurface_open_binding));
    	menusurface.$on("SMUIMenuSurface:mount", /*handleMenuSurfaceAccessor*/ ctx[7]);
    	menusurface.$on("SMUIList:mount", /*handleListAccessor*/ ctx[8]);
    	menusurface.$on("SMUIMenuSurface:opened", /*SMUIMenuSurface_opened_handler*/ ctx[19]);
    	menusurface.$on("keydown", /*handleKeydown*/ ctx[6]);
    	menusurface.$on("SMUIList:action", /*SMUIList_action_handler*/ ctx[20]);

    	const block = {
    		c: function create() {
    			create_component(menusurface.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(menusurface, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const menusurface_changes = (dirty & /*usePass, classMap, className, $$restProps*/ 546)
    			? get_spread_update(menusurface_spread_levels, [
    					dirty & /*usePass*/ 32 && { use: /*usePass*/ ctx[5] },
    					dirty & /*classMap, className*/ 2 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-menu': true
    						})
    					},
    					dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9])
    				])
    			: {};

    			if (dirty & /*$$scope*/ 2097152) {
    				menusurface_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_open && dirty & /*open*/ 1) {
    				updating_open = true;
    				menusurface_changes.open = /*open*/ ctx[0];
    				add_flush_callback(() => updating_open = false);
    			}

    			menusurface.$set(menusurface_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menusurface.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menusurface.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*menusurface_binding*/ ctx[17](null);
    			destroy_component(menusurface, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance_1$a($$self, $$props, $$invalidate) {
    	let usePass;

    	const omit_props_names = [
    		"use","class","open","isOpen","setOpen","setDefaultFocusState","getSelectedIndex","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Menu', slots, ['default']);
    	const { closest } = ponyfill;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { open = false } = $$props;
    	let element;
    	let instance;
    	let menuSurfaceAccessor;
    	let listAccessor;

    	onMount(() => {
    		$$invalidate(3, instance = new MDCMenuFoundation({
    				addClassToElementAtIndex: (index, className) => {
    					listAccessor.addClassForElementIndex(index, className);
    				},
    				removeClassFromElementAtIndex: (index, className) => {
    					listAccessor.removeClassForElementIndex(index, className);
    				},
    				addAttributeToElementAtIndex: (index, attr, value) => {
    					listAccessor.setAttributeForElementIndex(index, attr, value);
    				},
    				removeAttributeFromElementAtIndex: (index, attr) => {
    					listAccessor.removeAttributeForElementIndex(index, attr);
    				},
    				getAttributeFromElementAtIndex: (index, attr) => listAccessor.getAttributeFromElementIndex(index, attr),
    				elementContainsClass: (element, className) => element.classList.contains(className),
    				closeSurface: skipRestoreFocus => menuSurfaceAccessor.closeProgrammatic(skipRestoreFocus),
    				getElementIndex: element => listAccessor.getOrderedList().map(accessor => accessor.element).indexOf(element),
    				notifySelected: evtData => dispatch(
    					getElement(),
    					'SMUIMenu:selected',
    					{
    						index: evtData.index,
    						item: listAccessor.getOrderedList()[evtData.index].element
    					},
    					undefined,
    					true
    				),
    				getMenuItemCount: () => listAccessor.items.length,
    				focusItemAtIndex: index => listAccessor.focusItemAtIndex(index),
    				focusListRoot: () => 'focus' in listAccessor.element && listAccessor.element.focus(),
    				isSelectableItemAtIndex: index => !!closest(listAccessor.getOrderedList()[index].element, `.${cssClasses$7.MENU_SELECTION_GROUP}`),
    				getSelectedSiblingOfItemAtIndex: index => {
    					const orderedList = listAccessor.getOrderedList();
    					const selectionGroupEl = closest(orderedList[index].element, `.${cssClasses$7.MENU_SELECTION_GROUP}`);

    					const selectedItemEl = selectionGroupEl === null || selectionGroupEl === void 0
    					? void 0
    					: selectionGroupEl.querySelector(`.${cssClasses$7.MENU_SELECTED_LIST_ITEM}`);

    					return selectedItemEl
    					? orderedList.map(item => item.element).indexOf(selectedItemEl)
    					: -1;
    				}
    			}));

    		dispatch(getElement(), 'SMUIMenu:mount', instance);
    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function handleKeydown(event) {
    		instance && instance.handleKeydown(event);
    	}

    	function handleMenuSurfaceAccessor(event) {
    		if (!menuSurfaceAccessor) {
    			menuSurfaceAccessor = event.detail;
    		}
    	}

    	function handleListAccessor(event) {
    		if (!listAccessor) {
    			$$invalidate(4, listAccessor = event.detail);
    		}
    	}

    	function isOpen() {
    		return open;
    	}

    	function setOpen(value) {
    		$$invalidate(0, open = value);
    	}

    	function setDefaultFocusState(focusState) {
    		instance.setDefaultFocusState(focusState);
    	}

    	function getSelectedIndex() {
    		return instance.getSelectedIndex();
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function menusurface_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	function menusurface_open_binding(value) {
    		open = value;
    		$$invalidate(0, open);
    	}

    	const SMUIMenuSurface_opened_handler = () => instance && instance.handleMenuSurfaceOpened();
    	const SMUIList_action_handler = event => instance && instance.handleItemAction(listAccessor.getOrderedList()[event.detail.index].element);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(10, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
    		if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCMenuFoundation,
    		cssClasses: cssClasses$7,
    		ponyfill,
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		dispatch,
    		MenuSurface,
    		closest,
    		forwardEvents,
    		use,
    		className,
    		open,
    		element,
    		instance,
    		menuSurfaceAccessor,
    		listAccessor,
    		handleKeydown,
    		handleMenuSurfaceAccessor,
    		handleListAccessor,
    		isOpen,
    		setOpen,
    		setDefaultFocusState,
    		getSelectedIndex,
    		getElement,
    		usePass
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(10, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
    		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(3, instance = $$new_props.instance);
    		if ('menuSurfaceAccessor' in $$props) menuSurfaceAccessor = $$new_props.menuSurfaceAccessor;
    		if ('listAccessor' in $$props) $$invalidate(4, listAccessor = $$new_props.listAccessor);
    		if ('usePass' in $$props) $$invalidate(5, usePass = $$new_props.usePass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*use*/ 1024) {
    			$$invalidate(5, usePass = [forwardEvents, ...use]);
    		}
    	};

    	return [
    		open,
    		className,
    		element,
    		instance,
    		listAccessor,
    		usePass,
    		handleKeydown,
    		handleMenuSurfaceAccessor,
    		handleListAccessor,
    		$$restProps,
    		use,
    		isOpen,
    		setOpen,
    		setDefaultFocusState,
    		getSelectedIndex,
    		getElement,
    		slots,
    		menusurface_binding,
    		menusurface_open_binding,
    		SMUIMenuSurface_opened_handler,
    		SMUIList_action_handler,
    		$$scope
    	];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$a, create_fragment$1g, safe_not_equal, {
    			use: 10,
    			class: 1,
    			open: 0,
    			isOpen: 11,
    			setOpen: 12,
    			setDefaultFocusState: 13,
    			getSelectedIndex: 14,
    			getElement: 15
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$1g.name
    		});
    	}

    	get use() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		return this.$$.ctx[11];
    	}

    	set isOpen(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setOpen() {
    		return this.$$.ctx[12];
    	}

    	set setOpen(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setDefaultFocusState() {
    		return this.$$.ctx[13];
    	}

    	set setDefaultFocusState(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectedIndex() {
    		return this.$$.ctx[14];
    	}

    	set getSelectedIndex(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[15];
    	}

    	set getElement(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/list/dist/List.svelte generated by Svelte v3.44.3 */

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-deprecated-list': true,     'mdc-deprecated-list--non-interactive': nonInteractive,     'mdc-deprecated-list--dense': dense,     'mdc-deprecated-list--textual-list': textualList,     'mdc-deprecated-list--avatar-list': avatarList || selectionDialog,     'mdc-deprecated-list--icon-list': iconList,     'mdc-deprecated-list--image-list': imageList,     'mdc-deprecated-list--thumbnail-list': thumbnailList,     'mdc-deprecated-list--video-list': videoList,     'mdc-deprecated-list--two-line': twoLine,     'smui-list--three-line': threeLine && !twoLine,   })}   {role}   on:keydown={(event) =>     instance &&     instance.handleKeydown(       event,       event.target.classList.contains('mdc-deprecated-list-item'),       getListItemIndex(event.target)     )}   on:focusin={(event) =>     instance && instance.handleFocusIn(getListItemIndex(event.target))}   on:focusout={(event) =>     instance && instance.handleFocusOut(getListItemIndex(event.target))}   on:click={(event) =>     instance &&     instance.handleClick(       getListItemIndex(event.target),       !matches(event.target, 'input[type="checkbox"], input[type="radio"]')     )}   on:SMUIListItem:mount={handleItemMount}   on:SMUIListItem:unmount={handleItemUnmount}   on:SMUI:action={handleAction}   {...$$restProps} >
    function create_default_slot$L(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[37].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[43],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[43], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$L.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-deprecated-list': true,     'mdc-deprecated-list--non-interactive': nonInteractive,     'mdc-deprecated-list--dense': dense,     'mdc-deprecated-list--textual-list': textualList,     'mdc-deprecated-list--avatar-list': avatarList || selectionDialog,     'mdc-deprecated-list--icon-list': iconList,     'mdc-deprecated-list--image-list': imageList,     'mdc-deprecated-list--thumbnail-list': thumbnailList,     'mdc-deprecated-list--video-list': videoList,     'mdc-deprecated-list--two-line': twoLine,     'smui-list--three-line': threeLine && !twoLine,   })}   {role}   on:keydown={(event) =>     instance &&     instance.handleKeydown(       event,       event.target.classList.contains('mdc-deprecated-list-item'),       getListItemIndex(event.target)     )}   on:focusin={(event) =>     instance && instance.handleFocusIn(getListItemIndex(event.target))}   on:focusout={(event) =>     instance && instance.handleFocusOut(getListItemIndex(event.target))}   on:click={(event) =>     instance &&     instance.handleClick(       getListItemIndex(event.target),       !matches(event.target, 'input[type=\\\"checkbox\\\"], input[type=\\\"radio\\\"]')     )}   on:SMUIListItem:mount={handleItemMount}   on:SMUIListItem:unmount={handleItemUnmount}   on:SMUI:action={handleAction}   {...$$restProps} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1f(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[17], .../*use*/ ctx[0]]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-deprecated-list': true,
    				'mdc-deprecated-list--non-interactive': /*nonInteractive*/ ctx[2],
    				'mdc-deprecated-list--dense': /*dense*/ ctx[3],
    				'mdc-deprecated-list--textual-list': /*textualList*/ ctx[4],
    				'mdc-deprecated-list--avatar-list': /*avatarList*/ ctx[5] || /*selectionDialog*/ ctx[18],
    				'mdc-deprecated-list--icon-list': /*iconList*/ ctx[6],
    				'mdc-deprecated-list--image-list': /*imageList*/ ctx[7],
    				'mdc-deprecated-list--thumbnail-list': /*thumbnailList*/ ctx[8],
    				'mdc-deprecated-list--video-list': /*videoList*/ ctx[9],
    				'mdc-deprecated-list--two-line': /*twoLine*/ ctx[10],
    				'smui-list--three-line': /*threeLine*/ ctx[11] && !/*twoLine*/ ctx[10]
    			})
    		},
    		{ role: /*role*/ ctx[15] },
    		/*$$restProps*/ ctx[23]
    	];

    	var switch_value = /*component*/ ctx[12];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$L] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[38](switch_instance);
    		switch_instance.$on("keydown", /*keydown_handler*/ ctx[39]);
    		switch_instance.$on("focusin", /*focusin_handler*/ ctx[40]);
    		switch_instance.$on("focusout", /*focusout_handler*/ ctx[41]);
    		switch_instance.$on("click", /*click_handler*/ ctx[42]);
    		switch_instance.$on("SMUIListItem:mount", /*handleItemMount*/ ctx[19]);
    		switch_instance.$on("SMUIListItem:unmount", /*handleItemUnmount*/ ctx[20]);
    		switch_instance.$on("SMUI:action", /*handleAction*/ ctx[21]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*forwardEvents, use, className, nonInteractive, dense, textualList, avatarList, selectionDialog, iconList, imageList, thumbnailList, videoList, twoLine, threeLine, role, $$restProps*/ 8818687)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty[0] & /*forwardEvents, use*/ 131073 && {
    						use: [/*forwardEvents*/ ctx[17], .../*use*/ ctx[0]]
    					},
    					dirty[0] & /*className, nonInteractive, dense, textualList, avatarList, selectionDialog, iconList, imageList, thumbnailList, videoList, twoLine, threeLine*/ 266238 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-deprecated-list': true,
    							'mdc-deprecated-list--non-interactive': /*nonInteractive*/ ctx[2],
    							'mdc-deprecated-list--dense': /*dense*/ ctx[3],
    							'mdc-deprecated-list--textual-list': /*textualList*/ ctx[4],
    							'mdc-deprecated-list--avatar-list': /*avatarList*/ ctx[5] || /*selectionDialog*/ ctx[18],
    							'mdc-deprecated-list--icon-list': /*iconList*/ ctx[6],
    							'mdc-deprecated-list--image-list': /*imageList*/ ctx[7],
    							'mdc-deprecated-list--thumbnail-list': /*thumbnailList*/ ctx[8],
    							'mdc-deprecated-list--video-list': /*videoList*/ ctx[9],
    							'mdc-deprecated-list--two-line': /*twoLine*/ ctx[10],
    							'smui-list--three-line': /*threeLine*/ ctx[11] && !/*twoLine*/ ctx[10]
    						})
    					},
    					dirty[0] & /*role*/ 32768 && { role: /*role*/ ctx[15] },
    					dirty[0] & /*$$restProps*/ 8388608 && get_spread_object(/*$$restProps*/ ctx[23])
    				])
    			: {};

    			if (dirty[1] & /*$$scope*/ 4096) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[12])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[38](switch_instance);
    					switch_instance.$on("keydown", /*keydown_handler*/ ctx[39]);
    					switch_instance.$on("focusin", /*focusin_handler*/ ctx[40]);
    					switch_instance.$on("focusout", /*focusout_handler*/ ctx[41]);
    					switch_instance.$on("click", /*click_handler*/ ctx[42]);
    					switch_instance.$on("SMUIListItem:mount", /*handleItemMount*/ ctx[19]);
    					switch_instance.$on("SMUIListItem:unmount", /*handleItemUnmount*/ ctx[20]);
    					switch_instance.$on("SMUI:action", /*handleAction*/ ctx[21]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[38](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance_1$9($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","nonInteractive","dense","textualList","avatarList","iconList","imageList","thumbnailList","videoList","twoLine","threeLine","vertical","wrapFocus","singleSelection","selectedIndex","radioList","checkList","hasTypeahead","component","layout","setEnabled","getTypeaheadInProgress","getSelectedIndex","getFocusedItemIndex","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('List', slots, ['default']);
    	var _a;
    	const { closest, matches } = ponyfill;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { nonInteractive = false } = $$props;
    	let { dense = false } = $$props;
    	let { textualList = false } = $$props;
    	let { avatarList = false } = $$props;
    	let { iconList = false } = $$props;
    	let { imageList = false } = $$props;
    	let { thumbnailList = false } = $$props;
    	let { videoList = false } = $$props;
    	let { twoLine = false } = $$props;
    	let { threeLine = false } = $$props;
    	let { vertical = true } = $$props;

    	let { wrapFocus = (_a = getContext('SMUI:list:wrapFocus')) !== null && _a !== void 0
    	? _a
    	: false } = $$props;

    	let { singleSelection = false } = $$props;
    	let { selectedIndex = -1 } = $$props;
    	let { radioList = false } = $$props;
    	let { checkList = false } = $$props;
    	let { hasTypeahead = false } = $$props;
    	let element;
    	let instance;
    	let items = [];
    	let role = getContext('SMUI:list:role');
    	let nav = getContext('SMUI:list:nav');
    	const itemAccessorMap = new WeakMap();
    	let selectionDialog = getContext('SMUI:dialog:selection');
    	let addLayoutListener = getContext('SMUI:addLayoutListener');
    	let removeLayoutListener;
    	let { component = nav ? Nav : Ul } = $$props;
    	setContext('SMUI:list:nonInteractive', nonInteractive);
    	setContext('SMUI:separator:context', 'list');

    	if (!role) {
    		if (singleSelection) {
    			role = 'listbox';
    			setContext('SMUI:list:item:role', 'option');
    		} else if (radioList) {
    			role = 'radiogroup';
    			setContext('SMUI:list:item:role', 'radio');
    		} else if (checkList) {
    			role = 'group';
    			setContext('SMUI:list:item:role', 'checkbox');
    		} else {
    			role = 'list';
    			setContext('SMUI:list:item:role', undefined);
    		}
    	}

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	onMount(() => {
    		$$invalidate(13, instance = new MDCListFoundation({
    				addClassForElementIndex,
    				focusItemAtIndex,
    				getAttributeForElementIndex: (index, name) => {
    					var _a, _b;

    					return (_b = (_a = getOrderedList()[index]) === null || _a === void 0
    					? void 0
    					: _a.getAttr(name)) !== null && _b !== void 0
    					? _b
    					: null;
    				},
    				getFocusedElementIndex: () => document.activeElement
    				? getOrderedList().map(accessor => accessor.element).indexOf(document.activeElement)
    				: -1,
    				getListItemCount: () => items.length,
    				getPrimaryTextAtIndex,
    				hasCheckboxAtIndex: index => {
    					var _a, _b;

    					return (_b = (_a = getOrderedList()[index]) === null || _a === void 0
    					? void 0
    					: _a.hasCheckbox) !== null && _b !== void 0
    					? _b
    					: false;
    				},
    				hasRadioAtIndex: index => {
    					var _a, _b;

    					return (_b = (_a = getOrderedList()[index]) === null || _a === void 0
    					? void 0
    					: _a.hasRadio) !== null && _b !== void 0
    					? _b
    					: false;
    				},
    				isCheckboxCheckedAtIndex: index => {
    					var _a;
    					const listItem = getOrderedList()[index];

    					return (_a = (listItem === null || listItem === void 0
    					? void 0
    					: listItem.hasCheckbox) && listItem.checked) !== null && _a !== void 0
    					? _a
    					: false;
    				},
    				isFocusInsideList: () => element != null && getElement() !== document.activeElement && getElement().contains(document.activeElement),
    				isRootFocused: () => element != null && document.activeElement === getElement(),
    				listItemAtIndexHasClass,
    				notifyAction: index => {
    					$$invalidate(24, selectedIndex = index);

    					if (element != null) {
    						dispatch(getElement(), 'SMUIList:action', { index }, undefined, true);
    					}
    				},
    				removeClassForElementIndex,
    				setAttributeForElementIndex,
    				setCheckedCheckboxOrRadioAtIndex: (index, isChecked) => {
    					getOrderedList()[index].checked = isChecked;
    				},
    				setTabIndexForListItemChildren: (listItemIndex, tabIndexValue) => {
    					const listItem = getOrderedList()[listItemIndex];
    					const selector = 'button:not(:disabled), a';

    					Array.prototype.forEach.call(listItem.element.querySelectorAll(selector), el => {
    						el.setAttribute('tabindex', tabIndexValue);
    					});
    				}
    			}));

    		const accessor = {
    			get element() {
    				return getElement();
    			},
    			get items() {
    				return items;
    			},
    			get typeaheadInProgress() {
    				return instance.isTypeaheadInProgress();
    			},
    			typeaheadMatchItem(nextChar, startingIndex) {
    				return instance.typeaheadMatchItem(nextChar, startingIndex, /** skipFocus */
    				true);
    			},
    			getOrderedList,
    			focusItemAtIndex,
    			addClassForElementIndex,
    			removeClassForElementIndex,
    			setAttributeForElementIndex,
    			removeAttributeForElementIndex,
    			getAttributeFromElementIndex,
    			getPrimaryTextAtIndex
    		};

    		dispatch(getElement(), 'SMUIList:mount', accessor);
    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	onDestroy(() => {
    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function handleItemMount(event) {
    		items.push(event.detail);
    		itemAccessorMap.set(event.detail.element, event.detail);

    		if (singleSelection && event.detail.selected) {
    			$$invalidate(24, selectedIndex = getListItemIndex(event.detail.element));
    		}

    		event.stopPropagation();
    	}

    	function handleItemUnmount(event) {
    		var _a;

    		const idx = (_a = event.detail && items.indexOf(event.detail)) !== null && _a !== void 0
    		? _a
    		: -1;

    		if (idx !== -1) {
    			items.splice(idx, 1);
    			items = items;
    			itemAccessorMap.delete(event.detail.element);
    		}

    		event.stopPropagation();
    	}

    	function handleAction(event) {
    		if (radioList || checkList) {
    			const index = getListItemIndex(event.target);

    			if (index !== -1) {
    				const item = getOrderedList()[index];

    				if (item && (radioList && !item.checked || checkList)) {
    					item.checked = !item.checked;
    					item.activateRipple();

    					window.requestAnimationFrame(() => {
    						item.deactivateRipple();
    					});
    				}
    			}
    		}
    	}

    	function getOrderedList() {
    		if (element == null) {
    			return [];
    		}

    		return [...getElement().children].map(element => itemAccessorMap.get(element)).filter(accessor => accessor && accessor._smui_list_item_accessor);
    	}

    	function focusItemAtIndex(index) {
    		const accessor = getOrderedList()[index];
    		accessor && 'focus' in accessor.element && accessor.element.focus();
    	}

    	function listItemAtIndexHasClass(index, className) {
    		var _a;
    		const accessor = getOrderedList()[index];

    		return (_a = accessor && accessor.hasClass(className)) !== null && _a !== void 0
    		? _a
    		: false;
    	}

    	function addClassForElementIndex(index, className) {
    		const accessor = getOrderedList()[index];
    		accessor && accessor.addClass(className);
    	}

    	function removeClassForElementIndex(index, className) {
    		const accessor = getOrderedList()[index];
    		accessor && accessor.removeClass(className);
    	}

    	function setAttributeForElementIndex(index, name, value) {
    		const accessor = getOrderedList()[index];
    		accessor && accessor.addAttr(name, value);
    	}

    	function removeAttributeForElementIndex(index, name) {
    		const accessor = getOrderedList()[index];
    		accessor && accessor.removeAttr(name);
    	}

    	function getAttributeFromElementIndex(index, name) {
    		const accessor = getOrderedList()[index];

    		if (accessor) {
    			return accessor.getAttr(name);
    		} else {
    			return null;
    		}
    	}

    	function getPrimaryTextAtIndex(index) {
    		var _a;
    		const accessor = getOrderedList()[index];

    		return (_a = accessor && accessor.getPrimaryText()) !== null && _a !== void 0
    		? _a
    		: '';
    	}

    	function getListItemIndex(element) {
    		const nearestParent = closest(element, '.mdc-deprecated-list-item, .mdc-deprecated-list');

    		// Get the index of the element if it is a list item.
    		if (nearestParent && matches(nearestParent, '.mdc-deprecated-list-item')) {
    			return getOrderedList().map(item => item === null || item === void 0 ? void 0 : item.element).indexOf(nearestParent);
    		}

    		return -1;
    	}

    	function layout() {
    		return instance.layout();
    	}

    	function setEnabled(itemIndex, isEnabled) {
    		return instance.setEnabled(itemIndex, isEnabled);
    	}

    	function getTypeaheadInProgress() {
    		return instance.isTypeaheadInProgress();
    	}

    	function getSelectedIndex() {
    		return instance.getSelectedIndex();
    	}

    	function getFocusedItemIndex() {
    		return instance.getFocusedItemIndex();
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(14, element);
    		});
    	}

    	const keydown_handler = event => instance && instance.handleKeydown(event, event.target.classList.contains('mdc-deprecated-list-item'), getListItemIndex(event.target));
    	const focusin_handler = event => instance && instance.handleFocusIn(getListItemIndex(event.target));
    	const focusout_handler = event => instance && instance.handleFocusOut(getListItemIndex(event.target));
    	const click_handler = event => instance && instance.handleClick(getListItemIndex(event.target), !matches(event.target, 'input[type="checkbox"], input[type="radio"]'));

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(23, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('nonInteractive' in $$new_props) $$invalidate(2, nonInteractive = $$new_props.nonInteractive);
    		if ('dense' in $$new_props) $$invalidate(3, dense = $$new_props.dense);
    		if ('textualList' in $$new_props) $$invalidate(4, textualList = $$new_props.textualList);
    		if ('avatarList' in $$new_props) $$invalidate(5, avatarList = $$new_props.avatarList);
    		if ('iconList' in $$new_props) $$invalidate(6, iconList = $$new_props.iconList);
    		if ('imageList' in $$new_props) $$invalidate(7, imageList = $$new_props.imageList);
    		if ('thumbnailList' in $$new_props) $$invalidate(8, thumbnailList = $$new_props.thumbnailList);
    		if ('videoList' in $$new_props) $$invalidate(9, videoList = $$new_props.videoList);
    		if ('twoLine' in $$new_props) $$invalidate(10, twoLine = $$new_props.twoLine);
    		if ('threeLine' in $$new_props) $$invalidate(11, threeLine = $$new_props.threeLine);
    		if ('vertical' in $$new_props) $$invalidate(25, vertical = $$new_props.vertical);
    		if ('wrapFocus' in $$new_props) $$invalidate(26, wrapFocus = $$new_props.wrapFocus);
    		if ('singleSelection' in $$new_props) $$invalidate(27, singleSelection = $$new_props.singleSelection);
    		if ('selectedIndex' in $$new_props) $$invalidate(24, selectedIndex = $$new_props.selectedIndex);
    		if ('radioList' in $$new_props) $$invalidate(28, radioList = $$new_props.radioList);
    		if ('checkList' in $$new_props) $$invalidate(29, checkList = $$new_props.checkList);
    		if ('hasTypeahead' in $$new_props) $$invalidate(30, hasTypeahead = $$new_props.hasTypeahead);
    		if ('component' in $$new_props) $$invalidate(12, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(43, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		MDCListFoundation,
    		ponyfill,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		dispatch,
    		Ul,
    		Nav,
    		closest,
    		matches,
    		forwardEvents,
    		use,
    		className,
    		nonInteractive,
    		dense,
    		textualList,
    		avatarList,
    		iconList,
    		imageList,
    		thumbnailList,
    		videoList,
    		twoLine,
    		threeLine,
    		vertical,
    		wrapFocus,
    		singleSelection,
    		selectedIndex,
    		radioList,
    		checkList,
    		hasTypeahead,
    		element,
    		instance,
    		items,
    		role,
    		nav,
    		itemAccessorMap,
    		selectionDialog,
    		addLayoutListener,
    		removeLayoutListener,
    		component,
    		handleItemMount,
    		handleItemUnmount,
    		handleAction,
    		getOrderedList,
    		focusItemAtIndex,
    		listItemAtIndexHasClass,
    		addClassForElementIndex,
    		removeClassForElementIndex,
    		setAttributeForElementIndex,
    		removeAttributeForElementIndex,
    		getAttributeFromElementIndex,
    		getPrimaryTextAtIndex,
    		getListItemIndex,
    		layout,
    		setEnabled,
    		getTypeaheadInProgress,
    		getSelectedIndex,
    		getFocusedItemIndex,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) _a = $$new_props._a;
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('nonInteractive' in $$props) $$invalidate(2, nonInteractive = $$new_props.nonInteractive);
    		if ('dense' in $$props) $$invalidate(3, dense = $$new_props.dense);
    		if ('textualList' in $$props) $$invalidate(4, textualList = $$new_props.textualList);
    		if ('avatarList' in $$props) $$invalidate(5, avatarList = $$new_props.avatarList);
    		if ('iconList' in $$props) $$invalidate(6, iconList = $$new_props.iconList);
    		if ('imageList' in $$props) $$invalidate(7, imageList = $$new_props.imageList);
    		if ('thumbnailList' in $$props) $$invalidate(8, thumbnailList = $$new_props.thumbnailList);
    		if ('videoList' in $$props) $$invalidate(9, videoList = $$new_props.videoList);
    		if ('twoLine' in $$props) $$invalidate(10, twoLine = $$new_props.twoLine);
    		if ('threeLine' in $$props) $$invalidate(11, threeLine = $$new_props.threeLine);
    		if ('vertical' in $$props) $$invalidate(25, vertical = $$new_props.vertical);
    		if ('wrapFocus' in $$props) $$invalidate(26, wrapFocus = $$new_props.wrapFocus);
    		if ('singleSelection' in $$props) $$invalidate(27, singleSelection = $$new_props.singleSelection);
    		if ('selectedIndex' in $$props) $$invalidate(24, selectedIndex = $$new_props.selectedIndex);
    		if ('radioList' in $$props) $$invalidate(28, radioList = $$new_props.radioList);
    		if ('checkList' in $$props) $$invalidate(29, checkList = $$new_props.checkList);
    		if ('hasTypeahead' in $$props) $$invalidate(30, hasTypeahead = $$new_props.hasTypeahead);
    		if ('element' in $$props) $$invalidate(14, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(13, instance = $$new_props.instance);
    		if ('items' in $$props) items = $$new_props.items;
    		if ('role' in $$props) $$invalidate(15, role = $$new_props.role);
    		if ('nav' in $$props) nav = $$new_props.nav;
    		if ('selectionDialog' in $$props) $$invalidate(18, selectionDialog = $$new_props.selectionDialog);
    		if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    		if ('component' in $$props) $$invalidate(12, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*instance, vertical*/ 33562624) {
    			if (instance) {
    				instance.setVerticalOrientation(vertical);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, wrapFocus*/ 67117056) {
    			if (instance) {
    				instance.setWrapFocus(wrapFocus);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, hasTypeahead*/ 1073750016) {
    			if (instance) {
    				instance.setHasTypeahead(hasTypeahead);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, singleSelection*/ 134225920) {
    			if (instance) {
    				instance.setSingleSelection(singleSelection);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, singleSelection, selectedIndex*/ 151003136) {
    			if (instance && singleSelection && getSelectedIndex() !== selectedIndex) {
    				instance.setSelectedIndex(selectedIndex);
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		nonInteractive,
    		dense,
    		textualList,
    		avatarList,
    		iconList,
    		imageList,
    		thumbnailList,
    		videoList,
    		twoLine,
    		threeLine,
    		component,
    		instance,
    		element,
    		role,
    		matches,
    		forwardEvents,
    		selectionDialog,
    		handleItemMount,
    		handleItemUnmount,
    		handleAction,
    		getListItemIndex,
    		$$restProps,
    		selectedIndex,
    		vertical,
    		wrapFocus,
    		singleSelection,
    		radioList,
    		checkList,
    		hasTypeahead,
    		layout,
    		setEnabled,
    		getTypeaheadInProgress,
    		getSelectedIndex,
    		getFocusedItemIndex,
    		getElement,
    		slots,
    		switch_instance_binding,
    		keydown_handler,
    		focusin_handler,
    		focusout_handler,
    		click_handler,
    		$$scope
    	];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$9,
    			create_fragment$1f,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				nonInteractive: 2,
    				dense: 3,
    				textualList: 4,
    				avatarList: 5,
    				iconList: 6,
    				imageList: 7,
    				thumbnailList: 8,
    				videoList: 9,
    				twoLine: 10,
    				threeLine: 11,
    				vertical: 25,
    				wrapFocus: 26,
    				singleSelection: 27,
    				selectedIndex: 24,
    				radioList: 28,
    				checkList: 29,
    				hasTypeahead: 30,
    				component: 12,
    				layout: 31,
    				setEnabled: 32,
    				getTypeaheadInProgress: 33,
    				getSelectedIndex: 34,
    				getFocusedItemIndex: 35,
    				getElement: 36
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$1f.name
    		});
    	}

    	get use() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nonInteractive() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nonInteractive(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get avatarList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set avatarList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get iconList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get imageList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imageList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get thumbnailList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set thumbnailList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get videoList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set videoList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get twoLine() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set twoLine(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get threeLine() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set threeLine(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wrapFocus() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wrapFocus(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get singleSelection() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set singleSelection(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radioList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radioList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checkList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checkList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hasTypeahead() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hasTypeahead(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[31];
    	}

    	set layout(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setEnabled() {
    		return this.$$.ctx[32];
    	}

    	set setEnabled(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getTypeaheadInProgress() {
    		return this.$$.ctx[33];
    	}

    	set getTypeaheadInProgress(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectedIndex() {
    		return this.$$.ctx[34];
    	}

    	set getSelectedIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getFocusedItemIndex() {
    		return this.$$.ctx[35];
    	}

    	set getFocusedItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[36];
    	}

    	set getElement(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/list/dist/Item.svelte generated by Svelte v3.44.3 */
    const file$V = "node_modules/@smui/list/dist/Item.svelte";

    // (57:3) {#if ripple}
    function create_if_block$z(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "mdc-deprecated-list-item__ripple");
    			add_location(span, file$V, 56, 15, 1701);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$z.name,
    		type: "if",
    		source: "(57:3) {#if ripple}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[     ...(nonInteractive       ? []       : [           [             Ripple,             {               ripple: !input,               unbounded: false,               color:                 (activated || selected) && color == null ? 'primary' : color,               disabled,               addClass,               removeClass,               addStyle,             },           ],         ]),     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-deprecated-list-item': true,     'mdc-deprecated-list-item--activated': activated,     'mdc-deprecated-list-item--selected': selected,     'mdc-deprecated-list-item--disabled': disabled,     'mdc-menu-item--selected': !nav && role === 'menuitem' && selected,     'smui-menu-item--non-interactive': nonInteractive,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...nav && activated ? { 'aria-current': 'page' } : {}}   {...!nav ? { role } : {}}   {...!nav && role === 'option'     ? { 'aria-selected': selected ? 'true' : 'false' }     : {}}   {...!nav && (role === 'radio' || role === 'checkbox')     ? { 'aria-checked': input && input.checked ? 'true' : 'false' }     : {}}   {...!nav ? { 'aria-disabled': disabled ? 'true' : 'false' } : {}}   data-menu-item-skip-restore-focus={skipRestoreFocus || undefined}   {tabindex}   on:click={action}   on:keydown={handleKeydown}   on:SMUIGenericInput:mount={handleInputMount}   on:SMUIGenericInput:unmount={() => (input = undefined)}   {href}   {...internalAttrs}   {...$$restProps}   >
    function create_default_slot$K(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*ripple*/ ctx[7] && create_if_block$z(ctx);
    	const default_slot_template = /*#slots*/ ctx[32].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[35], null);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*ripple*/ ctx[7]) {
    				if (if_block) ; else {
    					if_block = create_if_block$z(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[35],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[35])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[35], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$K.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[     ...(nonInteractive       ? []       : [           [             Ripple,             {               ripple: !input,               unbounded: false,               color:                 (activated || selected) && color == null ? 'primary' : color,               disabled,               addClass,               removeClass,               addStyle,             },           ],         ]),     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-deprecated-list-item': true,     'mdc-deprecated-list-item--activated': activated,     'mdc-deprecated-list-item--selected': selected,     'mdc-deprecated-list-item--disabled': disabled,     'mdc-menu-item--selected': !nav && role === 'menuitem' && selected,     'smui-menu-item--non-interactive': nonInteractive,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...nav && activated ? { 'aria-current': 'page' } : {}}   {...!nav ? { role } : {}}   {...!nav && role === 'option'     ? { 'aria-selected': selected ? 'true' : 'false' }     : {}}   {...!nav && (role === 'radio' || role === 'checkbox')     ? { 'aria-checked': input && input.checked ? 'true' : 'false' }     : {}}   {...!nav ? { 'aria-disabled': disabled ? 'true' : 'false' } : {}}   data-menu-item-skip-restore-focus={skipRestoreFocus || undefined}   {tabindex}   on:click={action}   on:keydown={handleKeydown}   on:SMUIGenericInput:mount={handleInputMount}   on:SMUIGenericInput:unmount={() => (input = undefined)}   {href}   {...internalAttrs}   {...$$restProps}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1e(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				.../*nonInteractive*/ ctx[6]
    				? []
    				: [
    						[
    							Ripple,
    							{
    								ripple: !/*input*/ ctx[14],
    								unbounded: false,
    								color: (/*activated*/ ctx[1] || /*selected*/ ctx[0]) && /*color*/ ctx[5] == null
    								? 'primary'
    								: /*color*/ ctx[5],
    								disabled: /*disabled*/ ctx[9],
    								addClass: /*addClass*/ ctx[22],
    								removeClass: /*removeClass*/ ctx[23],
    								addStyle: /*addStyle*/ ctx[24]
    							}
    						]
    					],
    				/*forwardEvents*/ ctx[20],
    				.../*use*/ ctx[2]
    			]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[3]]: true,
    				'mdc-deprecated-list-item': true,
    				'mdc-deprecated-list-item--activated': /*activated*/ ctx[1],
    				'mdc-deprecated-list-item--selected': /*selected*/ ctx[0],
    				'mdc-deprecated-list-item--disabled': /*disabled*/ ctx[9],
    				'mdc-menu-item--selected': !/*nav*/ ctx[21] && /*role*/ ctx[8] === 'menuitem' && /*selected*/ ctx[0],
    				'smui-menu-item--non-interactive': /*nonInteractive*/ ctx[6],
    				.../*internalClasses*/ ctx[16]
    			})
    		},
    		{
    			style: Object.entries(/*internalStyles*/ ctx[17]).map(func$5).concat([/*style*/ ctx[4]]).join(' ')
    		},
    		/*nav*/ ctx[21] && /*activated*/ ctx[1]
    		? { 'aria-current': 'page' }
    		: {},
    		!/*nav*/ ctx[21] ? { role: /*role*/ ctx[8] } : {},
    		!/*nav*/ ctx[21] && /*role*/ ctx[8] === 'option'
    		? {
    				'aria-selected': /*selected*/ ctx[0] ? 'true' : 'false'
    			}
    		: {},
    		!/*nav*/ ctx[21] && (/*role*/ ctx[8] === 'radio' || /*role*/ ctx[8] === 'checkbox')
    		? {
    				'aria-checked': /*input*/ ctx[14] && /*input*/ ctx[14].checked
    				? 'true'
    				: 'false'
    			}
    		: {},
    		!/*nav*/ ctx[21]
    		? {
    				'aria-disabled': /*disabled*/ ctx[9] ? 'true' : 'false'
    			}
    		: {},
    		{
    			"data-menu-item-skip-restore-focus": /*skipRestoreFocus*/ ctx[10] || undefined
    		},
    		{ tabindex: /*tabindex*/ ctx[19] },
    		{ href: /*href*/ ctx[11] },
    		/*internalAttrs*/ ctx[18],
    		/*$$restProps*/ ctx[27]
    	];

    	var switch_value = /*component*/ ctx[12];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$K] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[33](switch_instance);
    		switch_instance.$on("click", /*action*/ ctx[13]);
    		switch_instance.$on("keydown", /*handleKeydown*/ ctx[25]);
    		switch_instance.$on("SMUIGenericInput:mount", /*handleInputMount*/ ctx[26]);
    		switch_instance.$on("SMUIGenericInput:unmount", /*SMUIGenericInput_unmount_handler*/ ctx[34]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*nonInteractive, input, activated, selected, color, disabled, addClass, removeClass, addStyle, forwardEvents, use, className, nav, role, internalClasses, internalStyles, style, skipRestoreFocus, tabindex, href, internalAttrs, $$restProps*/ 167726975)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty[0] & /*nonInteractive, input, activated, selected, color, disabled, addClass, removeClass, addStyle, forwardEvents, use*/ 30425703 && {
    						use: [
    							.../*nonInteractive*/ ctx[6]
    							? []
    							: [
    									[
    										Ripple,
    										{
    											ripple: !/*input*/ ctx[14],
    											unbounded: false,
    											color: (/*activated*/ ctx[1] || /*selected*/ ctx[0]) && /*color*/ ctx[5] == null
    											? 'primary'
    											: /*color*/ ctx[5],
    											disabled: /*disabled*/ ctx[9],
    											addClass: /*addClass*/ ctx[22],
    											removeClass: /*removeClass*/ ctx[23],
    											addStyle: /*addStyle*/ ctx[24]
    										}
    									]
    								],
    							/*forwardEvents*/ ctx[20],
    							.../*use*/ ctx[2]
    						]
    					},
    					dirty[0] & /*className, activated, selected, disabled, nav, role, nonInteractive, internalClasses*/ 2163531 && {
    						class: classMap({
    							[/*className*/ ctx[3]]: true,
    							'mdc-deprecated-list-item': true,
    							'mdc-deprecated-list-item--activated': /*activated*/ ctx[1],
    							'mdc-deprecated-list-item--selected': /*selected*/ ctx[0],
    							'mdc-deprecated-list-item--disabled': /*disabled*/ ctx[9],
    							'mdc-menu-item--selected': !/*nav*/ ctx[21] && /*role*/ ctx[8] === 'menuitem' && /*selected*/ ctx[0],
    							'smui-menu-item--non-interactive': /*nonInteractive*/ ctx[6],
    							.../*internalClasses*/ ctx[16]
    						})
    					},
    					dirty[0] & /*internalStyles, style*/ 131088 && {
    						style: Object.entries(/*internalStyles*/ ctx[17]).map(func$5).concat([/*style*/ ctx[4]]).join(' ')
    					},
    					dirty[0] & /*nav, activated*/ 2097154 && get_spread_object(/*nav*/ ctx[21] && /*activated*/ ctx[1]
    					? { 'aria-current': 'page' }
    					: {}),
    					dirty[0] & /*nav, role*/ 2097408 && get_spread_object(!/*nav*/ ctx[21] ? { role: /*role*/ ctx[8] } : {}),
    					dirty[0] & /*nav, role, selected*/ 2097409 && get_spread_object(!/*nav*/ ctx[21] && /*role*/ ctx[8] === 'option'
    					? {
    							'aria-selected': /*selected*/ ctx[0] ? 'true' : 'false'
    						}
    					: {}),
    					dirty[0] & /*nav, role, input*/ 2113792 && get_spread_object(!/*nav*/ ctx[21] && (/*role*/ ctx[8] === 'radio' || /*role*/ ctx[8] === 'checkbox')
    					? {
    							'aria-checked': /*input*/ ctx[14] && /*input*/ ctx[14].checked
    							? 'true'
    							: 'false'
    						}
    					: {}),
    					dirty[0] & /*nav, disabled*/ 2097664 && get_spread_object(!/*nav*/ ctx[21]
    					? {
    							'aria-disabled': /*disabled*/ ctx[9] ? 'true' : 'false'
    						}
    					: {}),
    					dirty[0] & /*skipRestoreFocus*/ 1024 && {
    						"data-menu-item-skip-restore-focus": /*skipRestoreFocus*/ ctx[10] || undefined
    					},
    					dirty[0] & /*tabindex*/ 524288 && { tabindex: /*tabindex*/ ctx[19] },
    					dirty[0] & /*href*/ 2048 && { href: /*href*/ ctx[11] },
    					dirty[0] & /*internalAttrs*/ 262144 && get_spread_object(/*internalAttrs*/ ctx[18]),
    					dirty[0] & /*$$restProps*/ 134217728 && get_spread_object(/*$$restProps*/ ctx[27])
    				])
    			: {};

    			if (dirty[0] & /*ripple*/ 128 | dirty[1] & /*$$scope*/ 16) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[12])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[33](switch_instance);
    					switch_instance.$on("click", /*action*/ ctx[13]);
    					switch_instance.$on("keydown", /*handleKeydown*/ ctx[25]);
    					switch_instance.$on("SMUIGenericInput:mount", /*handleInputMount*/ ctx[26]);
    					switch_instance.$on("SMUIGenericInput:unmount", /*SMUIGenericInput_unmount_handler*/ ctx[34]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[33](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let counter$3 = 0;
    const func$5 = ([name, value]) => `${name}: ${value};`;

    function instance$15($$self, $$props, $$invalidate) {
    	let tabindex;

    	const omit_props_names = [
    		"use","class","style","color","nonInteractive","ripple","activated","role","selected","disabled","skipRestoreFocus","tabindex","inputId","href","component","action","getPrimaryText","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Item', slots, ['default']);
    	var _a;
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { color = undefined } = $$props;

    	let { nonInteractive = (_a = getContext('SMUI:list:nonInteractive')) !== null && _a !== void 0
    	? _a
    	: false } = $$props;

    	setContext('SMUI:list:nonInteractive', undefined);
    	let { ripple = !nonInteractive } = $$props;
    	let { activated = false } = $$props;
    	let { role = getContext('SMUI:list:item:role') } = $$props;
    	setContext('SMUI:list:item:role', undefined);
    	let { selected = false } = $$props;
    	let { disabled = false } = $$props;
    	let { skipRestoreFocus = false } = $$props;
    	let { tabindex: tabindexProp = uninitializedValue } = $$props;
    	let { inputId = 'SMUI-form-field-list-' + counter$3++ } = $$props;
    	let { href = undefined } = $$props;
    	let element;
    	let internalClasses = {};
    	let internalStyles = {};
    	let internalAttrs = {};
    	let input;
    	let addTabindexIfNoItemsSelectedRaf;
    	let nav = getContext('SMUI:list:item:nav');
    	let { component = nav ? href ? A : Span : Li } = $$props;
    	setContext('SMUI:generic:input:props', { id: inputId });

    	// Reset separator context, because we aren't directly under a list anymore.
    	setContext('SMUI:separator:context', undefined);

    	onMount(() => {
    		// Tabindex needs to be '0' if this is the first non-disabled list item, and
    		// no other item is selected.
    		if (!selected && !nonInteractive) {
    			let first = true;
    			let el = element;

    			while (el.previousSibling) {
    				el = el.previousSibling;

    				if (el.nodeType === 1 && el.classList.contains('mdc-deprecated-list-item') && !el.classList.contains('mdc-deprecated-list-item--disabled')) {
    					first = false;
    					break;
    				}
    			}

    			if (first) {
    				// This is first, so now set up a check that no other items are
    				// selected.
    				addTabindexIfNoItemsSelectedRaf = window.requestAnimationFrame(addTabindexIfNoItemsSelected);
    			}
    		}

    		const accessor = {
    			_smui_list_item_accessor: true,
    			get element() {
    				return getElement();
    			},
    			get selected() {
    				return selected;
    			},
    			set selected(value) {
    				$$invalidate(0, selected = value);
    			},
    			hasClass,
    			addClass,
    			removeClass,
    			getAttr,
    			addAttr,
    			removeAttr,
    			getPrimaryText,
    			// For inputs within item.
    			get checked() {
    				var _a;

    				return (_a = input && input.checked) !== null && _a !== void 0
    				? _a
    				: false;
    			},
    			set checked(value) {
    				if (input) {
    					$$invalidate(14, input.checked = !!value, input);
    				}
    			},
    			get hasCheckbox() {
    				return !!(input && '_smui_checkbox_accessor' in input);
    			},
    			get hasRadio() {
    				return !!(input && '_smui_radio_accessor' in input);
    			},
    			activateRipple() {
    				if (input) {
    					input.activateRipple();
    				}
    			},
    			deactivateRipple() {
    				if (input) {
    					input.deactivateRipple();
    				}
    			},
    			// For select options.
    			getValue() {
    				return $$restProps.value;
    			},
    			// For autocomplete
    			action,
    			get tabindex() {
    				return tabindex;
    			},
    			set tabindex(value) {
    				$$invalidate(28, tabindexProp = value);
    			},
    			get disabled() {
    				return disabled;
    			},
    			get activated() {
    				return activated;
    			},
    			set activated(value) {
    				$$invalidate(1, activated = value);
    			}
    		};

    		dispatch(getElement(), 'SMUIListItem:mount', accessor);

    		return () => {
    			dispatch(getElement(), 'SMUIListItem:unmount', accessor);
    		};
    	});

    	onDestroy(() => {
    		if (addTabindexIfNoItemsSelectedRaf) {
    			window.cancelAnimationFrame(addTabindexIfNoItemsSelectedRaf);
    		}
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(16, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(16, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(17, internalStyles);
    			} else {
    				$$invalidate(17, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(18, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function removeAttr(name) {
    		if (!(name in internalAttrs) || internalAttrs[name] != null) {
    			$$invalidate(18, internalAttrs[name] = undefined, internalAttrs);
    		}
    	}

    	function addTabindexIfNoItemsSelected() {
    		// Look through next siblings to see if none of them are selected.
    		let noneSelected = true;

    		let el = element.getElement();

    		while (el.nextElementSibling) {
    			el = el.nextElementSibling;

    			if (el.nodeType === 1 && el.classList.contains('mdc-deprecated-list-item')) {
    				const tabindexAttr = el.attributes.getNamedItem('tabindex');

    				if (tabindexAttr && tabindexAttr.value === '0') {
    					noneSelected = false;
    					break;
    				}
    			}
    		}

    		if (noneSelected) {
    			// This is the first element, and no other element is selected, so the
    			// tabindex should be '0'.
    			$$invalidate(19, tabindex = 0);
    		}
    	}

    	function handleKeydown(e) {
    		const isEnter = e.key === 'Enter';
    		const isSpace = e.key === 'Space';

    		if (isEnter || isSpace) {
    			action(e);
    		}
    	}

    	function handleInputMount(e) {
    		if ('_smui_checkbox_accessor' in e.detail || '_smui_radio_accessor' in e.detail) {
    			$$invalidate(14, input = e.detail);
    		}
    	}

    	function action(e) {
    		if (!disabled) {
    			dispatch(getElement(), 'SMUI:action', e);
    		}
    	}

    	function getPrimaryText() {
    		var _a, _b, _c;
    		const element = getElement();
    		const primaryText = element.querySelector('.mdc-deprecated-list-item__primary-text');

    		if (primaryText) {
    			return (_a = primaryText.textContent) !== null && _a !== void 0
    			? _a
    			: '';
    		}

    		const text = element.querySelector('.mdc-deprecated-list-item__text');

    		if (text) {
    			return (_b = text.textContent) !== null && _b !== void 0
    			? _b
    			: '';
    		}

    		return (_c = element.textContent) !== null && _c !== void 0
    		? _c
    		: '';
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(15, element);
    		});
    	}

    	const SMUIGenericInput_unmount_handler = () => $$invalidate(14, input = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(27, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
    		if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
    		if ('nonInteractive' in $$new_props) $$invalidate(6, nonInteractive = $$new_props.nonInteractive);
    		if ('ripple' in $$new_props) $$invalidate(7, ripple = $$new_props.ripple);
    		if ('activated' in $$new_props) $$invalidate(1, activated = $$new_props.activated);
    		if ('role' in $$new_props) $$invalidate(8, role = $$new_props.role);
    		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
    		if ('disabled' in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
    		if ('skipRestoreFocus' in $$new_props) $$invalidate(10, skipRestoreFocus = $$new_props.skipRestoreFocus);
    		if ('tabindex' in $$new_props) $$invalidate(28, tabindexProp = $$new_props.tabindex);
    		if ('inputId' in $$new_props) $$invalidate(29, inputId = $$new_props.inputId);
    		if ('href' in $$new_props) $$invalidate(11, href = $$new_props.href);
    		if ('component' in $$new_props) $$invalidate(12, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(35, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$3,
    		_a,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		dispatch,
    		Ripple,
    		A,
    		Span,
    		Li,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		style,
    		color,
    		nonInteractive,
    		ripple,
    		activated,
    		role,
    		selected,
    		disabled,
    		skipRestoreFocus,
    		tabindexProp,
    		inputId,
    		href,
    		element,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		input,
    		addTabindexIfNoItemsSelectedRaf,
    		nav,
    		component,
    		hasClass,
    		addClass,
    		removeClass,
    		addStyle,
    		getAttr,
    		addAttr,
    		removeAttr,
    		addTabindexIfNoItemsSelected,
    		handleKeydown,
    		handleInputMount,
    		action,
    		getPrimaryText,
    		getElement,
    		tabindex
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) _a = $$new_props._a;
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
    		if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
    		if ('nonInteractive' in $$props) $$invalidate(6, nonInteractive = $$new_props.nonInteractive);
    		if ('ripple' in $$props) $$invalidate(7, ripple = $$new_props.ripple);
    		if ('activated' in $$props) $$invalidate(1, activated = $$new_props.activated);
    		if ('role' in $$props) $$invalidate(8, role = $$new_props.role);
    		if ('selected' in $$props) $$invalidate(0, selected = $$new_props.selected);
    		if ('disabled' in $$props) $$invalidate(9, disabled = $$new_props.disabled);
    		if ('skipRestoreFocus' in $$props) $$invalidate(10, skipRestoreFocus = $$new_props.skipRestoreFocus);
    		if ('tabindexProp' in $$props) $$invalidate(28, tabindexProp = $$new_props.tabindexProp);
    		if ('inputId' in $$props) $$invalidate(29, inputId = $$new_props.inputId);
    		if ('href' in $$props) $$invalidate(11, href = $$new_props.href);
    		if ('element' in $$props) $$invalidate(15, element = $$new_props.element);
    		if ('internalClasses' in $$props) $$invalidate(16, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(17, internalStyles = $$new_props.internalStyles);
    		if ('internalAttrs' in $$props) $$invalidate(18, internalAttrs = $$new_props.internalAttrs);
    		if ('input' in $$props) $$invalidate(14, input = $$new_props.input);
    		if ('addTabindexIfNoItemsSelectedRaf' in $$props) addTabindexIfNoItemsSelectedRaf = $$new_props.addTabindexIfNoItemsSelectedRaf;
    		if ('nav' in $$props) $$invalidate(21, nav = $$new_props.nav);
    		if ('component' in $$props) $$invalidate(12, component = $$new_props.component);
    		if ('tabindex' in $$props) $$invalidate(19, tabindex = $$new_props.tabindex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*tabindexProp, nonInteractive, disabled, selected, input*/ 268452417) {
    			$$invalidate(19, tabindex = isUninitializedValue(tabindexProp)
    			? !nonInteractive && !disabled && (selected || input && input.checked)
    				? 0
    				: -1
    			: tabindexProp);
    		}
    	};

    	return [
    		selected,
    		activated,
    		use,
    		className,
    		style,
    		color,
    		nonInteractive,
    		ripple,
    		role,
    		disabled,
    		skipRestoreFocus,
    		href,
    		component,
    		action,
    		input,
    		element,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		tabindex,
    		forwardEvents,
    		nav,
    		addClass,
    		removeClass,
    		addStyle,
    		handleKeydown,
    		handleInputMount,
    		$$restProps,
    		tabindexProp,
    		inputId,
    		getPrimaryText,
    		getElement,
    		slots,
    		switch_instance_binding,
    		SMUIGenericInput_unmount_handler,
    		$$scope
    	];
    }

    class Item$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$15,
    			create_fragment$1e,
    			safe_not_equal,
    			{
    				use: 2,
    				class: 3,
    				style: 4,
    				color: 5,
    				nonInteractive: 6,
    				ripple: 7,
    				activated: 1,
    				role: 8,
    				selected: 0,
    				disabled: 9,
    				skipRestoreFocus: 10,
    				tabindex: 28,
    				inputId: 29,
    				href: 11,
    				component: 12,
    				action: 13,
    				getPrimaryText: 30,
    				getElement: 31
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Item",
    			options,
    			id: create_fragment$1e.name
    		});
    	}

    	get use() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nonInteractive() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nonInteractive(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activated() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activated(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get role() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set role(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get skipRestoreFocus() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set skipRestoreFocus(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabindex() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabindex(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		return this.$$.ctx[13];
    	}

    	set action(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getPrimaryText() {
    		return this.$$.ctx[30];
    	}

    	set getPrimaryText(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[31];
    	}

    	set getElement(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Text$2 = classAdderBuilder({
        class: 'mdc-deprecated-list-item__text',
        component: Span,
    });

    classAdderBuilder({
        class: 'mdc-deprecated-list-item__primary-text',
        component: Span,
    });

    classAdderBuilder({
        class: 'mdc-deprecated-list-item__secondary-text',
        component: Span,
    });

    /* node_modules/@smui/list/dist/Graphic.svelte generated by Svelte v3.44.3 */
    const file$U = "node_modules/@smui/list/dist/Graphic.svelte";

    function create_fragment$1d(ctx) {
    	let span;
    	let span_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

    	let span_levels = [
    		{
    			class: span_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-deprecated-list-item__graphic': true,
    				'mdc-menu__selection-group-icon': /*menuSelectionGroup*/ ctx[4]
    			})
    		},
    		/*$$restProps*/ ctx[5]
    	];

    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			set_attributes(span, span_data);
    			add_location(span, file$U, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			/*span_binding*/ ctx[9](span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[3].call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				(!current || dirty & /*className*/ 2 && span_class_value !== (span_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-deprecated-list-item__graphic': true,
    					'mdc-menu__selection-group-icon': /*menuSelectionGroup*/ ctx[4]
    				}))) && { class: span_class_value },
    				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			/*span_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$14($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Graphic', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let element;
    	let menuSelectionGroup = getContext('SMUI:list:graphic:menu-selection-group');

    	function getElement() {
    		return element;
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		element,
    		menuSelectionGroup,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
    		if ('menuSelectionGroup' in $$props) $$invalidate(4, menuSelectionGroup = $$new_props.menuSelectionGroup);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		element,
    		forwardEvents,
    		menuSelectionGroup,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		span_binding
    	];
    }

    class Graphic$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$14, create_fragment$1d, safe_not_equal, { use: 0, class: 1, getElement: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Graphic",
    			options,
    			id: create_fragment$1d.name
    		});
    	}

    	get use() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[6];
    	}

    	set getElement(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    classAdderBuilder({
        class: 'mdc-deprecated-list-item__meta',
        component: Span,
    });

    classAdderBuilder({
        class: 'mdc-deprecated-list-group',
        component: Div,
    });

    classAdderBuilder({
        class: 'mdc-deprecated-list-group__subheader',
        component: H3$1,
    });

    /* node_modules/@smui/list/dist/Separator.svelte generated by Svelte v3.44.3 */

    function create_fragment$1c(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[9], .../*use*/ ctx[0]]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-deprecated-list-divider': true,
    				'mdc-deprecated-list-divider--padded': /*padded*/ ctx[2],
    				'mdc-deprecated-list-divider--inset': /*inset*/ ctx[3],
    				'mdc-deprecated-list-divider--inset-leading': /*insetLeading*/ ctx[4],
    				'mdc-deprecated-list-divider--inset-trailing': /*insetTrailing*/ ctx[5],
    				'mdc-deprecated-list-divider--inset-padding': /*insetPadding*/ ctx[6]
    			})
    		},
    		{ role: "separator" },
    		/*$$restProps*/ ctx[10]
    	];

    	var switch_value = /*component*/ ctx[7];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		/*switch_instance_binding*/ ctx[12](switch_instance);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*forwardEvents, use, classMap, className, padded, inset, insetLeading, insetTrailing, insetPadding, $$restProps*/ 1663)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*forwardEvents, use*/ 513 && {
    						use: [/*forwardEvents*/ ctx[9], .../*use*/ ctx[0]]
    					},
    					dirty & /*classMap, className, padded, inset, insetLeading, insetTrailing, insetPadding*/ 126 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-deprecated-list-divider': true,
    							'mdc-deprecated-list-divider--padded': /*padded*/ ctx[2],
    							'mdc-deprecated-list-divider--inset': /*inset*/ ctx[3],
    							'mdc-deprecated-list-divider--inset-leading': /*insetLeading*/ ctx[4],
    							'mdc-deprecated-list-divider--inset-trailing': /*insetTrailing*/ ctx[5],
    							'mdc-deprecated-list-divider--inset-padding': /*insetPadding*/ ctx[6]
    						})
    					},
    					switch_instance_spread_levels[2],
    					dirty & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[7])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					/*switch_instance_binding*/ ctx[12](switch_instance);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[12](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$13($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","padded","inset","insetLeading","insetTrailing","insetPadding","component","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Separator', slots, []);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { padded = false } = $$props;
    	let { inset = false } = $$props;
    	let { insetLeading = false } = $$props;
    	let { insetTrailing = false } = $$props;
    	let { insetPadding = false } = $$props;
    	let element;
    	let nav = getContext('SMUI:list:item:nav');
    	let context = getContext('SMUI:separator:context');
    	let { component = nav || context !== 'list' ? Hr : Li } = $$props;

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(8, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('padded' in $$new_props) $$invalidate(2, padded = $$new_props.padded);
    		if ('inset' in $$new_props) $$invalidate(3, inset = $$new_props.inset);
    		if ('insetLeading' in $$new_props) $$invalidate(4, insetLeading = $$new_props.insetLeading);
    		if ('insetTrailing' in $$new_props) $$invalidate(5, insetTrailing = $$new_props.insetTrailing);
    		if ('insetPadding' in $$new_props) $$invalidate(6, insetPadding = $$new_props.insetPadding);
    		if ('component' in $$new_props) $$invalidate(7, component = $$new_props.component);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		Li,
    		Hr,
    		forwardEvents,
    		use,
    		className,
    		padded,
    		inset,
    		insetLeading,
    		insetTrailing,
    		insetPadding,
    		element,
    		nav,
    		context,
    		component,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('padded' in $$props) $$invalidate(2, padded = $$new_props.padded);
    		if ('inset' in $$props) $$invalidate(3, inset = $$new_props.inset);
    		if ('insetLeading' in $$props) $$invalidate(4, insetLeading = $$new_props.insetLeading);
    		if ('insetTrailing' in $$props) $$invalidate(5, insetTrailing = $$new_props.insetTrailing);
    		if ('insetPadding' in $$props) $$invalidate(6, insetPadding = $$new_props.insetPadding);
    		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
    		if ('nav' in $$props) nav = $$new_props.nav;
    		if ('context' in $$props) context = $$new_props.context;
    		if ('component' in $$props) $$invalidate(7, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		padded,
    		inset,
    		insetLeading,
    		insetTrailing,
    		insetPadding,
    		component,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		switch_instance_binding
    	];
    }

    class Separator$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$13, create_fragment$1c, safe_not_equal, {
    			use: 0,
    			class: 1,
    			padded: 2,
    			inset: 3,
    			insetLeading: 4,
    			insetTrailing: 5,
    			insetPadding: 6,
    			component: 7,
    			getElement: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Separator",
    			options,
    			id: create_fragment$1c.name
    		});
    	}

    	get use() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get padded() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set padded(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inset() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inset(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get insetLeading() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insetLeading(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get insetTrailing() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insetTrailing(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get insetPadding() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insetPadding(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[11];
    	}

    	set getElement(value) {
    		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Item = Item$1;
    const Graphic = Graphic$1;
    const Separator = Separator$1;

    classAdderBuilder({
        class: 'mdc-menu__selection-group-icon',
        component: Graphic,
    });

    /* node_modules/@smui-extra/autocomplete/dist/Autocomplete.svelte generated by Svelte v3.44.3 */
    const file$T = "node_modules/@smui-extra/autocomplete/dist/Autocomplete.svelte";

    function get_each_context$h(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[55] = list[i];
    	child_ctx[57] = i;
    	return child_ctx;
    }

    const get_no_matches_slot_changes = dirty => ({});
    const get_no_matches_slot_context = ctx => ({});
    const get_match_slot_changes = dirty => ({ match: dirty[0] & /*matches*/ 32768 });
    const get_match_slot_context = ctx => ({ match: /*match*/ ctx[55] });
    const get_error_slot_changes = dirty => ({});
    const get_error_slot_context = ctx => ({});
    const get_loading_slot_changes = dirty => ({});
    const get_loading_slot_context = ctx => ({});

    // (23:10)        
    function fallback_block_4(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	const textfield_spread_levels = [
    		{ label: /*label*/ ctx[6] },
    		{ disabled: /*disabled*/ ctx[7] },
    		prefixFilter(/*$$restProps*/ ctx[27], 'textfield$')
    	];

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[43](value);
    	}

    	let textfield_props = {};

    	for (let i = 0; i < textfield_spread_levels.length; i += 1) {
    		textfield_props = assign(textfield_props, textfield_spread_levels[i]);
    	}

    	if (/*text*/ ctx[1] !== void 0) {
    		textfield_props.value = /*text*/ ctx[1];
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = (dirty[0] & /*label, disabled, $$restProps*/ 134217920)
    			? get_spread_update(textfield_spread_levels, [
    					dirty[0] & /*label*/ 64 && { label: /*label*/ ctx[6] },
    					dirty[0] & /*disabled*/ 128 && { disabled: /*disabled*/ ctx[7] },
    					dirty[0] & /*$$restProps*/ 134217728 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[27], 'textfield$'))
    				])
    			: {};

    			if (!updating_value && dirty[0] & /*text*/ 2) {
    				updating_value = true;
    				textfield_changes.value = /*text*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_4.name,
    		type: "fallback",
    		source: "(23:10)        ",
    		ctx
    	});

    	return block;
    }

    // (58:6) {:else}
    function create_else_block$d(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*matches*/ ctx[15];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_1$5(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getOptionDisabled, matches, value, focusedIndex, toggle, toggleOption, selectOption, getOptionLabel, noMatchesActionDisabled, element*/ 25396017 | dirty[1] & /*$$scope*/ 2097152) {
    				each_value = /*matches*/ ctx[15];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$h(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$h(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_1$5(ctx);
    					each_1_else.c();
    					transition_in(each_1_else, 1);
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				} else if (each_1_else) {
    					group_outros();

    					transition_out(each_1_else, 1, 1, () => {
    						each_1_else = null;
    					});

    					check_outros();
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$d.name,
    		type: "else",
    		source: "(58:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (52:22) 
    function create_if_block_1$k(ctx) {
    	let item;
    	let current;

    	item = new Item({
    			props: {
    				disabled: true,
    				$$slots: { default: [create_default_slot_4$r] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item_changes = {};

    			if (dirty[1] & /*$$scope*/ 2097152) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$k.name,
    		type: "if",
    		source: "(52:22) ",
    		ctx
    	});

    	return block;
    }

    // (46:6) {#if loading}
    function create_if_block$y(ctx) {
    	let item;
    	let current;

    	item = new Item({
    			props: {
    				disabled: true,
    				$$slots: { default: [create_default_slot_2$y] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item_changes = {};

    			if (dirty[1] & /*$$scope*/ 2097152) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$y.name,
    		type: "if",
    		source: "(46:6) {#if loading}",
    		ctx
    	});

    	return block;
    }

    // (73:8) {:else}
    function create_else_block_1$5(ctx) {
    	let item;
    	let current;

    	item = new Item({
    			props: {
    				disabled: /*noMatchesActionDisabled*/ ctx[9],
    				$$slots: { default: [create_default_slot_8$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item.$on("SMUI:action", /*SMUI_action_handler_1*/ ctx[49]);

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item_changes = {};
    			if (dirty[0] & /*noMatchesActionDisabled*/ 512) item_changes.disabled = /*noMatchesActionDisabled*/ ctx[9];

    			if (dirty[1] & /*$$scope*/ 2097152) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$5.name,
    		type: "else",
    		source: "(73:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (80:14) <Text>
    function create_default_slot_9$e(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("No matches found.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$e.name,
    		type: "slot",
    		source: "(80:14) <Text>",
    		ctx
    	});

    	return block;
    }

    // (79:36)                
    function fallback_block_3(ctx) {
    	let text_1;
    	let current;

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_9$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const text_1_changes = {};

    			if (dirty[1] & /*$$scope*/ 2097152) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_3.name,
    		type: "fallback",
    		source: "(79:36)                ",
    		ctx
    	});

    	return block;
    }

    // (74:10) <Item             disabled={noMatchesActionDisabled}             on:SMUI:action={(e) =>               dispatch(element, 'SMUIAutocomplete:noMatchesAction', e)}           >
    function create_default_slot_8$g(ctx) {
    	let t;
    	let current;
    	const no_matches_slot_template = /*#slots*/ ctx[42]["no-matches"];
    	const no_matches_slot = create_slot(no_matches_slot_template, ctx, /*$$scope*/ ctx[52], get_no_matches_slot_context);
    	const no_matches_slot_or_fallback = no_matches_slot || fallback_block_3(ctx);

    	const block = {
    		c: function create() {
    			if (no_matches_slot_or_fallback) no_matches_slot_or_fallback.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if (no_matches_slot_or_fallback) {
    				no_matches_slot_or_fallback.m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (no_matches_slot) {
    				if (no_matches_slot.p && (!current || dirty[1] & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						no_matches_slot,
    						no_matches_slot_template,
    						ctx,
    						/*$$scope*/ ctx[52],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[52])
    						: get_slot_changes(no_matches_slot_template, /*$$scope*/ ctx[52], dirty, get_no_matches_slot_changes),
    						get_no_matches_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(no_matches_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(no_matches_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (no_matches_slot_or_fallback) no_matches_slot_or_fallback.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$g.name,
    		type: "slot",
    		source: "(74:10) <Item             disabled={noMatchesActionDisabled}             on:SMUI:action={(e) =>               dispatch(element, 'SMUIAutocomplete:noMatchesAction', e)}           >",
    		ctx
    	});

    	return block;
    }

    // (70:14) <Text>
    function create_default_slot_7$h(ctx) {
    	let t_value = /*getOptionLabel*/ ctx[5](/*match*/ ctx[55]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getOptionLabel, matches*/ 32800 && t_value !== (t_value = /*getOptionLabel*/ ctx[5](/*match*/ ctx[55]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$h.name,
    		type: "slot",
    		source: "(70:14) <Text>",
    		ctx
    	});

    	return block;
    }

    // (69:39)                
    function fallback_block_2(ctx) {
    	let text_1;
    	let current;

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_7$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const text_1_changes = {};

    			if (dirty[0] & /*getOptionLabel, matches*/ 32800 | dirty[1] & /*$$scope*/ 2097152) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_2.name,
    		type: "fallback",
    		source: "(69:39)                ",
    		ctx
    	});

    	return block;
    }

    // (60:10) <Item             disabled={getOptionDisabled(match)}             selected={match === value}             on:mouseenter={() => {               focusedIndex = i;             }}             on:SMUI:action={() =>               toggle ? toggleOption(match) : selectOption(match)}           >
    function create_default_slot_6$m(ctx) {
    	let t;
    	let current;
    	const match_slot_template = /*#slots*/ ctx[42].match;
    	const match_slot = create_slot(match_slot_template, ctx, /*$$scope*/ ctx[52], get_match_slot_context);
    	const match_slot_or_fallback = match_slot || fallback_block_2(ctx);

    	const block = {
    		c: function create() {
    			if (match_slot_or_fallback) match_slot_or_fallback.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if (match_slot_or_fallback) {
    				match_slot_or_fallback.m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (match_slot) {
    				if (match_slot.p && (!current || dirty[0] & /*matches*/ 32768 | dirty[1] & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						match_slot,
    						match_slot_template,
    						ctx,
    						/*$$scope*/ ctx[52],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[52])
    						: get_slot_changes(match_slot_template, /*$$scope*/ ctx[52], dirty, get_match_slot_changes),
    						get_match_slot_context
    					);
    				}
    			} else {
    				if (match_slot_or_fallback && match_slot_or_fallback.p && (!current || dirty[0] & /*getOptionLabel, matches*/ 32800)) {
    					match_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(match_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(match_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (match_slot_or_fallback) match_slot_or_fallback.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$m.name,
    		type: "slot",
    		source: "(60:10) <Item             disabled={getOptionDisabled(match)}             selected={match === value}             on:mouseenter={() => {               focusedIndex = i;             }}             on:SMUI:action={() =>               toggle ? toggleOption(match) : selectOption(match)}           >",
    		ctx
    	});

    	return block;
    }

    // (59:8) {#each matches as match, i}
    function create_each_block$h(ctx) {
    	let item;
    	let current;

    	function mouseenter_handler() {
    		return /*mouseenter_handler*/ ctx[47](/*i*/ ctx[57]);
    	}

    	function SMUI_action_handler() {
    		return /*SMUI_action_handler*/ ctx[48](/*match*/ ctx[55]);
    	}

    	item = new Item({
    			props: {
    				disabled: /*getOptionDisabled*/ ctx[4](/*match*/ ctx[55]),
    				selected: /*match*/ ctx[55] === /*value*/ ctx[0],
    				$$slots: { default: [create_default_slot_6$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item.$on("mouseenter", mouseenter_handler);
    	item.$on("SMUI:action", SMUI_action_handler);

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const item_changes = {};
    			if (dirty[0] & /*getOptionDisabled, matches*/ 32784) item_changes.disabled = /*getOptionDisabled*/ ctx[4](/*match*/ ctx[55]);
    			if (dirty[0] & /*matches, value*/ 32769) item_changes.selected = /*match*/ ctx[55] === /*value*/ ctx[0];

    			if (dirty[0] & /*getOptionLabel, matches*/ 32800 | dirty[1] & /*$$scope*/ 2097152) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$h.name,
    		type: "each",
    		source: "(59:8) {#each matches as match, i}",
    		ctx
    	});

    	return block;
    }

    // (55:12) <Text>
    function create_default_slot_5$o(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Error while fetching suggestions.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$o.name,
    		type: "slot",
    		source: "(55:12) <Text>",
    		ctx
    	});

    	return block;
    }

    // (54:29)              
    function fallback_block_1(ctx) {
    	let text_1;
    	let current;

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_5$o] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const text_1_changes = {};

    			if (dirty[1] & /*$$scope*/ 2097152) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(54:29)              ",
    		ctx
    	});

    	return block;
    }

    // (53:8) <Item disabled>
    function create_default_slot_4$r(ctx) {
    	let current;
    	const error_slot_template = /*#slots*/ ctx[42].error;
    	const error_slot = create_slot(error_slot_template, ctx, /*$$scope*/ ctx[52], get_error_slot_context);
    	const error_slot_or_fallback = error_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			if (error_slot_or_fallback) error_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (error_slot_or_fallback) {
    				error_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (error_slot) {
    				if (error_slot.p && (!current || dirty[1] & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						error_slot,
    						error_slot_template,
    						ctx,
    						/*$$scope*/ ctx[52],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[52])
    						: get_slot_changes(error_slot_template, /*$$scope*/ ctx[52], dirty, get_error_slot_changes),
    						get_error_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(error_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(error_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (error_slot_or_fallback) error_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$r.name,
    		type: "slot",
    		source: "(53:8) <Item disabled>",
    		ctx
    	});

    	return block;
    }

    // (49:12) <Text>
    function create_default_slot_3$v(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$v.name,
    		type: "slot",
    		source: "(49:12) <Text>",
    		ctx
    	});

    	return block;
    }

    // (48:31)              
    function fallback_block(ctx) {
    	let text_1;
    	let current;

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_3$v] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const text_1_changes = {};

    			if (dirty[1] & /*$$scope*/ 2097152) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(48:31)              ",
    		ctx
    	});

    	return block;
    }

    // (47:8) <Item disabled>
    function create_default_slot_2$y(ctx) {
    	let current;
    	const loading_slot_template = /*#slots*/ ctx[42].loading;
    	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[52], get_loading_slot_context);
    	const loading_slot_or_fallback = loading_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			if (loading_slot_or_fallback) loading_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (loading_slot_or_fallback) {
    				loading_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (loading_slot) {
    				if (loading_slot.p && (!current || dirty[1] & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						loading_slot,
    						loading_slot_template,
    						ctx,
    						/*$$scope*/ ctx[52],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[52])
    						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[52], dirty, get_loading_slot_changes),
    						get_loading_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loading_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loading_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (loading_slot_or_fallback) loading_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$y.name,
    		type: "slot",
    		source: "(47:8) <Item disabled>",
    		ctx
    	});

    	return block;
    }

    // (45:4) <List {...prefixFilter($$restProps, 'list$')}>
    function create_default_slot_1$B(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$y, create_if_block_1$k, create_else_block$d];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*loading*/ ctx[13]) return 0;
    		if (/*error*/ ctx[19]) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$B.name,
    		type: "slot",
    		source: "(45:4) <List {...prefixFilter($$restProps, 'list$')}>",
    		ctx
    	});

    	return block;
    }

    // (32:2) <Menu     class={classMap({       [menu$class]: true,       'smui-autocomplete__menu': true,     })}     managed     open={menuOpen}     bind:anchorElement={element}     anchor={menu$anchor}     anchorCorner={menu$anchorCorner}     on:SMUIList:mount={handleListAccessor}     {...prefixFilter($$restProps, 'menu$')}   >
    function create_default_slot$J(ctx) {
    	let list;
    	let current;
    	const list_spread_levels = [prefixFilter(/*$$restProps*/ ctx[27], 'list$')];

    	let list_props = {
    		$$slots: { default: [create_default_slot_1$B] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < list_spread_levels.length; i += 1) {
    		list_props = assign(list_props, list_spread_levels[i]);
    	}

    	list = new List({ props: list_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(list.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(list, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const list_changes = (dirty[0] & /*$$restProps*/ 134217728)
    			? get_spread_update(list_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[27], 'list$'))])
    			: {};

    			if (dirty[0] & /*loading, error, matches, getOptionDisabled, value, focusedIndex, toggle, getOptionLabel, noMatchesActionDisabled, element*/ 762673 | dirty[1] & /*$$scope*/ 2097152) {
    				list_changes.$$scope = { dirty, ctx };
    			}

    			list.$set(list_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(list, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$J.name,
    		type: "slot",
    		source: "(32:2) <Menu     class={classMap({       [menu$class]: true,       'smui-autocomplete__menu': true,     })}     managed     open={menuOpen}     bind:anchorElement={element}     anchor={menu$anchor}     anchorCorner={menu$anchorCorner}     on:SMUIList:mount={handleListAccessor}     {...prefixFilter($$restProps, 'menu$')}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1b(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let menu;
    	let updating_anchorElement;
    	let div1_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[42].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[52], null);
    	const default_slot_or_fallback = default_slot || fallback_block_4(ctx);

    	const menu_spread_levels = [
    		{
    			class: classMap({
    				[/*menu$class*/ ctx[10]]: true,
    				'smui-autocomplete__menu': true
    			})
    		},
    		{ managed: true },
    		{ open: /*menuOpen*/ ctx[20] },
    		{ anchor: /*menu$anchor*/ ctx[11] },
    		{
    			anchorCorner: /*menu$anchorCorner*/ ctx[12]
    		},
    		prefixFilter(/*$$restProps*/ ctx[27], 'menu$')
    	];

    	function menu_anchorElement_binding(value) {
    		/*menu_anchorElement_binding*/ ctx[50](value);
    	}

    	let menu_props = {
    		$$slots: { default: [create_default_slot$J] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < menu_spread_levels.length; i += 1) {
    		menu_props = assign(menu_props, menu_spread_levels[i]);
    	}

    	if (/*element*/ ctx[17] !== void 0) {
    		menu_props.anchorElement = /*element*/ ctx[17];
    	}

    	menu = new Menu({ props: menu_props, $$inline: true });
    	binding_callbacks.push(() => bind(menu, 'anchorElement', menu_anchorElement_binding));
    	menu.$on("SMUIList:mount", /*handleListAccessor*/ ctx[22]);

    	let div1_levels = [
    		{
    			class: div1_class_value = classMap({
    				[/*className*/ ctx[3]]: true,
    				'smui-autocomplete': true
    			})
    		},
    		exclude(/*$$restProps*/ ctx[27], ['menu$', 'textfield$', 'list$'])
    	];

    	let div1_data = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div1_data = assign(div1_data, div1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t = space();
    			create_component(menu.$$.fragment);
    			add_location(div0, file$T, 11, 2, 229);
    			set_attributes(div1, div1_data);
    			add_location(div1, file$T, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(div0, null);
    			}

    			/*div0_binding*/ ctx[44](div0);
    			append_dev(div1, t);
    			mount_component(menu, div1, null);
    			/*div1_binding*/ ctx[51](div1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "focusin", /*focusin_handler*/ ctx[45], false, false, false),
    					listen_dev(div0, "focusout", /*handleTextfieldBlur*/ ctx[26], false, false, false),
    					listen_dev(div0, "input", /*input_handler*/ ctx[46], false, false, false),
    					listen_dev(div0, "keydown", /*handleTextfieldKeydown*/ ctx[25], true, false, false),
    					action_destroyer(Anchor.call(null, div1)),
    					action_destroyer(useActions_action = useActions.call(null, div1, /*use*/ ctx[2])),
    					action_destroyer(/*forwardEvents*/ ctx[21].call(null, div1))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[52],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[52])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[52], dirty, null),
    						null
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*label, disabled, $$restProps, text*/ 134217922)) {
    					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}

    			const menu_changes = (dirty[0] & /*menu$class, menuOpen, menu$anchor, menu$anchorCorner, $$restProps*/ 135273472)
    			? get_spread_update(menu_spread_levels, [
    					dirty[0] & /*menu$class*/ 1024 && {
    						class: classMap({
    							[/*menu$class*/ ctx[10]]: true,
    							'smui-autocomplete__menu': true
    						})
    					},
    					menu_spread_levels[1],
    					dirty[0] & /*menuOpen*/ 1048576 && { open: /*menuOpen*/ ctx[20] },
    					dirty[0] & /*menu$anchor*/ 2048 && { anchor: /*menu$anchor*/ ctx[11] },
    					dirty[0] & /*menu$anchorCorner*/ 4096 && {
    						anchorCorner: /*menu$anchorCorner*/ ctx[12]
    					},
    					dirty[0] & /*$$restProps*/ 134217728 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[27], 'menu$'))
    				])
    			: {};

    			if (dirty[0] & /*$$restProps, loading, error, matches, getOptionDisabled, value, focusedIndex, toggle, getOptionLabel, noMatchesActionDisabled, element*/ 134980401 | dirty[1] & /*$$scope*/ 2097152) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_anchorElement && dirty[0] & /*element*/ 131072) {
    				updating_anchorElement = true;
    				menu_changes.anchorElement = /*element*/ ctx[17];
    				add_flush_callback(() => updating_anchorElement = false);
    			}

    			menu.$set(menu_changes);

    			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
    				(!current || dirty[0] & /*className*/ 8 && div1_class_value !== (div1_class_value = classMap({
    					[/*className*/ ctx[3]]: true,
    					'smui-autocomplete': true
    				}))) && { class: div1_class_value },
    				dirty[0] & /*$$restProps*/ 134217728 && exclude(/*$$restProps*/ ctx[27], ['menu$', 'textfield$', 'list$'])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			/*div0_binding*/ ctx[44](null);
    			destroy_component(menu);
    			/*div1_binding*/ ctx[51](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isInViewport(elem) {
    	var bounding = elem.getBoundingClientRect();
    	return bounding.top >= 0 && bounding.left >= 0 && bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) && bounding.right <= (window.innerWidth || document.documentElement.clientWidth);
    }

    function instance$12($$self, $$props, $$invalidate) {
    	let menuOpen;

    	const omit_props_names = [
    		"use","class","options","value","getOptionDisabled","getOptionLabel","text","label","disabled","toggle","combobox","clearOnBlur","selectOnExactMatch","showMenuWithNoInput","noMatchesActionDisabled","search","menu$class","menu$anchor","menu$anchorCorner","focus","blur","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Autocomplete', slots, ['default','loading','error','match','no-matches']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { options = [] } = $$props;
    	let { value = undefined } = $$props;
    	let { getOptionDisabled = () => false } = $$props;
    	let { getOptionLabel = option => option == null ? '' : `${option}` } = $$props;
    	let { text = getOptionLabel(value) } = $$props;
    	let { label = undefined } = $$props;
    	let { disabled = false } = $$props;
    	let { toggle = false } = $$props;
    	let { combobox = false } = $$props;
    	let { clearOnBlur = !combobox } = $$props;
    	let { selectOnExactMatch = true } = $$props;
    	let { showMenuWithNoInput = true } = $$props;
    	let { noMatchesActionDisabled = true } = $$props;

    	let { search = async input => {
    		const linput = input.toLowerCase();

    		const fullOptions = typeof options == 'function'
    		? await options()
    		: options || [];

    		if (linput === '') {
    			return fullOptions;
    		}

    		const result = fullOptions.filter(item => getOptionLabel(item).toLowerCase().includes(linput));

    		result.sort((a, b) => {
    			const aString = getOptionLabel(a).toLowerCase();
    			const bString = getOptionLabel(b).toLowerCase();

    			if (aString.startsWith(linput) && !bString.startsWith(linput)) {
    				return -1;
    			} else if (bString.startsWith(linput) && !aString.startsWith(linput)) {
    				return 1;
    			}

    			return 0;
    		});

    		return result;
    	} } = $$props;

    	let { menu$class = '' } = $$props;
    	let { menu$anchor = false } = $$props;
    	let { menu$anchorCorner = 'BOTTOM_START' } = $$props;
    	let element;
    	let inputContainer;
    	let loading = false;
    	let error = false;
    	let focused = false;
    	let listAccessor;
    	let matches = [];
    	let focusedIndex = -1;
    	let focusedItem = undefined;
    	let previousText = undefined;
    	let previousValue = value;
    	let previousFocusedIndex = undefined;

    	function handleListAccessor(event) {
    		if (!listAccessor) {
    			$$invalidate(37, listAccessor = event.detail);
    		}
    	}

    	function selectOption(option, setText = true) {
    		if (setText) {
    			$$invalidate(1, text = getOptionLabel(option));
    		}

    		$$invalidate(0, value = option);

    		if (!setText) {
    			$$invalidate(40, previousValue = option);
    		}

    		dispatch(element, 'SMUIAutocomplete:selected', option);
    	}

    	function deselectOption(option, setText = true) {
    		if (setText) {
    			$$invalidate(1, text = '');
    		}

    		$$invalidate(0, value = undefined);

    		if (!setText) {
    			$$invalidate(40, previousValue = undefined);
    		}

    		dispatch(element, 'SMUIAutocomplete:deselected', option);
    	}

    	function toggleOption(option) {
    		if (option === value) {
    			deselectOption(option);
    		} else {
    			selectOption(option);
    		}
    	}

    	function getActiveMenuItems() {
    		if (!listAccessor) {
    			return [];
    		}

    		return listAccessor.getOrderedList().filter(itemAccessor => !itemAccessor.disabled);
    	}

    	function handleTextfieldKeydown(e) {
    		if (combobox && !matches.length) {
    			return;
    		}

    		if (e.key === 'ArrowDown') {
    			e.preventDefault();

    			if (focusedIndex === -1 || focusedIndex === getActiveMenuItems().length - 1) {
    				$$invalidate(16, focusedIndex = 0);
    			} else {
    				$$invalidate(16, focusedIndex++, focusedIndex);
    			}
    		} else if (e.key === 'ArrowUp') {
    			e.preventDefault();

    			if (focusedIndex === -1 || focusedIndex === 0) {
    				$$invalidate(16, focusedIndex = getActiveMenuItems().length - 1);
    			} else {
    				$$invalidate(16, focusedIndex--, focusedIndex);
    			}
    		} else if (e.key === 'Enter') {
    			e.preventDefault();
    			const activeItems = getActiveMenuItems();

    			if (focusedItem) {
    				if (activeItems[focusedIndex]) {
    					activeItems[focusedIndex].action(e);
    				}

    				$$invalidate(16, focusedIndex = -1);
    			}
    		}
    	}

    	async function handleTextfieldBlur(event) {
    		// Check if the reason we're unfocusing is that the user clicked an item.
    		if (event.relatedTarget && getActiveMenuItems().map(itemAccessor => itemAccessor.element).indexOf(event.relatedTarget) !== -1) {
    			return;
    		}

    		// Else, clear the currently focused item and mark as not focused.
    		$$invalidate(16, focusedIndex = -1);

    		$$invalidate(14, focused = false);

    		if (clearOnBlur && value == null) {
    			$$invalidate(1, text = '');
    		}
    	}

    	function focus() {
    		if (inputContainer) {
    			const inputEl = inputContainer.querySelector('input.mdc-text-field__input');

    			if (inputEl) {
    				inputEl.focus();
    			}
    		}
    	}

    	function blur() {
    		if (inputContainer) {
    			const inputEl = inputContainer.querySelector('input.mdc-text-field__input');

    			if (inputEl) {
    				inputEl.blur();
    			}
    		}
    	}

    	function getElement() {
    		return element;
    	}

    	function textfield_value_binding(value$1) {
    		text = value$1;
    		(((($$invalidate(1, text), $$invalidate(29, combobox)), $$invalidate(40, previousValue)), $$invalidate(0, value)), $$invalidate(5, getOptionLabel));
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputContainer = $$value;
    			$$invalidate(18, inputContainer);
    		});
    	}

    	const focusin_handler = () => {
    		$$invalidate(14, focused = true);
    	};

    	const input_handler = () => {
    		$$invalidate(16, focusedIndex = -1);
    	};

    	const mouseenter_handler = i => {
    		$$invalidate(16, focusedIndex = i);
    	};

    	const SMUI_action_handler = match => toggle ? toggleOption(match) : selectOption(match);
    	const SMUI_action_handler_1 = e => dispatch(element, 'SMUIAutocomplete:noMatchesAction', e);

    	function menu_anchorElement_binding(value) {
    		element = value;
    		$$invalidate(17, element);
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(17, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(27, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('options' in $$new_props) $$invalidate(28, options = $$new_props.options);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('getOptionDisabled' in $$new_props) $$invalidate(4, getOptionDisabled = $$new_props.getOptionDisabled);
    		if ('getOptionLabel' in $$new_props) $$invalidate(5, getOptionLabel = $$new_props.getOptionLabel);
    		if ('text' in $$new_props) $$invalidate(1, text = $$new_props.text);
    		if ('label' in $$new_props) $$invalidate(6, label = $$new_props.label);
    		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
    		if ('toggle' in $$new_props) $$invalidate(8, toggle = $$new_props.toggle);
    		if ('combobox' in $$new_props) $$invalidate(29, combobox = $$new_props.combobox);
    		if ('clearOnBlur' in $$new_props) $$invalidate(30, clearOnBlur = $$new_props.clearOnBlur);
    		if ('selectOnExactMatch' in $$new_props) $$invalidate(31, selectOnExactMatch = $$new_props.selectOnExactMatch);
    		if ('showMenuWithNoInput' in $$new_props) $$invalidate(32, showMenuWithNoInput = $$new_props.showMenuWithNoInput);
    		if ('noMatchesActionDisabled' in $$new_props) $$invalidate(9, noMatchesActionDisabled = $$new_props.noMatchesActionDisabled);
    		if ('search' in $$new_props) $$invalidate(33, search = $$new_props.search);
    		if ('menu$class' in $$new_props) $$invalidate(10, menu$class = $$new_props.menu$class);
    		if ('menu$anchor' in $$new_props) $$invalidate(11, menu$anchor = $$new_props.menu$anchor);
    		if ('menu$anchorCorner' in $$new_props) $$invalidate(12, menu$anchorCorner = $$new_props.menu$anchorCorner);
    		if ('$$scope' in $$new_props) $$invalidate(52, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		Textfield,
    		Menu,
    		List,
    		Item,
    		Text: Text$2,
    		Anchor,
    		forwardEvents,
    		use,
    		className,
    		options,
    		value,
    		getOptionDisabled,
    		getOptionLabel,
    		text,
    		label,
    		disabled,
    		toggle,
    		combobox,
    		clearOnBlur,
    		selectOnExactMatch,
    		showMenuWithNoInput,
    		noMatchesActionDisabled,
    		search,
    		menu$class,
    		menu$anchor,
    		menu$anchorCorner,
    		element,
    		inputContainer,
    		loading,
    		error,
    		focused,
    		listAccessor,
    		matches,
    		focusedIndex,
    		focusedItem,
    		previousText,
    		previousValue,
    		previousFocusedIndex,
    		handleListAccessor,
    		selectOption,
    		deselectOption,
    		toggleOption,
    		isInViewport,
    		getActiveMenuItems,
    		handleTextfieldKeydown,
    		handleTextfieldBlur,
    		focus,
    		blur,
    		getElement,
    		menuOpen
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('options' in $$props) $$invalidate(28, options = $$new_props.options);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('getOptionDisabled' in $$props) $$invalidate(4, getOptionDisabled = $$new_props.getOptionDisabled);
    		if ('getOptionLabel' in $$props) $$invalidate(5, getOptionLabel = $$new_props.getOptionLabel);
    		if ('text' in $$props) $$invalidate(1, text = $$new_props.text);
    		if ('label' in $$props) $$invalidate(6, label = $$new_props.label);
    		if ('disabled' in $$props) $$invalidate(7, disabled = $$new_props.disabled);
    		if ('toggle' in $$props) $$invalidate(8, toggle = $$new_props.toggle);
    		if ('combobox' in $$props) $$invalidate(29, combobox = $$new_props.combobox);
    		if ('clearOnBlur' in $$props) $$invalidate(30, clearOnBlur = $$new_props.clearOnBlur);
    		if ('selectOnExactMatch' in $$props) $$invalidate(31, selectOnExactMatch = $$new_props.selectOnExactMatch);
    		if ('showMenuWithNoInput' in $$props) $$invalidate(32, showMenuWithNoInput = $$new_props.showMenuWithNoInput);
    		if ('noMatchesActionDisabled' in $$props) $$invalidate(9, noMatchesActionDisabled = $$new_props.noMatchesActionDisabled);
    		if ('search' in $$props) $$invalidate(33, search = $$new_props.search);
    		if ('menu$class' in $$props) $$invalidate(10, menu$class = $$new_props.menu$class);
    		if ('menu$anchor' in $$props) $$invalidate(11, menu$anchor = $$new_props.menu$anchor);
    		if ('menu$anchorCorner' in $$props) $$invalidate(12, menu$anchorCorner = $$new_props.menu$anchorCorner);
    		if ('element' in $$props) $$invalidate(17, element = $$new_props.element);
    		if ('inputContainer' in $$props) $$invalidate(18, inputContainer = $$new_props.inputContainer);
    		if ('loading' in $$props) $$invalidate(13, loading = $$new_props.loading);
    		if ('error' in $$props) $$invalidate(19, error = $$new_props.error);
    		if ('focused' in $$props) $$invalidate(14, focused = $$new_props.focused);
    		if ('listAccessor' in $$props) $$invalidate(37, listAccessor = $$new_props.listAccessor);
    		if ('matches' in $$props) $$invalidate(15, matches = $$new_props.matches);
    		if ('focusedIndex' in $$props) $$invalidate(16, focusedIndex = $$new_props.focusedIndex);
    		if ('focusedItem' in $$props) $$invalidate(38, focusedItem = $$new_props.focusedItem);
    		if ('previousText' in $$props) $$invalidate(39, previousText = $$new_props.previousText);
    		if ('previousValue' in $$props) $$invalidate(40, previousValue = $$new_props.previousValue);
    		if ('previousFocusedIndex' in $$props) $$invalidate(41, previousFocusedIndex = $$new_props.previousFocusedIndex);
    		if ('menuOpen' in $$props) $$invalidate(20, menuOpen = $$new_props.menuOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*combobox, value, getOptionLabel, text*/ 536870947 | $$self.$$.dirty[1] & /*previousValue*/ 512) {
    			if (!combobox && previousValue !== value) {
    				// If the value changes from outside, update the text.
    				$$invalidate(1, text = getOptionLabel(value));

    				$$invalidate(40, previousValue = value);
    			} else if (combobox) {
    				// If the text changes, update value if we're a combobox.
    				$$invalidate(0, value = text);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*text, combobox, value, getOptionLabel, matches*/ 536903715 | $$self.$$.dirty[1] & /*previousText, search, selectOnExactMatch*/ 261) {
    			if (previousText !== text) {
    				if (!combobox && value != null && getOptionLabel(value) !== text) {
    					deselectOption(value, false);
    				}

    				(async () => {
    					$$invalidate(13, loading = true);
    					$$invalidate(19, error = false);

    					try {
    						const searchResult = await search(text);

    						if (searchResult !== false) {
    							$$invalidate(15, matches = searchResult);

    							if (selectOnExactMatch) {
    								const exactMatch = matches.find(match => getOptionLabel(match) === text);

    								if (exactMatch && value !== exactMatch) {
    									selectOption(exactMatch);
    								}
    							}
    						}
    					} catch(e) {
    						$$invalidate(19, error = true);
    					}

    					$$invalidate(13, loading = false);
    				})();

    				$$invalidate(39, previousText = text);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*focused, text, loading, combobox, matches, value*/ 536928259 | $$self.$$.dirty[1] & /*showMenuWithNoInput*/ 2) {
    			$$invalidate(20, menuOpen = focused && (text !== '' || showMenuWithNoInput) && (loading || !combobox && !(matches.length === 1 && matches[0] === value) || combobox && !!matches.length && !(matches.length === 1 && matches[0] === value)));
    		}

    		if ($$self.$$.dirty[0] & /*focusedIndex*/ 65536 | $$self.$$.dirty[1] & /*previousFocusedIndex, focusedItem, listAccessor*/ 1216) {
    			if (previousFocusedIndex !== focusedIndex) {
    				const activeItems = getActiveMenuItems();

    				if (focusedIndex === -1) {
    					$$invalidate(38, focusedItem = undefined);
    				} else {
    					$$invalidate(38, focusedItem = activeItems[focusedIndex]);

    					if (focusedItem) {
    						$$invalidate(38, focusedItem.activated = true, focusedItem);

    						if (!isInViewport(focusedItem.element)) {
    							focusedItem.element.scrollIntoView({ block: 'end', inline: 'nearest' });
    						}
    					}
    				}

    				activeItems.forEach((item, i) => {
    					if (i !== focusedIndex) {
    						item.activated = false;
    					}
    				});

    				if (listAccessor) {
    					listAccessor.getOrderedList().forEach(itemAccessor => {
    						itemAccessor.tabindex = -1;
    					});
    				}

    				$$invalidate(41, previousFocusedIndex = focusedIndex);
    			}
    		}
    	};

    	return [
    		value,
    		text,
    		use,
    		className,
    		getOptionDisabled,
    		getOptionLabel,
    		label,
    		disabled,
    		toggle,
    		noMatchesActionDisabled,
    		menu$class,
    		menu$anchor,
    		menu$anchorCorner,
    		loading,
    		focused,
    		matches,
    		focusedIndex,
    		element,
    		inputContainer,
    		error,
    		menuOpen,
    		forwardEvents,
    		handleListAccessor,
    		selectOption,
    		toggleOption,
    		handleTextfieldKeydown,
    		handleTextfieldBlur,
    		$$restProps,
    		options,
    		combobox,
    		clearOnBlur,
    		selectOnExactMatch,
    		showMenuWithNoInput,
    		search,
    		focus,
    		blur,
    		getElement,
    		listAccessor,
    		focusedItem,
    		previousText,
    		previousValue,
    		previousFocusedIndex,
    		slots,
    		textfield_value_binding,
    		div0_binding,
    		focusin_handler,
    		input_handler,
    		mouseenter_handler,
    		SMUI_action_handler,
    		SMUI_action_handler_1,
    		menu_anchorElement_binding,
    		div1_binding,
    		$$scope
    	];
    }

    class Autocomplete extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$12,
    			create_fragment$1b,
    			safe_not_equal,
    			{
    				use: 2,
    				class: 3,
    				options: 28,
    				value: 0,
    				getOptionDisabled: 4,
    				getOptionLabel: 5,
    				text: 1,
    				label: 6,
    				disabled: 7,
    				toggle: 8,
    				combobox: 29,
    				clearOnBlur: 30,
    				selectOnExactMatch: 31,
    				showMenuWithNoInput: 32,
    				noMatchesActionDisabled: 9,
    				search: 33,
    				menu$class: 10,
    				menu$anchor: 11,
    				menu$anchorCorner: 12,
    				focus: 34,
    				blur: 35,
    				getElement: 36
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Autocomplete",
    			options,
    			id: create_fragment$1b.name
    		});
    	}

    	get use() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionDisabled() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionDisabled(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get toggle() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggle(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get combobox() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set combobox(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clearOnBlur() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clearOnBlur(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectOnExactMatch() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectOnExactMatch(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showMenuWithNoInput() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showMenuWithNoInput(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noMatchesActionDisabled() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noMatchesActionDisabled(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get search() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set search(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menu$class() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menu$class(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menu$anchor() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menu$anchor(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menu$anchorCorner() {
    		throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menu$anchorCorner(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[34];
    	}

    	set focus(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blur() {
    		return this.$$.ctx[35];
    	}

    	set blur(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[36];
    	}

    	set getElement(value) {
    		throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function mapCountryToName(country) {
        if (!country) {
            return null;
        }
        let data = getCountryData();
        let maybe = data.find(item => country == Country[item.code]);
        if (maybe) {
            return maybe.name;
        }
        return null;
    }
    function getCountryData() {
        return [
            {
                "name": "Afghanistan",
                "code": "AF"
            },
            {
                "name": "Ägypten",
                "code": "EG"
            },
            {
                "name": "Aland",
                "code": "AX"
            },
            {
                "name": "Albanien",
                "code": "AL"
            },
            {
                "name": "Algerien",
                "code": "DZ"
            },
            {
                "name": "Andorra",
                "code": "AD"
            },
            {
                "name": "Angola",
                "code": "AO"
            },
            {
                "name": "Anguilla",
                "code": "AI"
            },
            {
                "name": "Antarktis",
                "code": "AQ"
            },
            {
                "name": "Antigua und Barbuda",
                "code": "AG"
            },
            {
                "name": "Äquatorial Guinea",
                "code": "GQ"
            },
            {
                "name": "Argentinien",
                "code": "AR"
            },
            {
                "name": "Armenien",
                "code": "AM"
            },
            {
                "name": "Aruba",
                "code": "AW"
            },
            {
                "name": "Aserbeidschan",
                "code": "AZ"
            },
            {
                "name": "Äthiopien",
                "code": "ET"
            },
            {
                "name": "Australien",
                "code": "AU"
            },
            {
                "name": "Bahamas",
                "code": "BS"
            },
            {
                "name": "Bahrain",
                "code": "BH"
            },
            {
                "name": "Bangladesch",
                "code": "BD"
            },
            {
                "name": "Barbados",
                "code": "BB"
            },
            {
                "name": "Belarus (Weissrussland)",
                "code": "BY"
            },
            {
                "name": "Belgien",
                "code": "BE"
            },
            {
                "name": "Belize",
                "code": "BZ"
            },
            {
                "name": "Benin",
                "code": "BJ"
            },
            {
                "name": "Bermuda",
                "code": "BM"
            },
            {
                "name": "Bhutan",
                "code": "BT"
            },
            {
                "name": "Bolivien",
                "code": "BO"
            },
            {
                "name": "Bonaire, St. Eustatius und Saba",
                "code": "BQ"
            },
            {
                "name": "Bosnien und Herzegowina",
                "code": "BA"
            },
            {
                "name": "Botsuana",
                "code": "BW"
            },
            {
                "name": "Bouvetinsel",
                "code": "BV"
            },
            {
                "name": "Brasilien",
                "code": "BR"
            },
            {
                "name": "Brit.Terr.Im Indischen Ozean",
                "code": "IO"
            },
            {
                "name": "Brunei Darussalam",
                "code": "BN"
            },
            {
                "name": "Bulgarien",
                "code": "BG"
            },
            {
                "name": "Burkina Faso",
                "code": "BF"
            },
            {
                "name": "Burundi",
                "code": "BI"
            },
            {
                "name": "Chile",
                "code": "CL"
            },
            {
                "name": "China",
                "code": "CN"
            },
            {
                "name": "Cook-Inseln Neuseel.Verwaltung",
                "code": "CK"
            },
            {
                "name": "Costa Rica",
                "code": "CR"
            },
            {
                "name": "Cote D'Ivoire (Elfenbeinkueste)",
                "code": "CI"
            },
            {
                "name": "Curaçao",
                "code": "CW"
            },
            {
                "name": "Dänemark",
                "code": "DK"
            },
            {
                "name": "Deutschland",
                "code": "DE"
            },
            {
                "name": "Dominica",
                "code": "DM"
            },
            {
                "name": "Dominikanische Republik",
                "code": "DO"
            },
            {
                "name": "Dschibuti",
                "code": "DJ"
            },
            {
                "name": "Ecuador",
                "code": "EC"
            },
            {
                "name": "El Salvador",
                "code": "SV"
            },
            {
                "name": "Eritrea",
                "code": "ER"
            },
            {
                "name": "Estland",
                "code": "EE"
            },
            {
                "name": "Eswatini",
                "code": "SZ"
            },
            {
                "name": "Faeroeer Inseln Dän.Verwaltung",
                "code": "FO"
            },
            {
                "name": "Falklandinseln (Malvinen)",
                "code": "FK"
            },
            {
                "name": "Fidschi",
                "code": "FJ"
            },
            {
                "name": "Finnland",
                "code": "FI"
            },
            {
                "name": "Frankreich",
                "code": "FR"
            },
            {
                "name": "Franz. Südgebiete",
                "code": "TF"
            },
            {
                "name": "Französisch Guayana",
                "code": "GF"
            },
            {
                "name": "Französisch Polynesien",
                "code": "PF"
            },
            {
                "name": "Gabun",
                "code": "GA"
            },
            {
                "name": "Gambia",
                "code": "GM"
            },
            {
                "name": "Georgien",
                "code": "GE"
            },
            {
                "name": "Ghana",
                "code": "GH"
            },
            {
                "name": "Gibraltar",
                "code": "GI"
            },
            {
                "name": "Grenada",
                "code": "GD"
            },
            {
                "name": "Griechenland",
                "code": "GR"
            },
            {
                "name": "Grönland (Dän.Verwaltung)",
                "code": "GL"
            },
            {
                "name": "Großbritannien",
                "code": "GB"
            },
            {
                "name": "Guadeloupe (Franz.Verwaltung)",
                "code": "GP"
            },
            {
                "name": "Guam (US-Verwaltung)",
                "code": "GU"
            },
            {
                "name": "Guatemala",
                "code": "GT"
            },
            {
                "name": "Guernsey Insel",
                "code": "GG"
            },
            {
                "name": "Guinea",
                "code": "GN"
            },
            {
                "name": "Guinea-Bissau",
                "code": "GW"
            },
            {
                "name": "Guyana",
                "code": "GY"
            },
            {
                "name": "Haiti",
                "code": "HT"
            },
            {
                "name": "Heard und Mc Donald Inseln (unter Austr.Verw.)",
                "code": "HM"
            },
            {
                "name": "Honduras",
                "code": "HN"
            },
            {
                "name": "Hongkong",
                "code": "HK"
            },
            {
                "name": "Indien",
                "code": "IN"
            },
            {
                "name": "Indonesien",
                "code": "ID"
            },
            {
                "name": "Irak",
                "code": "IQ"
            },
            {
                "name": "Iran",
                "code": "IR"
            },
            {
                "name": "Irland",
                "code": "IE"
            },
            {
                "name": "Island",
                "code": "IS"
            },
            {
                "name": "Israel",
                "code": "IL"
            },
            {
                "name": "Italien",
                "code": "IT"
            },
            {
                "name": "Jamaika",
                "code": "JM"
            },
            {
                "name": "Japan",
                "code": "JP"
            },
            {
                "name": "Jemen",
                "code": "YE"
            },
            {
                "name": "Jersey Insel",
                "code": "JE"
            },
            {
                "name": "Jordanien",
                "code": "JO"
            },
            {
                "name": "Jungfern-Inseln (Britisch)",
                "code": "VG"
            },
            {
                "name": "Jungfern-Inseln (USA)",
                "code": "VI"
            },
            {
                "name": "Kaimaninseln",
                "code": "KY"
            },
            {
                "name": "Kambodscha",
                "code": "KH"
            },
            {
                "name": "Kamerun",
                "code": "CM"
            },
            {
                "name": "Kanada",
                "code": "CA"
            },
            {
                "name": "Kap Verde",
                "code": "CV"
            },
            {
                "name": "Kasachstan",
                "code": "KZ"
            },
            {
                "name": "Katar",
                "code": "QA"
            },
            {
                "name": "Kenia",
                "code": "KE"
            },
            {
                "name": "Kirgisistan",
                "code": "KG"
            },
            {
                "name": "Kiribati",
                "code": "KI"
            },
            {
                "name": "Kokosinseln (Keeling)",
                "code": "CC"
            },
            {
                "name": "Kolumbien",
                "code": "CO"
            },
            {
                "name": "Komoren",
                "code": "KM"
            },
            {
                "name": "Kongo",
                "code": "CG"
            },
            {
                "name": "Kongo, Demokratische Republik",
                "code": "CD"
            },
            {
                "name": "Korea, Demokratische Volksrepublik",
                "code": "KP"
            },
            {
                "name": "Korea, Republik",
                "code": "KR"
            },
            {
                "name": "Kosovo",
                "code": "XK"
            },
            {
                "name": "Kroatien",
                "code": "HR"
            },
            {
                "name": "Kuba",
                "code": "CU"
            },
            {
                "name": "Kuwait",
                "code": "KW"
            },
            {
                "name": "Laos",
                "code": "LA"
            },
            {
                "name": "Lesotho",
                "code": "LS"
            },
            {
                "name": "Lettland",
                "code": "LV"
            },
            {
                "name": "Libanon",
                "code": "LB"
            },
            {
                "name": "Liberien",
                "code": "LR"
            },
            {
                "name": "Libysch-Arabische Dschamahirija",
                "code": "LY"
            },
            {
                "name": "Liechtenstein",
                "code": "LI"
            },
            {
                "name": "Litauen",
                "code": "LT"
            },
            {
                "name": "Luxemburg",
                "code": "LU"
            },
            {
                "name": "Macao",
                "code": "MO"
            },
            {
                "name": "Madagaskar",
                "code": "MG"
            },
            {
                "name": "Malawi",
                "code": "MW"
            },
            {
                "name": "Malaysia",
                "code": "MY"
            },
            {
                "name": "Malediven",
                "code": "MV"
            },
            {
                "name": "Mali",
                "code": "ML"
            },
            {
                "name": "Malta",
                "code": "MT"
            },
            {
                "name": "Man, Insel",
                "code": "IM"
            },
            {
                "name": "Marianen, Nördliche",
                "code": "MP"
            },
            {
                "name": "Marokko",
                "code": "MA"
            },
            {
                "name": "Marshall Inseln",
                "code": "MH"
            },
            {
                "name": "Martinique Franz.Verwaltung",
                "code": "MQ"
            },
            {
                "name": "Mauretanien",
                "code": "MR"
            },
            {
                "name": "Mauritius",
                "code": "MU"
            },
            {
                "name": "Mayotte",
                "code": "YT"
            },
            {
                "name": "Mexiko",
                "code": "MX"
            },
            {
                "name": "Mikronesien",
                "code": "FM"
            },
            {
                "name": "Moldau, Republik",
                "code": "MD"
            },
            {
                "name": "Monaco",
                "code": "MC"
            },
            {
                "name": "Mongolei",
                "code": "MN"
            },
            {
                "name": "Montenegro",
                "code": "ME"
            },
            {
                "name": "Montserrat (GB-Verwaltung)",
                "code": "MS"
            },
            {
                "name": "Mosambik",
                "code": "MZ"
            },
            {
                "name": "Myanmar",
                "code": "MM"
            },
            {
                "name": "Namibia",
                "code": "NA"
            },
            {
                "name": "Nauru",
                "code": "NR"
            },
            {
                "name": "Nepal",
                "code": "NP"
            },
            {
                "name": "Neukaledonien",
                "code": "NC"
            },
            {
                "name": "Neuseeland",
                "code": "NZ"
            },
            {
                "name": "Nicaragua",
                "code": "NI"
            },
            {
                "name": "Niederlande",
                "code": "NL"
            },
            {
                "name": "Niger",
                "code": "NE"
            },
            {
                "name": "Nigeria",
                "code": "NG"
            },
            {
                "name": "Niue (Neuseel.Verwaltung)",
                "code": "NU"
            },
            {
                "name": "Norfolkinsel",
                "code": "NF"
            },
            {
                "name": "Norwegen",
                "code": "NO"
            },
            {
                "name": "Oman",
                "code": "OM"
            },
            {
                "name": "Österreich",
                "code": "AT"
            },
            {
                "name": "Pakistan",
                "code": "PK"
            },
            {
                "name": "Palästina",
                "code": "PS"
            },
            {
                "name": "Palau",
                "code": "PW"
            },
            {
                "name": "Panama",
                "code": "PA"
            },
            {
                "name": "Papua Neuguinea",
                "code": "PG"
            },
            {
                "name": "Paraguay",
                "code": "PY"
            },
            {
                "name": "Peru",
                "code": "PE"
            },
            {
                "name": "Philippinen",
                "code": "PH"
            },
            {
                "name": "Pitcairninsel",
                "code": "PN"
            },
            {
                "name": "Polen",
                "code": "PL"
            },
            {
                "name": "Portugal",
                "code": "PT"
            },
            {
                "name": "Puerto Rico (US-Verwaltung)",
                "code": "PR"
            },
            {
                "name": "Republik Nordmazedonien",
                "code": "MK"
            },
            {
                "name": "Reunion",
                "code": "RE"
            },
            {
                "name": "Ruanda",
                "code": "RW"
            },
            {
                "name": "Rumänien",
                "code": "RO"
            },
            {
                "name": "Russische Föderation",
                "code": "RU"
            },
            {
                "name": "Saint Barthélemy (Franz.Verwaltung)",
                "code": "BL"
            },
            {
                "name": "Saint Martin (Franz. Verwaltung)",
                "code": "MF"
            },
            {
                "name": "Salomonen",
                "code": "SB"
            },
            {
                "name": "Sambia",
                "code": "ZM"
            },
            {
                "name": "Samoa-Amerikanisch (US-Verwaltung)",
                "code": "AS"
            },
            {
                "name": "Samoa-West",
                "code": "WS"
            },
            {
                "name": "San Marino",
                "code": "SM"
            },
            {
                "name": "Sao Tome und Principe",
                "code": "ST"
            },
            {
                "name": "Saudi-Arabien",
                "code": "SA"
            },
            {
                "name": "Schweden",
                "code": "SE"
            },
            {
                "name": "Schweiz",
                "code": "CH"
            },
            {
                "name": "Senegal",
                "code": "SN"
            },
            {
                "name": "Serbien (exkl. Kosovo)",
                "code": "RS"
            },
            {
                "name": "Seychellen",
                "code": "SC"
            },
            {
                "name": "Sierra Leone",
                "code": "SL"
            },
            {
                "name": "Simbabwe",
                "code": "ZW"
            },
            {
                "name": "Singapur",
                "code": "SG"
            },
            {
                "name": "Slowakei",
                "code": "SK"
            },
            {
                "name": "Slowenien",
                "code": "SI"
            },
            {
                "name": "Somalia",
                "code": "SO"
            },
            {
                "name": "Spanien",
                "code": "ES"
            },
            {
                "name": "Spitzb. und Jan Mayen Insel (Norw.Verw.)",
                "code": "SJ"
            },
            {
                "name": "Sri Lanka",
                "code": "LK"
            },
            {
                "name": "St. Martin",
                "code": "SX"
            },
            {
                "name": "St. Vincent und die Grenadinen",
                "code": "VC"
            },
            {
                "name": "St.Helena",
                "code": "SH"
            },
            {
                "name": "St.Kitts und Nevis",
                "code": "KN"
            },
            {
                "name": "St.Lucia",
                "code": "LC"
            },
            {
                "name": "St.Pierre und Miquelon",
                "code": "PM"
            },
            {
                "name": "Südafrika",
                "code": "ZA"
            },
            {
                "name": "Sudan",
                "code": "SD"
            },
            {
                "name": "Südgeorgien und Süd-Sandwich-Insel",
                "code": "GS"
            },
            {
                "name": "Südsudan",
                "code": "SS"
            },
            {
                "name": "Suriname",
                "code": "SR"
            },
            {
                "name": "Syrien",
                "code": "SY"
            },
            {
                "name": "Tadschikistan",
                "code": "TJ"
            },
            {
                "name": "Taiwan",
                "code": "TW"
            },
            {
                "name": "Tansania, Vereinigte Republik",
                "code": "TZ"
            },
            {
                "name": "Thailand",
                "code": "TH"
            },
            {
                "name": "Timor-Leste",
                "code": "TL"
            },
            {
                "name": "Togo",
                "code": "TG"
            },
            {
                "name": "Tokelau (Neuseel.Verwaltung)",
                "code": "TK"
            },
            {
                "name": "Tonga",
                "code": "TO"
            },
            {
                "name": "Trinidad und Tobago",
                "code": "TT"
            },
            {
                "name": "Tschad",
                "code": "TD"
            },
            {
                "name": "Tschechien",
                "code": "CZ"
            },
            {
                "name": "Tunesien",
                "code": "TN"
            },
            {
                "name": "Türkei",
                "code": "TR"
            },
            {
                "name": "Turkmenistan",
                "code": "TM"
            },
            {
                "name": "Turks- und Caicosinseln",
                "code": "TC"
            },
            {
                "name": "Tuvalu",
                "code": "TV"
            },
            {
                "name": "Uganda",
                "code": "UG"
            },
            {
                "name": "Ukraine",
                "code": "UA"
            },
            {
                "name": "Ungarn",
                "code": "HU"
            },
            {
                "name": "Uruguay",
                "code": "UY"
            },
            {
                "name": "USA - Sonstige Kleine Inseln",
                "code": "UM"
            },
            {
                "name": "USA - Vereinigte Staaten",
                "code": "US"
            },
            {
                "name": "Usbekistan",
                "code": "UZ"
            },
            {
                "name": "Vanuatu",
                "code": "VU"
            },
            {
                "name": "Vatikan",
                "code": "VA"
            },
            {
                "name": "Venezuela",
                "code": "VE"
            },
            {
                "name": "Vereinigte Arabische Emirate",
                "code": "AE"
            },
            {
                "name": "Vietnam",
                "code": "VN"
            },
            {
                "name": "Wallis und Futuna",
                "code": "WF"
            },
            {
                "name": "Weihnachtsinsel (Austr.Verwaltung)",
                "code": "CX"
            },
            {
                "name": "Westsahara Eigenst.Staat",
                "code": "EH"
            },
            {
                "name": "Zentralafrikanische Republik",
                "code": "CF"
            },
            {
                "name": "Zypern",
                "code": "CY"
            }
        ];
    }

    /* src/components/CountryComponent.svelte generated by Svelte v3.44.3 */

    function create_fragment$1a(ctx) {
    	let autocomplete;
    	let updating_value;
    	let current;

    	function autocomplete_value_binding(value) {
    		/*autocomplete_value_binding*/ ctx[6](value);
    	}

    	let autocomplete_props = {
    		options: /*options*/ ctx[4],
    		style: /*style*/ ctx[1],
    		label: /*label*/ ctx[0],
    		textfield$style: /*style*/ ctx[1],
    		disabled: !/*edit*/ ctx[2]
    	};

    	if (/*value*/ ctx[3] !== void 0) {
    		autocomplete_props.value = /*value*/ ctx[3];
    	}

    	autocomplete = new Autocomplete({
    			props: autocomplete_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(autocomplete, 'value', autocomplete_value_binding));

    	const block = {
    		c: function create() {
    			create_component(autocomplete.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(autocomplete, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const autocomplete_changes = {};
    			if (dirty & /*style*/ 2) autocomplete_changes.style = /*style*/ ctx[1];
    			if (dirty & /*label*/ 1) autocomplete_changes.label = /*label*/ ctx[0];
    			if (dirty & /*style*/ 2) autocomplete_changes.textfield$style = /*style*/ ctx[1];
    			if (dirty & /*edit*/ 4) autocomplete_changes.disabled = !/*edit*/ ctx[2];

    			if (!updating_value && dirty & /*value*/ 8) {
    				updating_value = true;
    				autocomplete_changes.value = /*value*/ ctx[3];
    				add_flush_callback(() => updating_value = false);
    			}

    			autocomplete.$set(autocomplete_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(autocomplete.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(autocomplete.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(autocomplete, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$11($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(7, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CountryComponent', slots, []);
    	let { country } = $$props;
    	let { label = $l.personal.country } = $$props;
    	let { style = 'width: 100%;' } = $$props;
    	let { edit } = $$props;
    	let countryData = getCountryData();
    	let maybeInit = countryData.find(item => country == Country[item.code]);
    	let options = countryData.map(item => item.name);
    	let value = maybeInit ? maybeInit.name : '';
    	const writable_props = ['country', 'label', 'style', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CountryComponent> was created with unknown prop '${key}'`);
    	});

    	function autocomplete_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(3, value);
    	}

    	$$self.$$set = $$props => {
    		if ('country' in $$props) $$invalidate(5, country = $$props.country);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		Autocomplete,
    		getCountryData,
    		Country,
    		country,
    		label,
    		style,
    		edit,
    		countryData,
    		maybeInit,
    		options,
    		value,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('country' in $$props) $$invalidate(5, country = $$props.country);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    		if ('countryData' in $$props) $$invalidate(8, countryData = $$props.countryData);
    		if ('maybeInit' in $$props) maybeInit = $$props.maybeInit;
    		if ('options' in $$props) $$invalidate(4, options = $$props.options);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 8) {
    			if (value) {
    				let maybeFound = countryData.find(item => value == item.name);

    				if (maybeFound) {
    					$$invalidate(5, country = maybeFound.code);
    				}
    			}
    		}
    	};

    	return [label, style, edit, value, options, country, autocomplete_value_binding];
    }

    class CountryComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$11, create_fragment$1a, safe_not_equal, { country: 5, label: 0, style: 1, edit: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CountryComponent",
    			options,
    			id: create_fragment$1a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*country*/ ctx[5] === undefined && !('country' in props)) {
    			console.warn("<CountryComponent> was created without expected prop 'country'");
    		}

    		if (/*edit*/ ctx[2] === undefined && !('edit' in props)) {
    			console.warn("<CountryComponent> was created without expected prop 'edit'");
    		}
    	}

    	get country() {
    		throw new Error("<CountryComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set country(value) {
    		throw new Error("<CountryComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<CountryComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<CountryComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<CountryComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<CountryComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<CountryComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<CountryComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$6 = {
        ACTIVATED: 'mdc-select--activated',
        DISABLED: 'mdc-select--disabled',
        FOCUSED: 'mdc-select--focused',
        INVALID: 'mdc-select--invalid',
        MENU_INVALID: 'mdc-select__menu--invalid',
        OUTLINED: 'mdc-select--outlined',
        REQUIRED: 'mdc-select--required',
        ROOT: 'mdc-select',
        WITH_LEADING_ICON: 'mdc-select--with-leading-icon',
    };
    var strings$7 = {
        ARIA_CONTROLS: 'aria-controls',
        ARIA_DESCRIBEDBY: 'aria-describedby',
        ARIA_SELECTED_ATTR: 'aria-selected',
        CHANGE_EVENT: 'MDCSelect:change',
        HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
        LABEL_SELECTOR: '.mdc-floating-label',
        LEADING_ICON_SELECTOR: '.mdc-select__icon',
        LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
        MENU_SELECTOR: '.mdc-select__menu',
        OUTLINE_SELECTOR: '.mdc-notched-outline',
        SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',
        SELECT_ANCHOR_SELECTOR: '.mdc-select__anchor',
        VALUE_ATTR: 'data-value',
    };
    var numbers$2 = {
        LABEL_SCALE: 0.75,
        UNSET_INDEX: -1,
        CLICK_DEBOUNCE_TIMEOUT_MS: 330,
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCSelectFoundation = /** @class */ (function (_super) {
        __extends(MDCSelectFoundation, _super);
        /* istanbul ignore next: optional argument is not a branch statement */
        /**
         * @param adapter
         * @param foundationMap Map from subcomponent names to their subfoundations.
         */
        function MDCSelectFoundation(adapter, foundationMap) {
            if (foundationMap === void 0) { foundationMap = {}; }
            var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation.defaultAdapter), adapter)) || this;
            // Disabled state
            _this.disabled = false;
            // isMenuOpen is used to track the state of the menu by listening to the
            // MDCMenuSurface:closed event For reference, menu.open will return false if
            // the menu is still closing, but isMenuOpen returns false only after the menu
            // has closed
            _this.isMenuOpen = false;
            // By default, select is invalid if it is required but no value is selected.
            _this.useDefaultValidation = true;
            _this.customValidity = true;
            _this.lastSelectedIndex = numbers$2.UNSET_INDEX;
            _this.clickDebounceTimeout = 0;
            _this.recentlyClicked = false;
            _this.leadingIcon = foundationMap.leadingIcon;
            _this.helperText = foundationMap.helperText;
            return _this;
        }
        Object.defineProperty(MDCSelectFoundation, "cssClasses", {
            get: function () {
                return cssClasses$6;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSelectFoundation, "numbers", {
            get: function () {
                return numbers$2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSelectFoundation, "strings", {
            get: function () {
                return strings$7;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
            /**
             * See {@link MDCSelectAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    activateBottomLine: function () { return undefined; },
                    deactivateBottomLine: function () { return undefined; },
                    getSelectedIndex: function () { return -1; },
                    setSelectedIndex: function () { return undefined; },
                    hasLabel: function () { return false; },
                    floatLabel: function () { return undefined; },
                    getLabelWidth: function () { return 0; },
                    setLabelRequired: function () { return undefined; },
                    hasOutline: function () { return false; },
                    notchOutline: function () { return undefined; },
                    closeOutline: function () { return undefined; },
                    setRippleCenter: function () { return undefined; },
                    notifyChange: function () { return undefined; },
                    setSelectedText: function () { return undefined; },
                    isSelectAnchorFocused: function () { return false; },
                    getSelectAnchorAttr: function () { return ''; },
                    setSelectAnchorAttr: function () { return undefined; },
                    removeSelectAnchorAttr: function () { return undefined; },
                    addMenuClass: function () { return undefined; },
                    removeMenuClass: function () { return undefined; },
                    openMenu: function () { return undefined; },
                    closeMenu: function () { return undefined; },
                    getAnchorElement: function () { return null; },
                    setMenuAnchorElement: function () { return undefined; },
                    setMenuAnchorCorner: function () { return undefined; },
                    setMenuWrapFocus: function () { return undefined; },
                    focusMenuItemAtIndex: function () { return undefined; },
                    getMenuItemCount: function () { return 0; },
                    getMenuItemValues: function () { return []; },
                    getMenuItemTextAtIndex: function () { return ''; },
                    isTypeaheadInProgress: function () { return false; },
                    typeaheadMatchItem: function () { return -1; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        /** Returns the index of the currently selected menu item, or -1 if none. */
        MDCSelectFoundation.prototype.getSelectedIndex = function () {
            return this.adapter.getSelectedIndex();
        };
        MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu, skipNotify) {
            if (closeMenu === void 0) { closeMenu = false; }
            if (skipNotify === void 0) { skipNotify = false; }
            if (index >= this.adapter.getMenuItemCount()) {
                return;
            }
            if (index === numbers$2.UNSET_INDEX) {
                this.adapter.setSelectedText('');
            }
            else {
                this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
            }
            this.adapter.setSelectedIndex(index);
            if (closeMenu) {
                this.adapter.closeMenu();
            }
            if (!skipNotify && this.lastSelectedIndex !== index) {
                this.handleChange();
            }
            this.lastSelectedIndex = index;
        };
        MDCSelectFoundation.prototype.setValue = function (value, skipNotify) {
            if (skipNotify === void 0) { skipNotify = false; }
            var index = this.adapter.getMenuItemValues().indexOf(value);
            this.setSelectedIndex(index, /** closeMenu */ false, skipNotify);
        };
        MDCSelectFoundation.prototype.getValue = function () {
            var index = this.adapter.getSelectedIndex();
            var menuItemValues = this.adapter.getMenuItemValues();
            return index !== numbers$2.UNSET_INDEX ? menuItemValues[index] : '';
        };
        MDCSelectFoundation.prototype.getDisabled = function () {
            return this.disabled;
        };
        MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {
            this.disabled = isDisabled;
            if (this.disabled) {
                this.adapter.addClass(cssClasses$6.DISABLED);
                this.adapter.closeMenu();
            }
            else {
                this.adapter.removeClass(cssClasses$6.DISABLED);
            }
            if (this.leadingIcon) {
                this.leadingIcon.setDisabled(this.disabled);
            }
            if (this.disabled) {
                // Prevent click events from focusing select. Simply pointer-events: none
                // is not enough since screenreader clicks may bypass this.
                this.adapter.removeSelectAnchorAttr('tabindex');
            }
            else {
                this.adapter.setSelectAnchorAttr('tabindex', '0');
            }
            this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());
        };
        /** Opens the menu. */
        MDCSelectFoundation.prototype.openMenu = function () {
            this.adapter.addClass(cssClasses$6.ACTIVATED);
            this.adapter.openMenu();
            this.isMenuOpen = true;
            this.adapter.setSelectAnchorAttr('aria-expanded', 'true');
        };
        /**
         * @param content Sets the content of the helper text.
         */
        MDCSelectFoundation.prototype.setHelperTextContent = function (content) {
            if (this.helperText) {
                this.helperText.setContent(content);
            }
        };
        /**
         * Re-calculates if the notched outline should be notched and if the label
         * should float.
         */
        MDCSelectFoundation.prototype.layout = function () {
            if (this.adapter.hasLabel()) {
                var optionHasValue = this.getValue().length > 0;
                var isFocused = this.adapter.hasClass(cssClasses$6.FOCUSED);
                var shouldFloatAndNotch = optionHasValue || isFocused;
                var isRequired = this.adapter.hasClass(cssClasses$6.REQUIRED);
                this.notchOutline(shouldFloatAndNotch);
                this.adapter.floatLabel(shouldFloatAndNotch);
                this.adapter.setLabelRequired(isRequired);
            }
        };
        /**
         * Synchronizes the list of options with the state of the foundation. Call
         * this whenever menu options are dynamically updated.
         */
        MDCSelectFoundation.prototype.layoutOptions = function () {
            var menuItemValues = this.adapter.getMenuItemValues();
            var selectedIndex = menuItemValues.indexOf(this.getValue());
            this.setSelectedIndex(selectedIndex, /** closeMenu */ false, /** skipNotify */ true);
        };
        MDCSelectFoundation.prototype.handleMenuOpened = function () {
            if (this.adapter.getMenuItemValues().length === 0) {
                return;
            }
            // Menu should open to the last selected element, should open to first menu item otherwise.
            var selectedIndex = this.getSelectedIndex();
            var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
            this.adapter.focusMenuItemAtIndex(focusItemIndex);
        };
        MDCSelectFoundation.prototype.handleMenuClosing = function () {
            this.adapter.setSelectAnchorAttr('aria-expanded', 'false');
        };
        MDCSelectFoundation.prototype.handleMenuClosed = function () {
            this.adapter.removeClass(cssClasses$6.ACTIVATED);
            this.isMenuOpen = false;
            // Unfocus the select if menu is closed without a selection
            if (!this.adapter.isSelectAnchorFocused()) {
                this.blur();
            }
        };
        /**
         * Handles value changes, via change event or programmatic updates.
         */
        MDCSelectFoundation.prototype.handleChange = function () {
            this.layout();
            this.adapter.notifyChange(this.getValue());
            var isRequired = this.adapter.hasClass(cssClasses$6.REQUIRED);
            if (isRequired && this.useDefaultValidation) {
                this.setValid(this.isValid());
            }
        };
        MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {
            this.setSelectedIndex(index, /** closeMenu */ true);
        };
        /**
         * Handles focus events from select element.
         */
        MDCSelectFoundation.prototype.handleFocus = function () {
            this.adapter.addClass(cssClasses$6.FOCUSED);
            this.layout();
            this.adapter.activateBottomLine();
        };
        /**
         * Handles blur events from select element.
         */
        MDCSelectFoundation.prototype.handleBlur = function () {
            if (this.isMenuOpen) {
                return;
            }
            this.blur();
        };
        MDCSelectFoundation.prototype.handleClick = function (normalizedX) {
            if (this.disabled || this.recentlyClicked) {
                return;
            }
            this.setClickDebounceTimeout();
            if (this.isMenuOpen) {
                this.adapter.closeMenu();
                return;
            }
            this.adapter.setRippleCenter(normalizedX);
            this.openMenu();
        };
        /**
         * Handles keydown events on select element. Depending on the type of
         * character typed, does typeahead matching or opens menu.
         */
        MDCSelectFoundation.prototype.handleKeydown = function (event) {
            if (this.isMenuOpen || !this.adapter.hasClass(cssClasses$6.FOCUSED)) {
                return;
            }
            var isEnter = normalizeKey(event) === KEY.ENTER;
            var isSpace = normalizeKey(event) === KEY.SPACEBAR;
            var arrowUp = normalizeKey(event) === KEY.ARROW_UP;
            var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;
            var isModifier = event.ctrlKey || event.metaKey;
            // Typeahead
            if (!isModifier &&
                (!isSpace && event.key && event.key.length === 1 ||
                    isSpace && this.adapter.isTypeaheadInProgress())) {
                var key = isSpace ? ' ' : event.key;
                var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
                if (typeaheadNextIndex >= 0) {
                    this.setSelectedIndex(typeaheadNextIndex);
                }
                event.preventDefault();
                return;
            }
            if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
                return;
            }
            // Increment/decrement index as necessary and open menu.
            if (arrowUp && this.getSelectedIndex() > 0) {
                this.setSelectedIndex(this.getSelectedIndex() - 1);
            }
            else if (arrowDown &&
                this.getSelectedIndex() < this.adapter.getMenuItemCount() - 1) {
                this.setSelectedIndex(this.getSelectedIndex() + 1);
            }
            this.openMenu();
            event.preventDefault();
        };
        /**
         * Opens/closes the notched outline.
         */
        MDCSelectFoundation.prototype.notchOutline = function (openNotch) {
            if (!this.adapter.hasOutline()) {
                return;
            }
            var isFocused = this.adapter.hasClass(cssClasses$6.FOCUSED);
            if (openNotch) {
                var labelScale = numbers$2.LABEL_SCALE;
                var labelWidth = this.adapter.getLabelWidth() * labelScale;
                this.adapter.notchOutline(labelWidth);
            }
            else if (!isFocused) {
                this.adapter.closeOutline();
            }
        };
        /**
         * Sets the aria label of the leading icon.
         */
        MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {
            if (this.leadingIcon) {
                this.leadingIcon.setAriaLabel(label);
            }
        };
        /**
         * Sets the text content of the leading icon.
         */
        MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {
            if (this.leadingIcon) {
                this.leadingIcon.setContent(content);
            }
        };
        MDCSelectFoundation.prototype.getUseDefaultValidation = function () {
            return this.useDefaultValidation;
        };
        MDCSelectFoundation.prototype.setUseDefaultValidation = function (useDefaultValidation) {
            this.useDefaultValidation = useDefaultValidation;
        };
        MDCSelectFoundation.prototype.setValid = function (isValid) {
            if (!this.useDefaultValidation) {
                this.customValidity = isValid;
            }
            this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());
            if (isValid) {
                this.adapter.removeClass(cssClasses$6.INVALID);
                this.adapter.removeMenuClass(cssClasses$6.MENU_INVALID);
            }
            else {
                this.adapter.addClass(cssClasses$6.INVALID);
                this.adapter.addMenuClass(cssClasses$6.MENU_INVALID);
            }
            this.syncHelperTextValidity(isValid);
        };
        MDCSelectFoundation.prototype.isValid = function () {
            if (this.useDefaultValidation &&
                this.adapter.hasClass(cssClasses$6.REQUIRED) &&
                !this.adapter.hasClass(cssClasses$6.DISABLED)) {
                // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element
                // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.
                return this.getSelectedIndex() !== numbers$2.UNSET_INDEX &&
                    (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
            }
            return this.customValidity;
        };
        MDCSelectFoundation.prototype.setRequired = function (isRequired) {
            if (isRequired) {
                this.adapter.addClass(cssClasses$6.REQUIRED);
            }
            else {
                this.adapter.removeClass(cssClasses$6.REQUIRED);
            }
            this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());
            this.adapter.setLabelRequired(isRequired);
        };
        MDCSelectFoundation.prototype.getRequired = function () {
            return this.adapter.getSelectAnchorAttr('aria-required') === 'true';
        };
        MDCSelectFoundation.prototype.init = function () {
            var anchorEl = this.adapter.getAnchorElement();
            if (anchorEl) {
                this.adapter.setMenuAnchorElement(anchorEl);
                this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);
            }
            this.adapter.setMenuWrapFocus(false);
            this.setDisabled(this.adapter.hasClass(cssClasses$6.DISABLED));
            this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses$6.INVALID));
            this.layout();
            this.layoutOptions();
        };
        /**
         * Unfocuses the select component.
         */
        MDCSelectFoundation.prototype.blur = function () {
            this.adapter.removeClass(cssClasses$6.FOCUSED);
            this.layout();
            this.adapter.deactivateBottomLine();
            var isRequired = this.adapter.hasClass(cssClasses$6.REQUIRED);
            if (isRequired && this.useDefaultValidation) {
                this.setValid(this.isValid());
            }
        };
        MDCSelectFoundation.prototype.syncHelperTextValidity = function (isValid) {
            if (!this.helperText) {
                return;
            }
            this.helperText.setValidity(isValid);
            var helperTextVisible = this.helperText.isVisible();
            var helperTextId = this.helperText.getId();
            if (helperTextVisible && helperTextId) {
                this.adapter.setSelectAnchorAttr(strings$7.ARIA_DESCRIBEDBY, helperTextId);
            }
            else {
                // Needed because screenreaders will read labels pointed to by
                // `aria-describedby` even if they are `aria-hidden`.
                this.adapter.removeSelectAnchorAttr(strings$7.ARIA_DESCRIBEDBY);
            }
        };
        MDCSelectFoundation.prototype.setClickDebounceTimeout = function () {
            var _this = this;
            clearTimeout(this.clickDebounceTimeout);
            this.clickDebounceTimeout = setTimeout(function () {
                _this.recentlyClicked = false;
            }, numbers$2.CLICK_DEBOUNCE_TIMEOUT_MS);
            this.recentlyClicked = true;
        };
        return MDCSelectFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$6 = {
        ARIA_HIDDEN: 'aria-hidden',
        ROLE: 'role',
    };
    var cssClasses$5 = {
        HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',
        HELPER_TEXT_VALIDATION_MSG_PERSISTENT: 'mdc-select-helper-text--validation-msg-persistent',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCSelectHelperTextFoundation = /** @class */ (function (_super) {
        __extends(MDCSelectHelperTextFoundation, _super);
        function MDCSelectHelperTextFoundation(adapter) {
            return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;
        }
        Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
            get: function () {
                return cssClasses$5;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
            get: function () {
                return strings$6;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
            /**
             * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setAttr: function () { return undefined; },
                    getAttr: function () { return null; },
                    removeAttr: function () { return undefined; },
                    setContent: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @return The ID of the helper text, or null if none is set.
         */
        MDCSelectHelperTextFoundation.prototype.getId = function () {
            return this.adapter.getAttr('id');
        };
        /**
         * @return Whether the helper text is currently visible.
         */
        MDCSelectHelperTextFoundation.prototype.isVisible = function () {
            return this.adapter.getAttr(strings$6.ARIA_HIDDEN) !== 'true';
        };
        /**
         * Sets the content of the helper text field.
         */
        MDCSelectHelperTextFoundation.prototype.setContent = function (content) {
            this.adapter.setContent(content);
        };
        /**
         * Sets the helper text to act as a validation message.
         * By default, validation messages are hidden when the select is valid and
         * visible when the select is invalid.
         *
         * @param isValidation True to make the helper text act as an error validation
         *     message.
         */
        MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {
            if (isValidation) {
                this.adapter.addClass(cssClasses$5.HELPER_TEXT_VALIDATION_MSG);
            }
            else {
                this.adapter.removeClass(cssClasses$5.HELPER_TEXT_VALIDATION_MSG);
            }
        };
        /**
         * Sets the persistency of the validation helper text.
         * This keeps the validation message visible even if the select is valid,
         * though it will be displayed in the normal (grey) color.
         */
        MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function (isPersistent) {
            if (isPersistent) {
                this.adapter.addClass(cssClasses$5.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
            }
            else {
                this.adapter.removeClass(cssClasses$5.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
            }
        };
        /**
         * When acting as a validation message, shows/hides the helper text and
         * triggers alerts as necessary based on the select's validity.
         */
        MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {
            var isValidationMsg = this.adapter.hasClass(cssClasses$5.HELPER_TEXT_VALIDATION_MSG);
            if (!isValidationMsg) {
                // Non-validating helper-text is always displayed and does not participate
                // in validation logic.
                return;
            }
            var isPersistentValidationMsg = this.adapter.hasClass(cssClasses$5.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
            // Validating helper text is displayed if select is invalid, unless it is
            // set as persistent, in which case it always displays.
            var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
            if (msgShouldDisplay) {
                this.showToScreenReader();
                // In addition to displaying, also trigger an alert if the select
                // has become invalid.
                if (!selectIsValid) {
                    this.adapter.setAttr(strings$6.ROLE, 'alert');
                }
                else {
                    this.adapter.removeAttr(strings$6.ROLE);
                }
                return;
            }
            // Hide everything.
            this.adapter.removeAttr(strings$6.ROLE);
            this.hide();
        };
        /**
         * Makes the helper text visible to screen readers.
         */
        MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {
            this.adapter.removeAttr(strings$6.ARIA_HIDDEN);
        };
        /**
         * Hides the help text from screen readers.
         */
        MDCSelectHelperTextFoundation.prototype.hide = function () {
            this.adapter.setAttr(strings$6.ARIA_HIDDEN, 'true');
        };
        return MDCSelectHelperTextFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/select/dist/helper-text/HelperText.svelte generated by Svelte v3.44.3 */

    const file$S = "node_modules/@smui/select/dist/helper-text/HelperText.svelte";

    // (17:31) {:else}
    function create_else_block$c(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*content*/ ctx[8]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content*/ 256) set_data_dev(t, /*content*/ ctx[8]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(17:31) {:else}",
    		ctx
    	});

    	return block;
    }

    // (17:2) {#if content == null}
    function create_if_block$x(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$x.name,
    		type: "if",
    		source: "(17:2) {#if content == null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$19(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let div_class_value;
    	let div_aria_hidden_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$x, create_else_block$c];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*content*/ ctx[8] == null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-select-helper-text': true,
    				'mdc-select-helper-text--validation-msg': /*validationMsg*/ ctx[4],
    				'mdc-select-helper-text--validation-msg-persistent': /*persistent*/ ctx[3],
    				.../*internalClasses*/ ctx[6]
    			})
    		},
    		{
    			"aria-hidden": div_aria_hidden_value = /*persistent*/ ctx[3] ? undefined : 'true'
    		},
    		{ id: /*id*/ ctx[2] },
    		/*internalAttrs*/ ctx[7],
    		/*$$restProps*/ ctx[10]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			set_attributes(div, div_data);
    			add_location(div, file$S, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding*/ ctx[14](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[9].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, validationMsg, persistent, internalClasses*/ 90 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-select-helper-text': true,
    					'mdc-select-helper-text--validation-msg': /*validationMsg*/ ctx[4],
    					'mdc-select-helper-text--validation-msg-persistent': /*persistent*/ ctx[3],
    					.../*internalClasses*/ ctx[6]
    				}))) && { class: div_class_value },
    				(!current || dirty & /*persistent*/ 8 && div_aria_hidden_value !== (div_aria_hidden_value = /*persistent*/ ctx[3] ? undefined : 'true')) && { "aria-hidden": div_aria_hidden_value },
    				(!current || dirty & /*id*/ 4) && { id: /*id*/ ctx[2] },
    				dirty & /*internalAttrs*/ 128 && /*internalAttrs*/ ctx[7],
    				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			/*div_binding*/ ctx[14](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$19.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let counter$2 = 0;

    function instance_1$8($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","id","persistent","validationMsg","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HelperText', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { id = 'SMUI-select-helper-text-' + counter$2++ } = $$props;
    	let { persistent = false } = $$props;
    	let { validationMsg = false } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalAttrs = {};
    	let content = undefined;

    	onMount(() => {
    		instance = new MDCSelectHelperTextFoundation({
    				addClass,
    				removeClass,
    				hasClass,
    				getAttr,
    				setAttr: addAttr,
    				removeAttr,
    				setContent: value => {
    					$$invalidate(8, content = value);
    				}
    			});

    		if (id.startsWith('SMUI-select-helper-text-')) {
    			dispatch(getElement(), 'SMUISelectHelperText:id', id);
    		}

    		dispatch(getElement(), 'SMUISelectHelperText:mount', instance);
    		instance.init();

    		return () => {
    			dispatch(getElement(), 'SMUISelectHelperText:unmount', instance);
    			instance.destroy();
    		};
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(6, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(6, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(7, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function removeAttr(name) {
    		if (!(name in internalAttrs) || internalAttrs[name] != null) {
    			$$invalidate(7, internalAttrs[name] = undefined, internalAttrs);
    		}
    	}

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('id' in $$new_props) $$invalidate(2, id = $$new_props.id);
    		if ('persistent' in $$new_props) $$invalidate(3, persistent = $$new_props.persistent);
    		if ('validationMsg' in $$new_props) $$invalidate(4, validationMsg = $$new_props.validationMsg);
    		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$2,
    		MDCSelectHelperTextFoundation,
    		onMount,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		forwardEvents,
    		use,
    		className,
    		id,
    		persistent,
    		validationMsg,
    		element,
    		instance,
    		internalClasses,
    		internalAttrs,
    		content,
    		hasClass,
    		addClass,
    		removeClass,
    		getAttr,
    		addAttr,
    		removeAttr,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('id' in $$props) $$invalidate(2, id = $$new_props.id);
    		if ('persistent' in $$props) $$invalidate(3, persistent = $$new_props.persistent);
    		if ('validationMsg' in $$props) $$invalidate(4, validationMsg = $$new_props.validationMsg);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('instance' in $$props) instance = $$new_props.instance;
    		if ('internalClasses' in $$props) $$invalidate(6, internalClasses = $$new_props.internalClasses);
    		if ('internalAttrs' in $$props) $$invalidate(7, internalAttrs = $$new_props.internalAttrs);
    		if ('content' in $$props) $$invalidate(8, content = $$new_props.content);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		id,
    		persistent,
    		validationMsg,
    		element,
    		internalClasses,
    		internalAttrs,
    		content,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class HelperText extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$8, create_fragment$19, safe_not_equal, {
    			use: 0,
    			class: 1,
    			id: 2,
    			persistent: 3,
    			validationMsg: 4,
    			getElement: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HelperText",
    			options,
    			id: create_fragment$19.name
    		});
    	}

    	get use() {
    		throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get persistent() {
    		throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set persistent(value) {
    		throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validationMsg() {
    		throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validationMsg(value) {
    		throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[11];
    	}

    	set getElement(value) {
    		throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/select/dist/Select.svelte generated by Svelte v3.44.3 */
    const file$R = "node_modules/@smui/select/dist/Select.svelte";
    const get_helperText_slot_changes = dirty => ({});
    const get_helperText_slot_context = ctx => ({});
    const get_leadingIcon_slot_changes = dirty => ({});
    const get_leadingIcon_slot_context = ctx => ({});
    const get_label_slot_changes_1 = dirty => ({});
    const get_label_slot_context_1 = ctx => ({});
    const get_label_slot_changes = dirty => ({});
    const get_label_slot_context = ctx => ({});

    // (51:2) {#if hiddenInput}
    function create_if_block_6$2(ctx) {
    	let input;

    	let input_levels = [
    		{ type: "hidden" },
    		{ required: /*required*/ ctx[10] },
    		{ disabled: /*disabled*/ ctx[6] },
    		{ value: /*value*/ ctx[0] },
    		prefixFilter(/*$$restProps*/ ctx[53], 'input$')
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			set_attributes(input, input_data);
    			add_location(input, file$R, 51, 4, 1457);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			if (input.autofocus) input.focus();
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				{ type: "hidden" },
    				dirty[0] & /*required*/ 1024 && { required: /*required*/ ctx[10] },
    				dirty[0] & /*disabled*/ 64 && { disabled: /*disabled*/ ctx[6] },
    				dirty[0] & /*value*/ 1 && { value: /*value*/ ctx[0] },
    				dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'input$')
    			]));
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(51:2) {#if hiddenInput}",
    		ctx
    	});

    	return block;
    }

    // (85:4) {#if variant === 'filled'}
    function create_if_block_5$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "mdc-select__ripple");
    			add_location(span, file$R, 85, 6, 2389);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(85:4) {#if variant === 'filled'}",
    		ctx
    	});

    	return block;
    }

    // (88:4) {#if variant !== 'outlined' && !noLabel && (label != null || $$slots.label)}
    function create_if_block_4$4(ctx) {
    	let floatinglabel;
    	let current;

    	const floatinglabel_spread_levels = [
    		{ id: /*inputId*/ ctx[11] + '-smui-label' },
    		{
    			floatAbove: /*$selectedTextStore*/ ctx[43] !== ''
    		},
    		{ required: /*required*/ ctx[10] },
    		prefixFilter(/*$$restProps*/ ctx[53], 'label$')
    	];

    	let floatinglabel_props = {
    		$$slots: { default: [create_default_slot_5$n] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    		floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
    	}

    	floatinglabel = new FloatingLabel({
    			props: floatinglabel_props,
    			$$inline: true
    		});

    	/*floatinglabel_binding*/ ctx[66](floatinglabel);

    	const block = {
    		c: function create() {
    			create_component(floatinglabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatinglabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatinglabel_changes = (dirty[0] & /*inputId, required*/ 3072 | dirty[1] & /*$selectedTextStore, $$restProps*/ 4198400)
    			? get_spread_update(floatinglabel_spread_levels, [
    					dirty[0] & /*inputId*/ 2048 && { id: /*inputId*/ ctx[11] + '-smui-label' },
    					dirty[1] & /*$selectedTextStore*/ 4096 && {
    						floatAbove: /*$selectedTextStore*/ ctx[43] !== ''
    					},
    					dirty[0] & /*required*/ 1024 && { required: /*required*/ ctx[10] },
    					dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'label$'))
    				])
    			: {};

    			if (dirty[0] & /*label*/ 512 | dirty[2] & /*$$scope*/ 134217728) {
    				floatinglabel_changes.$$scope = { dirty, ctx };
    			}

    			floatinglabel.$set(floatinglabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatinglabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatinglabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*floatinglabel_binding*/ ctx[66](null);
    			destroy_component(floatinglabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(88:4) {#if variant !== 'outlined' && !noLabel && (label != null || $$slots.label)}",
    		ctx
    	});

    	return block;
    }

    // (89:6) <FloatingLabel         bind:this={floatingLabel}         id={inputId + '-smui-label'}         floatAbove={$selectedTextStore !== ''}         {required}         {...prefixFilter($$restProps, 'label$')}         >
    function create_default_slot_5$n(ctx) {
    	let t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "";
    	let t;
    	let current;
    	const label_slot_template = /*#slots*/ ctx[63].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[89], get_label_slot_context);

    	const block = {
    		c: function create() {
    			t = text(t_value);
    			if (label_slot) label_slot.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			if (label_slot) {
    				label_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*label*/ 512) && t_value !== (t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "")) set_data_dev(t, t_value);

    			if (label_slot) {
    				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						label_slot,
    						label_slot_template,
    						ctx,
    						/*$$scope*/ ctx[89],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[89])
    						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[89], dirty, get_label_slot_changes),
    						get_label_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (label_slot) label_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$n.name,
    		type: "slot",
    		source: "(89:6) <FloatingLabel         bind:this={floatingLabel}         id={inputId + '-smui-label'}         floatAbove={$selectedTextStore !== ''}         {required}         {...prefixFilter($$restProps, 'label$')}         >",
    		ctx
    	});

    	return block;
    }

    // (98:4) {#if variant === 'outlined'}
    function create_if_block_2$7(ctx) {
    	let notchedoutline;
    	let current;

    	const notchedoutline_spread_levels = [
    		{
    			noLabel: /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[52].label
    		},
    		prefixFilter(/*$$restProps*/ ctx[53], 'outline$')
    	];

    	let notchedoutline_props = {
    		$$slots: { default: [create_default_slot_3$u] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < notchedoutline_spread_levels.length; i += 1) {
    		notchedoutline_props = assign(notchedoutline_props, notchedoutline_spread_levels[i]);
    	}

    	notchedoutline = new NotchedOutline({
    			props: notchedoutline_props,
    			$$inline: true
    		});

    	/*notchedoutline_binding*/ ctx[68](notchedoutline);

    	const block = {
    		c: function create() {
    			create_component(notchedoutline.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(notchedoutline, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const notchedoutline_changes = (dirty[0] & /*noLabel, label*/ 768 | dirty[1] & /*$$slots, $$restProps*/ 6291456)
    			? get_spread_update(notchedoutline_spread_levels, [
    					dirty[0] & /*noLabel, label*/ 768 | dirty[1] & /*$$slots*/ 2097152 && {
    						noLabel: /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[52].label
    					},
    					dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'outline$'))
    				])
    			: {};

    			if (dirty[0] & /*inputId, required, label, noLabel*/ 3840 | dirty[1] & /*$selectedTextStore, $$restProps, floatingLabel, $$slots*/ 6296064 | dirty[2] & /*$$scope*/ 134217728) {
    				notchedoutline_changes.$$scope = { dirty, ctx };
    			}

    			notchedoutline.$set(notchedoutline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notchedoutline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notchedoutline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*notchedoutline_binding*/ ctx[68](null);
    			destroy_component(notchedoutline, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(98:4) {#if variant === 'outlined'}",
    		ctx
    	});

    	return block;
    }

    // (104:8) {#if !noLabel && (label != null || $$slots.label)}
    function create_if_block_3$4(ctx) {
    	let floatinglabel;
    	let current;

    	const floatinglabel_spread_levels = [
    		{ id: /*inputId*/ ctx[11] + '-smui-label' },
    		{
    			floatAbove: /*$selectedTextStore*/ ctx[43] !== ''
    		},
    		{ required: /*required*/ ctx[10] },
    		prefixFilter(/*$$restProps*/ ctx[53], 'label$')
    	];

    	let floatinglabel_props = {
    		$$slots: { default: [create_default_slot_4$q] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    		floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
    	}

    	floatinglabel = new FloatingLabel({
    			props: floatinglabel_props,
    			$$inline: true
    		});

    	/*floatinglabel_binding_1*/ ctx[67](floatinglabel);

    	const block = {
    		c: function create() {
    			create_component(floatinglabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatinglabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatinglabel_changes = (dirty[0] & /*inputId, required*/ 3072 | dirty[1] & /*$selectedTextStore, $$restProps*/ 4198400)
    			? get_spread_update(floatinglabel_spread_levels, [
    					dirty[0] & /*inputId*/ 2048 && { id: /*inputId*/ ctx[11] + '-smui-label' },
    					dirty[1] & /*$selectedTextStore*/ 4096 && {
    						floatAbove: /*$selectedTextStore*/ ctx[43] !== ''
    					},
    					dirty[0] & /*required*/ 1024 && { required: /*required*/ ctx[10] },
    					dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'label$'))
    				])
    			: {};

    			if (dirty[0] & /*label*/ 512 | dirty[2] & /*$$scope*/ 134217728) {
    				floatinglabel_changes.$$scope = { dirty, ctx };
    			}

    			floatinglabel.$set(floatinglabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatinglabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatinglabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*floatinglabel_binding_1*/ ctx[67](null);
    			destroy_component(floatinglabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(104:8) {#if !noLabel && (label != null || $$slots.label)}",
    		ctx
    	});

    	return block;
    }

    // (105:10) <FloatingLabel             bind:this={floatingLabel}             id={inputId + '-smui-label'}             floatAbove={$selectedTextStore !== ''}             {required}             {...prefixFilter($$restProps, 'label$')}             >
    function create_default_slot_4$q(ctx) {
    	let t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "";
    	let t;
    	let current;
    	const label_slot_template = /*#slots*/ ctx[63].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[89], get_label_slot_context_1);

    	const block = {
    		c: function create() {
    			t = text(t_value);
    			if (label_slot) label_slot.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			if (label_slot) {
    				label_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*label*/ 512) && t_value !== (t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "")) set_data_dev(t, t_value);

    			if (label_slot) {
    				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						label_slot,
    						label_slot_template,
    						ctx,
    						/*$$scope*/ ctx[89],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[89])
    						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[89], dirty, get_label_slot_changes_1),
    						get_label_slot_context_1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (label_slot) label_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$q.name,
    		type: "slot",
    		source: "(105:10) <FloatingLabel             bind:this={floatingLabel}             id={inputId + '-smui-label'}             floatAbove={$selectedTextStore !== ''}             {required}             {...prefixFilter($$restProps, 'label$')}             >",
    		ctx
    	});

    	return block;
    }

    // (99:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >
    function create_default_slot_3$u(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[52].label) && create_if_block_3$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[52].label)) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*noLabel, label*/ 768 | dirty[1] & /*$$slots*/ 2097152) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$u.name,
    		type: "slot",
    		source: "(99:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >",
    		ctx
    	});

    	return block;
    }

    // (168:4) {#if variant !== 'outlined' && ripple}
    function create_if_block_1$j(ctx) {
    	let lineripple;
    	let current;
    	const lineripple_spread_levels = [prefixFilter(/*$$restProps*/ ctx[53], 'ripple$')];
    	let lineripple_props = {};

    	for (let i = 0; i < lineripple_spread_levels.length; i += 1) {
    		lineripple_props = assign(lineripple_props, lineripple_spread_levels[i]);
    	}

    	lineripple = new LineRipple({ props: lineripple_props, $$inline: true });
    	/*lineripple_binding*/ ctx[70](lineripple);

    	const block = {
    		c: function create() {
    			create_component(lineripple.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lineripple, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const lineripple_changes = (dirty[1] & /*$$restProps*/ 4194304)
    			? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'ripple$'))])
    			: {};

    			lineripple.$set(lineripple_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lineripple.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lineripple.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*lineripple_binding*/ ctx[70](null);
    			destroy_component(lineripple, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$j.name,
    		type: "if",
    		source: "(168:4) {#if variant !== 'outlined' && ripple}",
    		ctx
    	});

    	return block;
    }

    // (194:4) <List       role="listbox"       {wrapFocus}       bind:selectedIndex       on:SMUIList:mount={(event) => (list = event.detail)}       {...prefixFilter($$restProps, 'list$')}>
    function create_default_slot_2$x(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[63].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[89], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[89],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[89])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[89], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$x.name,
    		type: "slot",
    		source: "(194:4) <List       role=\\\"listbox\\\"       {wrapFocus}       bind:selectedIndex       on:SMUIList:mount={(event) => (list = event.detail)}       {...prefixFilter($$restProps, 'list$')}>",
    		ctx
    	});

    	return block;
    }

    // (176:2) <Menu     class={classMap({       [menu$class]: true,       'mdc-select__menu': true,       ...menuClasses,     })}     fullWidth     anchor={false}     {anchorElement}     {anchorCorner}     bind:open={menuOpen}     on:SMUIMenu:selected={(event) =>       instance && instance.handleMenuItemAction(event.detail.index)}     on:SMUIMenuSurface:closing={() => instance && instance.handleMenuClosing()}     on:SMUIMenuSurface:closed={() => instance && instance.handleMenuClosed()}     on:SMUIMenuSurface:opened={() => instance && instance.handleMenuOpened()}     {...prefixFilter($$restProps, 'menu$')}   >
    function create_default_slot_1$A(ctx) {
    	let list_1;
    	let updating_selectedIndex;
    	let current;

    	const list_1_spread_levels = [
    		{ role: "listbox" },
    		{ wrapFocus: /*wrapFocus*/ ctx[36] },
    		prefixFilter(/*$$restProps*/ ctx[53], 'list$')
    	];

    	function list_1_selectedIndex_binding(value) {
    		/*list_1_selectedIndex_binding*/ ctx[76](value);
    	}

    	let list_1_props = {
    		$$slots: { default: [create_default_slot_2$x] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < list_1_spread_levels.length; i += 1) {
    		list_1_props = assign(list_1_props, list_1_spread_levels[i]);
    	}

    	if (/*selectedIndex*/ ctx[24] !== void 0) {
    		list_1_props.selectedIndex = /*selectedIndex*/ ctx[24];
    	}

    	list_1 = new List({ props: list_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(list_1, 'selectedIndex', list_1_selectedIndex_binding));
    	list_1.$on("SMUIList:mount", /*SMUIList_mount_handler*/ ctx[77]);

    	const block = {
    		c: function create() {
    			create_component(list_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(list_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const list_1_changes = (dirty[1] & /*wrapFocus, $$restProps*/ 4194336)
    			? get_spread_update(list_1_spread_levels, [
    					list_1_spread_levels[0],
    					dirty[1] & /*wrapFocus*/ 32 && { wrapFocus: /*wrapFocus*/ ctx[36] },
    					dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'list$'))
    				])
    			: {};

    			if (dirty[2] & /*$$scope*/ 134217728) {
    				list_1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_selectedIndex && dirty[0] & /*selectedIndex*/ 16777216) {
    				updating_selectedIndex = true;
    				list_1_changes.selectedIndex = /*selectedIndex*/ ctx[24];
    				add_flush_callback(() => updating_selectedIndex = false);
    			}

    			list_1.$set(list_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(list_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$A.name,
    		type: "slot",
    		source: "(176:2) <Menu     class={classMap({       [menu$class]: true,       'mdc-select__menu': true,       ...menuClasses,     })}     fullWidth     anchor={false}     {anchorElement}     {anchorCorner}     bind:open={menuOpen}     on:SMUIMenu:selected={(event) =>       instance && instance.handleMenuItemAction(event.detail.index)}     on:SMUIMenuSurface:closing={() => instance && instance.handleMenuClosing()}     on:SMUIMenuSurface:closed={() => instance && instance.handleMenuClosed()}     on:SMUIMenuSurface:opened={() => instance && instance.handleMenuOpened()}     {...prefixFilter($$restProps, 'menu$')}   >",
    		ctx
    	});

    	return block;
    }

    // (203:0) {#if $$slots.helperText}
    function create_if_block$w(ctx) {
    	let helpertext;
    	let current;
    	const helpertext_spread_levels = [prefixFilter(/*$$restProps*/ ctx[53], 'helperText$')];

    	let helpertext_props = {
    		$$slots: { default: [create_default_slot$I] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < helpertext_spread_levels.length; i += 1) {
    		helpertext_props = assign(helpertext_props, helpertext_spread_levels[i]);
    	}

    	helpertext = new HelperText({ props: helpertext_props, $$inline: true });
    	helpertext.$on("SMUISelectHelperText:id", /*SMUISelectHelperText_id_handler*/ ctx[86]);
    	helpertext.$on("SMUISelectHelperText:mount", /*SMUISelectHelperText_mount_handler*/ ctx[87]);
    	helpertext.$on("SMUISelectHelperText:unmount", /*SMUISelectHelperText_unmount_handler*/ ctx[88]);

    	const block = {
    		c: function create() {
    			create_component(helpertext.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(helpertext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const helpertext_changes = (dirty[1] & /*$$restProps*/ 4194304)
    			? get_spread_update(helpertext_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'helperText$'))])
    			: {};

    			if (dirty[2] & /*$$scope*/ 134217728) {
    				helpertext_changes.$$scope = { dirty, ctx };
    			}

    			helpertext.$set(helpertext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(helpertext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(helpertext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(helpertext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$w.name,
    		type: "if",
    		source: "(203:0) {#if $$slots.helperText}",
    		ctx
    	});

    	return block;
    }

    // (204:2) <HelperText     on:SMUISelectHelperText:id={(event) => (helperId = event.detail)}     on:SMUISelectHelperText:mount={(event) => (helperText = event.detail)}     on:SMUISelectHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     {...prefixFilter($$restProps, 'helperText$')}     >
    function create_default_slot$I(ctx) {
    	let current;
    	const helperText_slot_template = /*#slots*/ ctx[63].helperText;
    	const helperText_slot = create_slot(helperText_slot_template, ctx, /*$$scope*/ ctx[89], get_helperText_slot_context);

    	const block = {
    		c: function create() {
    			if (helperText_slot) helperText_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (helperText_slot) {
    				helperText_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (helperText_slot) {
    				if (helperText_slot.p && (!current || dirty[2] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						helperText_slot,
    						helperText_slot_template,
    						ctx,
    						/*$$scope*/ ctx[89],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[89])
    						: get_slot_changes(helperText_slot_template, /*$$scope*/ ctx[89], dirty, get_helperText_slot_changes),
    						get_helperText_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(helperText_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(helperText_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (helperText_slot) helperText_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$I.name,
    		type: "slot",
    		source: "(204:2) <HelperText     on:SMUISelectHelperText:id={(event) => (helperId = event.detail)}     on:SMUISelectHelperText:mount={(event) => (helperText = event.detail)}     on:SMUISelectHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     {...prefixFilter($$restProps, 'helperText$')}     >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$18(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let span1;
    	let span0;
    	let t5;
    	let span0_id_value;
    	let span0_class_value;
    	let span0_aria_labelledby_value;
    	let useActions_action;
    	let span1_class_value;
    	let useActions_action_1;
    	let t6;
    	let span2;
    	let svg;
    	let polygon0;
    	let polygon1;
    	let span2_class_value;
    	let useActions_action_2;
    	let t7;
    	let div0_class_value;
    	let div0_aria_required_value;
    	let div0_aria_disabled_value;
    	let useActions_action_3;
    	let t8;
    	let menu;
    	let updating_open;
    	let div1_class_value;
    	let div1_style_value;
    	let Ripple_action;
    	let useActions_action_4;
    	let t9;
    	let if_block5_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*hiddenInput*/ ctx[12] && create_if_block_6$2(ctx);
    	let if_block1 = /*variant*/ ctx[7] === 'filled' && create_if_block_5$2(ctx);
    	let if_block2 = /*variant*/ ctx[7] !== 'outlined' && !/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[52].label) && create_if_block_4$4(ctx);
    	let if_block3 = /*variant*/ ctx[7] === 'outlined' && create_if_block_2$7(ctx);
    	const leadingIcon_slot_template = /*#slots*/ ctx[63].leadingIcon;
    	const leadingIcon_slot = create_slot(leadingIcon_slot_template, ctx, /*$$scope*/ ctx[89], get_leadingIcon_slot_context);

    	let span0_levels = [
    		{
    			id: span0_id_value = /*inputId*/ ctx[11] + '-smui-selected-text'
    		},
    		{
    			class: span0_class_value = classMap({
    				[/*selectedText$class*/ ctx[19]]: true,
    				'mdc-select__selected-text': true
    			})
    		},
    		{ role: "button" },
    		{ "aria-haspopup": "listbox" },
    		{
    			"aria-labelledby": span0_aria_labelledby_value = /*inputId*/ ctx[11] + '-smui-label'
    		},
    		prefixFilter(/*$$restProps*/ ctx[53], 'selectedText$')
    	];

    	let span0_data = {};

    	for (let i = 0; i < span0_levels.length; i += 1) {
    		span0_data = assign(span0_data, span0_levels[i]);
    	}

    	let span1_levels = [
    		{
    			class: span1_class_value = classMap({
    				[/*selectedTextContainer$class*/ ctx[17]]: true,
    				'mdc-select__selected-text-container': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[53], 'selectedTextContainer$')
    	];

    	let span1_data = {};

    	for (let i = 0; i < span1_levels.length; i += 1) {
    		span1_data = assign(span1_data, span1_levels[i]);
    	}

    	let span2_levels = [
    		{
    			class: span2_class_value = classMap({
    				[/*dropdownIcon$class*/ ctx[21]]: true,
    				'mdc-select__dropdown-icon': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[53], 'dropdownIcon$')
    	];

    	let span2_data = {};

    	for (let i = 0; i < span2_levels.length; i += 1) {
    		span2_data = assign(span2_data, span2_levels[i]);
    	}

    	let if_block4 = /*variant*/ ctx[7] !== 'outlined' && /*ripple*/ ctx[5] && create_if_block_1$j(ctx);

    	let div0_levels = [
    		{
    			class: div0_class_value = classMap({
    				[/*anchor$class*/ ctx[15]]: true,
    				'mdc-select__anchor': true
    			})
    		},
    		{
    			"aria-required": div0_aria_required_value = /*required*/ ctx[10] ? 'true' : undefined
    		},
    		{
    			"aria-disabled": div0_aria_disabled_value = /*disabled*/ ctx[6] ? 'true' : undefined
    		},
    		{ "aria-controls": /*helperId*/ ctx[31] },
    		{ "aria-describedby": /*helperId*/ ctx[31] },
    		/*selectAnchorAttrs*/ ctx[29],
    		prefixFilter(/*$$restProps*/ ctx[53], 'anchor$')
    	];

    	let div0_data = {};

    	for (let i = 0; i < div0_levels.length; i += 1) {
    		div0_data = assign(div0_data, div0_levels[i]);
    	}

    	const menu_spread_levels = [
    		{
    			class: classMap({
    				[/*menu$class*/ ctx[22]]: true,
    				'mdc-select__menu': true,
    				.../*menuClasses*/ ctx[33]
    			})
    		},
    		{ fullWidth: true },
    		{ anchor: false },
    		{ anchorElement: /*anchorElement*/ ctx[34] },
    		{ anchorCorner: /*anchorCorner*/ ctx[35] },
    		prefixFilter(/*$$restProps*/ ctx[53], 'menu$')
    	];

    	function menu_open_binding(value) {
    		/*menu_open_binding*/ ctx[78](value);
    	}

    	let menu_props = {
    		$$slots: { default: [create_default_slot_1$A] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < menu_spread_levels.length; i += 1) {
    		menu_props = assign(menu_props, menu_spread_levels[i]);
    	}

    	if (/*menuOpen*/ ctx[32] !== void 0) {
    		menu_props.open = /*menuOpen*/ ctx[32];
    	}

    	menu = new Menu({ props: menu_props, $$inline: true });
    	binding_callbacks.push(() => bind(menu, 'open', menu_open_binding));
    	menu.$on("SMUIMenu:selected", /*SMUIMenu_selected_handler*/ ctx[79]);
    	menu.$on("SMUIMenuSurface:closing", /*SMUIMenuSurface_closing_handler*/ ctx[80]);
    	menu.$on("SMUIMenuSurface:closed", /*SMUIMenuSurface_closed_handler*/ ctx[81]);
    	menu.$on("SMUIMenuSurface:opened", /*SMUIMenuSurface_opened_handler*/ ctx[82]);

    	let div1_levels = [
    		{
    			class: div1_class_value = classMap({
    				[/*className*/ ctx[3]]: true,
    				'mdc-select': true,
    				'mdc-select--required': /*required*/ ctx[10],
    				'mdc-select--disabled': /*disabled*/ ctx[6],
    				'mdc-select--filled': /*variant*/ ctx[7] === 'filled',
    				'mdc-select--outlined': /*variant*/ ctx[7] === 'outlined',
    				'smui-select--standard': /*variant*/ ctx[7] === 'standard',
    				'mdc-select--with-leading-icon': /*isUninitializedValue*/ ctx[45](/*withLeadingIcon*/ ctx[13])
    				? /*$$slots*/ ctx[52].leadingIcon
    				: /*withLeadingIcon*/ ctx[13],
    				'mdc-select--no-label': /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[52].label,
    				'mdc-select--invalid': /*invalid*/ ctx[1],
    				'mdc-select--activated': /*menuOpen*/ ctx[32],
    				'mdc-data-table__pagination-rows-per-page-select': /*context*/ ctx[46] === 'data-table:pagination',
    				.../*internalClasses*/ ctx[26]
    			})
    		},
    		{
    			style: div1_style_value = Object.entries(/*internalStyles*/ ctx[27]).map(func$4).concat([/*style*/ ctx[4]]).join(' ')
    		},
    		exclude(/*$$restProps*/ ctx[53], [
    			'input$',
    			'anchor$',
    			'label$',
    			'outline$',
    			'selectedTextContainer$',
    			'selectedText$',
    			'dropdownIcon$',
    			'ripple$',
    			'menu$',
    			'list$',
    			'helperText$'
    		])
    	];

    	let div1_data = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div1_data = assign(div1_data, div1_levels[i]);
    	}

    	let if_block5 = /*$$slots*/ ctx[52].helperText && create_if_block$w(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div0 = element("div");
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (leadingIcon_slot) leadingIcon_slot.c();
    			t4 = space();
    			span1 = element("span");
    			span0 = element("span");
    			t5 = text(/*$selectedTextStore*/ ctx[43]);
    			t6 = space();
    			span2 = element("span");
    			svg = svg_element("svg");
    			polygon0 = svg_element("polygon");
    			polygon1 = svg_element("polygon");
    			t7 = space();
    			if (if_block4) if_block4.c();
    			t8 = space();
    			create_component(menu.$$.fragment);
    			t9 = space();
    			if (if_block5) if_block5.c();
    			if_block5_anchor = empty();
    			set_attributes(span0, span0_data);
    			add_location(span0, file$R, 124, 6, 3753);
    			set_attributes(span1, span1_data);
    			add_location(span1, file$R, 116, 4, 3491);
    			attr_dev(polygon0, "class", "mdc-select__dropdown-icon-inactive");
    			attr_dev(polygon0, "stroke", "none");
    			attr_dev(polygon0, "fill-rule", "evenodd");
    			attr_dev(polygon0, "points", "7 10 12 15 17 10");
    			add_location(polygon0, file$R, 153, 8, 4575);
    			attr_dev(polygon1, "class", "mdc-select__dropdown-icon-active");
    			attr_dev(polygon1, "stroke", "none");
    			attr_dev(polygon1, "fill-rule", "evenodd");
    			attr_dev(polygon1, "points", "7 15 12 10 17 15");
    			add_location(polygon1, file$R, 159, 8, 4746);
    			attr_dev(svg, "class", "mdc-select__dropdown-icon-graphic");
    			attr_dev(svg, "viewBox", "7 10 10 5");
    			attr_dev(svg, "focusable", "false");
    			add_location(svg, file$R, 148, 6, 4450);
    			set_attributes(span2, span2_data);
    			add_location(span2, file$R, 140, 4, 4225);
    			set_attributes(div0, div0_data);
    			add_location(div0, file$R, 59, 2, 1596);
    			set_attributes(div1, div1_data);
    			add_location(div1, file$R, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t2);
    			if (if_block3) if_block3.m(div0, null);
    			append_dev(div0, t3);

    			if (leadingIcon_slot) {
    				leadingIcon_slot.m(div0, null);
    			}

    			append_dev(div0, t4);
    			append_dev(div0, span1);
    			append_dev(span1, span0);
    			append_dev(span0, t5);
    			/*span0_binding*/ ctx[69](span0);
    			append_dev(div0, t6);
    			append_dev(div0, span2);
    			append_dev(span2, svg);
    			append_dev(svg, polygon0);
    			append_dev(svg, polygon1);
    			append_dev(div0, t7);
    			if (if_block4) if_block4.m(div0, null);
    			/*div0_binding*/ ctx[71](div0);
    			append_dev(div1, t8);
    			mount_component(menu, div1, null);
    			/*div1_binding*/ ctx[83](div1);
    			insert_dev(target, t9, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, if_block5_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span0, /*selectedText$use*/ ctx[18])),
    					action_destroyer(useActions_action_1 = useActions.call(null, span1, /*selectedTextContainer$use*/ ctx[16])),
    					action_destroyer(useActions_action_2 = useActions.call(null, span2, /*dropdownIcon$use*/ ctx[20])),
    					action_destroyer(useActions_action_3 = useActions.call(null, div0, /*anchor$use*/ ctx[14])),
    					listen_dev(div0, "focus", /*focus_handler_1*/ ctx[72], false, false, false),
    					listen_dev(div0, "blur", /*blur_handler_1*/ ctx[73], false, false, false),
    					listen_dev(div0, "click", /*click_handler*/ ctx[74], false, false, false),
    					listen_dev(div0, "keydown", /*keydown_handler*/ ctx[75], false, false, false),
    					listen_dev(div0, "focus", /*focus_handler*/ ctx[64], false, false, false),
    					listen_dev(div0, "blur", /*blur_handler*/ ctx[65], false, false, false),
    					action_destroyer(Ripple_action = Ripple.call(null, div1, {
    						ripple: /*variant*/ ctx[7] === 'filled',
    						unbounded: false,
    						addClass: /*addClass*/ ctx[49],
    						removeClass: /*removeClass*/ ctx[50],
    						addStyle: /*addStyle*/ ctx[51]
    					})),
    					action_destroyer(Anchor.call(null, div1, {
    						addClass: /*addClass*/ ctx[49],
    						removeClass: /*removeClass*/ ctx[50]
    					})),
    					action_destroyer(useActions_action_4 = useActions.call(null, div1, /*use*/ ctx[2])),
    					action_destroyer(/*forwardEvents*/ ctx[44].call(null, div1)),
    					listen_dev(div1, "SMUISelectLeadingIcon:mount", /*SMUISelectLeadingIcon_mount_handler*/ ctx[84], false, false, false),
    					listen_dev(div1, "SMUISelectLeadingIcon:unmount", /*SMUISelectLeadingIcon_unmount_handler*/ ctx[85], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*hiddenInput*/ ctx[12]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_6$2(ctx);
    					if_block0.c();
    					if_block0.m(div1, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*variant*/ ctx[7] === 'filled') {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_5$2(ctx);
    					if_block1.c();
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*variant*/ ctx[7] !== 'outlined' && !/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[52].label)) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*variant, noLabel, label*/ 896 | dirty[1] & /*$$slots*/ 2097152) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_4$4(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div0, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*variant*/ ctx[7] === 'outlined') {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*variant*/ 128) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_2$7(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div0, t3);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (leadingIcon_slot) {
    				if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						leadingIcon_slot,
    						leadingIcon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[89],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[89])
    						: get_slot_changes(leadingIcon_slot_template, /*$$scope*/ ctx[89], dirty, get_leadingIcon_slot_changes),
    						get_leadingIcon_slot_context
    					);
    				}
    			}

    			if (!current || dirty[1] & /*$selectedTextStore*/ 4096) set_data_dev(t5, /*$selectedTextStore*/ ctx[43]);

    			set_attributes(span0, span0_data = get_spread_update(span0_levels, [
    				(!current || dirty[0] & /*inputId*/ 2048 && span0_id_value !== (span0_id_value = /*inputId*/ ctx[11] + '-smui-selected-text')) && { id: span0_id_value },
    				(!current || dirty[0] & /*selectedText$class*/ 524288 && span0_class_value !== (span0_class_value = classMap({
    					[/*selectedText$class*/ ctx[19]]: true,
    					'mdc-select__selected-text': true
    				}))) && { class: span0_class_value },
    				{ role: "button" },
    				{ "aria-haspopup": "listbox" },
    				(!current || dirty[0] & /*inputId*/ 2048 && span0_aria_labelledby_value !== (span0_aria_labelledby_value = /*inputId*/ ctx[11] + '-smui-label')) && {
    					"aria-labelledby": span0_aria_labelledby_value
    				},
    				dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'selectedText$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*selectedText$use*/ 262144) useActions_action.update.call(null, /*selectedText$use*/ ctx[18]);

    			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
    				(!current || dirty[0] & /*selectedTextContainer$class*/ 131072 && span1_class_value !== (span1_class_value = classMap({
    					[/*selectedTextContainer$class*/ ctx[17]]: true,
    					'mdc-select__selected-text-container': true
    				}))) && { class: span1_class_value },
    				dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'selectedTextContainer$')
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*selectedTextContainer$use*/ 65536) useActions_action_1.update.call(null, /*selectedTextContainer$use*/ ctx[16]);

    			set_attributes(span2, span2_data = get_spread_update(span2_levels, [
    				(!current || dirty[0] & /*dropdownIcon$class*/ 2097152 && span2_class_value !== (span2_class_value = classMap({
    					[/*dropdownIcon$class*/ ctx[21]]: true,
    					'mdc-select__dropdown-icon': true
    				}))) && { class: span2_class_value },
    				dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'dropdownIcon$')
    			]));

    			if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*dropdownIcon$use*/ 1048576) useActions_action_2.update.call(null, /*dropdownIcon$use*/ ctx[20]);

    			if (/*variant*/ ctx[7] !== 'outlined' && /*ripple*/ ctx[5]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[0] & /*variant, ripple*/ 160) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_1$j(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div0, null);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			set_attributes(div0, div0_data = get_spread_update(div0_levels, [
    				(!current || dirty[0] & /*anchor$class*/ 32768 && div0_class_value !== (div0_class_value = classMap({
    					[/*anchor$class*/ ctx[15]]: true,
    					'mdc-select__anchor': true
    				}))) && { class: div0_class_value },
    				(!current || dirty[0] & /*required*/ 1024 && div0_aria_required_value !== (div0_aria_required_value = /*required*/ ctx[10] ? 'true' : undefined)) && {
    					"aria-required": div0_aria_required_value
    				},
    				(!current || dirty[0] & /*disabled*/ 64 && div0_aria_disabled_value !== (div0_aria_disabled_value = /*disabled*/ ctx[6] ? 'true' : undefined)) && {
    					"aria-disabled": div0_aria_disabled_value
    				},
    				(!current || dirty[1] & /*helperId*/ 1) && { "aria-controls": /*helperId*/ ctx[31] },
    				(!current || dirty[1] & /*helperId*/ 1) && { "aria-describedby": /*helperId*/ ctx[31] },
    				dirty[0] & /*selectAnchorAttrs*/ 536870912 && /*selectAnchorAttrs*/ ctx[29],
    				dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'anchor$')
    			]));

    			if (useActions_action_3 && is_function(useActions_action_3.update) && dirty[0] & /*anchor$use*/ 16384) useActions_action_3.update.call(null, /*anchor$use*/ ctx[14]);

    			const menu_changes = (dirty[0] & /*menu$class*/ 4194304 | dirty[1] & /*menuClasses, anchorElement, anchorCorner, $$restProps*/ 4194332)
    			? get_spread_update(menu_spread_levels, [
    					dirty[0] & /*menu$class*/ 4194304 | dirty[1] & /*menuClasses*/ 4 && {
    						class: classMap({
    							[/*menu$class*/ ctx[22]]: true,
    							'mdc-select__menu': true,
    							.../*menuClasses*/ ctx[33]
    						})
    					},
    					menu_spread_levels[1],
    					menu_spread_levels[2],
    					dirty[1] & /*anchorElement*/ 8 && { anchorElement: /*anchorElement*/ ctx[34] },
    					dirty[1] & /*anchorCorner*/ 16 && { anchorCorner: /*anchorCorner*/ ctx[35] },
    					dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'menu$'))
    				])
    			: {};

    			if (dirty[0] & /*selectedIndex*/ 16777216 | dirty[1] & /*wrapFocus, $$restProps, list*/ 4194400 | dirty[2] & /*$$scope*/ 134217728) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_open && dirty[1] & /*menuOpen*/ 2) {
    				updating_open = true;
    				menu_changes.open = /*menuOpen*/ ctx[32];
    				add_flush_callback(() => updating_open = false);
    			}

    			menu.$set(menu_changes);

    			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
    				(!current || dirty[0] & /*className, required, disabled, variant, withLeadingIcon, noLabel, label, invalid, internalClasses*/ 67119050 | dirty[1] & /*$$slots, menuOpen*/ 2097154 && div1_class_value !== (div1_class_value = classMap({
    					[/*className*/ ctx[3]]: true,
    					'mdc-select': true,
    					'mdc-select--required': /*required*/ ctx[10],
    					'mdc-select--disabled': /*disabled*/ ctx[6],
    					'mdc-select--filled': /*variant*/ ctx[7] === 'filled',
    					'mdc-select--outlined': /*variant*/ ctx[7] === 'outlined',
    					'smui-select--standard': /*variant*/ ctx[7] === 'standard',
    					'mdc-select--with-leading-icon': /*isUninitializedValue*/ ctx[45](/*withLeadingIcon*/ ctx[13])
    					? /*$$slots*/ ctx[52].leadingIcon
    					: /*withLeadingIcon*/ ctx[13],
    					'mdc-select--no-label': /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[52].label,
    					'mdc-select--invalid': /*invalid*/ ctx[1],
    					'mdc-select--activated': /*menuOpen*/ ctx[32],
    					'mdc-data-table__pagination-rows-per-page-select': /*context*/ ctx[46] === 'data-table:pagination',
    					.../*internalClasses*/ ctx[26]
    				}))) && { class: div1_class_value },
    				(!current || dirty[0] & /*internalStyles, style*/ 134217744 && div1_style_value !== (div1_style_value = Object.entries(/*internalStyles*/ ctx[27]).map(func$4).concat([/*style*/ ctx[4]]).join(' '))) && { style: div1_style_value },
    				dirty[1] & /*$$restProps*/ 4194304 && exclude(/*$$restProps*/ ctx[53], [
    					'input$',
    					'anchor$',
    					'label$',
    					'outline$',
    					'selectedTextContainer$',
    					'selectedText$',
    					'dropdownIcon$',
    					'ripple$',
    					'menu$',
    					'list$',
    					'helperText$'
    				])
    			]));

    			if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*variant*/ 128) Ripple_action.update.call(null, {
    				ripple: /*variant*/ ctx[7] === 'filled',
    				unbounded: false,
    				addClass: /*addClass*/ ctx[49],
    				removeClass: /*removeClass*/ ctx[50],
    				addStyle: /*addStyle*/ ctx[51]
    			});

    			if (useActions_action_4 && is_function(useActions_action_4.update) && dirty[0] & /*use*/ 4) useActions_action_4.update.call(null, /*use*/ ctx[2]);

    			if (/*$$slots*/ ctx[52].helperText) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);

    					if (dirty[1] & /*$$slots*/ 2097152) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block$w(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(leadingIcon_slot, local);
    			transition_in(if_block4);
    			transition_in(menu.$$.fragment, local);
    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(leadingIcon_slot, local);
    			transition_out(if_block4);
    			transition_out(menu.$$.fragment, local);
    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (leadingIcon_slot) leadingIcon_slot.d(detaching);
    			/*span0_binding*/ ctx[69](null);
    			if (if_block4) if_block4.d();
    			/*div0_binding*/ ctx[71](null);
    			destroy_component(menu);
    			/*div1_binding*/ ctx[83](null);
    			if (detaching) detach_dev(t9);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(if_block5_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$18.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let counter$1 = 0;

    function getNormalizedXCoordinate(evt) {
    	const targetClientRect = evt.currentTarget.getBoundingClientRect();
    	const xCoordinate = isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
    	return xCoordinate - targetClientRect.left;
    }

    function isTouchEvent(evt) {
    	return 'touches' in evt;
    }

    const func$4 = ([name, value]) => `${name}: ${value};`;

    function instance_1$7($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","ripple","disabled","variant","noLabel","label","value","key","dirty","invalid","updateInvalid","required","inputId","hiddenInput","withLeadingIcon","anchor$use","anchor$class","selectedTextContainer$use","selectedTextContainer$class","selectedText$use","selectedText$class","dropdownIcon$use","dropdownIcon$class","menu$class","getUseDefaultValidation","setUseDefaultValidation","focus","layout","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $selectedTextStore;
    	let $valueStore;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, ['label','leadingIcon','default','helperText']);
    	const $$slots = compute_slots(slots);
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { ripple = true } = $$props;
    	let { disabled = false } = $$props;
    	let { variant = 'standard' } = $$props;
    	let { noLabel = false } = $$props;
    	let { label = undefined } = $$props;
    	let { value = '' } = $$props;
    	let { key = item => item } = $$props;
    	let { dirty = false } = $$props;
    	let { invalid = uninitializedValue } = $$props;
    	let { updateInvalid = isUninitializedValue(invalid) } = $$props;
    	const useDefaultValidation = isUninitializedValue(invalid);

    	if (isUninitializedValue(invalid)) {
    		invalid = false;
    	}

    	let { required = false } = $$props;
    	let { inputId = 'SMUI-select-' + counter$1++ } = $$props;
    	let { hiddenInput = false } = $$props;
    	let { withLeadingIcon = uninitializedValue } = $$props;
    	let { anchor$use = [] } = $$props;
    	let { anchor$class = '' } = $$props;
    	let { selectedTextContainer$use = [] } = $$props;
    	let { selectedTextContainer$class = '' } = $$props;
    	let { selectedText$use = [] } = $$props;
    	let { selectedText$class = '' } = $$props;
    	let { dropdownIcon$use = [] } = $$props;
    	let { dropdownIcon$class = '' } = $$props;
    	let { menu$class = '' } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};
    	let selectAnchor;
    	let selectAnchorAttrs = {};
    	let selectText;
    	let selectedIndex = -1;
    	let helperId = undefined;
    	let addLayoutListener = getContext('SMUI:addLayoutListener');
    	let removeLayoutListener;
    	let menuOpen = false;
    	let menuClasses = {};
    	let anchorElement = undefined;
    	let anchorCorner = undefined;
    	let wrapFocus = false;
    	let list;
    	let context = getContext('SMUI:select:context');

    	// These are instances, not accessors.
    	let leadingIcon = undefined;

    	let helperText = undefined;

    	// Components
    	let floatingLabel = undefined;

    	let lineRipple = undefined;
    	let notchedOutline = undefined;
    	setContext('SMUI:list:role', '');
    	setContext('SMUI:list:nav', false);

    	// Only needed on initialization.
    	const selectedTextStore = writable('');

    	validate_store(selectedTextStore, 'selectedTextStore');
    	component_subscribe($$self, selectedTextStore, value => $$invalidate(43, $selectedTextStore = value));
    	setContext('SMUI:select:selectedText', selectedTextStore);
    	const valueStore = writable(value);
    	validate_store(valueStore, 'valueStore');
    	component_subscribe($$self, valueStore, value => $$invalidate(91, $valueStore = value));
    	setContext('SMUI:select:value', valueStore);
    	let previousSelectedIndex = selectedIndex;

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	onMount(() => {
    		$$invalidate(23, instance = new MDCSelectFoundation({
    				// getSelectAdapterMethods
    				// getMenuItemAttr: (menuItem: Element, attr: string) =>
    				//   menuItem.getAttribute(attr),
    				setSelectedText: text => {
    					set_store_value(selectedTextStore, $selectedTextStore = text, $selectedTextStore);
    				},
    				isSelectAnchorFocused: () => document.activeElement === selectAnchor,
    				getSelectAnchorAttr,
    				setSelectAnchorAttr: addSelectAnchorAttr,
    				removeSelectAnchorAttr,
    				addMenuClass,
    				removeMenuClass,
    				openMenu: () => {
    					$$invalidate(32, menuOpen = true);
    				},
    				closeMenu: () => {
    					$$invalidate(32, menuOpen = false);
    				},
    				getAnchorElement: () => selectAnchor,
    				setMenuAnchorElement: value => {
    					$$invalidate(34, anchorElement = value);
    				},
    				setMenuAnchorCorner: value => {
    					$$invalidate(35, anchorCorner = value);
    				},
    				setMenuWrapFocus: value => {
    					$$invalidate(36, wrapFocus = value);
    				},
    				getSelectedIndex: () => selectedIndex,
    				setSelectedIndex: index => {
    					// Don't update the instance again.
    					$$invalidate(62, previousSelectedIndex = index);

    					$$invalidate(24, selectedIndex = index);
    					$$invalidate(0, value = getMenuItemValues()[selectedIndex]);
    				},
    				focusMenuItemAtIndex: index => {
    					list.focusItemAtIndex(index);
    				},
    				getMenuItemCount: () => list.items.length,
    				getMenuItemValues: () => getMenuItemValues().map(key),
    				getMenuItemTextAtIndex: index => list.getPrimaryTextAtIndex(index),
    				isTypeaheadInProgress: () => list.typeaheadInProgress,
    				typeaheadMatchItem: (nextChar, startingIndex) => list.typeaheadMatchItem(nextChar, startingIndex),
    				// getCommonAdapterMethods
    				addClass,
    				removeClass,
    				hasClass,
    				setRippleCenter: normalizedX => lineRipple && lineRipple.setRippleCenter(normalizedX),
    				activateBottomLine: () => lineRipple && lineRipple.activate(),
    				deactivateBottomLine: () => lineRipple && lineRipple.deactivate(),
    				notifyChange: _selectedValue => {
    					$$invalidate(54, dirty = true);

    					if (updateInvalid) {
    						$$invalidate(1, invalid = !instance.isValid());
    					}

    					dispatch(getElement(), 'SMUISelect:change', { value, index: selectedIndex }, undefined, true);
    				},
    				// getOutlineAdapterMethods
    				hasOutline: () => !!notchedOutline,
    				notchOutline: labelWidth => notchedOutline && notchedOutline.notch(labelWidth),
    				closeOutline: () => notchedOutline && notchedOutline.closeNotch(),
    				// getLabelAdapterMethods
    				hasLabel: () => !!floatingLabel,
    				floatLabel: shouldFloat => floatingLabel && floatingLabel.float(shouldFloat),
    				getLabelWidth: () => floatingLabel ? floatingLabel.getWidth() : 0,
    				setLabelRequired: isRequired => floatingLabel && floatingLabel.setRequired(isRequired)
    			},
    		{
    				get helperText() {
    					return helperText;
    				},
    				get leadingIcon() {
    					return leadingIcon;
    				}
    			}));

    		$$invalidate(24, selectedIndex = getMenuItemValues().indexOf(value));
    		instance.init();
    		setUseDefaultValidation(useDefaultValidation);

    		return () => {
    			instance.destroy();
    		};
    	});

    	onDestroy(() => {
    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(26, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(26, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(27, internalStyles);
    			} else {
    				$$invalidate(27, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function addMenuClass(className) {
    		if (!menuClasses[className]) {
    			$$invalidate(33, menuClasses[className] = true, menuClasses);
    		}
    	}

    	function removeMenuClass(className) {
    		if (!(className in menuClasses) || menuClasses[className]) {
    			$$invalidate(33, menuClasses[className] = false, menuClasses);
    		}
    	}

    	function getSelectAnchorAttr(name) {
    		var _a;

    		return name in selectAnchorAttrs
    		? (_a = selectAnchorAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addSelectAnchorAttr(name, value) {
    		if (selectAnchorAttrs[name] !== value) {
    			$$invalidate(29, selectAnchorAttrs[name] = value, selectAnchorAttrs);
    		}
    	}

    	function removeSelectAnchorAttr(name) {
    		if (!(name in selectAnchorAttrs) || selectAnchorAttrs[name] != null) {
    			$$invalidate(29, selectAnchorAttrs[name] = undefined, selectAnchorAttrs);
    		}
    	}

    	function getMenuItemValues() {
    		return list.getOrderedList().map(accessor => accessor.getValue());
    	}

    	function getUseDefaultValidation() {
    		return instance.getUseDefaultValidation();
    	}

    	function setUseDefaultValidation(useDefaultValidation) {
    		instance.setUseDefaultValidation(useDefaultValidation);
    	}

    	function focus() {
    		selectAnchor.focus();
    	}

    	function layout() {
    		instance.layout();
    	}

    	function getElement() {
    		return element;
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function floatinglabel_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			floatingLabel = $$value;
    			$$invalidate(40, floatingLabel);
    		});
    	}

    	function floatinglabel_binding_1($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			floatingLabel = $$value;
    			$$invalidate(40, floatingLabel);
    		});
    	}

    	function notchedoutline_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			notchedOutline = $$value;
    			$$invalidate(42, notchedOutline);
    		});
    	}

    	function span0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			selectText = $$value;
    			$$invalidate(30, selectText);
    		});
    	}

    	function lineripple_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			lineRipple = $$value;
    			$$invalidate(41, lineRipple);
    		});
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			selectAnchor = $$value;
    			$$invalidate(28, selectAnchor);
    		});
    	}

    	const focus_handler_1 = () => instance && instance.handleFocus();
    	const blur_handler_1 = () => instance && instance.handleBlur();

    	const click_handler = event => {
    		selectAnchor.focus();

    		if (instance) {
    			instance.handleClick(getNormalizedXCoordinate(event));
    		}
    	};

    	const keydown_handler = event => instance && instance.handleKeydown(event);

    	function list_1_selectedIndex_binding(value) {
    		selectedIndex = value;
    		$$invalidate(24, selectedIndex);
    	}

    	const SMUIList_mount_handler = event => $$invalidate(37, list = event.detail);

    	function menu_open_binding(value) {
    		menuOpen = value;
    		$$invalidate(32, menuOpen);
    	}

    	const SMUIMenu_selected_handler = event => instance && instance.handleMenuItemAction(event.detail.index);
    	const SMUIMenuSurface_closing_handler = () => instance && instance.handleMenuClosing();
    	const SMUIMenuSurface_closed_handler = () => instance && instance.handleMenuClosed();
    	const SMUIMenuSurface_opened_handler = () => instance && instance.handleMenuOpened();

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(25, element);
    		});
    	}

    	const SMUISelectLeadingIcon_mount_handler = event => $$invalidate(38, leadingIcon = event.detail);
    	const SMUISelectLeadingIcon_unmount_handler = () => $$invalidate(38, leadingIcon = undefined);
    	const SMUISelectHelperText_id_handler = event => $$invalidate(31, helperId = event.detail);
    	const SMUISelectHelperText_mount_handler = event => $$invalidate(39, helperText = event.detail);

    	const SMUISelectHelperText_unmount_handler = () => {
    		$$invalidate(31, helperId = undefined);
    		$$invalidate(39, helperText = undefined);
    	};

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(53, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
    		if ('ripple' in $$new_props) $$invalidate(5, ripple = $$new_props.ripple);
    		if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
    		if ('variant' in $$new_props) $$invalidate(7, variant = $$new_props.variant);
    		if ('noLabel' in $$new_props) $$invalidate(8, noLabel = $$new_props.noLabel);
    		if ('label' in $$new_props) $$invalidate(9, label = $$new_props.label);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('key' in $$new_props) $$invalidate(55, key = $$new_props.key);
    		if ('dirty' in $$new_props) $$invalidate(54, dirty = $$new_props.dirty);
    		if ('invalid' in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$new_props) $$invalidate(56, updateInvalid = $$new_props.updateInvalid);
    		if ('required' in $$new_props) $$invalidate(10, required = $$new_props.required);
    		if ('inputId' in $$new_props) $$invalidate(11, inputId = $$new_props.inputId);
    		if ('hiddenInput' in $$new_props) $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
    		if ('withLeadingIcon' in $$new_props) $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
    		if ('anchor$use' in $$new_props) $$invalidate(14, anchor$use = $$new_props.anchor$use);
    		if ('anchor$class' in $$new_props) $$invalidate(15, anchor$class = $$new_props.anchor$class);
    		if ('selectedTextContainer$use' in $$new_props) $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
    		if ('selectedTextContainer$class' in $$new_props) $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
    		if ('selectedText$use' in $$new_props) $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
    		if ('selectedText$class' in $$new_props) $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
    		if ('dropdownIcon$use' in $$new_props) $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
    		if ('dropdownIcon$class' in $$new_props) $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
    		if ('menu$class' in $$new_props) $$invalidate(22, menu$class = $$new_props.menu$class);
    		if ('$$scope' in $$new_props) $$invalidate(89, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$1,
    		MDCSelectFoundation,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		writable,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		Ripple,
    		Anchor,
    		Menu,
    		List,
    		FloatingLabel,
    		LineRipple,
    		NotchedOutline,
    		HelperText,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		style,
    		ripple,
    		disabled,
    		variant,
    		noLabel,
    		label,
    		value,
    		key,
    		dirty,
    		invalid,
    		updateInvalid,
    		useDefaultValidation,
    		required,
    		inputId,
    		hiddenInput,
    		withLeadingIcon,
    		anchor$use,
    		anchor$class,
    		selectedTextContainer$use,
    		selectedTextContainer$class,
    		selectedText$use,
    		selectedText$class,
    		dropdownIcon$use,
    		dropdownIcon$class,
    		menu$class,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		selectAnchor,
    		selectAnchorAttrs,
    		selectText,
    		selectedIndex,
    		helperId,
    		addLayoutListener,
    		removeLayoutListener,
    		menuOpen,
    		menuClasses,
    		anchorElement,
    		anchorCorner,
    		wrapFocus,
    		list,
    		context,
    		leadingIcon,
    		helperText,
    		floatingLabel,
    		lineRipple,
    		notchedOutline,
    		selectedTextStore,
    		valueStore,
    		previousSelectedIndex,
    		hasClass,
    		addClass,
    		removeClass,
    		addStyle,
    		addMenuClass,
    		removeMenuClass,
    		getSelectAnchorAttr,
    		addSelectAnchorAttr,
    		removeSelectAnchorAttr,
    		getMenuItemValues,
    		getNormalizedXCoordinate,
    		isTouchEvent,
    		getUseDefaultValidation,
    		setUseDefaultValidation,
    		focus,
    		layout,
    		getElement,
    		$selectedTextStore,
    		$valueStore
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
    		if ('ripple' in $$props) $$invalidate(5, ripple = $$new_props.ripple);
    		if ('disabled' in $$props) $$invalidate(6, disabled = $$new_props.disabled);
    		if ('variant' in $$props) $$invalidate(7, variant = $$new_props.variant);
    		if ('noLabel' in $$props) $$invalidate(8, noLabel = $$new_props.noLabel);
    		if ('label' in $$props) $$invalidate(9, label = $$new_props.label);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('key' in $$props) $$invalidate(55, key = $$new_props.key);
    		if ('dirty' in $$props) $$invalidate(54, dirty = $$new_props.dirty);
    		if ('invalid' in $$props) $$invalidate(1, invalid = $$new_props.invalid);
    		if ('updateInvalid' in $$props) $$invalidate(56, updateInvalid = $$new_props.updateInvalid);
    		if ('required' in $$props) $$invalidate(10, required = $$new_props.required);
    		if ('inputId' in $$props) $$invalidate(11, inputId = $$new_props.inputId);
    		if ('hiddenInput' in $$props) $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
    		if ('withLeadingIcon' in $$props) $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
    		if ('anchor$use' in $$props) $$invalidate(14, anchor$use = $$new_props.anchor$use);
    		if ('anchor$class' in $$props) $$invalidate(15, anchor$class = $$new_props.anchor$class);
    		if ('selectedTextContainer$use' in $$props) $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
    		if ('selectedTextContainer$class' in $$props) $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
    		if ('selectedText$use' in $$props) $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
    		if ('selectedText$class' in $$props) $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
    		if ('dropdownIcon$use' in $$props) $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
    		if ('dropdownIcon$class' in $$props) $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
    		if ('menu$class' in $$props) $$invalidate(22, menu$class = $$new_props.menu$class);
    		if ('element' in $$props) $$invalidate(25, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(23, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(26, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(27, internalStyles = $$new_props.internalStyles);
    		if ('selectAnchor' in $$props) $$invalidate(28, selectAnchor = $$new_props.selectAnchor);
    		if ('selectAnchorAttrs' in $$props) $$invalidate(29, selectAnchorAttrs = $$new_props.selectAnchorAttrs);
    		if ('selectText' in $$props) $$invalidate(30, selectText = $$new_props.selectText);
    		if ('selectedIndex' in $$props) $$invalidate(24, selectedIndex = $$new_props.selectedIndex);
    		if ('helperId' in $$props) $$invalidate(31, helperId = $$new_props.helperId);
    		if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    		if ('menuOpen' in $$props) $$invalidate(32, menuOpen = $$new_props.menuOpen);
    		if ('menuClasses' in $$props) $$invalidate(33, menuClasses = $$new_props.menuClasses);
    		if ('anchorElement' in $$props) $$invalidate(34, anchorElement = $$new_props.anchorElement);
    		if ('anchorCorner' in $$props) $$invalidate(35, anchorCorner = $$new_props.anchorCorner);
    		if ('wrapFocus' in $$props) $$invalidate(36, wrapFocus = $$new_props.wrapFocus);
    		if ('list' in $$props) $$invalidate(37, list = $$new_props.list);
    		if ('context' in $$props) $$invalidate(46, context = $$new_props.context);
    		if ('leadingIcon' in $$props) $$invalidate(38, leadingIcon = $$new_props.leadingIcon);
    		if ('helperText' in $$props) $$invalidate(39, helperText = $$new_props.helperText);
    		if ('floatingLabel' in $$props) $$invalidate(40, floatingLabel = $$new_props.floatingLabel);
    		if ('lineRipple' in $$props) $$invalidate(41, lineRipple = $$new_props.lineRipple);
    		if ('notchedOutline' in $$props) $$invalidate(42, notchedOutline = $$new_props.notchedOutline);
    		if ('previousSelectedIndex' in $$props) $$invalidate(62, previousSelectedIndex = $$new_props.previousSelectedIndex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*selectedIndex, instance, value*/ 25165825 | $$self.$$.dirty[2] & /*previousSelectedIndex*/ 1) {
    			if (previousSelectedIndex !== selectedIndex) {
    				$$invalidate(62, previousSelectedIndex = selectedIndex);

    				if (instance) {
    					instance.setSelectedIndex(
    						selectedIndex,
    						/* closeMenu */
    						false,
    						/* skipNotify */
    						true
    					);
    				} else {
    					const values = getMenuItemValues();

    					if (value !== values[selectedIndex]) {
    						$$invalidate(0, value = values[selectedIndex]);
    					}
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 1) {
    			set_store_value(valueStore, $valueStore = value, $valueStore);
    		}

    		if ($$self.$$.dirty[0] & /*instance, value*/ 8388609 | $$self.$$.dirty[1] & /*key*/ 16777216) {
    			if (instance && instance.getValue() !== key(value)) {
    				instance.setValue(key(value));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, disabled*/ 8388672) {
    			if (instance && instance.getDisabled() !== disabled) {
    				instance.setDisabled(disabled);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, invalid*/ 8388610 | $$self.$$.dirty[1] & /*dirty, updateInvalid*/ 41943040) {
    			if (instance && dirty && instance.isValid() !== !invalid) {
    				if (updateInvalid) {
    					$$invalidate(1, invalid = !instance.isValid());
    				} else {
    					instance.setValid(!invalid);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, required*/ 8389632) {
    			if (instance && instance.getRequired() !== required) {
    				instance.setRequired(required);
    			}
    		}
    	};

    	return [
    		value,
    		invalid,
    		use,
    		className,
    		style,
    		ripple,
    		disabled,
    		variant,
    		noLabel,
    		label,
    		required,
    		inputId,
    		hiddenInput,
    		withLeadingIcon,
    		anchor$use,
    		anchor$class,
    		selectedTextContainer$use,
    		selectedTextContainer$class,
    		selectedText$use,
    		selectedText$class,
    		dropdownIcon$use,
    		dropdownIcon$class,
    		menu$class,
    		instance,
    		selectedIndex,
    		element,
    		internalClasses,
    		internalStyles,
    		selectAnchor,
    		selectAnchorAttrs,
    		selectText,
    		helperId,
    		menuOpen,
    		menuClasses,
    		anchorElement,
    		anchorCorner,
    		wrapFocus,
    		list,
    		leadingIcon,
    		helperText,
    		floatingLabel,
    		lineRipple,
    		notchedOutline,
    		$selectedTextStore,
    		forwardEvents,
    		isUninitializedValue,
    		context,
    		selectedTextStore,
    		valueStore,
    		addClass,
    		removeClass,
    		addStyle,
    		$$slots,
    		$$restProps,
    		dirty,
    		key,
    		updateInvalid,
    		getUseDefaultValidation,
    		setUseDefaultValidation,
    		focus,
    		layout,
    		getElement,
    		previousSelectedIndex,
    		slots,
    		focus_handler,
    		blur_handler,
    		floatinglabel_binding,
    		floatinglabel_binding_1,
    		notchedoutline_binding,
    		span0_binding,
    		lineripple_binding,
    		div0_binding,
    		focus_handler_1,
    		blur_handler_1,
    		click_handler,
    		keydown_handler,
    		list_1_selectedIndex_binding,
    		SMUIList_mount_handler,
    		menu_open_binding,
    		SMUIMenu_selected_handler,
    		SMUIMenuSurface_closing_handler,
    		SMUIMenuSurface_closed_handler,
    		SMUIMenuSurface_opened_handler,
    		div1_binding,
    		SMUISelectLeadingIcon_mount_handler,
    		SMUISelectLeadingIcon_unmount_handler,
    		SMUISelectHelperText_id_handler,
    		SMUISelectHelperText_mount_handler,
    		SMUISelectHelperText_unmount_handler,
    		$$scope
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$7,
    			create_fragment$18,
    			safe_not_equal,
    			{
    				use: 2,
    				class: 3,
    				style: 4,
    				ripple: 5,
    				disabled: 6,
    				variant: 7,
    				noLabel: 8,
    				label: 9,
    				value: 0,
    				key: 55,
    				dirty: 54,
    				invalid: 1,
    				updateInvalid: 56,
    				required: 10,
    				inputId: 11,
    				hiddenInput: 12,
    				withLeadingIcon: 13,
    				anchor$use: 14,
    				anchor$class: 15,
    				selectedTextContainer$use: 16,
    				selectedTextContainer$class: 17,
    				selectedText$use: 18,
    				selectedText$class: 19,
    				dropdownIcon$use: 20,
    				dropdownIcon$class: 21,
    				menu$class: 22,
    				getUseDefaultValidation: 57,
    				setUseDefaultValidation: 58,
    				focus: 59,
    				layout: 60,
    				getElement: 61
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$18.name
    		});
    	}

    	get use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dirty() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dirty(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateInvalid() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateInvalid(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hiddenInput() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hiddenInput(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get withLeadingIcon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set withLeadingIcon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchor$use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchor$use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchor$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchor$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedTextContainer$use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedTextContainer$use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedTextContainer$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedTextContainer$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedText$use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedText$use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedText$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedText$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dropdownIcon$use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dropdownIcon$use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dropdownIcon$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dropdownIcon$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menu$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menu$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getUseDefaultValidation() {
    		return this.$$.ctx[57];
    	}

    	set getUseDefaultValidation(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setUseDefaultValidation() {
    		return this.$$.ctx[58];
    	}

    	set setUseDefaultValidation(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[59];
    	}

    	set focus(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[60];
    	}

    	set layout(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[61];
    	}

    	set getElement(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/select/dist/Option.svelte generated by Svelte v3.44.3 */

    // (1:0) <Item   bind:this={element}   use={usePass}   data-value={value}   {value}   {selected}   {...$$restProps}>
    function create_default_slot$H(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$H.name,
    		type: "slot",
    		source: "(1:0) <Item   bind:this={element}   use={usePass}   data-value={value}   {value}   {selected}   {...$$restProps}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$17(ctx) {
    	let item;
    	let current;

    	const item_spread_levels = [
    		{ use: /*usePass*/ ctx[3] },
    		{ "data-value": /*value*/ ctx[0] },
    		{ value: /*value*/ ctx[0] },
    		{ selected: /*selected*/ ctx[2] },
    		/*$$restProps*/ ctx[6]
    	];

    	let item_props = {
    		$$slots: { default: [create_default_slot$H] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < item_spread_levels.length; i += 1) {
    		item_props = assign(item_props, item_spread_levels[i]);
    	}

    	item = new Item({ props: item_props, $$inline: true });
    	/*item_binding*/ ctx[12](item);

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const item_changes = (dirty & /*usePass, value, selected, $$restProps*/ 77)
    			? get_spread_update(item_spread_levels, [
    					dirty & /*usePass*/ 8 && { use: /*usePass*/ ctx[3] },
    					dirty & /*value*/ 1 && { "data-value": /*value*/ ctx[0] },
    					dirty & /*value*/ 1 && { value: /*value*/ ctx[0] },
    					dirty & /*selected*/ 4 && { selected: /*selected*/ ctx[2] },
    					dirty & /*$$restProps*/ 64 && get_spread_object(/*$$restProps*/ ctx[6])
    				])
    			: {};

    			if (dirty & /*$$scope*/ 8192) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*item_binding*/ ctx[12](null);
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$17.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$10($$self, $$props, $$invalidate) {
    	let usePass;
    	let selected;
    	const omit_props_names = ["use","class","value","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $selectedText;
    	let $selectedValue;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Option', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	const className = '';
    	let { value = '' } = $$props;
    	let element;
    	const selectedText = getContext('SMUI:select:selectedText');
    	validate_store(selectedText, 'selectedText');
    	component_subscribe($$self, selectedText, value => $$invalidate(14, $selectedText = value));
    	const selectedValue = getContext('SMUI:select:value');
    	validate_store(selectedValue, 'selectedValue');
    	component_subscribe($$self, selectedValue, value => $$invalidate(10, $selectedValue = value));
    	setContext('SMUI:list:item:role', 'option');
    	onMount(setSelectedText);
    	onDestroy(setSelectedText);

    	function setSelectedText() {
    		if (selected && element) {
    			set_store_value(selectedText, $selectedText = element.getPrimaryText(), $selectedText);
    		}
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function item_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(7, use = $$new_props.use);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		Item,
    		forwardEvents,
    		use,
    		className,
    		value,
    		element,
    		selectedText,
    		selectedValue,
    		setSelectedText,
    		getElement,
    		selected,
    		usePass,
    		$selectedText,
    		$selectedValue
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(7, use = $$new_props.use);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
    		if ('selected' in $$props) $$invalidate(2, selected = $$new_props.selected);
    		if ('usePass' in $$props) $$invalidate(3, usePass = $$new_props.usePass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*use*/ 128) {
    			$$invalidate(3, usePass = [forwardEvents, ...use]);
    		}

    		if ($$self.$$.dirty & /*value, $selectedValue*/ 1025) {
    			$$invalidate(2, selected = value != null && value !== '' && $selectedValue === value);
    		}
    	};

    	return [
    		value,
    		element,
    		selected,
    		usePass,
    		selectedText,
    		selectedValue,
    		$$restProps,
    		use,
    		className,
    		getElement,
    		$selectedValue,
    		slots,
    		item_binding,
    		$$scope
    	];
    }

    class Option$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$10, create_fragment$17, safe_not_equal, {
    			use: 7,
    			class: 8,
    			value: 0,
    			getElement: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Option",
    			options,
    			id: create_fragment$17.name
    		});
    	}

    	get use() {
    		throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		return this.$$.ctx[8];
    	}

    	set class(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[9];
    	}

    	set getElement(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Option = Option$1;

    function mapCodeToSocialInsuranceInstitutionName(code) {
        if (!code) {
            return null;
        }
        let data = getSocialInsuranceInstitutionData();
        let maybe = data.find(item => code == item.code);
        if (maybe) {
            return maybe.name;
        }
        return null;
    }
    function getSocialInsuranceInstitutionData() {
        return [
            {
                "name": "Österreichische Gesundheitskasse",
                "code": "ÖGK"
            },
            {
                "name": "Versicherungsanstalt öffentlicher Bediensteter, Eisenbahn und Bergbau",
                "code": "BVAEB"
            },
            {
                "name": "Sozialversicherung der Selbständigen",
                "code": "SVS"
            },
            {
                "name": "Pensionsversicherungsanstalt",
                "code": "PVA"
            },
            {
                "name": "Allgemeine Unfallversicherungsanstalt",
                "code": "AUVA"
            }
        ];
    }

    /* src/components/SocialInsuranceInstitutionComponent.svelte generated by Svelte v3.44.3 */

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (12:4) <Option value={option.code}>
    function create_default_slot_1$z(ctx) {
    	let t0_value = /*option*/ ctx[6].code + "";
    	let t0;
    	let t1;
    	let t2_value = /*option*/ ctx[6].name + "";
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = text(" - ");
    			t2 = text(t2_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$z.name,
    		type: "slot",
    		source: "(12:4) <Option value={option.code}>",
    		ctx
    	});

    	return block;
    }

    // (11:4) {#each options as option}
    function create_each_block$g(ctx) {
    	let option;
    	let current;

    	option = new Option({
    			props: {
    				value: /*option*/ ctx[6].code,
    				$$slots: { default: [create_default_slot_1$z] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(option.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(option, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const option_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				option_changes.$$scope = { dirty, ctx };
    			}

    			option.$set(option_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(option.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(option.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(option, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(11:4) {#each options as option}",
    		ctx
    	});

    	return block;
    }

    // (9:0) <Select bind:value={socialInsuranceInstitution} label={$l.personal.socialInsuranceInstitution} {style} disabled={!edit}>
    function create_default_slot$G(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let current;
    	option = new Option({ props: { value: "" }, $$inline: true });
    	let each_value = /*options*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			create_component(option.$$.fragment);
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(option, target, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*options*/ 16) {
    				each_value = /*options*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(option.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(option.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(option, detaching);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$G.name,
    		type: "slot",
    		source: "(9:0) <Select bind:value={socialInsuranceInstitution} label={$l.personal.socialInsuranceInstitution} {style} disabled={!edit}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$16(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[5](value);
    	}

    	let select_props = {
    		label: /*$l*/ ctx[3].personal.socialInsuranceInstitution,
    		style: /*style*/ ctx[2],
    		disabled: !/*edit*/ ctx[1],
    		$$slots: { default: [create_default_slot$G] },
    		$$scope: { ctx }
    	};

    	if (/*socialInsuranceInstitution*/ ctx[0] !== void 0) {
    		select_props.value = /*socialInsuranceInstitution*/ ctx[0];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const select_changes = {};
    			if (dirty & /*$l*/ 8) select_changes.label = /*$l*/ ctx[3].personal.socialInsuranceInstitution;
    			if (dirty & /*style*/ 4) select_changes.style = /*style*/ ctx[2];
    			if (dirty & /*edit*/ 2) select_changes.disabled = !/*edit*/ ctx[1];

    			if (dirty & /*$$scope*/ 512) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*socialInsuranceInstitution*/ 1) {
    				updating_value = true;
    				select_changes.value = /*socialInsuranceInstitution*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$16.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$$($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(3, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SocialInsuranceInstitutionComponent', slots, []);
    	let { socialInsuranceInstitution } = $$props;
    	let { edit } = $$props;
    	let { style = "width: 100%;" } = $$props;
    	let options = getSocialInsuranceInstitutionData();
    	const writable_props = ['socialInsuranceInstitution', 'edit', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SocialInsuranceInstitutionComponent> was created with unknown prop '${key}'`);
    	});

    	function select_value_binding(value) {
    		socialInsuranceInstitution = value;
    		$$invalidate(0, socialInsuranceInstitution);
    	}

    	$$self.$$set = $$props => {
    		if ('socialInsuranceInstitution' in $$props) $$invalidate(0, socialInsuranceInstitution = $$props.socialInsuranceInstitution);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		Select,
    		Option,
    		getSocialInsuranceInstitutionData,
    		socialInsuranceInstitution,
    		edit,
    		style,
    		options,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('socialInsuranceInstitution' in $$props) $$invalidate(0, socialInsuranceInstitution = $$props.socialInsuranceInstitution);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('style' in $$props) $$invalidate(2, style = $$props.style);
    		if ('options' in $$props) $$invalidate(4, options = $$props.options);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [socialInsuranceInstitution, edit, style, $l, options, select_value_binding];
    }

    class SocialInsuranceInstitutionComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$$, create_fragment$16, safe_not_equal, {
    			socialInsuranceInstitution: 0,
    			edit: 1,
    			style: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SocialInsuranceInstitutionComponent",
    			options,
    			id: create_fragment$16.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*socialInsuranceInstitution*/ ctx[0] === undefined && !('socialInsuranceInstitution' in props)) {
    			console.warn("<SocialInsuranceInstitutionComponent> was created without expected prop 'socialInsuranceInstitution'");
    		}

    		if (/*edit*/ ctx[1] === undefined && !('edit' in props)) {
    			console.warn("<SocialInsuranceInstitutionComponent> was created without expected prop 'edit'");
    		}
    	}

    	get socialInsuranceInstitution() {
    		throw new Error("<SocialInsuranceInstitutionComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set socialInsuranceInstitution(value) {
    		throw new Error("<SocialInsuranceInstitutionComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<SocialInsuranceInstitutionComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<SocialInsuranceInstitutionComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<SocialInsuranceInstitutionComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<SocialInsuranceInstitutionComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/LabelTextfieldToggle.svelte generated by Svelte v3.44.3 */

    function create_fragment$15(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[7](value);
    	}

    	let textfield_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		prefix: /*prefix*/ ctx[5],
    		style: /*style*/ ctx[1],
    		label: /*label*/ ctx[2],
    		type: /*type*/ ctx[4],
    		input$class: /*edit*/ ctx[3] ? '' : 'font-color',
    		disabled: !/*edit*/ ctx[3],
    		input$pattern: /*checkPattern*/ ctx[6]
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		textfield_props.value = /*value*/ ctx[0];
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const textfield_changes = {};
    			if (dirty & /*prefix*/ 32) textfield_changes.prefix = /*prefix*/ ctx[5];
    			if (dirty & /*style*/ 2) textfield_changes.style = /*style*/ ctx[1];
    			if (dirty & /*label*/ 4) textfield_changes.label = /*label*/ ctx[2];
    			if (dirty & /*type*/ 16) textfield_changes.type = /*type*/ ctx[4];
    			if (dirty & /*edit*/ 8) textfield_changes.input$class = /*edit*/ ctx[3] ? '' : 'font-color';
    			if (dirty & /*edit*/ 8) textfield_changes.disabled = !/*edit*/ ctx[3];
    			if (dirty & /*checkPattern*/ 64) textfield_changes.input$pattern = /*checkPattern*/ ctx[6];

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$15.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$_($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LabelTextfieldToggle', slots, []);
    	let { value } = $$props;
    	let { style = "width: 100%;" } = $$props;
    	let { label } = $$props;
    	let { edit = false } = $$props;
    	let { type = "" } = $$props;
    	let { prefix = "" } = $$props;
    	let { checkPattern = ".*" } = $$props;
    	const writable_props = ['value', 'style', 'label', 'edit', 'type', 'prefix', 'checkPattern'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LabelTextfieldToggle> was created with unknown prop '${key}'`);
    	});

    	function textfield_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('label' in $$props) $$invalidate(2, label = $$props.label);
    		if ('edit' in $$props) $$invalidate(3, edit = $$props.edit);
    		if ('type' in $$props) $$invalidate(4, type = $$props.type);
    		if ('prefix' in $$props) $$invalidate(5, prefix = $$props.prefix);
    		if ('checkPattern' in $$props) $$invalidate(6, checkPattern = $$props.checkPattern);
    	};

    	$$self.$capture_state = () => ({
    		Textfield,
    		value,
    		style,
    		label,
    		edit,
    		type,
    		prefix,
    		checkPattern
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('label' in $$props) $$invalidate(2, label = $$props.label);
    		if ('edit' in $$props) $$invalidate(3, edit = $$props.edit);
    		if ('type' in $$props) $$invalidate(4, type = $$props.type);
    		if ('prefix' in $$props) $$invalidate(5, prefix = $$props.prefix);
    		if ('checkPattern' in $$props) $$invalidate(6, checkPattern = $$props.checkPattern);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, style, label, edit, type, prefix, checkPattern, textfield_value_binding];
    }

    class LabelTextfieldToggle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$_, create_fragment$15, safe_not_equal, {
    			value: 0,
    			style: 1,
    			label: 2,
    			edit: 3,
    			type: 4,
    			prefix: 5,
    			checkPattern: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LabelTextfieldToggle",
    			options,
    			id: create_fragment$15.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<LabelTextfieldToggle> was created without expected prop 'value'");
    		}

    		if (/*label*/ ctx[2] === undefined && !('label' in props)) {
    			console.warn("<LabelTextfieldToggle> was created without expected prop 'label'");
    		}
    	}

    	get value() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checkPattern() {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checkPattern(value) {
    		throw new Error("<LabelTextfieldToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/client/GenericPersonComponent.svelte generated by Svelte v3.44.3 */
    const file$Q = "src/components/client/GenericPersonComponent.svelte";

    // (15:4) <Cell span={6}>
    function create_default_slot_14$b(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[4](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.firstName
    	};

    	if (/*person*/ ctx[0].firstName !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].firstName;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.firstName;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].firstName;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$b.name,
    		type: "slot",
    		source: "(15:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (18:4) <Cell span={6}>
    function create_default_slot_13$d(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[5](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.lastName
    	};

    	if (/*person*/ ctx[0].lastName !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].lastName;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.lastName;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].lastName;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$d.name,
    		type: "slot",
    		source: "(18:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (21:4) {#if !childMode}
    function create_if_block_1$i(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_12$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$i.name,
    		type: "if",
    		source: "(21:4) {#if !childMode}",
    		ctx
    	});

    	return block;
    }

    // (22:8) <Cell span={12}>
    function create_default_slot_12$d(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_2(value) {
    		/*labeltextfieldtoggle_value_binding_2*/ ctx[6](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.email
    	};

    	if (/*person*/ ctx[0].email !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].email;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.email;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].email;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$d.name,
    		type: "slot",
    		source: "(22:8) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (28:12) <FormField>
    function create_default_slot_11$d(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding(value) {
    		/*radio_group_binding*/ ctx[7](value);
    	}

    	let radio_props = {
    		value: "m",
    		touch: true,
    		disabled: !/*edit*/ ctx[2]
    	};

    	if (/*person*/ ctx[0].gender !== void 0) {
    		radio_props.group = /*person*/ ctx[0].gender;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};
    			if (dirty & /*edit*/ 4) radio_changes.disabled = !/*edit*/ ctx[2];

    			if (!updating_group && dirty & /*person*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*person*/ ctx[0].gender;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$d.name,
    		type: "slot",
    		source: "(28:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (30:16) 
    function create_label_slot_2$4(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[3].personal.gender.male + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$Q, 29, 16, 1157);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 8 && t_value !== (t_value = /*$l*/ ctx[3].personal.gender.male + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2$4.name,
    		type: "slot",
    		source: "(30:16) ",
    		ctx
    	});

    	return block;
    }

    // (32:12) <FormField>
    function create_default_slot_10$d(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_1(value) {
    		/*radio_group_binding_1*/ ctx[8](value);
    	}

    	let radio_props = {
    		value: "f",
    		touch: true,
    		disabled: !/*edit*/ ctx[2]
    	};

    	if (/*person*/ ctx[0].gender !== void 0) {
    		radio_props.group = /*person*/ ctx[0].gender;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_1));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};
    			if (dirty & /*edit*/ 4) radio_changes.disabled = !/*edit*/ ctx[2];

    			if (!updating_group && dirty & /*person*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*person*/ ctx[0].gender;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$d.name,
    		type: "slot",
    		source: "(32:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (34:16) 
    function create_label_slot_1$5(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[3].personal.gender.female + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$Q, 33, 16, 1359);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 8 && t_value !== (t_value = /*$l*/ ctx[3].personal.gender.female + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1$5.name,
    		type: "slot",
    		source: "(34:16) ",
    		ctx
    	});

    	return block;
    }

    // (36:12) <FormField>
    function create_default_slot_9$d(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_2(value) {
    		/*radio_group_binding_2*/ ctx[9](value);
    	}

    	let radio_props = {
    		value: "x",
    		touch: true,
    		disabled: !/*edit*/ ctx[2]
    	};

    	if (/*person*/ ctx[0].gender !== void 0) {
    		radio_props.group = /*person*/ ctx[0].gender;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_2));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};
    			if (dirty & /*edit*/ 4) radio_changes.disabled = !/*edit*/ ctx[2];

    			if (!updating_group && dirty & /*person*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*person*/ ctx[0].gender;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$d.name,
    		type: "slot",
    		source: "(36:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (38:16) 
    function create_label_slot$7(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[3].personal.gender.divers + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$Q, 37, 16, 1563);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 8 && t_value !== (t_value = /*$l*/ ctx[3].personal.gender.divers + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$7.name,
    		type: "slot",
    		source: "(38:16) ",
    		ctx
    	});

    	return block;
    }

    // (26:4) <Cell span={6}>
    function create_default_slot_8$f(ctx) {
    	let div;
    	let formfield0;
    	let t0;
    	let formfield1;
    	let t1;
    	let formfield2;
    	let current;

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_2$4],
    					default: [create_default_slot_11$d]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_1$5],
    					default: [create_default_slot_10$d]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield2 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$7],
    					default: [create_default_slot_9$d]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(formfield0.$$.fragment);
    			t0 = space();
    			create_component(formfield1.$$.fragment);
    			t1 = space();
    			create_component(formfield2.$$.fragment);
    			attr_dev(div, "class", "radio-container svelte-ddt2zz");
    			add_location(div, file$Q, 26, 8, 1002);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(formfield0, div, null);
    			append_dev(div, t0);
    			mount_component(formfield1, div, null);
    			append_dev(div, t1);
    			mount_component(formfield2, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, $l, edit, person*/ 131085) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, $l, edit, person*/ 131085) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);
    			const formfield2_changes = {};

    			if (dirty & /*$$scope, $l, edit, person*/ 131085) {
    				formfield2_changes.$$scope = { dirty, ctx };
    			}

    			formfield2.$set(formfield2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(formfield2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(formfield2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(formfield0);
    			destroy_component(formfield1);
    			destroy_component(formfield2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$f.name,
    		type: "slot",
    		source: "(26:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (42:4) <Cell span={6}>
    function create_default_slot_7$g(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_3(value) {
    		/*labeltextfieldtoggle_value_binding_3*/ ctx[10](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.birthday,
    		type: "date"
    	};

    	if (/*person*/ ctx[0].birthday !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].birthday;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_3));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.birthday;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].birthday;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$g.name,
    		type: "slot",
    		source: "(42:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (45:4) {#if !childMode}
    function create_if_block$v(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let cell4;
    	let t4;
    	let cell5;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_6$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_5$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_4$p] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_3$t] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_2$w] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell5 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_1$y] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    			create_component(cell4.$$.fragment);
    			t4 = space();
    			create_component(cell5.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell5, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, edit, person*/ 131077) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    			const cell5_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell5_changes.$$scope = { dirty, ctx };
    			}

    			cell5.$set(cell5_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			transition_in(cell5.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			transition_out(cell5.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell5, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$v.name,
    		type: "if",
    		source: "(45:4) {#if !childMode}",
    		ctx
    	});

    	return block;
    }

    // (46:4) <Cell span={6}>
    function create_default_slot_6$l(ctx) {
    	let countrycomponent;
    	let updating_country;
    	let current;

    	function countrycomponent_country_binding(value) {
    		/*countrycomponent_country_binding*/ ctx[11](value);
    	}

    	let countrycomponent_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.nationality
    	};

    	if (/*person*/ ctx[0].nationality !== void 0) {
    		countrycomponent_props.country = /*person*/ ctx[0].nationality;
    	}

    	countrycomponent = new CountryComponent({
    			props: countrycomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(countrycomponent, 'country', countrycomponent_country_binding));

    	const block = {
    		c: function create() {
    			create_component(countrycomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(countrycomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const countrycomponent_changes = {};
    			if (dirty & /*edit*/ 4) countrycomponent_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) countrycomponent_changes.label = /*$l*/ ctx[3].personal.nationality;

    			if (!updating_country && dirty & /*person*/ 1) {
    				updating_country = true;
    				countrycomponent_changes.country = /*person*/ ctx[0].nationality;
    				add_flush_callback(() => updating_country = false);
    			}

    			countrycomponent.$set(countrycomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(countrycomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(countrycomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(countrycomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$l.name,
    		type: "slot",
    		source: "(46:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (49:4) <Cell span={6}>
    function create_default_slot_5$m(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_4(value) {
    		/*labeltextfieldtoggle_value_binding_4*/ ctx[12](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.birthPlace
    	};

    	if (/*person*/ ctx[0].birthPlace !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].birthPlace;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_4));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.birthPlace;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].birthPlace;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$m.name,
    		type: "slot",
    		source: "(49:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (52:4) <Cell span={6}>
    function create_default_slot_4$p(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_5(value) {
    		/*labeltextfieldtoggle_value_binding_5*/ ctx[13](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.occupation
    	};

    	if (/*person*/ ctx[0].occupation !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].occupation;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_5));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.occupation;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].occupation;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$p.name,
    		type: "slot",
    		source: "(52:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (55:4) <Cell span={6}>
    function create_default_slot_3$t(ctx) {
    	let socialinsuranceinstitutioncomponent;
    	let updating_socialInsuranceInstitution;
    	let current;

    	function socialinsuranceinstitutioncomponent_socialInsuranceInstitution_binding(value) {
    		/*socialinsuranceinstitutioncomponent_socialInsuranceInstitution_binding*/ ctx[14](value);
    	}

    	let socialinsuranceinstitutioncomponent_props = { edit: /*edit*/ ctx[2] };

    	if (/*person*/ ctx[0].socialInsuranceInstitution !== void 0) {
    		socialinsuranceinstitutioncomponent_props.socialInsuranceInstitution = /*person*/ ctx[0].socialInsuranceInstitution;
    	}

    	socialinsuranceinstitutioncomponent = new SocialInsuranceInstitutionComponent({
    			props: socialinsuranceinstitutioncomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(socialinsuranceinstitutioncomponent, 'socialInsuranceInstitution', socialinsuranceinstitutioncomponent_socialInsuranceInstitution_binding));

    	const block = {
    		c: function create() {
    			create_component(socialinsuranceinstitutioncomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(socialinsuranceinstitutioncomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const socialinsuranceinstitutioncomponent_changes = {};
    			if (dirty & /*edit*/ 4) socialinsuranceinstitutioncomponent_changes.edit = /*edit*/ ctx[2];

    			if (!updating_socialInsuranceInstitution && dirty & /*person*/ 1) {
    				updating_socialInsuranceInstitution = true;
    				socialinsuranceinstitutioncomponent_changes.socialInsuranceInstitution = /*person*/ ctx[0].socialInsuranceInstitution;
    				add_flush_callback(() => updating_socialInsuranceInstitution = false);
    			}

    			socialinsuranceinstitutioncomponent.$set(socialinsuranceinstitutioncomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(socialinsuranceinstitutioncomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(socialinsuranceinstitutioncomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(socialinsuranceinstitutioncomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$t.name,
    		type: "slot",
    		source: "(55:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (58:4) <Cell span={6}>
    function create_default_slot_2$w(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_6(value) {
    		/*labeltextfieldtoggle_value_binding_6*/ ctx[15](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.title
    	};

    	if (/*person*/ ctx[0].title !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].title;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_6));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.title;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].title;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$w.name,
    		type: "slot",
    		source: "(58:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (61:4) <Cell span={6}>
    function create_default_slot_1$y(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_7(value) {
    		/*labeltextfieldtoggle_value_binding_7*/ ctx[16](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[2],
    		label: /*$l*/ ctx[3].personal.degree
    	};

    	if (/*person*/ ctx[0].academicDegree !== void 0) {
    		labeltextfieldtoggle_props.value = /*person*/ ctx[0].academicDegree;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_7));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];
    			if (dirty & /*$l*/ 8) labeltextfieldtoggle_changes.label = /*$l*/ ctx[3].personal.degree;

    			if (!updating_value && dirty & /*person*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*person*/ ctx[0].academicDegree;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$y.name,
    		type: "slot",
    		source: "(61:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (14:0) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot$F(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let t2;
    	let cell2;
    	let t3;
    	let cell3;
    	let t4;
    	let if_block1_anchor;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_14$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_13$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block0 = !/*childMode*/ ctx[1] && create_if_block_1$i(ctx);

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_8$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_7$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block1 = !/*childMode*/ ctx[1] && create_if_block$v(ctx);

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			create_component(cell2.$$.fragment);
    			t3 = space();
    			create_component(cell3.$$.fragment);
    			t4 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);

    			if (!/*childMode*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*childMode*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$i(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const cell2_changes = {};

    			if (dirty & /*$$scope, $l, edit, person*/ 131085) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, edit, $l, person*/ 131085) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);

    			if (!/*childMode*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*childMode*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$v(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$F.name,
    		type: "slot",
    		source: "(14:0) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$14(ctx) {
    	let layoutgrid;
    	let current;

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot$F] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(layoutgrid.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layoutgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, edit, $l, person, childMode*/ 131087) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layoutgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$14.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(3, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('GenericPersonComponent', slots, []);
    	let { person } = $$props;
    	let { childMode = false } = $$props;
    	let { edit } = $$props;
    	const writable_props = ['person', 'childMode', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<GenericPersonComponent> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value) {
    		if ($$self.$$.not_equal(person.firstName, value)) {
    			person.firstName = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value) {
    		if ($$self.$$.not_equal(person.lastName, value)) {
    			person.lastName = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_2(value) {
    		if ($$self.$$.not_equal(person.email, value)) {
    			person.email = value;
    			$$invalidate(0, person);
    		}
    	}

    	function radio_group_binding(value) {
    		if ($$self.$$.not_equal(person.gender, value)) {
    			person.gender = value;
    			$$invalidate(0, person);
    		}
    	}

    	function radio_group_binding_1(value) {
    		if ($$self.$$.not_equal(person.gender, value)) {
    			person.gender = value;
    			$$invalidate(0, person);
    		}
    	}

    	function radio_group_binding_2(value) {
    		if ($$self.$$.not_equal(person.gender, value)) {
    			person.gender = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_3(value) {
    		if ($$self.$$.not_equal(person.birthday, value)) {
    			person.birthday = value;
    			$$invalidate(0, person);
    		}
    	}

    	function countrycomponent_country_binding(value) {
    		if ($$self.$$.not_equal(person.nationality, value)) {
    			person.nationality = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_4(value) {
    		if ($$self.$$.not_equal(person.birthPlace, value)) {
    			person.birthPlace = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_5(value) {
    		if ($$self.$$.not_equal(person.occupation, value)) {
    			person.occupation = value;
    			$$invalidate(0, person);
    		}
    	}

    	function socialinsuranceinstitutioncomponent_socialInsuranceInstitution_binding(value) {
    		if ($$self.$$.not_equal(person.socialInsuranceInstitution, value)) {
    			person.socialInsuranceInstitution = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_6(value) {
    		if ($$self.$$.not_equal(person.title, value)) {
    			person.title = value;
    			$$invalidate(0, person);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_7(value) {
    		if ($$self.$$.not_equal(person.academicDegree, value)) {
    			person.academicDegree = value;
    			$$invalidate(0, person);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('person' in $$props) $$invalidate(0, person = $$props.person);
    		if ('childMode' in $$props) $$invalidate(1, childMode = $$props.childMode);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		LayoutGrid,
    		Cell,
    		Radio,
    		FormField,
    		CountryComponent,
    		SocialInsuranceInstitutionComponent,
    		LabelTextfieldToggle,
    		person,
    		childMode,
    		edit,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('person' in $$props) $$invalidate(0, person = $$props.person);
    		if ('childMode' in $$props) $$invalidate(1, childMode = $$props.childMode);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		person,
    		childMode,
    		edit,
    		$l,
    		labeltextfieldtoggle_value_binding,
    		labeltextfieldtoggle_value_binding_1,
    		labeltextfieldtoggle_value_binding_2,
    		radio_group_binding,
    		radio_group_binding_1,
    		radio_group_binding_2,
    		labeltextfieldtoggle_value_binding_3,
    		countrycomponent_country_binding,
    		labeltextfieldtoggle_value_binding_4,
    		labeltextfieldtoggle_value_binding_5,
    		socialinsuranceinstitutioncomponent_socialInsuranceInstitution_binding,
    		labeltextfieldtoggle_value_binding_6,
    		labeltextfieldtoggle_value_binding_7
    	];
    }

    class GenericPersonComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Z, create_fragment$14, safe_not_equal, { person: 0, childMode: 1, edit: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GenericPersonComponent",
    			options,
    			id: create_fragment$14.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*person*/ ctx[0] === undefined && !('person' in props)) {
    			console.warn("<GenericPersonComponent> was created without expected prop 'person'");
    		}

    		if (/*edit*/ ctx[2] === undefined && !('edit' in props)) {
    			console.warn("<GenericPersonComponent> was created without expected prop 'edit'");
    		}
    	}

    	get person() {
    		throw new Error("<GenericPersonComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set person(value) {
    		throw new Error("<GenericPersonComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get childMode() {
    		throw new Error("<GenericPersonComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set childMode(value) {
    		throw new Error("<GenericPersonComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<GenericPersonComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<GenericPersonComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Divider.svelte generated by Svelte v3.44.3 */

    const file$P = "src/components/Divider.svelte";

    function create_fragment$13(ctx) {
    	let hr;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			set_style(hr, "margin", /*margin*/ ctx[0]);
    			attr_dev(hr, "class", "svelte-urq0ec");
    			add_location(hr, file$P, 3, 0, 66);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*margin*/ 1) {
    				set_style(hr, "margin", /*margin*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$13.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Divider', slots, []);
    	let { margin = '50px 0 70px 0' } = $$props;
    	const writable_props = ['margin'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Divider> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('margin' in $$props) $$invalidate(0, margin = $$props.margin);
    	};

    	$$self.$capture_state = () => ({ margin });

    	$$self.$inject_state = $$props => {
    		if ('margin' in $$props) $$invalidate(0, margin = $$props.margin);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [margin];
    }

    class Divider extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Y, create_fragment$13, safe_not_equal, { margin: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Divider",
    			options,
    			id: create_fragment$13.name
    		});
    	}

    	get margin() {
    		throw new Error("<Divider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set margin(value) {
    		throw new Error("<Divider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/H2.svelte generated by Svelte v3.44.3 */

    const file$O = "src/components/H2.svelte";

    function create_fragment$12(ctx) {
    	let h2;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			if (default_slot) default_slot.c();
    			attr_dev(h2, "class", "svelte-2dv1rj");
    			add_location(h2, file$O, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);

    			if (default_slot) {
    				default_slot.m(h2, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$12.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H2', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<H2> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class H2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$X, create_fragment$12, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H2",
    			options,
    			id: create_fragment$12.name
    		});
    	}
    }

    /* src/components/H3.svelte generated by Svelte v3.44.3 */

    const file$N = "src/components/H3.svelte";

    function create_fragment$11(ctx) {
    	let h3;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			if (default_slot) default_slot.c();
    			attr_dev(h3, "class", "svelte-1pcdop3");
    			add_location(h3, file$N, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);

    			if (default_slot) {
    				default_slot.m(h3, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$11.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H3', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<H3> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class H3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$W, create_fragment$11, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H3",
    			options,
    			id: create_fragment$11.name
    		});
    	}
    }

    /* src/components/StylizedCheckbox.svelte generated by Svelte v3.44.3 */
    const file$M = "src/components/StylizedCheckbox.svelte";
    const get_default_slot_changes$1 = dirty => ({});
    const get_default_slot_context$1 = ctx => ({ class: "content svelte-1a2y1fy" });

    // (11:12) <Icon class="material-icons">
    function create_default_slot_2$v(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("check_box_outline_blank");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$v.name,
    		type: "slot",
    		source: "(11:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (12:12) <Icon class="material-icons" on>
    function create_default_slot_1$x(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("check_box");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$x.name,
    		type: "slot",
    		source: "(12:12) <Icon class=\\\"material-icons\\\" on>",
    		ctx
    	});

    	return block;
    }

    // (10:8) <IconButton toggle bind:pressed={value} {disabled}>
    function create_default_slot$E(ctx) {
    	let icon0;
    	let t;
    	let icon1;
    	let current;

    	icon0 = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_2$v] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	icon1 = new Icon$1({
    			props: {
    				class: "material-icons",
    				on: true,
    				$$slots: { default: [create_default_slot_1$x] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon0.$$.fragment);
    			t = space();
    			create_component(icon1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(icon1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon0_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				icon0_changes.$$scope = { dirty, ctx };
    			}

    			icon0.$set(icon0_changes);
    			const icon1_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				icon1_changes.$$scope = { dirty, ctx };
    			}

    			icon1.$set(icon1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(icon1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$E.name,
    		type: "slot",
    		source: "(10:8) <IconButton toggle bind:pressed={value} {disabled}>",
    		ctx
    	});

    	return block;
    }

    // (16:4) {#if value}
    function create_if_block$u(ctx) {
    	let div;
    	let div_transition;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_style(div, "grid-area", "main");
    			add_location(div, file$M, 16, 8, 609);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$u.name,
    		type: "if",
    		source: "(16:4) {#if value}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$10(ctx) {
    	let div2;
    	let div0;
    	let iconbutton;
    	let updating_pressed;
    	let t0;
    	let div1;
    	let t1;
    	let div1_class_value;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;

    	function iconbutton_pressed_binding(value) {
    		/*iconbutton_pressed_binding*/ ctx[5](value);
    	}

    	let iconbutton_props = {
    		toggle: true,
    		disabled: /*disabled*/ ctx[3],
    		$$slots: { default: [create_default_slot$E] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		iconbutton_props.pressed = /*value*/ ctx[0];
    	}

    	iconbutton = new IconButton({ props: iconbutton_props, $$inline: true });
    	binding_callbacks.push(() => bind(iconbutton, 'pressed', iconbutton_pressed_binding));
    	let if_block = /*value*/ ctx[0] && create_if_block$u(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(iconbutton.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			t1 = text(/*label*/ ctx[1]);
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "button svelte-1a2y1fy");
    			add_location(div0, file$M, 8, 4, 256);
    			attr_dev(div1, "class", div1_class_value = "label " + /*labelStyle*/ ctx[2] + " svelte-1a2y1fy");
    			add_location(div1, file$M, 14, 4, 507);
    			attr_dev(div2, "class", "container svelte-1a2y1fy");
    			add_location(div2, file$M, 7, 0, 228);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(iconbutton, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, t1);
    			append_dev(div2, t2);
    			if (if_block) if_block.m(div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbutton_changes = {};
    			if (dirty & /*disabled*/ 8) iconbutton_changes.disabled = /*disabled*/ ctx[3];

    			if (dirty & /*$$scope*/ 128) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_pressed && dirty & /*value*/ 1) {
    				updating_pressed = true;
    				iconbutton_changes.pressed = /*value*/ ctx[0];
    				add_flush_callback(() => updating_pressed = false);
    			}

    			iconbutton.$set(iconbutton_changes);
    			if (!current || dirty & /*label*/ 2) set_data_dev(t1, /*label*/ ctx[1]);

    			if (!current || dirty & /*labelStyle*/ 4 && div1_class_value !== (div1_class_value = "label " + /*labelStyle*/ ctx[2] + " svelte-1a2y1fy")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (/*value*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*value*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$u(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(iconbutton);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$10.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StylizedCheckbox', slots, ['default']);
    	let { value } = $$props;
    	let { label = "" } = $$props;
    	let { labelStyle = "body1" } = $$props;
    	let { disabled = false } = $$props;
    	const writable_props = ['value', 'label', 'labelStyle', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StylizedCheckbox> was created with unknown prop '${key}'`);
    	});

    	function iconbutton_pressed_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	const click_handler = () => $$invalidate(0, value = !value);

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('labelStyle' in $$props) $$invalidate(2, labelStyle = $$props.labelStyle);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		IconButton,
    		Icon: Icon$1,
    		value,
    		label,
    		labelStyle,
    		disabled
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('labelStyle' in $$props) $$invalidate(2, labelStyle = $$props.labelStyle);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		label,
    		labelStyle,
    		disabled,
    		slots,
    		iconbutton_pressed_binding,
    		click_handler,
    		$$scope
    	];
    }

    class StylizedCheckbox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$V, create_fragment$10, safe_not_equal, {
    			value: 0,
    			label: 1,
    			labelStyle: 2,
    			disabled: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StylizedCheckbox",
    			options,
    			id: create_fragment$10.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<StylizedCheckbox> was created without expected prop 'value'");
    		}
    	}

    	get value() {
    		throw new Error("<StylizedCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<StylizedCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<StylizedCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<StylizedCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelStyle() {
    		throw new Error("<StylizedCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelStyle(value) {
    		throw new Error("<StylizedCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<StylizedCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<StylizedCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const createEmptyGenericPersonDto = () => {
        return {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            mobile: '',
            title: '',
            academicDegree: '',
            birthday: '',
            birthPlace: '',
            nationality: null,
            socialInsuranceInstitution: null,
            occupation: '',
            country: null,
            zipCode: '',
            city: '',
            address: '',
        };
    };
    const createEmptyClientDto = () => {
        return {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            mobile: '',
            title: '',
            academicDegree: '',
            birthday: '',
            birthPlace: '',
            nationality: undefined,
            socialInsuranceInstitution: undefined,
            occupation: '',
            country: undefined,
            zipCode: '',
            city: '',
            address: '',
            supervisor: '',
            deleted: false,
            militaryServiceDone: false,
            smoker: false,
            pets: false,
            petsRemarks: '',
            maritalStatus: undefined,
            homeRemarks: '',
            bank: '',
            iban: '',
            bic: '',
            partner: undefined,
            children: [],
            contracts: [],
            documents: [],
            proofOfIdentities: [],
        };
    };

    /* src/components/client/PersonalComponent.svelte generated by Svelte v3.44.3 */
    const file$L = "src/components/client/PersonalComponent.svelte";

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[24] = list;
    	child_ctx[25] = i;
    	return child_ctx;
    }

    // (42:4) <Cell span={6}>
    function create_default_slot_30$1(ctx) {
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[6](value);
    	}

    	let stylizedcheckbox_props = {
    		disabled: !/*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.militaryServiceDone
    	};

    	if (/*client*/ ctx[0].militaryServiceDone !== void 0) {
    		stylizedcheckbox_props.value = /*client*/ ctx[0].militaryServiceDone;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	const block = {
    		c: function create() {
    			create_component(stylizedcheckbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stylizedcheckbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*edit*/ 2) stylizedcheckbox_changes.disabled = !/*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) stylizedcheckbox_changes.label = /*$l*/ ctx[2].personal.militaryServiceDone;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*client*/ ctx[0].militaryServiceDone;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stylizedcheckbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_30$1.name,
    		type: "slot",
    		source: "(42:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (45:4) <Cell span={6}>
    function create_default_slot_29$1(ctx) {
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding_1(value) {
    		/*stylizedcheckbox_value_binding_1*/ ctx[7](value);
    	}

    	let stylizedcheckbox_props = {
    		disabled: !/*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.smoker
    	};

    	if (/*client*/ ctx[0].smoker !== void 0) {
    		stylizedcheckbox_props.value = /*client*/ ctx[0].smoker;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(stylizedcheckbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stylizedcheckbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*edit*/ 2) stylizedcheckbox_changes.disabled = !/*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) stylizedcheckbox_changes.label = /*$l*/ ctx[2].personal.smoker;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*client*/ ctx[0].smoker;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stylizedcheckbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_29$1.name,
    		type: "slot",
    		source: "(45:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (48:4) <Cell span={6}>
    function create_default_slot_28$2(ctx) {
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding_2(value) {
    		/*stylizedcheckbox_value_binding_2*/ ctx[8](value);
    	}

    	let stylizedcheckbox_props = {
    		disabled: !/*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.pets
    	};

    	if (/*client*/ ctx[0].pets !== void 0) {
    		stylizedcheckbox_props.value = /*client*/ ctx[0].pets;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(stylizedcheckbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stylizedcheckbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*edit*/ 2) stylizedcheckbox_changes.disabled = !/*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) stylizedcheckbox_changes.label = /*$l*/ ctx[2].personal.pets;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*client*/ ctx[0].pets;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stylizedcheckbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28$2.name,
    		type: "slot",
    		source: "(48:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (51:4) {#if client.pets && client.pets == true}
    function create_if_block_4$3(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_27$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(51:4) {#if client.pets && client.pets == true}",
    		ctx
    	});

    	return block;
    }

    // (52:4) <Cell span={6}>
    function create_default_slot_27$2(ctx) {
    	let div;
    	let labeltextfieldtoggle;
    	let updating_value;
    	let div_transition;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[9](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.petsRemarks
    	};

    	if (/*client*/ ctx[0].petsRemarks !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].petsRemarks;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(labeltextfieldtoggle.$$.fragment);
    			add_location(div, file$L, 51, 19, 1906);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(labeltextfieldtoggle, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) labeltextfieldtoggle_changes.label = /*$l*/ ctx[2].personal.petsRemarks;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].petsRemarks;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(labeltextfieldtoggle);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27$2.name,
    		type: "slot",
    		source: "(52:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (58:8) <H2>
    function create_default_slot_26$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Anschrift");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26$3.name,
    		type: "slot",
    		source: "(58:8) <H2>",
    		ctx
    	});

    	return block;
    }

    // (56:4) <Cell span={12}>
    function create_default_slot_25$3(ctx) {
    	let divider;
    	let t;
    	let h2;
    	let current;
    	divider = new Divider({ $$inline: true });

    	h2 = new H2({
    			props: {
    				$$slots: { default: [create_default_slot_26$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(divider.$$.fragment);
    			t = space();
    			create_component(h2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(divider, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(h2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h2_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				h2_changes.$$scope = { dirty, ctx };
    			}

    			h2.$set(h2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(divider.$$.fragment, local);
    			transition_in(h2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(divider.$$.fragment, local);
    			transition_out(h2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(divider, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(h2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25$3.name,
    		type: "slot",
    		source: "(56:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (60:4) <Cell span={12}>
    function create_default_slot_24$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[10](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.address
    	};

    	if (/*client*/ ctx[0].address !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].address;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) labeltextfieldtoggle_changes.label = /*$l*/ ctx[2].personal.address;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].address;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24$4.name,
    		type: "slot",
    		source: "(60:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (63:4) <Cell span={4}>
    function create_default_slot_23$4(ctx) {
    	let countrycomponent;
    	let updating_country;
    	let current;

    	function countrycomponent_country_binding(value) {
    		/*countrycomponent_country_binding*/ ctx[11](value);
    	}

    	let countrycomponent_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.country
    	};

    	if (/*client*/ ctx[0].country !== void 0) {
    		countrycomponent_props.country = /*client*/ ctx[0].country;
    	}

    	countrycomponent = new CountryComponent({
    			props: countrycomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(countrycomponent, 'country', countrycomponent_country_binding));

    	const block = {
    		c: function create() {
    			create_component(countrycomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(countrycomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const countrycomponent_changes = {};
    			if (dirty & /*edit*/ 2) countrycomponent_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) countrycomponent_changes.label = /*$l*/ ctx[2].personal.country;

    			if (!updating_country && dirty & /*client*/ 1) {
    				updating_country = true;
    				countrycomponent_changes.country = /*client*/ ctx[0].country;
    				add_flush_callback(() => updating_country = false);
    			}

    			countrycomponent.$set(countrycomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(countrycomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(countrycomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(countrycomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23$4.name,
    		type: "slot",
    		source: "(63:4) <Cell span={4}>",
    		ctx
    	});

    	return block;
    }

    // (66:4) <Cell span={4}>
    function create_default_slot_22$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_2(value) {
    		/*labeltextfieldtoggle_value_binding_2*/ ctx[12](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.zipCode
    	};

    	if (/*client*/ ctx[0].zipCode !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].zipCode;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) labeltextfieldtoggle_changes.label = /*$l*/ ctx[2].personal.zipCode;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].zipCode;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$4.name,
    		type: "slot",
    		source: "(66:4) <Cell span={4}>",
    		ctx
    	});

    	return block;
    }

    // (69:4) <Cell span={4}>
    function create_default_slot_21$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_3(value) {
    		/*labeltextfieldtoggle_value_binding_3*/ ctx[13](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.city
    	};

    	if (/*client*/ ctx[0].city !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].city;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_3));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) labeltextfieldtoggle_changes.label = /*$l*/ ctx[2].personal.city;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].city;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$4.name,
    		type: "slot",
    		source: "(69:4) <Cell span={4}>",
    		ctx
    	});

    	return block;
    }

    // (72:4) <Cell span={6}>
    function create_default_slot_20$6(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_4(value) {
    		/*labeltextfieldtoggle_value_binding_4*/ ctx[14](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.phone
    	};

    	if (/*client*/ ctx[0].phone !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].phone;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_4));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) labeltextfieldtoggle_changes.label = /*$l*/ ctx[2].personal.phone;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].phone;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$6.name,
    		type: "slot",
    		source: "(72:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (75:4) <Cell span={6}>
    function create_default_slot_19$6(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_5(value) {
    		/*labeltextfieldtoggle_value_binding_5*/ ctx[15](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[2].personal.mobile
    	};

    	if (/*client*/ ctx[0].mobile !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].mobile;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_5));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 4) labeltextfieldtoggle_changes.label = /*$l*/ ctx[2].personal.mobile;

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].mobile;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$6.name,
    		type: "slot",
    		source: "(75:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (80:8) <H2>
    function create_default_slot_18$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Familienstand");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$6.name,
    		type: "slot",
    		source: "(80:8) <H2>",
    		ctx
    	});

    	return block;
    }

    // (78:4) <Cell span={12}>
    function create_default_slot_17$7(ctx) {
    	let divider;
    	let t;
    	let h2;
    	let current;
    	divider = new Divider({ $$inline: true });

    	h2 = new H2({
    			props: {
    				$$slots: { default: [create_default_slot_18$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(divider.$$.fragment);
    			t = space();
    			create_component(h2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(divider, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(h2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h2_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				h2_changes.$$scope = { dirty, ctx };
    			}

    			h2.$set(h2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(divider.$$.fragment, local);
    			transition_in(h2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(divider.$$.fragment, local);
    			transition_out(h2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(divider, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(h2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$7.name,
    		type: "slot",
    		source: "(78:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (84:12) <FormField>
    function create_default_slot_16$7(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding(value) {
    		/*radio_group_binding*/ ctx[16](value);
    	}

    	let radio_props = {
    		value: "single",
    		touch: true,
    		disabled: !/*edit*/ ctx[1]
    	};

    	if (/*client*/ ctx[0].maritalStatus !== void 0) {
    		radio_props.group = /*client*/ ctx[0].maritalStatus;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};
    			if (dirty & /*edit*/ 2) radio_changes.disabled = !/*edit*/ ctx[1];

    			if (!updating_group && dirty & /*client*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*client*/ ctx[0].maritalStatus;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$7.name,
    		type: "slot",
    		source: "(84:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (86:16) 
    function create_label_slot_2$3(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[2].personal.maritalStatus.single + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$L, 85, 16, 3173);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].personal.maritalStatus.single + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2$3.name,
    		type: "slot",
    		source: "(86:16) ",
    		ctx
    	});

    	return block;
    }

    // (88:12) <FormField>
    function create_default_slot_15$8(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_1(value) {
    		/*radio_group_binding_1*/ ctx[17](value);
    	}

    	let radio_props = {
    		value: "married",
    		touch: true,
    		disabled: !/*edit*/ ctx[1]
    	};

    	if (/*client*/ ctx[0].maritalStatus !== void 0) {
    		radio_props.group = /*client*/ ctx[0].maritalStatus;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_1));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};
    			if (dirty & /*edit*/ 2) radio_changes.disabled = !/*edit*/ ctx[1];

    			if (!updating_group && dirty & /*client*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*client*/ ctx[0].maritalStatus;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$8.name,
    		type: "slot",
    		source: "(88:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (90:16) 
    function create_label_slot_1$4(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[2].personal.maritalStatus.married + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$L, 89, 16, 3397);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].personal.maritalStatus.married + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1$4.name,
    		type: "slot",
    		source: "(90:16) ",
    		ctx
    	});

    	return block;
    }

    // (92:12) <FormField>
    function create_default_slot_14$a(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_2(value) {
    		/*radio_group_binding_2*/ ctx[18](value);
    	}

    	let radio_props = {
    		value: "divorced",
    		touch: true,
    		disabled: !/*edit*/ ctx[1]
    	};

    	if (/*client*/ ctx[0].maritalStatus !== void 0) {
    		radio_props.group = /*client*/ ctx[0].maritalStatus;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_2));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};
    			if (dirty & /*edit*/ 2) radio_changes.disabled = !/*edit*/ ctx[1];

    			if (!updating_group && dirty & /*client*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*client*/ ctx[0].maritalStatus;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$a.name,
    		type: "slot",
    		source: "(92:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (94:16) 
    function create_label_slot$6(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[2].personal.maritalStatus.divorced + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$L, 93, 16, 3623);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].personal.maritalStatus.divorced + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$6.name,
    		type: "slot",
    		source: "(94:16) ",
    		ctx
    	});

    	return block;
    }

    // (82:4) <Cell span={12}>
    function create_default_slot_13$c(ctx) {
    	let div;
    	let formfield0;
    	let t0;
    	let formfield1;
    	let t1;
    	let formfield2;
    	let current;

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_2$3],
    					default: [create_default_slot_16$7]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_1$4],
    					default: [create_default_slot_15$8]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield2 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$6],
    					default: [create_default_slot_14$a]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(formfield0.$$.fragment);
    			t0 = space();
    			create_component(formfield1.$$.fragment);
    			t1 = space();
    			create_component(formfield2.$$.fragment);
    			attr_dev(div, "class", "radio-container svelte-ddt2zz");
    			add_location(div, file$L, 82, 8, 3006);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(formfield0, div, null);
    			append_dev(div, t0);
    			mount_component(formfield1, div, null);
    			append_dev(div, t1);
    			mount_component(formfield2, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, $l, edit, client*/ 67108871) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, $l, edit, client*/ 67108871) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);
    			const formfield2_changes = {};

    			if (dirty & /*$$scope, $l, edit, client*/ 67108871) {
    				formfield2_changes.$$scope = { dirty, ctx };
    			}

    			formfield2.$set(formfield2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(formfield2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(formfield2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(formfield0);
    			destroy_component(formfield1);
    			destroy_component(formfield2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$c.name,
    		type: "slot",
    		source: "(82:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (98:4) {#if client.maritalStatus == MaritalStatus.MARRIED}
    function create_if_block_3$3(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_11$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, edit, client*/ 67108867) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(98:4) {#if client.maritalStatus == MaritalStatus.MARRIED}",
    		ctx
    	});

    	return block;
    }

    // (101:12) <H3>
    function create_default_slot_12$c(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Partner:in");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$c.name,
    		type: "slot",
    		source: "(101:12) <H3>",
    		ctx
    	});

    	return block;
    }

    // (99:4) <Cell span={12}>
    function create_default_slot_11$c(ctx) {
    	let div;
    	let h3;
    	let t;
    	let genericpersoncomponent;
    	let updating_person;
    	let div_transition;
    	let current;

    	h3 = new H3({
    			props: {
    				$$slots: { default: [create_default_slot_12$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function genericpersoncomponent_person_binding_1(value) {
    		/*genericpersoncomponent_person_binding_1*/ ctx[19](value);
    	}

    	let genericpersoncomponent_props = { edit: /*edit*/ ctx[1] };

    	if (/*client*/ ctx[0].partner !== void 0) {
    		genericpersoncomponent_props.person = /*client*/ ctx[0].partner;
    	}

    	genericpersoncomponent = new GenericPersonComponent({
    			props: genericpersoncomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(genericpersoncomponent, 'person', genericpersoncomponent_person_binding_1));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(h3.$$.fragment);
    			t = space();
    			create_component(genericpersoncomponent.$$.fragment);
    			add_location(div, file$L, 99, 8, 3823);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(h3, div, null);
    			append_dev(div, t);
    			mount_component(genericpersoncomponent, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h3_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				h3_changes.$$scope = { dirty, ctx };
    			}

    			h3.$set(h3_changes);
    			const genericpersoncomponent_changes = {};
    			if (dirty & /*edit*/ 2) genericpersoncomponent_changes.edit = /*edit*/ ctx[1];

    			if (!updating_person && dirty & /*client*/ 1) {
    				updating_person = true;
    				genericpersoncomponent_changes.person = /*client*/ ctx[0].partner;
    				add_flush_callback(() => updating_person = false);
    			}

    			genericpersoncomponent.$set(genericpersoncomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h3.$$.fragment, local);
    			transition_in(genericpersoncomponent.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h3.$$.fragment, local);
    			transition_out(genericpersoncomponent.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(h3);
    			destroy_component(genericpersoncomponent);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$c.name,
    		type: "slot",
    		source: "(99:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (107:4) {#if client.children.length > 0}
    function create_if_block_2$6(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_9$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, client*/ 67108865) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(107:4) {#if client.children.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (110:8) <H3>
    function create_default_slot_10$c(ctx) {
    	let t_value = (/*client*/ ctx[0].children.length == 1
    	? 'Kind'
    	: 'Kinder') + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*client*/ 1 && t_value !== (t_value = (/*client*/ ctx[0].children.length == 1
    			? 'Kind'
    			: 'Kinder') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$c.name,
    		type: "slot",
    		source: "(110:8) <H3>",
    		ctx
    	});

    	return block;
    }

    // (108:4) <Cell span={12}>
    function create_default_slot_9$c(ctx) {
    	let divider;
    	let t;
    	let h3;
    	let current;
    	divider = new Divider({ $$inline: true });

    	h3 = new H3({
    			props: {
    				$$slots: { default: [create_default_slot_10$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(divider.$$.fragment);
    			t = space();
    			create_component(h3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(divider, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(h3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h3_changes = {};

    			if (dirty & /*$$scope, client*/ 67108865) {
    				h3_changes.$$scope = { dirty, ctx };
    			}

    			h3.$set(h3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(divider.$$.fragment, local);
    			transition_in(h3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(divider.$$.fragment, local);
    			transition_out(h3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(divider, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(h3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$c.name,
    		type: "slot",
    		source: "(108:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (114:4) <Cell span={11}>
    function create_default_slot_8$e(ctx) {
    	let div;
    	let genericpersoncomponent;
    	let updating_person;
    	let div_transition;
    	let current;

    	function genericpersoncomponent_person_binding_2(value) {
    		/*genericpersoncomponent_person_binding_2*/ ctx[20](value, /*child*/ ctx[23], /*each_value*/ ctx[24], /*child_index*/ ctx[25]);
    	}

    	let genericpersoncomponent_props = { childMode: true, edit: /*edit*/ ctx[1] };

    	if (/*child*/ ctx[23] !== void 0) {
    		genericpersoncomponent_props.person = /*child*/ ctx[23];
    	}

    	genericpersoncomponent = new GenericPersonComponent({
    			props: genericpersoncomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(genericpersoncomponent, 'person', genericpersoncomponent_person_binding_2));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(genericpersoncomponent.$$.fragment);
    			add_location(div, file$L, 113, 20, 4213);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(genericpersoncomponent, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const genericpersoncomponent_changes = {};
    			if (dirty & /*edit*/ 2) genericpersoncomponent_changes.edit = /*edit*/ ctx[1];

    			if (!updating_person && dirty & /*client*/ 1) {
    				updating_person = true;
    				genericpersoncomponent_changes.person = /*child*/ ctx[23];
    				add_flush_callback(() => updating_person = false);
    			}

    			genericpersoncomponent.$set(genericpersoncomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(genericpersoncomponent.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(genericpersoncomponent.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(genericpersoncomponent);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$e.name,
    		type: "slot",
    		source: "(114:4) <Cell span={11}>",
    		ctx
    	});

    	return block;
    }

    // (117:4) {#if edit}
    function create_if_block_1$h(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 1,
    				align: "middle",
    				$$slots: { default: [create_default_slot_5$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, client*/ 67108865) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$h.name,
    		type: "if",
    		source: "(117:4) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (120:12) <Icon class="material-icons">
    function create_default_slot_7$f(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$f.name,
    		type: "slot",
    		source: "(120:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (119:8) <Button on:click={() => removeChild(child)}>
    function create_default_slot_6$k(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_7$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$k.name,
    		type: "slot",
    		source: "(119:8) <Button on:click={() => removeChild(child)}>",
    		ctx
    	});

    	return block;
    }

    // (118:4) <Cell span={1} align="middle">
    function create_default_slot_5$l(ctx) {
    	let div;
    	let button;
    	let div_transition;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[21](/*child*/ ctx[23]);
    	}

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_6$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(button.$$.fragment);
    			add_location(div, file$L, 117, 34, 4381);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(button);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$l.name,
    		type: "slot",
    		source: "(118:4) <Cell span={1} align=\\\"middle\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:4) {#each client.children as child}
    function create_each_block$f(ctx) {
    	let cell;
    	let t;
    	let if_block_anchor;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 11,
    				$$slots: { default: [create_default_slot_8$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*edit*/ ctx[1] && create_if_block_1$h(ctx);

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, edit, client*/ 67108867) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$h(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(113:4) {#each client.children as child}",
    		ctx
    	});

    	return block;
    }

    // (125:4) {#if edit}
    function create_if_block$t(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_1$w] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, $l*/ 67108868) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$t.name,
    		type: "if",
    		source: "(125:4) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (128:12) <Icon class="material-icons">
    function create_default_slot_4$o(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$o.name,
    		type: "slot",
    		source: "(128:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (129:12) <Label>
    function create_default_slot_3$s(ctx) {
    	let t_value = /*$l*/ ctx[2].personal.addChild + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].personal.addChild + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$s.name,
    		type: "slot",
    		source: "(129:12) <Label>",
    		ctx
    	});

    	return block;
    }

    // (127:8) <Button on:click={() => addChild()}>
    function create_default_slot_2$u(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_4$o] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_3$s] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 67108868) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$u.name,
    		type: "slot",
    		source: "(127:8) <Button on:click={() => addChild()}>",
    		ctx
    	});

    	return block;
    }

    // (126:4) <Cell span={12}>
    function create_default_slot_1$w(ctx) {
    	let button;
    	let current;

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_2$u] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler_1*/ ctx[22]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope, $l*/ 67108868) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$w.name,
    		type: "slot",
    		source: "(126:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (41:0) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot$D(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let t3;
    	let cell3;
    	let t4;
    	let cell4;
    	let t5;
    	let cell5;
    	let t6;
    	let cell6;
    	let t7;
    	let cell7;
    	let t8;
    	let cell8;
    	let t9;
    	let cell9;
    	let t10;
    	let cell10;
    	let t11;
    	let cell11;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let if_block3_anchor;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_30$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_29$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_28$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block0 = /*client*/ ctx[0].pets && /*client*/ ctx[0].pets == true && create_if_block_4$3(ctx);

    	cell3 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_25$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_24$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell5 = new Cell({
    			props: {
    				span: 4,
    				$$slots: { default: [create_default_slot_23$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell6 = new Cell({
    			props: {
    				span: 4,
    				$$slots: { default: [create_default_slot_22$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell7 = new Cell({
    			props: {
    				span: 4,
    				$$slots: { default: [create_default_slot_21$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell8 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_20$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell9 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_19$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell10 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_17$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell11 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_13$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block1 = /*client*/ ctx[0].maritalStatus == MaritalStatus.MARRIED && create_if_block_3$3(ctx);
    	let if_block2 = /*client*/ ctx[0].children.length > 0 && create_if_block_2$6(ctx);
    	let each_value = /*client*/ ctx[0].children;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block3 = /*edit*/ ctx[1] && create_if_block$t(ctx);

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			create_component(cell3.$$.fragment);
    			t4 = space();
    			create_component(cell4.$$.fragment);
    			t5 = space();
    			create_component(cell5.$$.fragment);
    			t6 = space();
    			create_component(cell6.$$.fragment);
    			t7 = space();
    			create_component(cell7.$$.fragment);
    			t8 = space();
    			create_component(cell8.$$.fragment);
    			t9 = space();
    			create_component(cell9.$$.fragment);
    			t10 = space();
    			create_component(cell10.$$.fragment);
    			t11 = space();
    			create_component(cell11.$$.fragment);
    			t12 = space();
    			if (if_block1) if_block1.c();
    			t13 = space();
    			if (if_block2) if_block2.c();
    			t14 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t15 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(cell5, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(cell6, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(cell7, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(cell8, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(cell9, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(cell10, target, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(cell11, target, anchor);
    			insert_dev(target, t12, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t13, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t14, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t15, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);

    			if (/*client*/ ctx[0].pets && /*client*/ ctx[0].pets == true) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*client*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t3.parentNode, t3);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const cell3_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    			const cell5_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell5_changes.$$scope = { dirty, ctx };
    			}

    			cell5.$set(cell5_changes);
    			const cell6_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell6_changes.$$scope = { dirty, ctx };
    			}

    			cell6.$set(cell6_changes);
    			const cell7_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell7_changes.$$scope = { dirty, ctx };
    			}

    			cell7.$set(cell7_changes);
    			const cell8_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell8_changes.$$scope = { dirty, ctx };
    			}

    			cell8.$set(cell8_changes);
    			const cell9_changes = {};

    			if (dirty & /*$$scope, edit, $l, client*/ 67108871) {
    				cell9_changes.$$scope = { dirty, ctx };
    			}

    			cell9.$set(cell9_changes);
    			const cell10_changes = {};

    			if (dirty & /*$$scope*/ 67108864) {
    				cell10_changes.$$scope = { dirty, ctx };
    			}

    			cell10.$set(cell10_changes);
    			const cell11_changes = {};

    			if (dirty & /*$$scope, $l, edit, client*/ 67108871) {
    				cell11_changes.$$scope = { dirty, ctx };
    			}

    			cell11.$set(cell11_changes);

    			if (/*client*/ ctx[0].maritalStatus == MaritalStatus.MARRIED) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*client*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t13.parentNode, t13);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*client*/ ctx[0].children.length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*client*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2$6(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t14.parentNode, t14);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*removeChild, client, edit*/ 19) {
    				each_value = /*client*/ ctx[0].children;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t15.parentNode, t15);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*edit*/ ctx[1]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block$t(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			transition_in(cell5.$$.fragment, local);
    			transition_in(cell6.$$.fragment, local);
    			transition_in(cell7.$$.fragment, local);
    			transition_in(cell8.$$.fragment, local);
    			transition_in(cell9.$$.fragment, local);
    			transition_in(cell10.$$.fragment, local);
    			transition_in(cell11.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			transition_out(cell5.$$.fragment, local);
    			transition_out(cell6.$$.fragment, local);
    			transition_out(cell7.$$.fragment, local);
    			transition_out(cell8.$$.fragment, local);
    			transition_out(cell9.$$.fragment, local);
    			transition_out(cell10.$$.fragment, local);
    			transition_out(cell11.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(cell5, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(cell6, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(cell7, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(cell8, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(cell9, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(cell10, detaching);
    			if (detaching) detach_dev(t11);
    			destroy_component(cell11, detaching);
    			if (detaching) detach_dev(t12);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t13);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t14);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t15);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(if_block3_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$D.name,
    		type: "slot",
    		source: "(41:0) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$$(ctx) {
    	let genericpersoncomponent;
    	let updating_person;
    	let t;
    	let layoutgrid;
    	let current;

    	function genericpersoncomponent_person_binding(value) {
    		/*genericpersoncomponent_person_binding*/ ctx[5](value);
    	}

    	let genericpersoncomponent_props = { edit: /*edit*/ ctx[1] };

    	if (/*client*/ ctx[0] !== void 0) {
    		genericpersoncomponent_props.person = /*client*/ ctx[0];
    	}

    	genericpersoncomponent = new GenericPersonComponent({
    			props: genericpersoncomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(genericpersoncomponent, 'person', genericpersoncomponent_person_binding));

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot$D] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(genericpersoncomponent.$$.fragment);
    			t = space();
    			create_component(layoutgrid.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(genericpersoncomponent, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(layoutgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const genericpersoncomponent_changes = {};
    			if (dirty & /*edit*/ 2) genericpersoncomponent_changes.edit = /*edit*/ ctx[1];

    			if (!updating_person && dirty & /*client*/ 1) {
    				updating_person = true;
    				genericpersoncomponent_changes.person = /*client*/ ctx[0];
    				add_flush_callback(() => updating_person = false);
    			}

    			genericpersoncomponent.$set(genericpersoncomponent_changes);
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, $l, edit, client*/ 67108871) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(genericpersoncomponent.$$.fragment, local);
    			transition_in(layoutgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(genericpersoncomponent.$$.fragment, local);
    			transition_out(layoutgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(genericpersoncomponent, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(layoutgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PersonalComponent', slots, []);
    	let { client } = $$props;
    	let { edit } = $$props;

    	function addChild() {
    		if (!client.children) {
    			$$invalidate(0, client.children = [], client);
    		}

    		let children = client.children;
    		let child = createEmptyGenericPersonDto();
    		children.push(child);
    		$$invalidate(0, client.children = children, client);
    	}

    	const removeChild = child => {
    		let children = client.children;
    		$$invalidate(0, client.children = children.filter(item => item !== child), client);
    	};

    	const writable_props = ['client', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PersonalComponent> was created with unknown prop '${key}'`);
    	});

    	function genericpersoncomponent_person_binding(value) {
    		client = value;
    		$$invalidate(0, client);
    	}

    	function stylizedcheckbox_value_binding(value) {
    		if ($$self.$$.not_equal(client.militaryServiceDone, value)) {
    			client.militaryServiceDone = value;
    			$$invalidate(0, client);
    		}
    	}

    	function stylizedcheckbox_value_binding_1(value) {
    		if ($$self.$$.not_equal(client.smoker, value)) {
    			client.smoker = value;
    			$$invalidate(0, client);
    		}
    	}

    	function stylizedcheckbox_value_binding_2(value) {
    		if ($$self.$$.not_equal(client.pets, value)) {
    			client.pets = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding(value) {
    		if ($$self.$$.not_equal(client.petsRemarks, value)) {
    			client.petsRemarks = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value) {
    		if ($$self.$$.not_equal(client.address, value)) {
    			client.address = value;
    			$$invalidate(0, client);
    		}
    	}

    	function countrycomponent_country_binding(value) {
    		if ($$self.$$.not_equal(client.country, value)) {
    			client.country = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_2(value) {
    		if ($$self.$$.not_equal(client.zipCode, value)) {
    			client.zipCode = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_3(value) {
    		if ($$self.$$.not_equal(client.city, value)) {
    			client.city = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_4(value) {
    		if ($$self.$$.not_equal(client.phone, value)) {
    			client.phone = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_5(value) {
    		if ($$self.$$.not_equal(client.mobile, value)) {
    			client.mobile = value;
    			$$invalidate(0, client);
    		}
    	}

    	function radio_group_binding(value) {
    		if ($$self.$$.not_equal(client.maritalStatus, value)) {
    			client.maritalStatus = value;
    			$$invalidate(0, client);
    		}
    	}

    	function radio_group_binding_1(value) {
    		if ($$self.$$.not_equal(client.maritalStatus, value)) {
    			client.maritalStatus = value;
    			$$invalidate(0, client);
    		}
    	}

    	function radio_group_binding_2(value) {
    		if ($$self.$$.not_equal(client.maritalStatus, value)) {
    			client.maritalStatus = value;
    			$$invalidate(0, client);
    		}
    	}

    	function genericpersoncomponent_person_binding_1(value) {
    		if ($$self.$$.not_equal(client.partner, value)) {
    			client.partner = value;
    			$$invalidate(0, client);
    		}
    	}

    	function genericpersoncomponent_person_binding_2(value, child, each_value, child_index) {
    		each_value[child_index] = value;
    		$$invalidate(0, client);
    	}

    	const click_handler = child => removeChild(child);
    	const click_handler_1 = () => addChild();

    	$$self.$$set = $$props => {
    		if ('client' in $$props) $$invalidate(0, client = $$props.client);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		slide,
    		LayoutGrid,
    		Cell,
    		Radio,
    		FormField,
    		Button: Button_1,
    		Label,
    		Icon: Icon$1,
    		MaritalStatus,
    		GenericPersonComponent,
    		CountryComponent,
    		LabelTextfieldToggle,
    		Divider,
    		H2,
    		H3,
    		StylizedCheckbox,
    		createEmptyGenericPersonDto,
    		client,
    		edit,
    		addChild,
    		removeChild,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('client' in $$props) $$invalidate(0, client = $$props.client);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*client*/ 1) {
    			if (client.maritalStatus == MaritalStatus.MARRIED) {
    				$$invalidate(0, client.partner = client.partner || createEmptyGenericPersonDto(), client);
    			} else {
    				$$invalidate(0, client.partner = undefined, client);
    			}
    		}
    	};

    	return [
    		client,
    		edit,
    		$l,
    		addChild,
    		removeChild,
    		genericpersoncomponent_person_binding,
    		stylizedcheckbox_value_binding,
    		stylizedcheckbox_value_binding_1,
    		stylizedcheckbox_value_binding_2,
    		labeltextfieldtoggle_value_binding,
    		labeltextfieldtoggle_value_binding_1,
    		countrycomponent_country_binding,
    		labeltextfieldtoggle_value_binding_2,
    		labeltextfieldtoggle_value_binding_3,
    		labeltextfieldtoggle_value_binding_4,
    		labeltextfieldtoggle_value_binding_5,
    		radio_group_binding,
    		radio_group_binding_1,
    		radio_group_binding_2,
    		genericpersoncomponent_person_binding_1,
    		genericpersoncomponent_person_binding_2,
    		click_handler,
    		click_handler_1
    	];
    }

    class PersonalComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$U, create_fragment$$, safe_not_equal, { client: 0, edit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PersonalComponent",
    			options,
    			id: create_fragment$$.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*client*/ ctx[0] === undefined && !('client' in props)) {
    			console.warn("<PersonalComponent> was created without expected prop 'client'");
    		}

    		if (/*edit*/ ctx[1] === undefined && !('edit' in props)) {
    			console.warn("<PersonalComponent> was created without expected prop 'edit'");
    		}
    	}

    	get client() {
    		throw new Error("<PersonalComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set client(value) {
    		throw new Error("<PersonalComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<PersonalComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<PersonalComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/FormContainer.svelte generated by Svelte v3.44.3 */
    const file$K = "src/components/FormContainer.svelte";

    // (18:2) {#if showIcon}
    function create_if_block$s(ctx) {
    	let div;
    	let iconbutton;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				color: "primary",
    				class: "material-icons",
    				$$slots: { default: [create_default_slot$C] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton.$on("click", /*doDispatch*/ ctx[2]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(iconbutton.$$.fragment);
    			attr_dev(div, "class", "icon-button svelte-trxlra");
    			add_location(div, file$K, 18, 4, 443);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(iconbutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope, icon*/ 17) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(iconbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$s.name,
    		type: "if",
    		source: "(18:2) {#if showIcon}",
    		ctx
    	});

    	return block;
    }

    // (20:6) <IconButton color="primary" class="material-icons" on:click={doDispatch}>
    function create_default_slot$C(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*icon*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*icon*/ 1) set_data_dev(t, /*icon*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$C.name,
    		type: "slot",
    		source: "(20:6) <IconButton color=\\\"primary\\\" class=\\\"material-icons\\\" on:click={doDispatch}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$_(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let if_block = /*showIcon*/ ctx[1] && create_if_block$s(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "content svelte-trxlra");
    			add_location(div0, file$K, 12, 2, 320);
    			attr_dev(div1, "class", "container svelte-trxlra");
    			add_location(div1, file$K, 11, 0, 294);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div1, t);
    			if (if_block) if_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*showIcon*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showIcon*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$s(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FormContainer', slots, ['default']);
    	let { icon = 'edit' } = $$props;
    	let { showIcon = false } = $$props;
    	const dispatch = createEventDispatcher();

    	function doDispatch() {
    		dispatch('icon-click');
    	}

    	const writable_props = ['icon', 'showIcon'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FormContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('showIcon' in $$props) $$invalidate(1, showIcon = $$props.showIcon);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		IconButton,
    		icon,
    		showIcon,
    		dispatch,
    		doDispatch
    	});

    	$$self.$inject_state = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('showIcon' in $$props) $$invalidate(1, showIcon = $$props.showIcon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [icon, showIcon, doDispatch, slots, $$scope];
    }

    class FormContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$T, create_fragment$_, safe_not_equal, { icon: 0, showIcon: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FormContainer",
    			options,
    			id: create_fragment$_.name
    		});
    	}

    	get icon() {
    		throw new Error("<FormContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<FormContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showIcon() {
    		throw new Error("<FormContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showIcon(value) {
    		throw new Error("<FormContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/client/ProofOfIdentity.svelte generated by Svelte v3.44.3 */
    const file_1 = "src/components/client/ProofOfIdentity.svelte";

    // (35:0) {#if edit}
    function create_if_block$r(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$g, create_else_block$b];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*showAdd*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$r.name,
    		type: "if",
    		source: "(35:0) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (44:2) {:else}
    function create_else_block$b(ctx) {
    	let button;
    	let current;

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_3$r] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*remove*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(44:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (36:2) {#if showAdd}
    function create_if_block_1$g(ctx) {
    	let button;
    	let t;
    	let input;
    	let current;
    	let mounted;
    	let dispose;

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot$B] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*selectFile*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    			t = space();
    			input = element("input");
    			attr_dev(input, "type", "file");
    			input.hidden = true;
    			add_location(input, file_1, 41, 4, 1053);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, input, anchor);
    			/*input_binding*/ ctx[9](input);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[10]),
    					listen_dev(input, "change", /*add*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(input);
    			/*input_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(36:2) {#if showAdd}",
    		ctx
    	});

    	return block;
    }

    // (46:4) <Icon class="material-icons">
    function create_default_slot_5$k(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$k.name,
    		type: "slot",
    		source: "(46:4) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (47:4) <Label>
    function create_default_slot_4$n(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Löschen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$n.name,
    		type: "slot",
    		source: "(47:4) <Label>",
    		ctx
    	});

    	return block;
    }

    // (45:2) <Button on:click={remove}>
    function create_default_slot_3$r(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_5$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_4$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$r.name,
    		type: "slot",
    		source: "(45:2) <Button on:click={remove}>",
    		ctx
    	});

    	return block;
    }

    // (38:4) <Icon class="material-icons">
    function create_default_slot_2$t(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$t.name,
    		type: "slot",
    		source: "(38:4) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (39:4) <Label>
    function create_default_slot_1$v(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Hinzufügen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$v.name,
    		type: "slot",
    		source: "(39:4) <Label>",
    		ctx
    	});

    	return block;
    }

    // (37:2) <Button on:click={selectFile}>
    function create_default_slot$B(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_2$t] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_1$v] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$B.name,
    		type: "slot",
    		source: "(37:2) <Button on:click={selectFile}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Z(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*edit*/ ctx[0] && create_if_block$r(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*edit*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$r(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProofOfIdentity', slots, []);
    	let { item } = $$props;
    	let { edit = false } = $$props;
    	let { clientId } = $$props;
    	let showAdd = false;
    	let inputfield;

    	function selectFile() {
    		inputfield.click();
    	}

    	function add() {
    		ProofOfIdentityService.add({
    			clientId,
    			file,
    			type: item.type,
    			fileName: item.type
    		}).then(response => $$invalidate(7, item = response));
    	}

    	function remove() {
    		let temp = item.type;

    		ProofOfIdentityService.delete(item.id).then(_ => {
    			$$invalidate(7, item = { id: null, type: temp });
    		});
    	}

    	let file;
    	let valueTypeFiles = null;
    	const writable_props = ['item', 'edit', 'clientId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProofOfIdentity> was created with unknown prop '${key}'`);
    	});

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputfield = $$value;
    			$$invalidate(3, inputfield);
    		});
    	}

    	function input_change_handler() {
    		valueTypeFiles = this.files;
    		$$invalidate(1, valueTypeFiles);
    	}

    	$$self.$$set = $$props => {
    		if ('item' in $$props) $$invalidate(7, item = $$props.item);
    		if ('edit' in $$props) $$invalidate(0, edit = $$props.edit);
    		if ('clientId' in $$props) $$invalidate(8, clientId = $$props.clientId);
    	};

    	$$self.$capture_state = () => ({
    		Button: Button_1,
    		Icon: Icon$1,
    		Label,
    		ProofOfIdentityService,
    		item,
    		edit,
    		clientId,
    		showAdd,
    		inputfield,
    		selectFile,
    		add,
    		remove,
    		file,
    		valueTypeFiles
    	});

    	$$self.$inject_state = $$props => {
    		if ('item' in $$props) $$invalidate(7, item = $$props.item);
    		if ('edit' in $$props) $$invalidate(0, edit = $$props.edit);
    		if ('clientId' in $$props) $$invalidate(8, clientId = $$props.clientId);
    		if ('showAdd' in $$props) $$invalidate(2, showAdd = $$props.showAdd);
    		if ('inputfield' in $$props) $$invalidate(3, inputfield = $$props.inputfield);
    		if ('file' in $$props) file = $$props.file;
    		if ('valueTypeFiles' in $$props) $$invalidate(1, valueTypeFiles = $$props.valueTypeFiles);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*item*/ 128) {
    			$$invalidate(2, showAdd = item == null || item == undefined || item.id == null || item.id == undefined || item.id == 0);
    		}

    		if ($$self.$$.dirty & /*valueTypeFiles*/ 2) {
    			if (valueTypeFiles != null && valueTypeFiles.length) {
    				file = valueTypeFiles.item(0);
    			}
    		}
    	};

    	return [
    		edit,
    		valueTypeFiles,
    		showAdd,
    		inputfield,
    		selectFile,
    		add,
    		remove,
    		item,
    		clientId,
    		input_binding,
    		input_change_handler
    	];
    }

    class ProofOfIdentity extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$Z, safe_not_equal, { item: 7, edit: 0, clientId: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProofOfIdentity",
    			options,
    			id: create_fragment$Z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[7] === undefined && !('item' in props)) {
    			console.warn("<ProofOfIdentity> was created without expected prop 'item'");
    		}

    		if (/*clientId*/ ctx[8] === undefined && !('clientId' in props)) {
    			console.warn("<ProofOfIdentity> was created without expected prop 'clientId'");
    		}
    	}

    	get item() {
    		throw new Error("<ProofOfIdentity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<ProofOfIdentity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<ProofOfIdentity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<ProofOfIdentity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clientId() {
    		throw new Error("<ProofOfIdentity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clientId(value) {
    		throw new Error("<ProofOfIdentity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/client/Legal.svelte generated by Svelte v3.44.3 */
    const file$J = "src/components/client/Legal.svelte";

    // (46:4) <Cell span={6}>
    function create_default_slot_3$q(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[9](value);
    	}

    	let labeltextfieldtoggle_props = { label: "Bank", edit: /*edit*/ ctx[1] };

    	if (/*client*/ ctx[0].bank !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].bank;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].bank;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$q.name,
    		type: "slot",
    		source: "(46:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (49:4) <Cell span={6}>
    function create_default_slot_2$s(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[10](value);
    	}

    	let labeltextfieldtoggle_props = { label: "BIC", edit: /*edit*/ ctx[1] };

    	if (/*client*/ ctx[0].bic !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].bic;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].bic;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$s.name,
    		type: "slot",
    		source: "(49:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (52:4) <Cell span={12}>
    function create_default_slot_1$u(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_2(value) {
    		/*labeltextfieldtoggle_value_binding_2*/ ctx[11](value);
    	}

    	let labeltextfieldtoggle_props = { label: "IBAN", edit: /*edit*/ ctx[1] };

    	if (/*client*/ ctx[0].iban !== void 0) {
    		labeltextfieldtoggle_props.value = /*client*/ ctx[0].iban;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*client*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*client*/ ctx[0].iban;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$u.name,
    		type: "slot",
    		source: "(52:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (45:0) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot$A(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_3$q] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_2$s] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_1$u] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, client*/ 2097155) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, client*/ 2097155) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, edit, client*/ 2097155) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$A.name,
    		type: "slot",
    		source: "(45:0) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Y(ctx) {
    	let layoutgrid;
    	let t0;
    	let div6;
    	let div1;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let div0;
    	let t3;
    	let proofofidentity0;
    	let updating_item;
    	let div1_class_value;
    	let t4;
    	let div3;
    	let img1;
    	let img1_src_value;
    	let t5;
    	let div2;
    	let t7;
    	let proofofidentity1;
    	let updating_item_1;
    	let div3_class_value;
    	let t8;
    	let div5;
    	let img2;
    	let img2_src_value;
    	let t9;
    	let div4;
    	let t11;
    	let proofofidentity2;
    	let updating_item_2;
    	let div5_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot$A] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function proofofidentity0_item_binding(value) {
    		/*proofofidentity0_item_binding*/ ctx[14](value);
    	}

    	let proofofidentity0_props = {
    		clientId: /*client*/ ctx[0].id,
    		edit: /*edit*/ ctx[1]
    	};

    	if (/*driversLicence*/ ctx[2] !== void 0) {
    		proofofidentity0_props.item = /*driversLicence*/ ctx[2];
    	}

    	proofofidentity0 = new ProofOfIdentity({
    			props: proofofidentity0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(proofofidentity0, 'item', proofofidentity0_item_binding));

    	function proofofidentity1_item_binding(value) {
    		/*proofofidentity1_item_binding*/ ctx[17](value);
    	}

    	let proofofidentity1_props = {
    		clientId: /*client*/ ctx[0].id,
    		edit: /*edit*/ ctx[1]
    	};

    	if (/*passport*/ ctx[4] !== void 0) {
    		proofofidentity1_props.item = /*passport*/ ctx[4];
    	}

    	proofofidentity1 = new ProofOfIdentity({
    			props: proofofidentity1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(proofofidentity1, 'item', proofofidentity1_item_binding));

    	function proofofidentity2_item_binding(value) {
    		/*proofofidentity2_item_binding*/ ctx[20](value);
    	}

    	let proofofidentity2_props = {
    		clientId: /*client*/ ctx[0].id,
    		edit: /*edit*/ ctx[1]
    	};

    	if (/*identityCard*/ ctx[3] !== void 0) {
    		proofofidentity2_props.item = /*identityCard*/ ctx[3];
    	}

    	proofofidentity2 = new ProofOfIdentity({
    			props: proofofidentity2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(proofofidentity2, 'item', proofofidentity2_item_binding));

    	const block = {
    		c: function create() {
    			create_component(layoutgrid.$$.fragment);
    			t0 = space();
    			div6 = element("div");
    			div1 = element("div");
    			img0 = element("img");
    			t1 = space();
    			div0 = element("div");
    			div0.textContent = "Führerschein";
    			t3 = space();
    			create_component(proofofidentity0.$$.fragment);
    			t4 = space();
    			div3 = element("div");
    			img1 = element("img");
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "Reisepass";
    			t7 = space();
    			create_component(proofofidentity1.$$.fragment);
    			t8 = space();
    			div5 = element("div");
    			img2 = element("img");
    			t9 = space();
    			div4 = element("div");
    			div4.textContent = "Personalausweis";
    			t11 = space();
    			create_component(proofofidentity2.$$.fragment);
    			if (!src_url_equal(img0.src, img0_src_value = "/drivers.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Führerschein");
    			attr_dev(img0, "class", "svelte-1px9qx0");
    			add_location(img0, file$J, 58, 12, 2037);
    			attr_dev(div0, "class", "label");
    			add_location(div0, file$J, 59, 12, 2155);

    			attr_dev(div1, "class", div1_class_value = "thumbnail " + (/*hasDriversLicence*/ ctx[5]
    			? 'available'
    			: 'unavailable') + " svelte-1px9qx0");

    			add_location(div1, file$J, 57, 8, 1951);
    			if (!src_url_equal(img1.src, img1_src_value = "/passport.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Reisepass");
    			attr_dev(img1, "class", "svelte-1px9qx0");
    			add_location(img1, file$J, 64, 12, 2444);
    			attr_dev(div2, "class", "label");
    			add_location(div2, file$J, 65, 12, 2548);
    			attr_dev(div3, "class", div3_class_value = "thumbnail " + (/*hasPassport*/ ctx[7] ? 'available' : 'unavailable') + " svelte-1px9qx0");
    			add_location(div3, file$J, 63, 8, 2364);
    			if (!src_url_equal(img2.src, img2_src_value = "/perso.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Personalausweis");
    			attr_dev(img2, "class", "svelte-1px9qx0");
    			add_location(img2, file$J, 70, 12, 2820);
    			attr_dev(div4, "class", "label");
    			add_location(div4, file$J, 71, 12, 2935);
    			attr_dev(div5, "class", div5_class_value = "thumbnail " + (/*hasIdentityCard*/ ctx[6] ? 'available' : 'unavailable') + " svelte-1px9qx0");
    			add_location(div5, file$J, 69, 8, 2736);
    			attr_dev(div6, "class", "container svelte-1px9qx0");
    			add_location(div6, file$J, 56, 0, 1919);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layoutgrid, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div1);
    			append_dev(div1, img0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div1, t3);
    			mount_component(proofofidentity0, div1, null);
    			append_dev(div6, t4);
    			append_dev(div6, div3);
    			append_dev(div3, img1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div3, t7);
    			mount_component(proofofidentity1, div3, null);
    			append_dev(div6, t8);
    			append_dev(div6, div5);
    			append_dev(div5, img2);
    			append_dev(div5, t9);
    			append_dev(div5, div4);
    			append_dev(div5, t11);
    			mount_component(proofofidentity2, div5, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(img0, "click", /*click_handler*/ ctx[12], false, false, false),
    					listen_dev(div0, "click", /*click_handler_1*/ ctx[13], false, false, false),
    					listen_dev(img1, "click", /*click_handler_2*/ ctx[15], false, false, false),
    					listen_dev(div2, "click", /*click_handler_3*/ ctx[16], false, false, false),
    					listen_dev(img2, "click", /*click_handler_4*/ ctx[18], false, false, false),
    					listen_dev(div4, "click", /*click_handler_5*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, edit, client*/ 2097155) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    			const proofofidentity0_changes = {};
    			if (dirty & /*client*/ 1) proofofidentity0_changes.clientId = /*client*/ ctx[0].id;
    			if (dirty & /*edit*/ 2) proofofidentity0_changes.edit = /*edit*/ ctx[1];

    			if (!updating_item && dirty & /*driversLicence*/ 4) {
    				updating_item = true;
    				proofofidentity0_changes.item = /*driversLicence*/ ctx[2];
    				add_flush_callback(() => updating_item = false);
    			}

    			proofofidentity0.$set(proofofidentity0_changes);

    			if (!current || dirty & /*hasDriversLicence*/ 32 && div1_class_value !== (div1_class_value = "thumbnail " + (/*hasDriversLicence*/ ctx[5]
    			? 'available'
    			: 'unavailable') + " svelte-1px9qx0")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			const proofofidentity1_changes = {};
    			if (dirty & /*client*/ 1) proofofidentity1_changes.clientId = /*client*/ ctx[0].id;
    			if (dirty & /*edit*/ 2) proofofidentity1_changes.edit = /*edit*/ ctx[1];

    			if (!updating_item_1 && dirty & /*passport*/ 16) {
    				updating_item_1 = true;
    				proofofidentity1_changes.item = /*passport*/ ctx[4];
    				add_flush_callback(() => updating_item_1 = false);
    			}

    			proofofidentity1.$set(proofofidentity1_changes);

    			if (!current || dirty & /*hasPassport*/ 128 && div3_class_value !== (div3_class_value = "thumbnail " + (/*hasPassport*/ ctx[7] ? 'available' : 'unavailable') + " svelte-1px9qx0")) {
    				attr_dev(div3, "class", div3_class_value);
    			}

    			const proofofidentity2_changes = {};
    			if (dirty & /*client*/ 1) proofofidentity2_changes.clientId = /*client*/ ctx[0].id;
    			if (dirty & /*edit*/ 2) proofofidentity2_changes.edit = /*edit*/ ctx[1];

    			if (!updating_item_2 && dirty & /*identityCard*/ 8) {
    				updating_item_2 = true;
    				proofofidentity2_changes.item = /*identityCard*/ ctx[3];
    				add_flush_callback(() => updating_item_2 = false);
    			}

    			proofofidentity2.$set(proofofidentity2_changes);

    			if (!current || dirty & /*hasIdentityCard*/ 64 && div5_class_value !== (div5_class_value = "thumbnail " + (/*hasIdentityCard*/ ctx[6] ? 'available' : 'unavailable') + " svelte-1px9qx0")) {
    				attr_dev(div5, "class", div5_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutgrid.$$.fragment, local);
    			transition_in(proofofidentity0.$$.fragment, local);
    			transition_in(proofofidentity1.$$.fragment, local);
    			transition_in(proofofidentity2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutgrid.$$.fragment, local);
    			transition_out(proofofidentity0.$$.fragment, local);
    			transition_out(proofofidentity1.$$.fragment, local);
    			transition_out(proofofidentity2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layoutgrid, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div6);
    			destroy_component(proofofidentity0);
    			destroy_component(proofofidentity1);
    			destroy_component(proofofidentity2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Legal', slots, []);
    	let { client } = $$props;
    	let { edit } = $$props;
    	let hasDriversLicence = false;
    	let hasIdentityCard = false;
    	let hasPassport = false;

    	let driversLicence = {
    		type: ProofOfIdentityType.DRIVERS_LICENCE
    	};

    	let identityCard = { type: ProofOfIdentityType.PASSPORT };
    	let passport = { type: ProofOfIdentityType.IDENTITY_CARD };

    	for (let item of client.proofOfIdentities) {
    		switch (item.type) {
    			case ProofOfIdentityType.DRIVERS_LICENCE:
    				driversLicence = item;
    				hasDriversLicence = true;
    				break;
    			case ProofOfIdentityType.IDENTITY_CARD:
    				identityCard = item;
    				hasIdentityCard = true;
    				break;
    			case ProofOfIdentityType.PASSPORT:
    				passport = item;
    				hasPassport = true;
    				break;
    		}
    	}

    	function getProof(check, item) {
    		if (!check) {
    			return;
    		}

    		ProofOfIdentityService.get(item.id).then(response => window.open(response));
    	}

    	const writable_props = ['client', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Legal> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value) {
    		if ($$self.$$.not_equal(client.bank, value)) {
    			client.bank = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value) {
    		if ($$self.$$.not_equal(client.bic, value)) {
    			client.bic = value;
    			$$invalidate(0, client);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_2(value) {
    		if ($$self.$$.not_equal(client.iban, value)) {
    			client.iban = value;
    			$$invalidate(0, client);
    		}
    	}

    	const click_handler = () => getProof(hasDriversLicence, driversLicence);
    	const click_handler_1 = () => getProof(hasDriversLicence, driversLicence);

    	function proofofidentity0_item_binding(value) {
    		driversLicence = value;
    		$$invalidate(2, driversLicence);
    	}

    	const click_handler_2 = () => getProof(hasPassport, passport);
    	const click_handler_3 = () => getProof(hasPassport, passport);

    	function proofofidentity1_item_binding(value) {
    		passport = value;
    		$$invalidate(4, passport);
    	}

    	const click_handler_4 = () => getProof(hasIdentityCard, identityCard);
    	const click_handler_5 = () => getProof(hasIdentityCard, identityCard);

    	function proofofidentity2_item_binding(value) {
    		identityCard = value;
    		$$invalidate(3, identityCard);
    	}

    	$$self.$$set = $$props => {
    		if ('client' in $$props) $$invalidate(0, client = $$props.client);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		ProofOfIdentityService,
    		ProofOfIdentityType,
    		client,
    		edit,
    		LayoutGrid,
    		Cell,
    		ProofOfIdentity,
    		LabelTextfieldToggle,
    		hasDriversLicence,
    		hasIdentityCard,
    		hasPassport,
    		driversLicence,
    		identityCard,
    		passport,
    		getProof
    	});

    	$$self.$inject_state = $$props => {
    		if ('client' in $$props) $$invalidate(0, client = $$props.client);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('hasDriversLicence' in $$props) $$invalidate(5, hasDriversLicence = $$props.hasDriversLicence);
    		if ('hasIdentityCard' in $$props) $$invalidate(6, hasIdentityCard = $$props.hasIdentityCard);
    		if ('hasPassport' in $$props) $$invalidate(7, hasPassport = $$props.hasPassport);
    		if ('driversLicence' in $$props) $$invalidate(2, driversLicence = $$props.driversLicence);
    		if ('identityCard' in $$props) $$invalidate(3, identityCard = $$props.identityCard);
    		if ('passport' in $$props) $$invalidate(4, passport = $$props.passport);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*driversLicence*/ 4) {
    			$$invalidate(5, hasDriversLicence = driversLicence.id !== undefined && driversLicence.id !== null && driversLicence.id > 0);
    		}

    		if ($$self.$$.dirty & /*identityCard*/ 8) {
    			$$invalidate(6, hasIdentityCard = identityCard.id !== undefined && identityCard.id !== null && identityCard.id > 0);
    		}

    		if ($$self.$$.dirty & /*passport*/ 16) {
    			$$invalidate(7, hasPassport = passport.id !== undefined && passport.id !== null && passport.id > 0);
    		}
    	};

    	return [
    		client,
    		edit,
    		driversLicence,
    		identityCard,
    		passport,
    		hasDriversLicence,
    		hasIdentityCard,
    		hasPassport,
    		getProof,
    		labeltextfieldtoggle_value_binding,
    		labeltextfieldtoggle_value_binding_1,
    		labeltextfieldtoggle_value_binding_2,
    		click_handler,
    		click_handler_1,
    		proofofidentity0_item_binding,
    		click_handler_2,
    		click_handler_3,
    		proofofidentity1_item_binding,
    		click_handler_4,
    		click_handler_5,
    		proofofidentity2_item_binding
    	];
    }

    class Legal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$R, create_fragment$Y, safe_not_equal, { client: 0, edit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Legal",
    			options,
    			id: create_fragment$Y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*client*/ ctx[0] === undefined && !('client' in props)) {
    			console.warn("<Legal> was created without expected prop 'client'");
    		}

    		if (/*edit*/ ctx[1] === undefined && !('edit' in props)) {
    			console.warn("<Legal> was created without expected prop 'edit'");
    		}
    	}

    	get client() {
    		throw new Error("<Legal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set client(value) {
    		throw new Error("<Legal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<Legal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<Legal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function sortFunc(sort, sortDirection) {
        return (a, b) => {
            const [aVal, bVal] = [getValue(a, sort), getValue(b, sort)][sortDirection === 'ascending' ? 'slice' : 'reverse']();
            if (typeof aVal === 'string' && typeof bVal === 'string') {
                return aVal.localeCompare(bVal);
            }
            if (typeof aVal === 'object' && typeof bVal === 'object') {
                console.log(JSON.stringify(aVal));
                console.log(JSON.stringify(bVal));
                console.log(aVal + ":" + bVal);
                console.log(aVal && bVal ? -1 : 1);
                return aVal && bVal ? -1 : 1;
            }
            return Number(aVal) - Number(bVal);
        };
    }
    function getValue(obj, sort) {
        if (typeof sort == 'string' && sort.includes('.')) {
            return findValue(obj, sort);
        }
        return obj[sort] ? obj[sort] : '';
    }
    function findValue(obj, key) {
        if (!obj) {
            return '';
        }
        let keys = key.split('.');
        for (var i = 0; i < keys.length; i++) {
            if (!obj[keys[i]]) {
                return '';
            }
            obj = obj[keys[i]];
        }
        return obj;
    }

    /* src/components/client/Contracts.svelte generated by Svelte v3.44.3 */

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (51:10) <Label>
    function create_default_slot_26$2(ctx) {
    	let t_value = /*$l*/ ctx[4].contract.contractNumber + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].contract.contractNumber + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26$2.name,
    		type: "slot",
    		source: "(51:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (52:10) <IconButton class="material-icons">
    function create_default_slot_25$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25$2.name,
    		type: "slot",
    		source: "(52:10) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (50:8) <Cell columnId="contractNumber" style="width: 100%;">
    function create_default_slot_24$3(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_26$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_25$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24$3.name,
    		type: "slot",
    		source: "(50:8) <Cell columnId=\\\"contractNumber\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (55:10) <Label>
    function create_default_slot_23$3(ctx) {
    	let t_value = /*$l*/ ctx[4].contract.serviceType + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].contract.serviceType + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23$3.name,
    		type: "slot",
    		source: "(55:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (56:10) <IconButton class="material-icons">
    function create_default_slot_22$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$3.name,
    		type: "slot",
    		source: "(56:10) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (54:8) <Cell columnId="serviceType.service" style="width: 100%;">
    function create_default_slot_21$3(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_23$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_22$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$3.name,
    		type: "slot",
    		source: "(54:8) <Cell columnId=\\\"serviceType.service\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (59:10) <Label>
    function create_default_slot_20$5(ctx) {
    	let t_value = /*$l*/ ctx[4].menu.partner + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].menu.partner + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$5.name,
    		type: "slot",
    		source: "(59:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (60:10) <IconButton class="material-icons">
    function create_default_slot_19$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$5.name,
    		type: "slot",
    		source: "(60:10) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (58:8) <Cell columnId="contractor.name" style="width: 100%;">
    function create_default_slot_18$5(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_20$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_19$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$5.name,
    		type: "slot",
    		source: "(58:8) <Cell columnId=\\\"contractor.name\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (63:10) <Label>
    function create_default_slot_17$6(ctx) {
    	let t_value = /*$l*/ ctx[4].createdAt + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].createdAt + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$6.name,
    		type: "slot",
    		source: "(63:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (64:10) <IconButton class="material-icons">
    function create_default_slot_16$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$6.name,
    		type: "slot",
    		source: "(64:10) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (62:8) <Cell columnId="contractDate" style="width: 100%;">
    function create_default_slot_15$7(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_17$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_16$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$7.name,
    		type: "slot",
    		source: "(62:8) <Cell columnId=\\\"contractDate\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (67:10) <Label>
    function create_default_slot_14$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Polizze");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$9.name,
    		type: "slot",
    		source: "(67:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (68:10) <IconButton class="material-icons">
    function create_default_slot_13$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$b.name,
    		type: "slot",
    		source: "(68:10) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (66:8) <Cell columnId="policy.fileName">
    function create_default_slot_12$b(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_14$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_13$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$b.name,
    		type: "slot",
    		source: "(66:8) <Cell columnId=\\\"policy.fileName\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:6) <Row>
    function create_default_slot_11$b(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let cell4;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				columnId: "contractNumber",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_24$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				columnId: "serviceType.service",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_21$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				columnId: "contractor.name",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_18$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				columnId: "contractDate",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_15$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell$2({
    			props: {
    				columnId: "policy.fileName",
    				$$slots: { default: [create_default_slot_12$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    			create_component(cell4.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell4, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell4, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$b.name,
    		type: "slot",
    		source: "(49:6) <Row>",
    		ctx
    	});

    	return block;
    }

    // (48:4) <Head>
    function create_default_slot_10$b(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_11$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$b.name,
    		type: "slot",
    		source: "(48:4) <Head>",
    		ctx
    	});

    	return block;
    }

    // (75:98) {:else}
    function create_else_block_4(ctx) {
    	let t_value = /*$l*/ ctx[4].unknown + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].unknown + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(75:98) {:else}",
    		ctx
    	});

    	return block;
    }

    // (75:52) {#if item.contractNumber}
    function create_if_block_4$2(ctx) {
    	let t_value = /*item*/ ctx[20].contractNumber + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[20].contractNumber + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(75:52) {#if item.contractNumber}",
    		ctx
    	});

    	return block;
    }

    // (75:10) <Cell on:click={() => editContract(item)}>
    function create_default_slot_9$b(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[20].contractNumber) return create_if_block_4$2;
    		return create_else_block_4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$b.name,
    		type: "slot",
    		source: "(75:10) <Cell on:click={() => editContract(item)}>",
    		ctx
    	});

    	return block;
    }

    // (76:100) {:else}
    function create_else_block_3(ctx) {
    	let t_value = /*$l*/ ctx[4].unknown + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].unknown + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(76:100) {:else}",
    		ctx
    	});

    	return block;
    }

    // (76:52) {#if item.serviceType}
    function create_if_block_3$2(ctx) {
    	let t_value = /*item*/ ctx[20].serviceType.service + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[20].serviceType.service + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(76:52) {#if item.serviceType}",
    		ctx
    	});

    	return block;
    }

    // (76:10) <Cell on:click={() => editContract(item)}>
    function create_default_slot_8$d(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*item*/ ctx[20].serviceType) return create_if_block_3$2;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$d.name,
    		type: "slot",
    		source: "(76:10) <Cell on:click={() => editContract(item)}>",
    		ctx
    	});

    	return block;
    }

    // (77:95) {:else}
    function create_else_block_2(ctx) {
    	let t_value = /*$l*/ ctx[4].unknown + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].unknown + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(77:95) {:else}",
    		ctx
    	});

    	return block;
    }

    // (77:52) {#if item.contractor}
    function create_if_block_2$5(ctx) {
    	let t_value = /*item*/ ctx[20].contractor.name + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[20].contractor.name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(77:52) {#if item.contractor}",
    		ctx
    	});

    	return block;
    }

    // (77:10) <Cell on:click={() => editContract(item)}>
    function create_default_slot_7$e(ctx) {
    	let if_block_anchor;

    	function select_block_type_2(ctx, dirty) {
    		if (/*item*/ ctx[20].contractor) return create_if_block_2$5;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$e.name,
    		type: "slot",
    		source: "(77:10) <Cell on:click={() => editContract(item)}>",
    		ctx
    	});

    	return block;
    }

    // (78:94) {:else}
    function create_else_block_1$4(ctx) {
    	let t_value = /*$l*/ ctx[4].unknown + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 16 && t_value !== (t_value = /*$l*/ ctx[4].unknown + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(78:94) {:else}",
    		ctx
    	});

    	return block;
    }

    // (78:52) {#if item.contractDate}
    function create_if_block_1$f(ctx) {
    	let t_value = /*item*/ ctx[20].contractDate + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[20].contractDate + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(78:52) {#if item.contractDate}",
    		ctx
    	});

    	return block;
    }

    // (78:10) <Cell on:click={() => editContract(item)}>
    function create_default_slot_6$j(ctx) {
    	let if_block_anchor;

    	function select_block_type_3(ctx, dirty) {
    		if (/*item*/ ctx[20].contractDate) return create_if_block_1$f;
    		return create_else_block_1$4;
    	}

    	let current_block_type = select_block_type_3(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$j.name,
    		type: "slot",
    		source: "(78:10) <Cell on:click={() => editContract(item)}>",
    		ctx
    	});

    	return block;
    }

    // (84:14) {:else}
    function create_else_block$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("question_mark");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(84:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (82:14) {#if item.policy}
    function create_if_block$q(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("description");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$q.name,
    		type: "if",
    		source: "(82:14) {#if item.policy}",
    		ctx
    	});

    	return block;
    }

    // (81:12) <Icon class="material-icons">
    function create_default_slot_5$j(ctx) {
    	let if_block_anchor;

    	function select_block_type_4(ctx, dirty) {
    		if (/*item*/ ctx[20].policy) return create_if_block$q;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type_4(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_4(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$j.name,
    		type: "slot",
    		source: "(81:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (80:10) <Cell on:click={() => openPolicy(item)}>
    function create_default_slot_4$m(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_5$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope, filtered*/ 8388616) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$m.name,
    		type: "slot",
    		source: "(80:10) <Cell on:click={() => openPolicy(item)}>",
    		ctx
    	});

    	return block;
    }

    // (74:8) <Row class="{item.legacy ? 'unimportant-row': item.policy ? '' : 'important-row'}">
    function create_default_slot_3$p(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let cell4;
    	let t4;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*item*/ ctx[20]);
    	}

    	cell0 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_9$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell0.$on("click", click_handler);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[12](/*item*/ ctx[20]);
    	}

    	cell1 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_8$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1.$on("click", click_handler_1);

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[13](/*item*/ ctx[20]);
    	}

    	cell2 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_7$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2.$on("click", click_handler_2);

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[14](/*item*/ ctx[20]);
    	}

    	cell3 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_6$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3.$on("click", click_handler_3);

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[15](/*item*/ ctx[20]);
    	}

    	cell4 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_4$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4.$on("click", click_handler_4);

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    			create_component(cell4.$$.fragment);
    			t4 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t4, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const cell0_changes = {};

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, filtered*/ 8388616) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$p.name,
    		type: "slot",
    		source: "(74:8) <Row class=\\\"{item.legacy ? 'unimportant-row': item.policy ? '' : 'important-row'}\\\">",
    		ctx
    	});

    	return block;
    }

    // (73:6) {#each filtered as item (item.id)}
    function create_each_block$e(key_1, ctx) {
    	let first;
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				class: /*item*/ ctx[20].legacy
    				? 'unimportant-row'
    				: /*item*/ ctx[20].policy ? '' : 'important-row',
    				$$slots: { default: [create_default_slot_3$p] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(row.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const row_changes = {};

    			if (dirty & /*filtered*/ 8) row_changes.class = /*item*/ ctx[20].legacy
    			? 'unimportant-row'
    			: /*item*/ ctx[20].policy ? '' : 'important-row';

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(73:6) {#each filtered as item (item.id)}",
    		ctx
    	});

    	return block;
    }

    // (72:4) <Body>
    function create_default_slot_2$r(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[3];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[20].id;
    	validate_each_keys(ctx, each_value, get_each_context$e, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$e(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$e(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered, openPolicy, editContract, $l*/ 216) {
    				each_value = /*filtered*/ ctx[3];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$e, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$e, each_1_anchor, get_each_context$e);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$r.name,
    		type: "slot",
    		source: "(72:4) <Body>",
    		ctx
    	});

    	return block;
    }

    // (40:2) <DataTable     sortable     bind:sort     bind:sortDirection     on:MDCDataTable:sorted={() => sortFunction()}     table$aria-label="Contract list"     style="width: 100%;"   >
    function create_default_slot_1$t(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_10$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_2$r] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope, $l*/ 8388624) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$t.name,
    		type: "slot",
    		source: "(40:2) <DataTable     sortable     bind:sort     bind:sortDirection     on:MDCDataTable:sorted={() => sortFunction()}     table$aria-label=\\\"Contract list\\\"     style=\\\"width: 100%;\\\"   >",
    		ctx
    	});

    	return block;
    }

    // (37:0) <FormContainer>
    function create_default_slot$z(ctx) {
    	let searchbar;
    	let updating_value;
    	let t;
    	let datatable;
    	let updating_sort;
    	let updating_sortDirection;
    	let current;

    	function searchbar_value_binding(value) {
    		/*searchbar_value_binding*/ ctx[10](value);
    	}

    	let searchbar_props = {};

    	if (/*filterValue*/ ctx[0] !== void 0) {
    		searchbar_props.value = /*filterValue*/ ctx[0];
    	}

    	searchbar = new Searchbar({ props: searchbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(searchbar, 'value', searchbar_value_binding));

    	function datatable_sort_binding(value) {
    		/*datatable_sort_binding*/ ctx[16](value);
    	}

    	function datatable_sortDirection_binding(value) {
    		/*datatable_sortDirection_binding*/ ctx[17](value);
    	}

    	let datatable_props = {
    		sortable: true,
    		"table$aria-label": "Contract list",
    		style: "width: 100%;",
    		$$slots: { default: [create_default_slot_1$t] },
    		$$scope: { ctx }
    	};

    	if (/*sort*/ ctx[1] !== void 0) {
    		datatable_props.sort = /*sort*/ ctx[1];
    	}

    	if (/*sortDirection*/ ctx[2] !== void 0) {
    		datatable_props.sortDirection = /*sortDirection*/ ctx[2];
    	}

    	datatable = new DataTable({ props: datatable_props, $$inline: true });
    	binding_callbacks.push(() => bind(datatable, 'sort', datatable_sort_binding));
    	binding_callbacks.push(() => bind(datatable, 'sortDirection', datatable_sortDirection_binding));
    	datatable.$on("MDCDataTable:sorted", /*MDCDataTable_sorted_handler*/ ctx[18]);

    	const block = {
    		c: function create() {
    			create_component(searchbar.$$.fragment);
    			t = space();
    			create_component(datatable.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchbar, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(datatable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const searchbar_changes = {};

    			if (!updating_value && dirty & /*filterValue*/ 1) {
    				updating_value = true;
    				searchbar_changes.value = /*filterValue*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			searchbar.$set(searchbar_changes);
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered, $l*/ 8388632) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_sort && dirty & /*sort*/ 2) {
    				updating_sort = true;
    				datatable_changes.sort = /*sort*/ ctx[1];
    				add_flush_callback(() => updating_sort = false);
    			}

    			if (!updating_sortDirection && dirty & /*sortDirection*/ 4) {
    				updating_sortDirection = true;
    				datatable_changes.sortDirection = /*sortDirection*/ ctx[2];
    				add_flush_callback(() => updating_sortDirection = false);
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchbar, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(datatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$z.name,
    		type: "slot",
    		source: "(37:0) <FormContainer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$X(ctx) {
    	let formcontainer;
    	let current;

    	formcontainer = new FormContainer({
    			props: {
    				$$slots: { default: [create_default_slot$z] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(formcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(formcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const formcontainer_changes = {};

    			if (dirty & /*$$scope, sort, sortDirection, filtered, $l, filterValue*/ 8388639) {
    				formcontainer_changes.$$scope = { dirty, ctx };
    			}

    			formcontainer.$set(formcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let filterValue;
    	let filtered;
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(4, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Contracts', slots, []);
    	let { client } = $$props;
    	let { selectedContract } = $$props;
    	let sort = "id";
    	let sortDirection = "ascending";
    	const sortFunction = () => $$invalidate(3, filtered = filtered.sort(sortFunc(sort, sortDirection)));

    	function editContract(item) {
    		$$invalidate(8, selectedContract = { id: item.id, edit: true, add: false });
    	}

    	const openPolicy = item => {
    		ClientContractService.getPolicy(item.id).then(response => window.open(response));
    	};

    	const openPolicyRequest = item => {
    		ClientContractService.getPolicyRequest(item.id).then(response => window.open(response));
    	};

    	const writable_props = ['client', 'selectedContract'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Contracts> was created with unknown prop '${key}'`);
    	});

    	function searchbar_value_binding(value) {
    		filterValue = value;
    		$$invalidate(0, filterValue);
    	}

    	const click_handler = item => editContract(item);
    	const click_handler_1 = item => editContract(item);
    	const click_handler_2 = item => editContract(item);
    	const click_handler_3 = item => editContract(item);
    	const click_handler_4 = item => openPolicy(item);

    	function datatable_sort_binding(value) {
    		sort = value;
    		$$invalidate(1, sort);
    	}

    	function datatable_sortDirection_binding(value) {
    		sortDirection = value;
    		$$invalidate(2, sortDirection);
    	}

    	const MDCDataTable_sorted_handler = () => sortFunction();

    	$$self.$$set = $$props => {
    		if ('client' in $$props) $$invalidate(9, client = $$props.client);
    		if ('selectedContract' in $$props) $$invalidate(8, selectedContract = $$props.selectedContract);
    	};

    	$$self.$capture_state = () => ({
    		FormContainer,
    		Searchbar,
    		Icon,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		IconButton,
    		ClientContractService,
    		l,
    		sortFunc,
    		client,
    		selectedContract,
    		sort,
    		sortDirection,
    		sortFunction,
    		editContract,
    		openPolicy,
    		openPolicyRequest,
    		filterValue,
    		filtered,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('client' in $$props) $$invalidate(9, client = $$props.client);
    		if ('selectedContract' in $$props) $$invalidate(8, selectedContract = $$props.selectedContract);
    		if ('sort' in $$props) $$invalidate(1, sort = $$props.sort);
    		if ('sortDirection' in $$props) $$invalidate(2, sortDirection = $$props.sortDirection);
    		if ('filterValue' in $$props) $$invalidate(0, filterValue = $$props.filterValue);
    		if ('filtered' in $$props) $$invalidate(3, filtered = $$props.filtered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*client, filterValue*/ 513) {
    			$$invalidate(3, filtered = client.contracts.filter(s => s.contractNumber && s.contractNumber.includes(filterValue) || s.contractor && s.contractor.name.includes(filterValue) || s.createdAt && s.createdAt.includes(filterValue) || s.serviceType && s.serviceType.service.includes(filterValue)));
    		}
    	};

    	$$invalidate(0, filterValue = "");

    	return [
    		filterValue,
    		sort,
    		sortDirection,
    		filtered,
    		$l,
    		sortFunction,
    		editContract,
    		openPolicy,
    		selectedContract,
    		client,
    		searchbar_value_binding,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		datatable_sort_binding,
    		datatable_sortDirection_binding,
    		MDCDataTable_sorted_handler
    	];
    }

    class Contracts extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$X, safe_not_equal, { client: 9, selectedContract: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Contracts",
    			options,
    			id: create_fragment$X.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*client*/ ctx[9] === undefined && !('client' in props)) {
    			console.warn("<Contracts> was created without expected prop 'client'");
    		}

    		if (/*selectedContract*/ ctx[8] === undefined && !('selectedContract' in props)) {
    			console.warn("<Contracts> was created without expected prop 'selectedContract'");
    		}
    	}

    	get client() {
    		throw new Error("<Contracts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set client(value) {
    		throw new Error("<Contracts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedContract() {
    		throw new Error("<Contracts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedContract(value) {
    		throw new Error("<Contracts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ServiceTypeSelection.svelte generated by Svelte v3.44.3 */

    // (25:0) {:else}
    function create_else_block$9(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[9](value);
    	}

    	let labeltextfieldtoggle_props = {
    		style: /*style*/ ctx[0],
    		label: /*$l*/ ctx[4].contract.serviceType
    	};

    	if (/*value*/ ctx[2] !== void 0) {
    		labeltextfieldtoggle_props.value = /*value*/ ctx[2];
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*style*/ 1) labeltextfieldtoggle_changes.style = /*style*/ ctx[0];
    			if (dirty & /*$l*/ 16) labeltextfieldtoggle_changes.label = /*$l*/ ctx[4].contract.serviceType;

    			if (!updating_value && dirty & /*value*/ 4) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*value*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(25:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (23:0) {#if edit}
    function create_if_block$p(ctx) {
    	let autocomplete;
    	let updating_value;
    	let updating_options;
    	let current;

    	function autocomplete_value_binding(value) {
    		/*autocomplete_value_binding*/ ctx[7](value);
    	}

    	function autocomplete_options_binding(value) {
    		/*autocomplete_options_binding*/ ctx[8](value);
    	}

    	let autocomplete_props = {
    		style: /*style*/ ctx[0],
    		label: /*$l*/ ctx[4].contract.serviceType,
    		textfield$style: /*style*/ ctx[0]
    	};

    	if (/*value*/ ctx[2] !== void 0) {
    		autocomplete_props.value = /*value*/ ctx[2];
    	}

    	if (/*options*/ ctx[3] !== void 0) {
    		autocomplete_props.options = /*options*/ ctx[3];
    	}

    	autocomplete = new Autocomplete({
    			props: autocomplete_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(autocomplete, 'value', autocomplete_value_binding));
    	binding_callbacks.push(() => bind(autocomplete, 'options', autocomplete_options_binding));

    	const block = {
    		c: function create() {
    			create_component(autocomplete.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(autocomplete, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const autocomplete_changes = {};
    			if (dirty & /*style*/ 1) autocomplete_changes.style = /*style*/ ctx[0];
    			if (dirty & /*$l*/ 16) autocomplete_changes.label = /*$l*/ ctx[4].contract.serviceType;
    			if (dirty & /*style*/ 1) autocomplete_changes.textfield$style = /*style*/ ctx[0];

    			if (!updating_value && dirty & /*value*/ 4) {
    				updating_value = true;
    				autocomplete_changes.value = /*value*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			if (!updating_options && dirty & /*options*/ 8) {
    				updating_options = true;
    				autocomplete_changes.options = /*options*/ ctx[3];
    				add_flush_callback(() => updating_options = false);
    			}

    			autocomplete.$set(autocomplete_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(autocomplete.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(autocomplete.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(autocomplete, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(23:0) {#if edit}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$W(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$p, create_else_block$9];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*edit*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(4, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ServiceTypeSelection', slots, []);
    	let { service } = $$props;
    	let { style = 'width: 100%' } = $$props;
    	let { edit } = $$props;
    	let items = [];
    	PartnerServiceTypeService.list().then(response => $$invalidate(6, items = response));
    	let value = '';

    	if (service) {
    		value = service.service;
    	}

    	let options = [];
    	const writable_props = ['service', 'style', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ServiceTypeSelection> was created with unknown prop '${key}'`);
    	});

    	function autocomplete_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(2, value);
    	}

    	function autocomplete_options_binding(value) {
    		options = value;
    		($$invalidate(3, options), $$invalidate(6, items));
    	}

    	function labeltextfieldtoggle_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(2, value);
    	}

    	$$self.$$set = $$props => {
    		if ('service' in $$props) $$invalidate(5, service = $$props.service);
    		if ('style' in $$props) $$invalidate(0, style = $$props.style);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		Autocomplete,
    		PartnerServiceTypeService,
    		LabelTextfieldToggle,
    		service,
    		style,
    		edit,
    		items,
    		value,
    		options,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('service' in $$props) $$invalidate(5, service = $$props.service);
    		if ('style' in $$props) $$invalidate(0, style = $$props.style);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('items' in $$props) $$invalidate(6, items = $$props.items);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('options' in $$props) $$invalidate(3, options = $$props.options);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items*/ 64) {
    			if (items) {
    				$$invalidate(3, options = items.map(item => item.service));
    			}
    		}

    		if ($$self.$$.dirty & /*value, items*/ 68) {
    			if (value) {
    				$$invalidate(5, service = items.find(item => value == item.service));
    			}
    		}
    	};

    	return [
    		style,
    		edit,
    		value,
    		options,
    		$l,
    		service,
    		items,
    		autocomplete_value_binding,
    		autocomplete_options_binding,
    		labeltextfieldtoggle_value_binding
    	];
    }

    class ServiceTypeSelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$P, create_fragment$W, safe_not_equal, { service: 5, style: 0, edit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ServiceTypeSelection",
    			options,
    			id: create_fragment$W.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*service*/ ctx[5] === undefined && !('service' in props)) {
    			console.warn("<ServiceTypeSelection> was created without expected prop 'service'");
    		}

    		if (/*edit*/ ctx[1] === undefined && !('edit' in props)) {
    			console.warn("<ServiceTypeSelection> was created without expected prop 'edit'");
    		}
    	}

    	get service() {
    		throw new Error("<ServiceTypeSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set service(value) {
    		throw new Error("<ServiceTypeSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ServiceTypeSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ServiceTypeSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<ServiceTypeSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<ServiceTypeSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/EuroTextfield.svelte generated by Svelte v3.44.3 */

    function create_fragment$V(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[5](value);
    	}

    	let labeltextfieldtoggle_props = {
    		prefix: "€",
    		label: /*label*/ ctx[0],
    		style: /*style*/ ctx[1],
    		edit: /*edit*/ ctx[2],
    		checkPattern: "^[0-9]*([,.][0-9]{1,2})?$"
    	};

    	if (/*value*/ ctx[3] !== void 0) {
    		labeltextfieldtoggle_props.value = /*value*/ ctx[3];
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*label*/ 1) labeltextfieldtoggle_changes.label = /*label*/ ctx[0];
    			if (dirty & /*style*/ 2) labeltextfieldtoggle_changes.style = /*style*/ ctx[1];
    			if (dirty & /*edit*/ 4) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[2];

    			if (!updating_value && dirty & /*value*/ 8) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*value*/ ctx[3];
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function parse(value) {
    	let temp = value.replace(",", ".");

    	if (temp.indexOf(".") > -1) {
    		let parts = temp.split(".");
    		let tempInt = parts[0];

    		if (parts[1].length > 2) {
    			tempInt += parts[1].substring(0, 2);
    		} else if (parts[1].length < 2) {
    			tempInt = tempInt + parts[1] + "0";
    		} else {
    			tempInt += parts[1];
    		}

    		return +tempInt;
    	} else {
    		return +(temp + "00");
    	}
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(6, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EuroTextfield', slots, []);
    	let { label = $l.payment.euroTextfieldLabel } = $$props;
    	let { style = "width:100%" } = $$props;
    	let { edit } = $$props;
    	let { integer } = $$props;
    	let value = "";

    	if (integer) {
    		let temp = integer.toString();
    		temp = temp.substring(0, temp.length - 2) + ',' + temp.substring(temp.length - 2, temp.length);
    		value = temp;
    	}

    	const writable_props = ['label', 'style', 'edit', 'integer'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EuroTextfield> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(3, value);
    	}

    	$$self.$$set = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    		if ('integer' in $$props) $$invalidate(4, integer = $$props.integer);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		LabelTextfieldToggle,
    		label,
    		style,
    		edit,
    		integer,
    		value,
    		parse,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    		if ('integer' in $$props) $$invalidate(4, integer = $$props.integer);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 8) {
    			if (value) {
    				$$invalidate(4, integer = parse(value));
    			}
    		}
    	};

    	return [label, style, edit, value, integer, labeltextfieldtoggle_value_binding];
    }

    class EuroTextfield extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$O, create_fragment$V, safe_not_equal, { label: 0, style: 1, edit: 2, integer: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EuroTextfield",
    			options,
    			id: create_fragment$V.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*edit*/ ctx[2] === undefined && !('edit' in props)) {
    			console.warn("<EuroTextfield> was created without expected prop 'edit'");
    		}

    		if (/*integer*/ ctx[4] === undefined && !('integer' in props)) {
    			console.warn("<EuroTextfield> was created without expected prop 'integer'");
    		}
    	}

    	get label() {
    		throw new Error("<EuroTextfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<EuroTextfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<EuroTextfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<EuroTextfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<EuroTextfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<EuroTextfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get integer() {
    		throw new Error("<EuroTextfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set integer(value) {
    		throw new Error("<EuroTextfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/PaymentFrequencySelection.svelte generated by Svelte v3.44.3 */

    // (8:4) <Option value={PaymentFrequency.UNKNOWN}>
    function create_default_slot_4$l(ctx) {
    	let t_value = /*$l*/ ctx[2].unknown + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].unknown + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$l.name,
    		type: "slot",
    		source: "(8:4) <Option value={PaymentFrequency.UNKNOWN}>",
    		ctx
    	});

    	return block;
    }

    // (9:4) <Option value={PaymentFrequency.MONTHLY}>
    function create_default_slot_3$o(ctx) {
    	let t_value = /*$l*/ ctx[2].payment.monthly + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].payment.monthly + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$o.name,
    		type: "slot",
    		source: "(9:4) <Option value={PaymentFrequency.MONTHLY}>",
    		ctx
    	});

    	return block;
    }

    // (10:4) <Option value={PaymentFrequency.QUARTERLY}>
    function create_default_slot_2$q(ctx) {
    	let t_value = /*$l*/ ctx[2].payment.quarterly + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].payment.quarterly + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$q.name,
    		type: "slot",
    		source: "(10:4) <Option value={PaymentFrequency.QUARTERLY}>",
    		ctx
    	});

    	return block;
    }

    // (11:4) <Option value={PaymentFrequency.YEARLY}>
    function create_default_slot_1$s(ctx) {
    	let t_value = /*$l*/ ctx[2].payment.yearly + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].payment.yearly + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$s.name,
    		type: "slot",
    		source: "(11:4) <Option value={PaymentFrequency.YEARLY}>",
    		ctx
    	});

    	return block;
    }

    // (7:0) <Select bind:value={paymentFrequency} {style} label={$l.payment.paymentFrequency}>
    function create_default_slot$y(ctx) {
    	let option0;
    	let t0;
    	let option1;
    	let t1;
    	let option2;
    	let t2;
    	let option3;
    	let current;

    	option0 = new Option({
    			props: {
    				value: PaymentFrequency.UNKNOWN,
    				$$slots: { default: [create_default_slot_4$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	option1 = new Option({
    			props: {
    				value: PaymentFrequency.MONTHLY,
    				$$slots: { default: [create_default_slot_3$o] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	option2 = new Option({
    			props: {
    				value: PaymentFrequency.QUARTERLY,
    				$$slots: { default: [create_default_slot_2$q] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	option3 = new Option({
    			props: {
    				value: PaymentFrequency.YEARLY,
    				$$slots: { default: [create_default_slot_1$s] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(option0.$$.fragment);
    			t0 = space();
    			create_component(option1.$$.fragment);
    			t1 = space();
    			create_component(option2.$$.fragment);
    			t2 = space();
    			create_component(option3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(option0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(option1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(option2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(option3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const option0_changes = {};

    			if (dirty & /*$$scope, $l*/ 20) {
    				option0_changes.$$scope = { dirty, ctx };
    			}

    			option0.$set(option0_changes);
    			const option1_changes = {};

    			if (dirty & /*$$scope, $l*/ 20) {
    				option1_changes.$$scope = { dirty, ctx };
    			}

    			option1.$set(option1_changes);
    			const option2_changes = {};

    			if (dirty & /*$$scope, $l*/ 20) {
    				option2_changes.$$scope = { dirty, ctx };
    			}

    			option2.$set(option2_changes);
    			const option3_changes = {};

    			if (dirty & /*$$scope, $l*/ 20) {
    				option3_changes.$$scope = { dirty, ctx };
    			}

    			option3.$set(option3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(option0.$$.fragment, local);
    			transition_in(option1.$$.fragment, local);
    			transition_in(option2.$$.fragment, local);
    			transition_in(option3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(option0.$$.fragment, local);
    			transition_out(option1.$$.fragment, local);
    			transition_out(option2.$$.fragment, local);
    			transition_out(option3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(option0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(option1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(option2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(option3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$y.name,
    		type: "slot",
    		source: "(7:0) <Select bind:value={paymentFrequency} {style} label={$l.payment.paymentFrequency}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$U(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[3](value);
    	}

    	let select_props = {
    		style: /*style*/ ctx[1],
    		label: /*$l*/ ctx[2].payment.paymentFrequency,
    		$$slots: { default: [create_default_slot$y] },
    		$$scope: { ctx }
    	};

    	if (/*paymentFrequency*/ ctx[0] !== void 0) {
    		select_props.value = /*paymentFrequency*/ ctx[0];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const select_changes = {};
    			if (dirty & /*style*/ 2) select_changes.style = /*style*/ ctx[1];
    			if (dirty & /*$l*/ 4) select_changes.label = /*$l*/ ctx[2].payment.paymentFrequency;

    			if (dirty & /*$$scope, $l*/ 20) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*paymentFrequency*/ 1) {
    				updating_value = true;
    				select_changes.value = /*paymentFrequency*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PaymentFrequencySelection', slots, []);
    	let { paymentFrequency } = $$props;
    	let { style = "width: 100%" } = $$props;
    	const writable_props = ['paymentFrequency', 'style'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PaymentFrequencySelection> was created with unknown prop '${key}'`);
    	});

    	function select_value_binding(value) {
    		paymentFrequency = value;
    		$$invalidate(0, paymentFrequency);
    	}

    	$$self.$$set = $$props => {
    		if ('paymentFrequency' in $$props) $$invalidate(0, paymentFrequency = $$props.paymentFrequency);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		Select,
    		Option,
    		PaymentFrequency,
    		paymentFrequency,
    		style,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('paymentFrequency' in $$props) $$invalidate(0, paymentFrequency = $$props.paymentFrequency);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [paymentFrequency, style, $l, select_value_binding];
    }

    class PaymentFrequencySelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$U, safe_not_equal, { paymentFrequency: 0, style: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PaymentFrequencySelection",
    			options,
    			id: create_fragment$U.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*paymentFrequency*/ ctx[0] === undefined && !('paymentFrequency' in props)) {
    			console.warn("<PaymentFrequencySelection> was created without expected prop 'paymentFrequency'");
    		}
    	}

    	get paymentFrequency() {
    		throw new Error("<PaymentFrequencySelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set paymentFrequency(value) {
    		throw new Error("<PaymentFrequencySelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<PaymentFrequencySelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<PaymentFrequencySelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ContractorSelection.svelte generated by Svelte v3.44.3 */
    const file$I = "src/components/ContractorSelection.svelte";

    // (47:0) {:else}
    function create_else_block_1$3(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[15](value);
    	}

    	let labeltextfieldtoggle_props = {
    		style: /*style*/ ctx[1],
    		label: /*$l*/ ctx[6].payment.contractor
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		labeltextfieldtoggle_props.value = /*value*/ ctx[0];
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*style*/ 2) labeltextfieldtoggle_changes.style = /*style*/ ctx[1];
    			if (dirty & /*$l*/ 64) labeltextfieldtoggle_changes.label = /*$l*/ ctx[6].payment.contractor;

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(47:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (34:0) {#if edit}
    function create_if_block$o(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$e, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*allowUnfound*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(34:0) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {:else}
    function create_else_block$8(ctx) {
    	let autocomplete;
    	let updating_value;
    	let updating_options;
    	let current;

    	function autocomplete_value_binding_1(value) {
    		/*autocomplete_value_binding_1*/ ctx[13](value);
    	}

    	function autocomplete_options_binding_1(value) {
    		/*autocomplete_options_binding_1*/ ctx[14](value);
    	}

    	let autocomplete_props = {
    		style: /*style*/ ctx[1],
    		label: /*$l*/ ctx[6].payment.contractor,
    		textfield$style: /*style*/ ctx[1]
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		autocomplete_props.value = /*value*/ ctx[0];
    	}

    	if (/*options*/ ctx[4] !== void 0) {
    		autocomplete_props.options = /*options*/ ctx[4];
    	}

    	autocomplete = new Autocomplete({
    			props: autocomplete_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(autocomplete, 'value', autocomplete_value_binding_1));
    	binding_callbacks.push(() => bind(autocomplete, 'options', autocomplete_options_binding_1));

    	const block = {
    		c: function create() {
    			create_component(autocomplete.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(autocomplete, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const autocomplete_changes = {};
    			if (dirty & /*style*/ 2) autocomplete_changes.style = /*style*/ ctx[1];
    			if (dirty & /*$l*/ 64) autocomplete_changes.label = /*$l*/ ctx[6].payment.contractor;
    			if (dirty & /*style*/ 2) autocomplete_changes.textfield$style = /*style*/ ctx[1];

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				autocomplete_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			if (!updating_options && dirty & /*options*/ 16) {
    				updating_options = true;
    				autocomplete_changes.options = /*options*/ ctx[4];
    				add_flush_callback(() => updating_options = false);
    			}

    			autocomplete.$set(autocomplete_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(autocomplete.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(autocomplete.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(autocomplete, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(43:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (35:2) {#if allowUnfound}
    function create_if_block_1$e(ctx) {
    	let autocomplete;
    	let updating_value;
    	let updating_text;
    	let updating_options;
    	let current;

    	function autocomplete_value_binding(value) {
    		/*autocomplete_value_binding*/ ctx[9](value);
    	}

    	function autocomplete_text_binding(value) {
    		/*autocomplete_text_binding*/ ctx[10](value);
    	}

    	function autocomplete_options_binding(value) {
    		/*autocomplete_options_binding*/ ctx[11](value);
    	}

    	let autocomplete_props = {
    		style: /*style*/ ctx[1],
    		label: /*$l*/ ctx[6].payment.contractor,
    		textfield$style: /*style*/ ctx[1],
    		noMatchesActionDisabled: false,
    		$$slots: { "no-matches": [create_no_matches_slot] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		autocomplete_props.value = /*value*/ ctx[0];
    	}

    	if (/*text*/ ctx[5] !== void 0) {
    		autocomplete_props.text = /*text*/ ctx[5];
    	}

    	if (/*options*/ ctx[4] !== void 0) {
    		autocomplete_props.options = /*options*/ ctx[4];
    	}

    	autocomplete = new Autocomplete({
    			props: autocomplete_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(autocomplete, 'value', autocomplete_value_binding));
    	binding_callbacks.push(() => bind(autocomplete, 'text', autocomplete_text_binding));
    	binding_callbacks.push(() => bind(autocomplete, 'options', autocomplete_options_binding));
    	autocomplete.$on("SMUIAutocomplete:noMatchesAction", /*SMUIAutocomplete_noMatchesAction_handler*/ ctx[12]);

    	const block = {
    		c: function create() {
    			create_component(autocomplete.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(autocomplete, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const autocomplete_changes = {};
    			if (dirty & /*style*/ 2) autocomplete_changes.style = /*style*/ ctx[1];
    			if (dirty & /*$l*/ 64) autocomplete_changes.label = /*$l*/ ctx[6].payment.contractor;
    			if (dirty & /*style*/ 2) autocomplete_changes.textfield$style = /*style*/ ctx[1];

    			if (dirty & /*$$scope, text*/ 65568) {
    				autocomplete_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				autocomplete_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			if (!updating_text && dirty & /*text*/ 32) {
    				updating_text = true;
    				autocomplete_changes.text = /*text*/ ctx[5];
    				add_flush_callback(() => updating_text = false);
    			}

    			if (!updating_options && dirty & /*options*/ 16) {
    				updating_options = true;
    				autocomplete_changes.options = /*options*/ ctx[4];
    				add_flush_callback(() => updating_options = false);
    			}

    			autocomplete.$set(autocomplete_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(autocomplete.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(autocomplete.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(autocomplete, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(35:2) {#if allowUnfound}",
    		ctx
    	});

    	return block;
    }

    // (40:8) <Text>
    function create_default_slot$x(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*text*/ ctx[5]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*text*/ 32) set_data_dev(t, /*text*/ ctx[5]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$x.name,
    		type: "slot",
    		source: "(40:8) <Text>",
    		ctx
    	});

    	return block;
    }

    // (39:4) 
    function create_no_matches_slot(ctx) {
    	let div;
    	let text_1;
    	let current;

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot$x] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(text_1.$$.fragment);
    			attr_dev(div, "slot", "no-matches");
    			add_location(div, file$I, 38, 4, 1183);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(text_1, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const text_1_changes = {};

    			if (dirty & /*$$scope, text*/ 65568) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_no_matches_slot.name,
    		type: "slot",
    		source: "(39:4) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$T(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$o, create_else_block_1$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*edit*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(6, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContractorSelection', slots, []);
    	let { partner = {} } = $$props;
    	let { style = 'width: 100%' } = $$props;
    	let { value = '' } = $$props;
    	let { edit } = $$props;
    	let { allowUnfound = false } = $$props;
    	let partnerList = [];
    	let options;

    	PartnerService$1.list().then(result => {
    		$$invalidate(8, partnerList = result);
    		partnerList.unshift({ name: '' });
    		$$invalidate(4, options = partnerList.map(item => item.name));

    		if (partner && partner.id) {
    			$$invalidate(0, value = partnerList.find(item => item.id == partner.id).name);
    		}
    	});

    	let text;
    	const writable_props = ['partner', 'style', 'value', 'edit', 'allowUnfound'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContractorSelection> was created with unknown prop '${key}'`);
    	});

    	function autocomplete_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function autocomplete_text_binding(value) {
    		text = value;
    		$$invalidate(5, text);
    	}

    	function autocomplete_options_binding(value) {
    		options = value;
    		$$invalidate(4, options);
    	}

    	const SMUIAutocomplete_noMatchesAction_handler = () => {
    		$$invalidate(0, value = text);
    	};

    	function autocomplete_value_binding_1(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	function autocomplete_options_binding_1(value) {
    		options = value;
    		$$invalidate(4, options);
    	}

    	function labeltextfieldtoggle_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$props => {
    		if ('partner' in $$props) $$invalidate(7, partner = $$props.partner);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    		if ('allowUnfound' in $$props) $$invalidate(3, allowUnfound = $$props.allowUnfound);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		Autocomplete,
    		Text: Text$2,
    		PartnerService: PartnerService$1,
    		LabelTextfieldToggle,
    		partner,
    		style,
    		value,
    		edit,
    		allowUnfound,
    		partnerList,
    		options,
    		text,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('partner' in $$props) $$invalidate(7, partner = $$props.partner);
    		if ('style' in $$props) $$invalidate(1, style = $$props.style);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    		if ('allowUnfound' in $$props) $$invalidate(3, allowUnfound = $$props.allowUnfound);
    		if ('partnerList' in $$props) $$invalidate(8, partnerList = $$props.partnerList);
    		if ('options' in $$props) $$invalidate(4, options = $$props.options);
    		if ('text' in $$props) $$invalidate(5, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value, partnerList, allowUnfound*/ 265) {
    			if (value) {
    				let maybeFound = partnerList.find(item => value == item.name);

    				if (maybeFound) {
    					$$invalidate(7, partner = maybeFound);
    				} else if (allowUnfound) {
    					$$invalidate(7, partner = { name: value });
    				}
    			}
    		}
    	};

    	return [
    		value,
    		style,
    		edit,
    		allowUnfound,
    		options,
    		text,
    		$l,
    		partner,
    		partnerList,
    		autocomplete_value_binding,
    		autocomplete_text_binding,
    		autocomplete_options_binding,
    		SMUIAutocomplete_noMatchesAction_handler,
    		autocomplete_value_binding_1,
    		autocomplete_options_binding_1,
    		labeltextfieldtoggle_value_binding
    	];
    }

    class ContractorSelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$M, create_fragment$T, safe_not_equal, {
    			partner: 7,
    			style: 1,
    			value: 0,
    			edit: 2,
    			allowUnfound: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContractorSelection",
    			options,
    			id: create_fragment$T.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*edit*/ ctx[2] === undefined && !('edit' in props)) {
    			console.warn("<ContractorSelection> was created without expected prop 'edit'");
    		}
    	}

    	get partner() {
    		throw new Error("<ContractorSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set partner(value) {
    		throw new Error("<ContractorSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<ContractorSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<ContractorSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ContractorSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ContractorSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<ContractorSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<ContractorSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get allowUnfound() {
    		throw new Error("<ContractorSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set allowUnfound(value) {
    		throw new Error("<ContractorSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/FileUpload.svelte generated by Svelte v3.44.3 */
    const file$H = "src/components/FileUpload.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (84:8) {:else}
    function create_else_block_1$2(ctx) {
    	let span;
    	let span_transition;
    	let current;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "upload";
    			attr_dev(span, "class", "material-icons svelte-16asl3i");
    			add_location(span, file$H, 84, 8, 2353);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!span_transition) span_transition = create_bidirectional_transition(span, fade, { duration: 100 }, true);
    				span_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!span_transition) span_transition = create_bidirectional_transition(span, fade, { duration: 100 }, false);
    			span_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching && span_transition) span_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(84:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (76:8) {#if isDrag || droppedFiles !== undefined }
    function create_if_block_1$d(ctx) {
    	let span;
    	let t;
    	let span_class_value;
    	let span_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*droppedFileIcon*/ ctx[3]);
    			attr_dev(span, "class", span_class_value = "material-icons pointer " + (/*droppedFileIcon*/ ctx[3] == 'close' ? 'primary' : '') + " svelte-16asl3i");
    			add_location(span, file$H, 76, 8, 1975);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span, "focus", /*changeCheckToDelete*/ ctx[9], false, false, false),
    					listen_dev(span, "mouseover", /*changeCheckToDelete*/ ctx[9], false, false, false),
    					listen_dev(span, "mouseout", /*changeCheckBack*/ ctx[10], false, false, false),
    					listen_dev(span, "blur", /*changeCheckBack*/ ctx[10], false, false, false),
    					listen_dev(span, "click", /*click_handler*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*droppedFileIcon*/ 8) set_data_dev(t, /*droppedFileIcon*/ ctx[3]);

    			if (!current || dirty & /*droppedFileIcon*/ 8 && span_class_value !== (span_class_value = "material-icons pointer " + (/*droppedFileIcon*/ ctx[3] == 'close' ? 'primary' : '') + " svelte-16asl3i")) {
    				attr_dev(span, "class", span_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!span_transition) span_transition = create_bidirectional_transition(span, fade, { duration: 100 }, true);
    				span_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!span_transition) span_transition = create_bidirectional_transition(span, fade, { duration: 100 }, false);
    			span_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching && span_transition) span_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(76:8) {#if isDrag || droppedFiles !== undefined }",
    		ctx
    	});

    	return block;
    }

    // (95:8) {:else}
    function create_else_block$7(ctx) {
    	let strong;
    	let span;
    	let t2;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "Choose a file";
    			span = element("span");
    			span.textContent = " or drag it here";
    			t2 = text(".");
    			attr_dev(strong, "class", "box__choose");
    			add_location(strong, file$H, 95, 10, 2716);
    			attr_dev(span, "class", "box__dragndrop svelte-16asl3i");
    			add_location(span, file$H, 95, 60, 2766);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    			insert_dev(target, span, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(95:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (91:8) {#if droppedFiles}
    function create_if_block$n(ctx) {
    	let each_1_anchor;
    	let each_value = /*droppedFiles*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*droppedFiles*/ 2) {
    				each_value = /*droppedFiles*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(91:8) {#if droppedFiles}",
    		ctx
    	});

    	return block;
    }

    // (92:10) {#each droppedFiles as item}
    function create_each_block$d(ctx) {
    	let t_value = /*item*/ ctx[17].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*droppedFiles*/ 2 && t_value !== (t_value = /*item*/ ctx[17].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(92:10) {#each droppedFiles as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$S(ctx) {
    	let form;
    	let div1;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let input;
    	let t1;
    	let label;
    	let form_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$d, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isDrag*/ ctx[2] || /*droppedFiles*/ ctx[1] !== undefined) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*droppedFiles*/ ctx[1]) return create_if_block$n;
    		return create_else_block$7;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			form = element("form");
    			div1 = element("div");
    			div0 = element("div");
    			if_block0.c();
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			label = element("label");
    			if_block1.c();
    			attr_dev(div0, "class", "box__icon svelte-16asl3i");
    			add_location(div0, file$H, 74, 6, 1891);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "id", /*inputId*/ ctx[11]);
    			input.hidden = true;
    			add_location(input, file$H, 88, 6, 2470);
    			attr_dev(label, "class", "pointer svelte-16asl3i");
    			attr_dev(label, "for", /*inputId*/ ctx[11]);
    			add_location(label, file$H, 89, 6, 2544);
    			attr_dev(div1, "class", "box__input");
    			add_location(div1, file$H, 73, 4, 1860);
    			attr_dev(form, "class", form_class_value = "box " + (/*isAdvancedUpload*/ ctx[4] ? 'has-advanced-upload' : '') + " " + (/*isDrag*/ ctx[2] ? 'is-dragover' : '') + " svelte-16asl3i");
    			attr_dev(form, "method", "post");
    			attr_dev(form, "action", "");
    			attr_dev(form, "enctype", "multipart/form-data");
    			add_location(form, file$H, 60, 2, 1491);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, div1);
    			append_dev(div1, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div1, t0);
    			append_dev(div1, input);
    			append_dev(div1, t1);
    			append_dev(div1, label);
    			if_block1.m(label, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[15]),
    					listen_dev(form, "drag", /*prevent*/ ctx[5], false, false, false),
    					listen_dev(form, "dragstart", /*prevent*/ ctx[5], false, false, false),
    					listen_dev(form, "dragover", /*addDragOver*/ ctx[6], false, false, false),
    					listen_dev(form, "dragenter", /*addDragOver*/ ctx[6], false, false, false),
    					listen_dev(form, "dragend", /*removeDragOver*/ ctx[7], false, false, false),
    					listen_dev(form, "dragleave", /*removeDragOver*/ ctx[7], false, false, false),
    					listen_dev(form, "drop", /*drop*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, null);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(label, null);
    				}
    			}

    			if (!current || dirty & /*isDrag*/ 4 && form_class_value !== (form_class_value = "box " + (/*isAdvancedUpload*/ ctx[4] ? 'has-advanced-upload' : '') + " " + (/*isDrag*/ ctx[2] ? 'is-dragover' : '') + " svelte-16asl3i")) {
    				attr_dev(form, "class", form_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			if_blocks[current_block_type_index].d();
    			if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let counter = 0;

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FileUpload', slots, []);
    	const dispatch = createEventDispatcher();
    	let { autoSubmit = false } = $$props;

    	// checks if drag&drop is supported by the browser
    	const isAdvancedUpload = () => {
    		let div = document.createElement("div");
    		return ("draggable" in div || "ondragstart" in div && "ondrop" in div) && "FormData" in window && "FileReader" in window;
    	};

    	let droppedFiles;
    	let isDrag = false;

    	const prevent = e => {
    		e.preventDefault();
    		e.stopPropagation();
    	};

    	const addDragOver = e => {
    		prevent(e);
    		$$invalidate(2, isDrag = true);
    	};

    	const removeDragOver = e => {
    		prevent(e);
    		$$invalidate(2, isDrag = false);
    	};

    	const drop = e => {
    		removeDragOver(e);
    		$$invalidate(1, droppedFiles = e.dataTransfer.files);

    		if (autoSubmit) {
    			trigger();
    		}
    	};

    	const clear = () => {
    		$$invalidate(1, droppedFiles = undefined);
    		changeCheckBack();
    	};

    	const trigger = async () => {
    		if (droppedFiles == undefined) {
    			return;
    		}

    		let file = droppedFiles.item(0);
    		dispatch('submit', { file });
    	};

    	let droppedFileIcon = "check";

    	const changeCheckToDelete = () => {
    		if (droppedFiles !== undefined) {
    			$$invalidate(3, droppedFileIcon = "close");
    		}
    	};

    	const changeCheckBack = () => {
    		$$invalidate(3, droppedFileIcon = "check");
    	};

    	// needed for uniqueness (lik in contracts as there are two uploads)
    	let inputId = 'input_' + counter++;

    	const writable_props = ['autoSubmit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FileUpload> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		clear();
    	};

    	function input_change_handler() {
    		droppedFiles = this.files;
    		$$invalidate(1, droppedFiles);
    	}

    	$$self.$$set = $$props => {
    		if ('autoSubmit' in $$props) $$invalidate(12, autoSubmit = $$props.autoSubmit);
    	};

    	$$self.$capture_state = () => ({
    		counter,
    		createEventDispatcher,
    		fade,
    		dispatch,
    		autoSubmit,
    		isAdvancedUpload,
    		droppedFiles,
    		isDrag,
    		prevent,
    		addDragOver,
    		removeDragOver,
    		drop,
    		clear,
    		trigger,
    		droppedFileIcon,
    		changeCheckToDelete,
    		changeCheckBack,
    		inputId
    	});

    	$$self.$inject_state = $$props => {
    		if ('autoSubmit' in $$props) $$invalidate(12, autoSubmit = $$props.autoSubmit);
    		if ('droppedFiles' in $$props) $$invalidate(1, droppedFiles = $$props.droppedFiles);
    		if ('isDrag' in $$props) $$invalidate(2, isDrag = $$props.isDrag);
    		if ('droppedFileIcon' in $$props) $$invalidate(3, droppedFileIcon = $$props.droppedFileIcon);
    		if ('inputId' in $$props) $$invalidate(11, inputId = $$props.inputId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		clear,
    		droppedFiles,
    		isDrag,
    		droppedFileIcon,
    		isAdvancedUpload,
    		prevent,
    		addDragOver,
    		removeDragOver,
    		drop,
    		changeCheckToDelete,
    		changeCheckBack,
    		inputId,
    		autoSubmit,
    		trigger,
    		click_handler,
    		input_change_handler
    	];
    }

    class FileUpload extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$S, safe_not_equal, { autoSubmit: 12, clear: 0, trigger: 13 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FileUpload",
    			options,
    			id: create_fragment$S.name
    		});
    	}

    	get autoSubmit() {
    		throw new Error("<FileUpload>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoSubmit(value) {
    		throw new Error("<FileUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clear() {
    		return this.$$.ctx[0];
    	}

    	set clear(value) {
    		throw new Error("<FileUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get trigger() {
    		return this.$$.ctx[13];
    	}

    	set trigger(value) {
    		throw new Error("<FileUpload>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/client/Contract.svelte generated by Svelte v3.44.3 */
    const file$G = "src/components/client/Contract.svelte";

    // (89:6) <H2>
    function create_default_slot_28$1(ctx) {
    	let t_value = (/*selectedContract*/ ctx[0].add
    	? /*$l*/ ctx[5].contract.newContractTitle
    	: /*$l*/ ctx[5].contract.editContractTitle) + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedContract, $l*/ 33 && t_value !== (t_value = (/*selectedContract*/ ctx[0].add
    			? /*$l*/ ctx[5].contract.newContractTitle
    			: /*$l*/ ctx[5].contract.editContractTitle) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28$1.name,
    		type: "slot",
    		source: "(89:6) <H2>",
    		ctx
    	});

    	return block;
    }

    // (92:6) {#if selectedContract.edit}
    function create_if_block_2$4(ctx) {
    	let button;
    	let current;

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_25$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*deleteContract*/ ctx[11]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(92:6) {#if selectedContract.edit}",
    		ctx
    	});

    	return block;
    }

    // (94:8) <Icon class="material-icons">
    function create_default_slot_27$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27$1.name,
    		type: "slot",
    		source: "(94:8) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (95:8) <Label>
    function create_default_slot_26$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Polizze löschen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26$1.name,
    		type: "slot",
    		source: "(95:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (93:6) <Button on:click={deleteContract}>
    function create_default_slot_25$1(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_27$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_26$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25$1.name,
    		type: "slot",
    		source: "(93:6) <Button on:click={deleteContract}>",
    		ctx
    	});

    	return block;
    }

    // (101:10) <Cell span={6}>
    function create_default_slot_24$2(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[13](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: /*$l*/ ctx[5].contract.contractNumber
    	};

    	if (/*contract*/ ctx[4].contractNumber !== void 0) {
    		labeltextfieldtoggle_props.value = /*contract*/ ctx[4].contractNumber;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];
    			if (dirty & /*$l*/ 32) labeltextfieldtoggle_changes.label = /*$l*/ ctx[5].contract.contractNumber;

    			if (!updating_value && dirty & /*contract*/ 16) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*contract*/ ctx[4].contractNumber;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24$2.name,
    		type: "slot",
    		source: "(101:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (104:10) <Cell span={6}>
    function create_default_slot_23$2(ctx) {
    	let servicetypeselection;
    	let updating_service;
    	let current;

    	function servicetypeselection_service_binding(value) {
    		/*servicetypeselection_service_binding*/ ctx[14](value);
    	}

    	let servicetypeselection_props = { edit: /*edit*/ ctx[1] };

    	if (/*contract*/ ctx[4].serviceType !== void 0) {
    		servicetypeselection_props.service = /*contract*/ ctx[4].serviceType;
    	}

    	servicetypeselection = new ServiceTypeSelection({
    			props: servicetypeselection_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(servicetypeselection, 'service', servicetypeselection_service_binding));

    	const block = {
    		c: function create() {
    			create_component(servicetypeselection.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(servicetypeselection, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const servicetypeselection_changes = {};
    			if (dirty & /*edit*/ 2) servicetypeselection_changes.edit = /*edit*/ ctx[1];

    			if (!updating_service && dirty & /*contract*/ 16) {
    				updating_service = true;
    				servicetypeselection_changes.service = /*contract*/ ctx[4].serviceType;
    				add_flush_callback(() => updating_service = false);
    			}

    			servicetypeselection.$set(servicetypeselection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(servicetypeselection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(servicetypeselection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(servicetypeselection, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23$2.name,
    		type: "slot",
    		source: "(104:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (107:10) <Cell span={6}>
    function create_default_slot_22$2(ctx) {
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[15](value);
    	}

    	let stylizedcheckbox_props = { label: /*$l*/ ctx[5].contract.legacy };

    	if (/*contract*/ ctx[4].legacy !== void 0) {
    		stylizedcheckbox_props.value = /*contract*/ ctx[4].legacy;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	const block = {
    		c: function create() {
    			create_component(stylizedcheckbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stylizedcheckbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*$l*/ 32) stylizedcheckbox_changes.label = /*$l*/ ctx[5].contract.legacy;

    			if (!updating_value && dirty & /*contract*/ 16) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*contract*/ ctx[4].legacy;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stylizedcheckbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$2.name,
    		type: "slot",
    		source: "(107:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (110:10) <Cell span={6}>
    function create_default_slot_21$2(ctx) {
    	let contractorselection;
    	let updating_partner;
    	let current;

    	function contractorselection_partner_binding(value) {
    		/*contractorselection_partner_binding*/ ctx[16](value);
    	}

    	let contractorselection_props = { edit: /*edit*/ ctx[1] };

    	if (/*contract*/ ctx[4].contractor !== void 0) {
    		contractorselection_props.partner = /*contract*/ ctx[4].contractor;
    	}

    	contractorselection = new ContractorSelection({
    			props: contractorselection_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(contractorselection, 'partner', contractorselection_partner_binding));

    	const block = {
    		c: function create() {
    			create_component(contractorselection.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contractorselection, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contractorselection_changes = {};
    			if (dirty & /*edit*/ 2) contractorselection_changes.edit = /*edit*/ ctx[1];

    			if (!updating_partner && dirty & /*contract*/ 16) {
    				updating_partner = true;
    				contractorselection_changes.partner = /*contract*/ ctx[4].contractor;
    				add_flush_callback(() => updating_partner = false);
    			}

    			contractorselection.$set(contractorselection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contractorselection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contractorselection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contractorselection, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$2.name,
    		type: "slot",
    		source: "(110:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (113:10) <Cell span={6}>
    function create_default_slot_20$4(ctx) {
    	let eurotextfield;
    	let updating_integer;
    	let current;

    	function eurotextfield_integer_binding(value) {
    		/*eurotextfield_integer_binding*/ ctx[17](value);
    	}

    	let eurotextfield_props = { edit: /*edit*/ ctx[1] };

    	if (/*contract*/ ctx[4].paymentValue !== void 0) {
    		eurotextfield_props.integer = /*contract*/ ctx[4].paymentValue;
    	}

    	eurotextfield = new EuroTextfield({
    			props: eurotextfield_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(eurotextfield, 'integer', eurotextfield_integer_binding));

    	const block = {
    		c: function create() {
    			create_component(eurotextfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(eurotextfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const eurotextfield_changes = {};
    			if (dirty & /*edit*/ 2) eurotextfield_changes.edit = /*edit*/ ctx[1];

    			if (!updating_integer && dirty & /*contract*/ 16) {
    				updating_integer = true;
    				eurotextfield_changes.integer = /*contract*/ ctx[4].paymentValue;
    				add_flush_callback(() => updating_integer = false);
    			}

    			eurotextfield.$set(eurotextfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(eurotextfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(eurotextfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(eurotextfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$4.name,
    		type: "slot",
    		source: "(113:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (116:10) <Cell span={6}>
    function create_default_slot_19$4(ctx) {
    	let paymentfrequencyselection;
    	let updating_paymentFrequency;
    	let current;

    	function paymentfrequencyselection_paymentFrequency_binding(value) {
    		/*paymentfrequencyselection_paymentFrequency_binding*/ ctx[18](value);
    	}

    	let paymentfrequencyselection_props = {};

    	if (/*contract*/ ctx[4].paymentFrequency !== void 0) {
    		paymentfrequencyselection_props.paymentFrequency = /*contract*/ ctx[4].paymentFrequency;
    	}

    	paymentfrequencyselection = new PaymentFrequencySelection({
    			props: paymentfrequencyselection_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(paymentfrequencyselection, 'paymentFrequency', paymentfrequencyselection_paymentFrequency_binding));

    	const block = {
    		c: function create() {
    			create_component(paymentfrequencyselection.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(paymentfrequencyselection, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const paymentfrequencyselection_changes = {};

    			if (!updating_paymentFrequency && dirty & /*contract*/ 16) {
    				updating_paymentFrequency = true;
    				paymentfrequencyselection_changes.paymentFrequency = /*contract*/ ctx[4].paymentFrequency;
    				add_flush_callback(() => updating_paymentFrequency = false);
    			}

    			paymentfrequencyselection.$set(paymentfrequencyselection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(paymentfrequencyselection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(paymentfrequencyselection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(paymentfrequencyselection, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$4.name,
    		type: "slot",
    		source: "(116:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (119:10) <Cell span={6}>
    function create_default_slot_18$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[19](value);
    	}

    	let labeltextfieldtoggle_props = {
    		edit: /*edit*/ ctx[1],
    		label: "Vertragsdatum",
    		type: "date"
    	};

    	if (/*contract*/ ctx[4].contractDate !== void 0) {
    		labeltextfieldtoggle_props.value = /*contract*/ ctx[4].contractDate;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*contract*/ 16) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*contract*/ ctx[4].contractDate;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$4.name,
    		type: "slot",
    		source: "(119:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (123:12) <H3>
    function create_default_slot_17$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Polizzenanfrage");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$5.name,
    		type: "slot",
    		source: "(123:12) <H3>",
    		ctx
    	});

    	return block;
    }

    // (135:12) {:else}
    function create_else_block_1$1(ctx) {
    	let fileupload;
    	let current;
    	let fileupload_props = {};
    	fileupload = new FileUpload({ props: fileupload_props, $$inline: true });
    	/*fileupload_binding*/ ctx[22](fileupload);
    	fileupload.$on("submit", /*policyRequestSubmit*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(fileupload.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fileupload, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const fileupload_changes = {};
    			fileupload.$set(fileupload_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fileupload.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fileupload.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*fileupload_binding*/ ctx[22](null);
    			destroy_component(fileupload, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(135:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (124:12) {#if contract.policyRequest && contract.policyRequest.fileName}
    function create_if_block_1$c(ctx) {
    	let div;
    	let button0;
    	let t;
    	let button1;
    	let current;

    	button0 = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_14$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*click_handler*/ ctx[20]);

    	button1 = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_11$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler_1*/ ctx[21]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(button0.$$.fragment);
    			t = space();
    			create_component(button1.$$.fragment);
    			attr_dev(div, "class", "file-button-container svelte-1fykls7");
    			add_location(div, file$G, 124, 12, 4876);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(button0, div, null);
    			append_dev(div, t);
    			mount_component(button1, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(button0);
    			destroy_component(button1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(124:12) {#if contract.policyRequest && contract.policyRequest.fileName}",
    		ctx
    	});

    	return block;
    }

    // (127:16) <Icon class="material-icons">
    function create_default_slot_16$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("description");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$5.name,
    		type: "slot",
    		source: "(127:16) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (128:16) <Label>
    function create_default_slot_15$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Dokument öffnen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$6.name,
    		type: "slot",
    		source: "(128:16) <Label>",
    		ctx
    	});

    	return block;
    }

    // (126:14) <Button on:click={() => { openPolicyRequest(contract) }}>
    function create_default_slot_14$8(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_16$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_15$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$8.name,
    		type: "slot",
    		source: "(126:14) <Button on:click={() => { openPolicyRequest(contract) }}>",
    		ctx
    	});

    	return block;
    }

    // (131:16) <Icon class="material-icons">
    function create_default_slot_13$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$a.name,
    		type: "slot",
    		source: "(131:16) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (132:16) <Label>
    function create_default_slot_12$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Dokument löschen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$a.name,
    		type: "slot",
    		source: "(132:16) <Label>",
    		ctx
    	});

    	return block;
    }

    // (130:14) <Button on:click={() => { contract.policyRequest = undefined}}>
    function create_default_slot_11$a(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_13$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_12$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$a.name,
    		type: "slot",
    		source: "(130:14) <Button on:click={() => { contract.policyRequest = undefined}}>",
    		ctx
    	});

    	return block;
    }

    // (122:10) <Cell span={12}>
    function create_default_slot_10$a(ctx) {
    	let h3;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;

    	h3 = new H3({
    			props: {
    				$$slots: { default: [create_default_slot_17$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block_1$c, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*contract*/ ctx[4].policyRequest && /*contract*/ ctx[4].policyRequest.fileName) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			create_component(h3.$$.fragment);
    			t = space();
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(h3, target, anchor);
    			insert_dev(target, t, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h3_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				h3_changes.$$scope = { dirty, ctx };
    			}

    			h3.$set(h3_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h3.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h3.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(h3, detaching);
    			if (detaching) detach_dev(t);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$a.name,
    		type: "slot",
    		source: "(122:10) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (141:12) <H3>
    function create_default_slot_9$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Polizze");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$a.name,
    		type: "slot",
    		source: "(141:12) <H3>",
    		ctx
    	});

    	return block;
    }

    // (153:12) {:else}
    function create_else_block$6(ctx) {
    	let fileupload;
    	let current;
    	let fileupload_props = {};
    	fileupload = new FileUpload({ props: fileupload_props, $$inline: true });
    	/*fileupload_binding_1*/ ctx[25](fileupload);
    	fileupload.$on("submit", /*policySubmit*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(fileupload.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fileupload, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const fileupload_changes = {};
    			fileupload.$set(fileupload_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fileupload.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fileupload.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*fileupload_binding_1*/ ctx[25](null);
    			destroy_component(fileupload, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(153:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (142:12) {#if contract.policy && contract.policy.fileName}
    function create_if_block$m(ctx) {
    	let div;
    	let button0;
    	let t;
    	let button1;
    	let current;

    	button0 = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_6$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*click_handler_2*/ ctx[23]);

    	button1 = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_3$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler_3*/ ctx[24]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(button0.$$.fragment);
    			t = space();
    			create_component(button1.$$.fragment);
    			attr_dev(div, "class", "file-button-container svelte-1fykls7");
    			add_location(div, file$G, 142, 12, 5650);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(button0, div, null);
    			append_dev(div, t);
    			mount_component(button1, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(button0);
    			destroy_component(button1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(142:12) {#if contract.policy && contract.policy.fileName}",
    		ctx
    	});

    	return block;
    }

    // (145:16) <Icon class="material-icons">
    function create_default_slot_8$c(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("description");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$c.name,
    		type: "slot",
    		source: "(145:16) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (146:16) <Label>
    function create_default_slot_7$d(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Dokument öffnen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$d.name,
    		type: "slot",
    		source: "(146:16) <Label>",
    		ctx
    	});

    	return block;
    }

    // (144:14) <Button on:click={() => { openPolicy(contract) }}>
    function create_default_slot_6$i(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_8$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_7$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$i.name,
    		type: "slot",
    		source: "(144:14) <Button on:click={() => { openPolicy(contract) }}>",
    		ctx
    	});

    	return block;
    }

    // (149:16) <Icon class="material-icons">
    function create_default_slot_5$i(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$i.name,
    		type: "slot",
    		source: "(149:16) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (150:16) <Label>
    function create_default_slot_4$k(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Dokument löschen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$k.name,
    		type: "slot",
    		source: "(150:16) <Label>",
    		ctx
    	});

    	return block;
    }

    // (148:14) <Button on:click={() => { contract.policy = undefined}}>
    function create_default_slot_3$n(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_5$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_4$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$n.name,
    		type: "slot",
    		source: "(148:14) <Button on:click={() => { contract.policy = undefined}}>",
    		ctx
    	});

    	return block;
    }

    // (139:10) <Cell span={12}>
    function create_default_slot_2$p(ctx) {
    	let divider;
    	let t0;
    	let h3;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	divider = new Divider({ $$inline: true });

    	h3 = new H3({
    			props: {
    				$$slots: { default: [create_default_slot_9$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$m, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*contract*/ ctx[4].policy && /*contract*/ ctx[4].policy.fileName) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			create_component(divider.$$.fragment);
    			t0 = space();
    			create_component(h3.$$.fragment);
    			t1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(divider, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(h3, target, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h3_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				h3_changes.$$scope = { dirty, ctx };
    			}

    			h3.$set(h3_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(divider.$$.fragment, local);
    			transition_in(h3.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(divider.$$.fragment, local);
    			transition_out(h3.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(divider, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(h3, detaching);
    			if (detaching) detach_dev(t1);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$p.name,
    		type: "slot",
    		source: "(139:10) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (100:6) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot_1$r(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let cell4;
    	let t4;
    	let cell5;
    	let t5;
    	let cell6;
    	let t6;
    	let cell7;
    	let t7;
    	let cell8;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_24$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_23$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_22$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_21$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_20$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell5 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_19$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell6 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_18$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell7 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_10$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell8 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_2$p] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    			create_component(cell4.$$.fragment);
    			t4 = space();
    			create_component(cell5.$$.fragment);
    			t5 = space();
    			create_component(cell6.$$.fragment);
    			t6 = space();
    			create_component(cell7.$$.fragment);
    			t7 = space();
    			create_component(cell8.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell5, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(cell6, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(cell7, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(cell8, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, $l, contract*/ 268435506) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, contract*/ 268435474) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, $l, contract*/ 268435504) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, edit, contract*/ 268435474) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, edit, contract*/ 268435474) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    			const cell5_changes = {};

    			if (dirty & /*$$scope, contract*/ 268435472) {
    				cell5_changes.$$scope = { dirty, ctx };
    			}

    			cell5.$set(cell5_changes);
    			const cell6_changes = {};

    			if (dirty & /*$$scope, edit, contract*/ 268435474) {
    				cell6_changes.$$scope = { dirty, ctx };
    			}

    			cell6.$set(cell6_changes);
    			const cell7_changes = {};

    			if (dirty & /*$$scope, contract, policyRequestFileUpload*/ 268435476) {
    				cell7_changes.$$scope = { dirty, ctx };
    			}

    			cell7.$set(cell7_changes);
    			const cell8_changes = {};

    			if (dirty & /*$$scope, contract, policyFileUpload*/ 268435480) {
    				cell8_changes.$$scope = { dirty, ctx };
    			}

    			cell8.$set(cell8_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			transition_in(cell5.$$.fragment, local);
    			transition_in(cell6.$$.fragment, local);
    			transition_in(cell7.$$.fragment, local);
    			transition_in(cell8.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			transition_out(cell5.$$.fragment, local);
    			transition_out(cell6.$$.fragment, local);
    			transition_out(cell7.$$.fragment, local);
    			transition_out(cell8.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell5, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(cell6, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(cell7, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(cell8, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$r.name,
    		type: "slot",
    		source: "(100:6) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    // (86:0) <FormContainer>
    function create_default_slot$w(ctx) {
    	let div2;
    	let div0;
    	let h2;
    	let t0;
    	let div1;
    	let t1;
    	let layoutgrid;
    	let t2;
    	let floatingactionbutton;
    	let current;

    	h2 = new H2({
    			props: {
    				$$slots: { default: [create_default_slot_28$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*selectedContract*/ ctx[0].edit && create_if_block_2$4(ctx);

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot_1$r] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	floatingactionbutton = new FloatingActionButton({
    			props: { icon: "save", label: /*$l*/ ctx[5].save },
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*save*/ ctx[6]);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(h2.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t1 = space();
    			create_component(layoutgrid.$$.fragment);
    			t2 = space();
    			create_component(floatingactionbutton.$$.fragment);
    			attr_dev(div0, "class", "header-item svelte-1fykls7");
    			add_location(div0, file$G, 87, 8, 3347);
    			attr_dev(div1, "class", "header-item svelte-1fykls7");
    			add_location(div1, file$G, 90, 4, 3489);
    			attr_dev(div2, "class", "header-container svelte-1fykls7");
    			add_location(div2, file$G, 86, 6, 3308);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(h2, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			insert_dev(target, t1, anchor);
    			mount_component(layoutgrid, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(floatingactionbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h2_changes = {};

    			if (dirty & /*$$scope, selectedContract, $l*/ 268435489) {
    				h2_changes.$$scope = { dirty, ctx };
    			}

    			h2.$set(h2_changes);

    			if (/*selectedContract*/ ctx[0].edit) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*selectedContract*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, contract, policyFileUpload, policyRequestFileUpload, edit, $l*/ 268435518) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    			const floatingactionbutton_changes = {};
    			if (dirty & /*$l*/ 32) floatingactionbutton_changes.label = /*$l*/ ctx[5].save;
    			floatingactionbutton.$set(floatingactionbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h2.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(layoutgrid.$$.fragment, local);
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h2.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(layoutgrid.$$.fragment, local);
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(h2);
    			if (if_block) if_block.d();
    			if (detaching) detach_dev(t1);
    			destroy_component(layoutgrid, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(floatingactionbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$w.name,
    		type: "slot",
    		source: "(86:0) <FormContainer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$R(ctx) {
    	let formcontainer;
    	let current;

    	formcontainer = new FormContainer({
    			props: {
    				$$slots: { default: [create_default_slot$w] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(formcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(formcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const formcontainer_changes = {};

    			if (dirty & /*$$scope, $l, contract, policyFileUpload, policyRequestFileUpload, edit, selectedContract*/ 268435519) {
    				formcontainer_changes.$$scope = { dirty, ctx };
    			}

    			formcontainer.$set(formcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(5, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Contract', slots, []);
    	let { client } = $$props;
    	let { edit } = $$props;
    	let { selectedContract } = $$props;
    	let policyRequestFileUpload;
    	let policyFileUpload;

    	let contract = {
    		clientId: client.id,
    		paymentFrequency: PaymentFrequency.UNKNOWN
    	};

    	if (selectedContract.edit) {
    		contract = client.contracts.find(item => item.id == selectedContract.id);
    	}

    	const addNewContract = dto => {
    		$$invalidate(4, contract = dto);
    		client.contracts.push(contract);
    	};

    	const save = () => {
    		if (selectedContract.add) {
    			ClientContractService.add(contract).then(response => {
    				addNewContract(response);
    				upload();
    				snackbar.set("Polizze erstellt.");
    			});
    		} else {
    			ClientContractService.update(contract).then(_ => {
    				upload();
    				snackbar.set("Polizze geändert.");
    			});
    		}
    	};

    	function upload() {
    		if (policyRequestFileUpload) {
    			policyRequestFileUpload.trigger();
    		}

    		if (policyFileUpload) {
    			policyFileUpload.trigger();
    		}

    		$$invalidate(0, selectedContract.add = false, selectedContract);
    		$$invalidate(0, selectedContract.edit = false, selectedContract);
    	}

    	const policyRequestSubmit = e => {
    		ClientContractService.uploadPolicyRequest({
    			clientContractId: contract.id,
    			file: e.detail.file,
    			fileExtension: e.detail.file.type,
    			fileName: e.detail.file.name
    		}).then(response => $$invalidate(4, contract = response));
    	};

    	const policySubmit = e => {
    		ClientContractService.uploadPolicy({
    			clientContractId: contract.id,
    			file: e.detail.file,
    			fileExtension: e.detail.file.type,
    			fileName: e.detail.file.name
    		}).then(response => $$invalidate(4, contract = response));
    	};

    	const openPolicy = dto => {
    		ClientContractService.getPolicy(dto.id).then(response => window.open(response));
    	};

    	const openPolicyRequest = dto => {
    		ClientContractService.getPolicyRequest(dto.id).then(response => window.open(response));
    	};

    	const deleteContract = () => {
    		confirm.set({
    			title: 'Dokument löschen?',
    			message: 'Dokument unwiderruflich löschen?',
    			func: () => {
    				ClientContractService.delete(contract.id).then(_ => {
    					let temp = client.contracts;
    					let index = client.contracts.findIndex(d => d.id == contract.id);
    					temp.splice(index, 1);
    					$$invalidate(12, client.contracts = temp, client);
    					$$invalidate(0, selectedContract.add = false, selectedContract);
    					$$invalidate(0, selectedContract.edit = false, selectedContract);
    				});
    			}
    		});
    	};

    	const writable_props = ['client', 'edit', 'selectedContract'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Contract> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value) {
    		if ($$self.$$.not_equal(contract.contractNumber, value)) {
    			contract.contractNumber = value;
    			$$invalidate(4, contract);
    		}
    	}

    	function servicetypeselection_service_binding(value) {
    		if ($$self.$$.not_equal(contract.serviceType, value)) {
    			contract.serviceType = value;
    			$$invalidate(4, contract);
    		}
    	}

    	function stylizedcheckbox_value_binding(value) {
    		if ($$self.$$.not_equal(contract.legacy, value)) {
    			contract.legacy = value;
    			$$invalidate(4, contract);
    		}
    	}

    	function contractorselection_partner_binding(value) {
    		if ($$self.$$.not_equal(contract.contractor, value)) {
    			contract.contractor = value;
    			$$invalidate(4, contract);
    		}
    	}

    	function eurotextfield_integer_binding(value) {
    		if ($$self.$$.not_equal(contract.paymentValue, value)) {
    			contract.paymentValue = value;
    			$$invalidate(4, contract);
    		}
    	}

    	function paymentfrequencyselection_paymentFrequency_binding(value) {
    		if ($$self.$$.not_equal(contract.paymentFrequency, value)) {
    			contract.paymentFrequency = value;
    			$$invalidate(4, contract);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value) {
    		if ($$self.$$.not_equal(contract.contractDate, value)) {
    			contract.contractDate = value;
    			$$invalidate(4, contract);
    		}
    	}

    	const click_handler = () => {
    		openPolicyRequest(contract);
    	};

    	const click_handler_1 = () => {
    		$$invalidate(4, contract.policyRequest = undefined, contract);
    	};

    	function fileupload_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			policyRequestFileUpload = $$value;
    			$$invalidate(2, policyRequestFileUpload);
    		});
    	}

    	const click_handler_2 = () => {
    		openPolicy(contract);
    	};

    	const click_handler_3 = () => {
    		$$invalidate(4, contract.policy = undefined, contract);
    	};

    	function fileupload_binding_1($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			policyFileUpload = $$value;
    			$$invalidate(3, policyFileUpload);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('client' in $$props) $$invalidate(12, client = $$props.client);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('selectedContract' in $$props) $$invalidate(0, selectedContract = $$props.selectedContract);
    	};

    	$$self.$capture_state = () => ({
    		confirm,
    		snackbar,
    		l,
    		LayoutGrid,
    		Cell,
    		ClientContractService,
    		PaymentFrequency,
    		H2,
    		FormContainer,
    		LabelTextfieldToggle,
    		ServiceTypeSelection,
    		EuroTextfield,
    		Button: Button_1,
    		Label,
    		Icon: Icon$1,
    		PaymentFrequencySelection,
    		ContractorSelection,
    		FloatingActionButton,
    		StylizedCheckbox,
    		FileUpload,
    		H3,
    		Divider,
    		client,
    		edit,
    		selectedContract,
    		policyRequestFileUpload,
    		policyFileUpload,
    		contract,
    		addNewContract,
    		save,
    		upload,
    		policyRequestSubmit,
    		policySubmit,
    		openPolicy,
    		openPolicyRequest,
    		deleteContract,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('client' in $$props) $$invalidate(12, client = $$props.client);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('selectedContract' in $$props) $$invalidate(0, selectedContract = $$props.selectedContract);
    		if ('policyRequestFileUpload' in $$props) $$invalidate(2, policyRequestFileUpload = $$props.policyRequestFileUpload);
    		if ('policyFileUpload' in $$props) $$invalidate(3, policyFileUpload = $$props.policyFileUpload);
    		if ('contract' in $$props) $$invalidate(4, contract = $$props.contract);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedContract,
    		edit,
    		policyRequestFileUpload,
    		policyFileUpload,
    		contract,
    		$l,
    		save,
    		policyRequestSubmit,
    		policySubmit,
    		openPolicy,
    		openPolicyRequest,
    		deleteContract,
    		client,
    		labeltextfieldtoggle_value_binding,
    		servicetypeselection_service_binding,
    		stylizedcheckbox_value_binding,
    		contractorselection_partner_binding,
    		eurotextfield_integer_binding,
    		paymentfrequencyselection_paymentFrequency_binding,
    		labeltextfieldtoggle_value_binding_1,
    		click_handler,
    		click_handler_1,
    		fileupload_binding,
    		click_handler_2,
    		click_handler_3,
    		fileupload_binding_1
    	];
    }

    class Contract extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$R, safe_not_equal, { client: 12, edit: 1, selectedContract: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Contract",
    			options,
    			id: create_fragment$R.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*client*/ ctx[12] === undefined && !('client' in props)) {
    			console.warn("<Contract> was created without expected prop 'client'");
    		}

    		if (/*edit*/ ctx[1] === undefined && !('edit' in props)) {
    			console.warn("<Contract> was created without expected prop 'edit'");
    		}

    		if (/*selectedContract*/ ctx[0] === undefined && !('selectedContract' in props)) {
    			console.warn("<Contract> was created without expected prop 'selectedContract'");
    		}
    	}

    	get client() {
    		throw new Error("<Contract>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set client(value) {
    		throw new Error("<Contract>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<Contract>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<Contract>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedContract() {
    		throw new Error("<Contract>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedContract(value) {
    		throw new Error("<Contract>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const formatCreatedAt = (createdAt) => {
        if (createdAt.includes("T")) {
            return createdAt.split("T")[0];
        }
        return createdAt;
    };

    /* src/components/client/Documents.svelte generated by Svelte v3.44.3 */
    const file$F = "src/components/client/Documents.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	return child_ctx;
    }

    // (85:8) <Label>
    function create_default_slot_24$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24$1.name,
    		type: "slot",
    		source: "(85:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (86:8) <IconButton class="material-icons">
    function create_default_slot_23$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23$1.name,
    		type: "slot",
    		source: "(86:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (84:6) <Cell columnId="file.fileName" style="width: 100%;">
    function create_default_slot_22$1(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_24$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_23$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$1.name,
    		type: "slot",
    		source: "(84:6) <Cell columnId=\\\"file.fileName\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (89:8) <Label>
    function create_default_slot_21$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Art");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$1.name,
    		type: "slot",
    		source: "(89:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (90:8) <IconButton class="material-icons">
    function create_default_slot_20$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$3.name,
    		type: "slot",
    		source: "(90:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (88:6) <Cell columnId="type" >
    function create_default_slot_19$3(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_21$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_20$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$3.name,
    		type: "slot",
    		source: "(88:6) <Cell columnId=\\\"type\\\" >",
    		ctx
    	});

    	return block;
    }

    // (93:8) <Label>
    function create_default_slot_18$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Erstellungsdatum");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$3.name,
    		type: "slot",
    		source: "(93:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (94:8) <IconButton class="material-icons">
    function create_default_slot_17$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$4.name,
    		type: "slot",
    		source: "(94:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (92:6) <Cell columnId="createdAt" >
    function create_default_slot_16$4(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_18$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_17$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$4.name,
    		type: "slot",
    		source: "(92:6) <Cell columnId=\\\"createdAt\\\" >",
    		ctx
    	});

    	return block;
    }

    // (97:8) <Label>
    function create_default_slot_15$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Löschen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$5.name,
    		type: "slot",
    		source: "(97:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (96:6) <Cell sortable={false} columnId="remove" >
    function create_default_slot_14$7(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_15$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$7.name,
    		type: "slot",
    		source: "(96:6) <Cell sortable={false} columnId=\\\"remove\\\" >",
    		ctx
    	});

    	return block;
    }

    // (83:4) <Row>
    function create_default_slot_13$9(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				columnId: "file.fileName",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_22$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				columnId: "type",
    				$$slots: { default: [create_default_slot_19$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				columnId: "createdAt",
    				$$slots: { default: [create_default_slot_16$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				sortable: false,
    				columnId: "remove",
    				$$slots: { default: [create_default_slot_14$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$9.name,
    		type: "slot",
    		source: "(83:4) <Row>",
    		ctx
    	});

    	return block;
    }

    // (82:2) <Head>
    function create_default_slot_12$9(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_13$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$9.name,
    		type: "slot",
    		source: "(82:2) <Head>",
    		ctx
    	});

    	return block;
    }

    // (104:8) <Cell class='pointer' on:click={() => openDocument(doc)}>
    function create_default_slot_11$9(ctx) {
    	let t_value = /*doc*/ ctx[26].file.fileName + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 32 && t_value !== (t_value = /*doc*/ ctx[26].file.fileName + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$9.name,
    		type: "slot",
    		source: "(104:8) <Cell class='pointer' on:click={() => openDocument(doc)}>",
    		ctx
    	});

    	return block;
    }

    // (105:8) <Cell on:click={() => openDocument(doc)}>
    function create_default_slot_10$9(ctx) {
    	let t_value = /*translateType*/ ctx[11](/*doc*/ ctx[26].type) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 32 && t_value !== (t_value = /*translateType*/ ctx[11](/*doc*/ ctx[26].type) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$9.name,
    		type: "slot",
    		source: "(105:8) <Cell on:click={() => openDocument(doc)}>",
    		ctx
    	});

    	return block;
    }

    // (106:8) <Cell on:click={() => openDocument(doc)}>
    function create_default_slot_9$9(ctx) {
    	let t_value = formatCreatedAt(/*doc*/ ctx[26].createdAt) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 32 && t_value !== (t_value = formatCreatedAt(/*doc*/ ctx[26].createdAt) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$9.name,
    		type: "slot",
    		source: "(106:8) <Cell on:click={() => openDocument(doc)}>",
    		ctx
    	});

    	return block;
    }

    // (108:12) <Icon class="material-icons primary">
    function create_default_slot_8$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$b.name,
    		type: "slot",
    		source: "(108:12) <Icon class=\\\"material-icons primary\\\">",
    		ctx
    	});

    	return block;
    }

    // (107:8) <Cell class='pointer' on:click={() => removeDocument(doc)}>
    function create_default_slot_7$c(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons primary",
    				$$slots: { default: [create_default_slot_8$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$c.name,
    		type: "slot",
    		source: "(107:8) <Cell class='pointer' on:click={() => removeDocument(doc)}>",
    		ctx
    	});

    	return block;
    }

    // (103:6) <Row>
    function create_default_slot_6$h(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[14](/*doc*/ ctx[26]);
    	}

    	cell0 = new Cell$2({
    			props: {
    				class: "pointer",
    				$$slots: { default: [create_default_slot_11$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell0.$on("click", click_handler);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[15](/*doc*/ ctx[26]);
    	}

    	cell1 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_10$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1.$on("click", click_handler_1);

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[16](/*doc*/ ctx[26]);
    	}

    	cell2 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_9$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2.$on("click", click_handler_2);

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[17](/*doc*/ ctx[26]);
    	}

    	cell3 = new Cell$2({
    			props: {
    				class: "pointer",
    				$$slots: { default: [create_default_slot_7$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3.$on("click", click_handler_3);

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const cell0_changes = {};

    			if (dirty & /*$$scope, filtered*/ 536870944) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, filtered*/ 536870944) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, filtered*/ 536870944) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$h.name,
    		type: "slot",
    		source: "(103:6) <Row>",
    		ctx
    	});

    	return block;
    }

    // (102:4) {#each filtered as doc}
    function create_each_block$c(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_6$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope, filtered*/ 536870944) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(102:4) {#each filtered as doc}",
    		ctx
    	});

    	return block;
    }

    // (101:2) <Body>
    function create_default_slot_5$h(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*removeDocument, filtered, openDocument, formatCreatedAt, translateType*/ 3360) {
    				each_value = /*filtered*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$h.name,
    		type: "slot",
    		source: "(101:2) <Body>",
    		ctx
    	});

    	return block;
    }

    // (74:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:SMUIDataTable:sorted={() => {sortFunction()}}   table$aria-label="Document list"   style="width: 100%;" >
    function create_default_slot_4$j(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_12$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_5$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered*/ 536870944) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$j.name,
    		type: "slot",
    		source: "(74:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:SMUIDataTable:sorted={() => {sortFunction()}}   table$aria-label=\\\"Document list\\\"   style=\\\"width: 100%;\\\" >",
    		ctx
    	});

    	return block;
    }

    // (117:4) <H3>
    function create_default_slot_3$m(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Neues Dokument hinzufügen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$m.name,
    		type: "slot",
    		source: "(117:4) <H3>",
    		ctx
    	});

    	return block;
    }

    // (123:6) <FormField>
    function create_default_slot_2$o(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding(value) {
    		/*radio_group_binding*/ ctx[22](value);
    	}

    	let radio_props = {
    		value: ClientDocumentType.GENERIC,
    		touch: true
    	};

    	if (/*newDocumentType*/ ctx[4] !== void 0) {
    		radio_props.group = /*newDocumentType*/ ctx[4];
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*newDocumentType*/ 16) {
    				updating_group = true;
    				radio_changes.group = /*newDocumentType*/ ctx[4];
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$o.name,
    		type: "slot",
    		source: "(123:6) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (125:10) 
    function create_label_slot_2$2(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[6].document.general + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$F, 124, 10, 4425);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 64 && t_value !== (t_value = /*$l*/ ctx[6].document.general + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2$2.name,
    		type: "slot",
    		source: "(125:10) ",
    		ctx
    	});

    	return block;
    }

    // (127:6) <FormField>
    function create_default_slot_1$q(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_1(value) {
    		/*radio_group_binding_1*/ ctx[23](value);
    	}

    	let radio_props = {
    		value: ClientDocumentType.ANNUAL_SERVICE,
    		touch: true
    	};

    	if (/*newDocumentType*/ ctx[4] !== void 0) {
    		radio_props.group = /*newDocumentType*/ ctx[4];
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_1));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*newDocumentType*/ 16) {
    				updating_group = true;
    				radio_changes.group = /*newDocumentType*/ ctx[4];
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$q.name,
    		type: "slot",
    		source: "(127:6) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (129:10) 
    function create_label_slot_1$3(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[6].document.annualService + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$F, 128, 10, 4616);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 64 && t_value !== (t_value = /*$l*/ ctx[6].document.annualService + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1$3.name,
    		type: "slot",
    		source: "(129:10) ",
    		ctx
    	});

    	return block;
    }

    // (131:6) <FormField>
    function create_default_slot$v(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_2(value) {
    		/*radio_group_binding_2*/ ctx[24](value);
    	}

    	let radio_props = {
    		value: ClientDocumentType.POLICY_SERVICE,
    		touch: true
    	};

    	if (/*newDocumentType*/ ctx[4] !== void 0) {
    		radio_props.group = /*newDocumentType*/ ctx[4];
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_2));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*newDocumentType*/ 16) {
    				updating_group = true;
    				radio_changes.group = /*newDocumentType*/ ctx[4];
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$v.name,
    		type: "slot",
    		source: "(131:6) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (133:10) 
    function create_label_slot$5(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[6].document.policyService + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$F, 132, 10, 4813);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 64 && t_value !== (t_value = /*$l*/ ctx[6].document.policyService + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$5.name,
    		type: "slot",
    		source: "(133:10) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Q(ctx) {
    	let searchbar;
    	let updating_value;
    	let t0;
    	let datatable;
    	let updating_sort;
    	let updating_sortDirection;
    	let t1;
    	let div4;
    	let divider;
    	let t2;
    	let h3;
    	let t3;
    	let div3;
    	let div0;
    	let fileupload;
    	let t4;
    	let div1;
    	let formfield0;
    	let t5;
    	let formfield1;
    	let t6;
    	let formfield2;
    	let t7;
    	let div2;
    	let floatingactionbutton;
    	let current;

    	function searchbar_value_binding(value) {
    		/*searchbar_value_binding*/ ctx[13](value);
    	}

    	let searchbar_props = {};

    	if (/*filterValue*/ ctx[0] !== void 0) {
    		searchbar_props.value = /*filterValue*/ ctx[0];
    	}

    	searchbar = new Searchbar({ props: searchbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(searchbar, 'value', searchbar_value_binding));

    	function datatable_sort_binding(value) {
    		/*datatable_sort_binding*/ ctx[18](value);
    	}

    	function datatable_sortDirection_binding(value) {
    		/*datatable_sortDirection_binding*/ ctx[19](value);
    	}

    	let datatable_props = {
    		sortable: true,
    		"table$aria-label": "Document list",
    		style: "width: 100%;",
    		$$slots: { default: [create_default_slot_4$j] },
    		$$scope: { ctx }
    	};

    	if (/*sort*/ ctx[2] !== void 0) {
    		datatable_props.sort = /*sort*/ ctx[2];
    	}

    	if (/*sortDirection*/ ctx[3] !== void 0) {
    		datatable_props.sortDirection = /*sortDirection*/ ctx[3];
    	}

    	datatable = new DataTable({ props: datatable_props, $$inline: true });
    	binding_callbacks.push(() => bind(datatable, 'sort', datatable_sort_binding));
    	binding_callbacks.push(() => bind(datatable, 'sortDirection', datatable_sortDirection_binding));
    	datatable.$on("SMUIDataTable:sorted", /*SMUIDataTable_sorted_handler*/ ctx[20]);
    	divider = new Divider({ $$inline: true });

    	h3 = new H3({
    			props: {
    				$$slots: { default: [create_default_slot_3$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let fileupload_props = {};
    	fileupload = new FileUpload({ props: fileupload_props, $$inline: true });
    	/*fileupload_binding*/ ctx[21](fileupload);
    	fileupload.$on("submit", /*addDocument*/ ctx[9]);

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_2$2],
    					default: [create_default_slot_2$o]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_1$3],
    					default: [create_default_slot_1$q]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield2 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$5],
    					default: [create_default_slot$v]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	floatingactionbutton = new FloatingActionButton({
    			props: { float: false, label: /*$l*/ ctx[6].add },
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*click_handler_4*/ ctx[25]);

    	const block = {
    		c: function create() {
    			create_component(searchbar.$$.fragment);
    			t0 = space();
    			create_component(datatable.$$.fragment);
    			t1 = space();
    			div4 = element("div");
    			create_component(divider.$$.fragment);
    			t2 = space();
    			create_component(h3.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			div0 = element("div");
    			create_component(fileupload.$$.fragment);
    			t4 = space();
    			div1 = element("div");
    			create_component(formfield0.$$.fragment);
    			t5 = space();
    			create_component(formfield1.$$.fragment);
    			t6 = space();
    			create_component(formfield2.$$.fragment);
    			t7 = space();
    			div2 = element("div");
    			create_component(floatingactionbutton.$$.fragment);
    			attr_dev(div0, "class", "upload-container svelte-igs8jj");
    			add_location(div0, file$F, 118, 4, 4164);
    			attr_dev(div1, "class", "radio-container svelte-igs8jj");
    			add_location(div1, file$F, 121, 4, 4278);
    			attr_dev(div2, "class", "action-container svelte-igs8jj");
    			add_location(div2, file$F, 135, 4, 4901);
    			attr_dev(div3, "class", "input-container svelte-igs8jj");
    			add_location(div3, file$F, 117, 2, 4130);
    			attr_dev(div4, "class", "footer svelte-igs8jj");
    			add_location(div4, file$F, 114, 0, 4055);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(datatable, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div4, anchor);
    			mount_component(divider, div4, null);
    			append_dev(div4, t2);
    			mount_component(h3, div4, null);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			mount_component(fileupload, div0, null);
    			append_dev(div3, t4);
    			append_dev(div3, div1);
    			mount_component(formfield0, div1, null);
    			append_dev(div1, t5);
    			mount_component(formfield1, div1, null);
    			append_dev(div1, t6);
    			mount_component(formfield2, div1, null);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			mount_component(floatingactionbutton, div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const searchbar_changes = {};

    			if (!updating_value && dirty & /*filterValue*/ 1) {
    				updating_value = true;
    				searchbar_changes.value = /*filterValue*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			searchbar.$set(searchbar_changes);
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered*/ 536870944) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_sort && dirty & /*sort*/ 4) {
    				updating_sort = true;
    				datatable_changes.sort = /*sort*/ ctx[2];
    				add_flush_callback(() => updating_sort = false);
    			}

    			if (!updating_sortDirection && dirty & /*sortDirection*/ 8) {
    				updating_sortDirection = true;
    				datatable_changes.sortDirection = /*sortDirection*/ ctx[3];
    				add_flush_callback(() => updating_sortDirection = false);
    			}

    			datatable.$set(datatable_changes);
    			const h3_changes = {};

    			if (dirty & /*$$scope*/ 536870912) {
    				h3_changes.$$scope = { dirty, ctx };
    			}

    			h3.$set(h3_changes);
    			const fileupload_changes = {};
    			fileupload.$set(fileupload_changes);
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, $l, newDocumentType*/ 536870992) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, $l, newDocumentType*/ 536870992) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);
    			const formfield2_changes = {};

    			if (dirty & /*$$scope, $l, newDocumentType*/ 536870992) {
    				formfield2_changes.$$scope = { dirty, ctx };
    			}

    			formfield2.$set(formfield2_changes);
    			const floatingactionbutton_changes = {};
    			if (dirty & /*$l*/ 64) floatingactionbutton_changes.label = /*$l*/ ctx[6].add;
    			floatingactionbutton.$set(floatingactionbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			transition_in(divider.$$.fragment, local);
    			transition_in(h3.$$.fragment, local);
    			transition_in(fileupload.$$.fragment, local);
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(formfield2.$$.fragment, local);
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			transition_out(divider.$$.fragment, local);
    			transition_out(h3.$$.fragment, local);
    			transition_out(fileupload.$$.fragment, local);
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(formfield2.$$.fragment, local);
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(datatable, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div4);
    			destroy_component(divider);
    			destroy_component(h3);
    			/*fileupload_binding*/ ctx[21](null);
    			destroy_component(fileupload);
    			destroy_component(formfield0);
    			destroy_component(formfield1);
    			destroy_component(formfield2);
    			destroy_component(floatingactionbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let filterValue;
    	let filtered;
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(6, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Documents', slots, []);
    	let { client } = $$props;
    	let fileUpload;
    	let sort = 'createdAt';
    	let sortDirection = 'ascending';
    	const sortFunction = () => $$invalidate(5, filtered = filtered.sort(sortFunc(sort, sortDirection)));

    	function removeDocument(doc) {
    		confirm.set({
    			title: 'Dokument löschen?',
    			message: 'Dokument unwiderruflich löschen?',
    			func: () => {
    				let id = doc.id;

    				ClientDocumentService.delete(id).then(_ => {
    					let temp = client.documents;
    					let index = client.documents.findIndex(d => d.id == id);
    					temp.splice(index, 1);
    					$$invalidate(12, client.documents = temp, client);
    				});
    			}
    		});
    	}

    	function addDocument(e) {
    		ClientDocumentService.upload({
    			clientId: client.id,
    			type: newDocumentType,
    			file: e.detail.file,
    			fileExtension: e.detail.file.type,
    			fileName: e.detail.file.name
    		}).then(response => {
    			snackbar.set(response.file.fileName + " wurde hochgeladen.");

    			let doc = {
    				id: response.id,
    				type: newDocumentType,
    				createdAt: 'gerade eben',
    				file: {
    					fileName: response.file.fileName,
    					fileExtension: response.file.fileExtension
    				}
    			};

    			let temp = client.documents;
    			temp.push(doc);
    			$$invalidate(12, client.documents = temp, client);
    			fileUpload.clear();
    			$$invalidate(4, newDocumentType = ClientDocumentType.GENERIC);
    		});
    	}

    	function openDocument(doc) {
    		ClientDocumentService.get(doc.id).then(response => window.open(response));
    	}

    	const translateType = type => {
    		switch (type) {
    			case ClientDocumentType.GENERIC:
    				return $l.document.general;
    			case ClientDocumentType.ANNUAL_SERVICE:
    				return $l.document.annualService;
    			case ClientDocumentType.POLICY_SERVICE:
    				return $l.document.policyService;
    		}
    	};

    	let newDocumentType = ClientDocumentType.GENERIC;
    	const writable_props = ['client'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Documents> was created with unknown prop '${key}'`);
    	});

    	function searchbar_value_binding(value) {
    		filterValue = value;
    		$$invalidate(0, filterValue);
    	}

    	const click_handler = doc => openDocument(doc);
    	const click_handler_1 = doc => openDocument(doc);
    	const click_handler_2 = doc => openDocument(doc);
    	const click_handler_3 = doc => removeDocument(doc);

    	function datatable_sort_binding(value) {
    		sort = value;
    		$$invalidate(2, sort);
    	}

    	function datatable_sortDirection_binding(value) {
    		sortDirection = value;
    		$$invalidate(3, sortDirection);
    	}

    	const SMUIDataTable_sorted_handler = () => {
    		sortFunction();
    	};

    	function fileupload_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			fileUpload = $$value;
    			$$invalidate(1, fileUpload);
    		});
    	}

    	function radio_group_binding(value) {
    		newDocumentType = value;
    		$$invalidate(4, newDocumentType);
    	}

    	function radio_group_binding_1(value) {
    		newDocumentType = value;
    		$$invalidate(4, newDocumentType);
    	}

    	function radio_group_binding_2(value) {
    		newDocumentType = value;
    		$$invalidate(4, newDocumentType);
    	}

    	const click_handler_4 = () => fileUpload.trigger();

    	$$self.$$set = $$props => {
    		if ('client' in $$props) $$invalidate(12, client = $$props.client);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		confirm,
    		snackbar,
    		ClientDocumentService,
    		ClientDocumentType,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		IconButton,
    		Radio,
    		FormField,
    		Icon: Icon$1,
    		FloatingActionButton,
    		Searchbar,
    		sortFunc,
    		FileUpload,
    		H3,
    		Divider,
    		formatCreatedAt,
    		client,
    		fileUpload,
    		sort,
    		sortDirection,
    		sortFunction,
    		removeDocument,
    		addDocument,
    		openDocument,
    		translateType,
    		newDocumentType,
    		filtered,
    		filterValue,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('client' in $$props) $$invalidate(12, client = $$props.client);
    		if ('fileUpload' in $$props) $$invalidate(1, fileUpload = $$props.fileUpload);
    		if ('sort' in $$props) $$invalidate(2, sort = $$props.sort);
    		if ('sortDirection' in $$props) $$invalidate(3, sortDirection = $$props.sortDirection);
    		if ('newDocumentType' in $$props) $$invalidate(4, newDocumentType = $$props.newDocumentType);
    		if ('filtered' in $$props) $$invalidate(5, filtered = $$props.filtered);
    		if ('filterValue' in $$props) $$invalidate(0, filterValue = $$props.filterValue);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*client, filterValue*/ 4097) {
    			$$invalidate(5, filtered = client.documents.filter(s => s.file.fileName.includes(filterValue)));
    		}
    	};

    	$$invalidate(0, filterValue = "");

    	return [
    		filterValue,
    		fileUpload,
    		sort,
    		sortDirection,
    		newDocumentType,
    		filtered,
    		$l,
    		sortFunction,
    		removeDocument,
    		addDocument,
    		openDocument,
    		translateType,
    		client,
    		searchbar_value_binding,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		datatable_sort_binding,
    		datatable_sortDirection_binding,
    		SMUIDataTable_sorted_handler,
    		fileupload_binding,
    		radio_group_binding,
    		radio_group_binding_1,
    		radio_group_binding_2,
    		click_handler_4
    	];
    }

    class Documents extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$J, create_fragment$Q, safe_not_equal, { client: 12 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Documents",
    			options,
    			id: create_fragment$Q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*client*/ ctx[12] === undefined && !('client' in props)) {
    			console.warn("<Documents> was created without expected prop 'client'");
    		}
    	}

    	get client() {
    		throw new Error("<Documents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set client(value) {
    		throw new Error("<Documents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/Client.svelte generated by Svelte v3.44.3 */
    const file$E = "src/routes/Client.svelte";

    // (83:12) <TabIcon class="material-icons">
    function create_default_slot_4$i(ctx) {
    	let t_value = /*tab*/ ctx[25].icon + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tab*/ 33554432 && t_value !== (t_value = /*tab*/ ctx[25].icon + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$i.name,
    		type: "slot",
    		source: "(83:12) <TabIcon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (84:12) <TabLabel>
    function create_default_slot_3$l(ctx) {
    	let t_value = /*tab*/ ctx[25].label + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tab*/ 33554432 && t_value !== (t_value = /*tab*/ ctx[25].label + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$l.name,
    		type: "slot",
    		source: "(84:12) <TabLabel>",
    		ctx
    	});

    	return block;
    }

    // (82:8) <Tab {tab} on:click={() => resetTabs()}>
    function create_default_slot_2$n(ctx) {
    	let tabicon;
    	let t;
    	let tablabel;
    	let current;

    	tabicon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_4$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tablabel = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_3$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tabicon.$$.fragment);
    			t = space();
    			create_component(tablabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tabicon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(tablabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tabicon_changes = {};

    			if (dirty & /*$$scope, tab*/ 100663296) {
    				tabicon_changes.$$scope = { dirty, ctx };
    			}

    			tabicon.$set(tabicon_changes);
    			const tablabel_changes = {};

    			if (dirty & /*$$scope, tab*/ 100663296) {
    				tablabel_changes.$$scope = { dirty, ctx };
    			}

    			tablabel.$set(tablabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabicon.$$.fragment, local);
    			transition_in(tablabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabicon.$$.fragment, local);
    			transition_out(tablabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tabicon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(tablabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$n.name,
    		type: "slot",
    		source: "(82:8) <Tab {tab} on:click={() => resetTabs()}>",
    		ctx
    	});

    	return block;
    }

    // (81:4) <TabBar {tabs} let:tab bind:active>
    function create_default_slot_1$p(ctx) {
    	let tab;
    	let current;

    	tab = new Tab({
    			props: {
    				tab: /*tab*/ ctx[25],
    				$$slots: { default: [create_default_slot_2$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab.$on("click", /*click_handler*/ ctx[10]);

    	const block = {
    		c: function create() {
    			create_component(tab.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab_changes = {};
    			if (dirty & /*tab*/ 33554432) tab_changes.tab = /*tab*/ ctx[25];

    			if (dirty & /*$$scope, tab*/ 100663296) {
    				tab_changes.$$scope = { dirty, ctx };
    			}

    			tab.$set(tab_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$p.name,
    		type: "slot",
    		source: "(81:4) <TabBar {tabs} let:tab bind:active>",
    		ctx
    	});

    	return block;
    }

    // (100:43) 
    function create_if_block_6$1(ctx) {
    	let documents;
    	let updating_client;
    	let current;

    	function documents_client_binding(value) {
    		/*documents_client_binding*/ ctx[21](value);
    	}

    	let documents_props = {};

    	if (/*client*/ ctx[1] !== void 0) {
    		documents_props.client = /*client*/ ctx[1];
    	}

    	documents = new Documents({ props: documents_props, $$inline: true });
    	binding_callbacks.push(() => bind(documents, 'client', documents_client_binding));

    	const block = {
    		c: function create() {
    			create_component(documents.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(documents, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const documents_changes = {};

    			if (!updating_client && dirty & /*client*/ 2) {
    				updating_client = true;
    				documents_changes.client = /*client*/ ctx[1];
    				add_flush_callback(() => updating_client = false);
    			}

    			documents.$set(documents_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(documents.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(documents.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(documents, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(100:43) ",
    		ctx
    	});

    	return block;
    }

    // (93:43) 
    function create_if_block_4$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_5$1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (!/*selectedContract*/ ctx[3].add && !/*selectedContract*/ ctx[3].edit) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(93:43) ",
    		ctx
    	});

    	return block;
    }

    // (91:39) 
    function create_if_block_3$1(ctx) {
    	let legal;
    	let updating_client;
    	let updating_edit;
    	let current;

    	function legal_client_binding(value) {
    		/*legal_client_binding*/ ctx[14](value);
    	}

    	function legal_edit_binding(value) {
    		/*legal_edit_binding*/ ctx[15](value);
    	}

    	let legal_props = {};

    	if (/*client*/ ctx[1] !== void 0) {
    		legal_props.client = /*client*/ ctx[1];
    	}

    	if (/*edit*/ ctx[2] !== void 0) {
    		legal_props.edit = /*edit*/ ctx[2];
    	}

    	legal = new Legal({ props: legal_props, $$inline: true });
    	binding_callbacks.push(() => bind(legal, 'client', legal_client_binding));
    	binding_callbacks.push(() => bind(legal, 'edit', legal_edit_binding));

    	const block = {
    		c: function create() {
    			create_component(legal.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(legal, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const legal_changes = {};

    			if (!updating_client && dirty & /*client*/ 2) {
    				updating_client = true;
    				legal_changes.client = /*client*/ ctx[1];
    				add_flush_callback(() => updating_client = false);
    			}

    			if (!updating_edit && dirty & /*edit*/ 4) {
    				updating_edit = true;
    				legal_changes.edit = /*edit*/ ctx[2];
    				add_flush_callback(() => updating_edit = false);
    			}

    			legal.$set(legal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(legal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(legal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(legal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(91:39) ",
    		ctx
    	});

    	return block;
    }

    // (89:8) {#if active.id == "personal"}
    function create_if_block_2$3(ctx) {
    	let personalcomponent;
    	let updating_client;
    	let updating_edit;
    	let current;

    	function personalcomponent_client_binding(value) {
    		/*personalcomponent_client_binding*/ ctx[12](value);
    	}

    	function personalcomponent_edit_binding(value) {
    		/*personalcomponent_edit_binding*/ ctx[13](value);
    	}

    	let personalcomponent_props = {};

    	if (/*client*/ ctx[1] !== void 0) {
    		personalcomponent_props.client = /*client*/ ctx[1];
    	}

    	if (/*edit*/ ctx[2] !== void 0) {
    		personalcomponent_props.edit = /*edit*/ ctx[2];
    	}

    	personalcomponent = new PersonalComponent({
    			props: personalcomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(personalcomponent, 'client', personalcomponent_client_binding));
    	binding_callbacks.push(() => bind(personalcomponent, 'edit', personalcomponent_edit_binding));

    	const block = {
    		c: function create() {
    			create_component(personalcomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(personalcomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const personalcomponent_changes = {};

    			if (!updating_client && dirty & /*client*/ 2) {
    				updating_client = true;
    				personalcomponent_changes.client = /*client*/ ctx[1];
    				add_flush_callback(() => updating_client = false);
    			}

    			if (!updating_edit && dirty & /*edit*/ 4) {
    				updating_edit = true;
    				personalcomponent_changes.edit = /*edit*/ ctx[2];
    				add_flush_callback(() => updating_edit = false);
    			}

    			personalcomponent.$set(personalcomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(personalcomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(personalcomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(personalcomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(89:8) {#if active.id == \\\"personal\\\"}",
    		ctx
    	});

    	return block;
    }

    // (97:12) {:else}
    function create_else_block_1(ctx) {
    	let contract;
    	let updating_client;
    	let updating_selectedContract;
    	let current;

    	function contract_client_binding(value) {
    		/*contract_client_binding*/ ctx[19](value);
    	}

    	function contract_selectedContract_binding(value) {
    		/*contract_selectedContract_binding*/ ctx[20](value);
    	}

    	let contract_props = { edit: true };

    	if (/*client*/ ctx[1] !== void 0) {
    		contract_props.client = /*client*/ ctx[1];
    	}

    	if (/*selectedContract*/ ctx[3] !== void 0) {
    		contract_props.selectedContract = /*selectedContract*/ ctx[3];
    	}

    	contract = new Contract({ props: contract_props, $$inline: true });
    	binding_callbacks.push(() => bind(contract, 'client', contract_client_binding));
    	binding_callbacks.push(() => bind(contract, 'selectedContract', contract_selectedContract_binding));

    	const block = {
    		c: function create() {
    			create_component(contract.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contract, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contract_changes = {};

    			if (!updating_client && dirty & /*client*/ 2) {
    				updating_client = true;
    				contract_changes.client = /*client*/ ctx[1];
    				add_flush_callback(() => updating_client = false);
    			}

    			if (!updating_selectedContract && dirty & /*selectedContract*/ 8) {
    				updating_selectedContract = true;
    				contract_changes.selectedContract = /*selectedContract*/ ctx[3];
    				add_flush_callback(() => updating_selectedContract = false);
    			}

    			contract.$set(contract_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contract.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contract.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contract, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(97:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (94:12) {#if !selectedContract.add && !selectedContract.edit }
    function create_if_block_5$1(ctx) {
    	let contracts;
    	let updating_client;
    	let updating_selectedContract;
    	let t;
    	let floatingactionbutton;
    	let current;

    	function contracts_client_binding(value) {
    		/*contracts_client_binding*/ ctx[16](value);
    	}

    	function contracts_selectedContract_binding(value) {
    		/*contracts_selectedContract_binding*/ ctx[17](value);
    	}

    	let contracts_props = {};

    	if (/*client*/ ctx[1] !== void 0) {
    		contracts_props.client = /*client*/ ctx[1];
    	}

    	if (/*selectedContract*/ ctx[3] !== void 0) {
    		contracts_props.selectedContract = /*selectedContract*/ ctx[3];
    	}

    	contracts = new Contracts({ props: contracts_props, $$inline: true });
    	binding_callbacks.push(() => bind(contracts, 'client', contracts_client_binding));
    	binding_callbacks.push(() => bind(contracts, 'selectedContract', contracts_selectedContract_binding));

    	floatingactionbutton = new FloatingActionButton({
    			props: { icon: "add", label: /*$l*/ ctx[4].add },
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*click_handler_1*/ ctx[18]);

    	const block = {
    		c: function create() {
    			create_component(contracts.$$.fragment);
    			t = space();
    			create_component(floatingactionbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contracts, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(floatingactionbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contracts_changes = {};

    			if (!updating_client && dirty & /*client*/ 2) {
    				updating_client = true;
    				contracts_changes.client = /*client*/ ctx[1];
    				add_flush_callback(() => updating_client = false);
    			}

    			if (!updating_selectedContract && dirty & /*selectedContract*/ 8) {
    				updating_selectedContract = true;
    				contracts_changes.selectedContract = /*selectedContract*/ ctx[3];
    				add_flush_callback(() => updating_selectedContract = false);
    			}

    			contracts.$set(contracts_changes);
    			const floatingactionbutton_changes = {};
    			if (dirty & /*$l*/ 16) floatingactionbutton_changes.label = /*$l*/ ctx[4].add;
    			floatingactionbutton.$set(floatingactionbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contracts.$$.fragment, local);
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contracts.$$.fragment, local);
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contracts, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(floatingactionbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(94:12) {#if !selectedContract.add && !selectedContract.edit }",
    		ctx
    	});

    	return block;
    }

    // (104:4) {#if active.id != "contracts" && active.id != "documents"}
    function create_if_block$l(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$b, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (!/*edit*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(104:4) {#if active.id != \\\"contracts\\\" && active.id != \\\"documents\\\"}",
    		ctx
    	});

    	return block;
    }

    // (107:8) {:else}
    function create_else_block$5(ctx) {
    	let floatingactionbutton;
    	let current;

    	floatingactionbutton = new FloatingActionButton({
    			props: { icon: "save", label: /*$l*/ ctx[4].save },
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*save*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(floatingactionbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatingactionbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatingactionbutton_changes = {};
    			if (dirty & /*$l*/ 16) floatingactionbutton_changes.label = /*$l*/ ctx[4].save;
    			floatingactionbutton.$set(floatingactionbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(floatingactionbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(107:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (105:8) {#if !edit }
    function create_if_block_1$b(ctx) {
    	let floatingactionbutton;
    	let current;

    	floatingactionbutton = new FloatingActionButton({
    			props: { icon: "edit", label: /*$l*/ ctx[4].edit },
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*click_handler_2*/ ctx[22]);

    	const block = {
    		c: function create() {
    			create_component(floatingactionbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatingactionbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatingactionbutton_changes = {};
    			if (dirty & /*$l*/ 16) floatingactionbutton_changes.label = /*$l*/ ctx[4].edit;
    			floatingactionbutton.$set(floatingactionbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(floatingactionbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(105:8) {#if !edit }",
    		ctx
    	});

    	return block;
    }

    // (79:0) <FormContainer>
    function create_default_slot$u(ctx) {
    	let div1;
    	let tabbar;
    	let updating_active;
    	let t0;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t1;
    	let current;

    	function tabbar_active_binding(value) {
    		/*tabbar_active_binding*/ ctx[11](value);
    	}

    	let tabbar_props = {
    		tabs: /*tabs*/ ctx[5],
    		$$slots: {
    			default: [
    				create_default_slot_1$p,
    				({ tab }) => ({ 25: tab }),
    				({ tab }) => tab ? 33554432 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	if (/*active*/ ctx[0] !== void 0) {
    		tabbar_props.active = /*active*/ ctx[0];
    	}

    	tabbar = new TabBar({ props: tabbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(tabbar, 'active', tabbar_active_binding));
    	const if_block_creators = [create_if_block_2$3, create_if_block_3$1, create_if_block_4$1, create_if_block_6$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*active*/ ctx[0].id == "personal") return 0;
    		if (/*active*/ ctx[0].id == "legal") return 1;
    		if (/*active*/ ctx[0].id == "contracts") return 2;
    		if (/*active*/ ctx[0].id == "documents") return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	let if_block1 = /*active*/ ctx[0].id != "contracts" && /*active*/ ctx[0].id != "documents" && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(tabbar.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "container svelte-10dpyts");
    			add_location(div0, file$E, 87, 4, 2600);
    			attr_dev(div1, "class", "group svelte-10dpyts");
    			add_location(div1, file$E, 79, 2, 2347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(tabbar, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div0, null);
    			}

    			append_dev(div1, t1);
    			if (if_block1) if_block1.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tabbar_changes = {};

    			if (dirty & /*$$scope, tab*/ 100663296) {
    				tabbar_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_active && dirty & /*active*/ 1) {
    				updating_active = true;
    				tabbar_changes.active = /*active*/ ctx[0];
    				add_flush_callback(() => updating_active = false);
    			}

    			tabbar.$set(tabbar_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block0) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block0 = if_blocks[current_block_type_index];

    					if (!if_block0) {
    						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block0.c();
    					} else {
    						if_block0.p(ctx, dirty);
    					}

    					transition_in(if_block0, 1);
    					if_block0.m(div0, null);
    				} else {
    					if_block0 = null;
    				}
    			}

    			if (/*active*/ ctx[0].id != "contracts" && /*active*/ ctx[0].id != "documents") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*active*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$l(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tabbar.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tabbar.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(tabbar);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$u.name,
    		type: "slot",
    		source: "(79:0) <FormContainer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$P(ctx) {
    	let formcontainer;
    	let current;

    	formcontainer = new FormContainer({
    			props: {
    				$$slots: { default: [create_default_slot$u] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(formcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(formcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const formcontainer_changes = {};

    			if (dirty & /*$$scope, $l, edit, active, client, selectedContract*/ 67108895) {
    				formcontainer_changes.$$scope = { dirty, ctx };
    			}

    			formcontainer.$set(formcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(4, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Client', slots, []);
    	let { id } = $$props;
    	let { location } = $$props;
    	let client = createEmptyClientDto();
    	let newClient = id === 'new';

    	let tabs = [
    		{
    			id: "personal",
    			icon: "person",
    			label: "Personal"
    		},
    		{
    			id: "legal",
    			icon: "account_balance",
    			label: "Legal"
    		}
    	];

    	if (!newClient) {
    		ClientService.get(+id).then(response => $$invalidate(1, client = response));

    		tabs.push({
    			id: "contracts",
    			icon: "file_present",
    			label: "Polizzen"
    		});

    		tabs.push({
    			id: "documents",
    			icon: "article",
    			label: "Dokumente"
    		});
    	}

    	const getQueryTab = () => {
    		if (location.search) {
    			let query = location.search.substring(1);
    			let vars = query.split('&');

    			for (let i = 0; i < vars.length; i++) {
    				let pair = vars[i].split('=');

    				if (decodeURIComponent(pair[0]) == 'tab') {
    					return decodeURIComponent(pair[1]);
    				}
    			}
    		}

    		return "personal";
    	};

    	let active = tabs.find(tab => tab.id == getQueryTab());

    	function save() {
    		if (newClient) {
    			ClientService.add(client).then(_ => {
    				snackbar.set("Kunde angelegt");
    				navigate("/clients");
    			});
    		} else {
    			ClientService.update(client);
    		}

    		$$invalidate(2, edit = !edit);
    	}

    	let edit = newClient;
    	let selectedContract;

    	const resetTabs = () => {
    		$$invalidate(3, selectedContract = { id: 0, edit: false, add: false });
    	};

    	const writable_props = ['id', 'location'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Client> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => resetTabs();

    	function tabbar_active_binding(value) {
    		active = value;
    		$$invalidate(0, active);
    	}

    	function personalcomponent_client_binding(value) {
    		client = value;
    		$$invalidate(1, client);
    	}

    	function personalcomponent_edit_binding(value) {
    		edit = value;
    		$$invalidate(2, edit);
    	}

    	function legal_client_binding(value) {
    		client = value;
    		$$invalidate(1, client);
    	}

    	function legal_edit_binding(value) {
    		edit = value;
    		$$invalidate(2, edit);
    	}

    	function contracts_client_binding(value) {
    		client = value;
    		$$invalidate(1, client);
    	}

    	function contracts_selectedContract_binding(value) {
    		selectedContract = value;
    		$$invalidate(3, selectedContract);
    	}

    	const click_handler_1 = () => {
    		$$invalidate(3, selectedContract.add = true, selectedContract);
    		$$invalidate(3, selectedContract.edit = false, selectedContract);
    	};

    	function contract_client_binding(value) {
    		client = value;
    		$$invalidate(1, client);
    	}

    	function contract_selectedContract_binding(value) {
    		selectedContract = value;
    		$$invalidate(3, selectedContract);
    	}

    	function documents_client_binding(value) {
    		client = value;
    		$$invalidate(1, client);
    	}

    	const click_handler_2 = () => $$invalidate(2, edit = !edit);

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(8, id = $$props.id);
    		if ('location' in $$props) $$invalidate(9, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		snackbar,
    		Tab,
    		TabIcon: Icon$1,
    		TabLabel: Label,
    		TabBar,
    		ClientService,
    		PersonalComponent,
    		FormContainer,
    		Legal,
    		Contracts,
    		FloatingActionButton,
    		l,
    		Contract,
    		Documents,
    		createEmptyClientDto,
    		navigate,
    		id,
    		location,
    		client,
    		newClient,
    		tabs,
    		getQueryTab,
    		active,
    		save,
    		edit,
    		selectedContract,
    		resetTabs,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(8, id = $$props.id);
    		if ('location' in $$props) $$invalidate(9, location = $$props.location);
    		if ('client' in $$props) $$invalidate(1, client = $$props.client);
    		if ('newClient' in $$props) newClient = $$props.newClient;
    		if ('tabs' in $$props) $$invalidate(5, tabs = $$props.tabs);
    		if ('active' in $$props) $$invalidate(0, active = $$props.active);
    		if ('edit' in $$props) $$invalidate(2, edit = $$props.edit);
    		if ('selectedContract' in $$props) $$invalidate(3, selectedContract = $$props.selectedContract);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*active*/ 1) {
    			if (active.id !== 'contracts') {
    				resetTabs();
    			}
    		}
    	};

    	return [
    		active,
    		client,
    		edit,
    		selectedContract,
    		$l,
    		tabs,
    		save,
    		resetTabs,
    		id,
    		location,
    		click_handler,
    		tabbar_active_binding,
    		personalcomponent_client_binding,
    		personalcomponent_edit_binding,
    		legal_client_binding,
    		legal_edit_binding,
    		contracts_client_binding,
    		contracts_selectedContract_binding,
    		click_handler_1,
    		contract_client_binding,
    		contract_selectedContract_binding,
    		documents_client_binding,
    		click_handler_2
    	];
    }

    class Client extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$I, create_fragment$P, safe_not_equal, { id: 8, location: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Client",
    			options,
    			id: create_fragment$P.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[8] === undefined && !('id' in props)) {
    			console.warn("<Client> was created without expected prop 'id'");
    		}

    		if (/*location*/ ctx[9] === undefined && !('location' in props)) {
    			console.warn("<Client> was created without expected prop 'location'");
    		}
    	}

    	get id() {
    		throw new Error("<Client>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Client>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get location() {
    		throw new Error("<Client>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Client>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    let $l$2;
    l.subscribe(loc => $l$2 = loc);
    var TemplateType;
    (function (TemplateType) {
        TemplateType["file"] = "File";
        TemplateType["page"] = "Page";
    })(TemplateType || (TemplateType = {}));
    const needsAssessment = {
        name: $l$2.needsAssessment.title,
        type: TemplateType.page,
        path: "/needs_assessment",
        adminOnly: false
    };
    async function list() {
        const response = await TemplateService.list();
        let result = handleResult(response);
        result.push(needsAssessment);
        return result;
    }
    function handleResult(response) {
        return response.map(template => {
            return {
                name: template.file.fileName,
                id: template.id,
                type: TemplateType.file,
                adminOnly: template.adminOnly
            };
        });
    }

    /* src/components/AdminGuard.svelte generated by Svelte v3.44.3 */

    // (6:0) {#if inAdminMode}
    function create_if_block$k(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(6:0) {#if inAdminMode}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$O(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*inAdminMode*/ ctx[0] && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*inAdminMode*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*inAdminMode*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AdminGuard', slots, ['default']);
    	let inAdminMode = false;

    	admin.subscribe(value => {
    		$$invalidate(0, inAdminMode = value);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AdminGuard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ admin, inAdminMode });

    	$$self.$inject_state = $$props => {
    		if ('inAdminMode' in $$props) $$invalidate(0, inAdminMode = $$props.inAdminMode);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [inAdminMode, $$scope, slots];
    }

    class AdminGuard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$H, create_fragment$O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AdminGuard",
    			options,
    			id: create_fragment$O.name
    		});
    	}
    }

    /* src/routes/Templates.svelte generated by Svelte v3.44.3 */

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (47:0) <AdminGuard>
    function create_default_slot_20$2(ctx) {
    	let floatingactionbutton;
    	let current;
    	floatingactionbutton = new FloatingActionButton({ $$inline: true });
    	floatingactionbutton.$on("click", /*click_handler*/ ctx[10]);

    	const block = {
    		c: function create() {
    			create_component(floatingactionbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatingactionbutton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(floatingactionbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$2.name,
    		type: "slot",
    		source: "(47:0) <AdminGuard>",
    		ctx
    	});

    	return block;
    }

    // (62:8) <Label>
    function create_default_slot_19$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$2.name,
    		type: "slot",
    		source: "(62:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (63:8) <IconButton class="material-icons">
    function create_default_slot_18$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$2.name,
    		type: "slot",
    		source: "(63:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (61:6) <Cell columnId="name" style="width: 100%;">
    function create_default_slot_17$3(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_19$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_18$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$3.name,
    		type: "slot",
    		source: "(61:6) <Cell columnId=\\\"name\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (67:10) <Label>
    function create_default_slot_16$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Visible for Employees");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$3.name,
    		type: "slot",
    		source: "(67:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (68:10) <IconButton class="material-icons">
    function create_default_slot_15$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$4.name,
    		type: "slot",
    		source: "(68:10) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (66:8) <Cell columnId="adminOnly">
    function create_default_slot_14$6(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_16$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_15$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$6.name,
    		type: "slot",
    		source: "(66:8) <Cell columnId=\\\"adminOnly\\\">",
    		ctx
    	});

    	return block;
    }

    // (71:10) <Label>
    function create_default_slot_13$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Delete");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$8.name,
    		type: "slot",
    		source: "(71:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (70:8) <Cell columnId="delete">
    function create_default_slot_12$8(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_13$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$8.name,
    		type: "slot",
    		source: "(70:8) <Cell columnId=\\\"delete\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:6) <AdminGuard>
    function create_default_slot_11$8(ctx) {
    	let cell0;
    	let t;
    	let cell1;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				columnId: "adminOnly",
    				$$slots: { default: [create_default_slot_14$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				columnId: "delete",
    				$$slots: { default: [create_default_slot_12$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t = space();
    			create_component(cell1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(cell1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(cell1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$8.name,
    		type: "slot",
    		source: "(65:6) <AdminGuard>",
    		ctx
    	});

    	return block;
    }

    // (60:4) <Row>
    function create_default_slot_10$8(ctx) {
    	let cell;
    	let t;
    	let adminguard;
    	let current;

    	cell = new Cell$2({
    			props: {
    				columnId: "name",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_17$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	adminguard = new AdminGuard({
    			props: {
    				$$slots: { default: [create_default_slot_11$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    			t = space();
    			create_component(adminguard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(adminguard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    			const adminguard_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				adminguard_changes.$$scope = { dirty, ctx };
    			}

    			adminguard.$set(adminguard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			transition_in(adminguard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			transition_out(adminguard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(adminguard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$8.name,
    		type: "slot",
    		source: "(60:4) <Row>",
    		ctx
    	});

    	return block;
    }

    // (59:2) <Head>
    function create_default_slot_9$8(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_10$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$8.name,
    		type: "slot",
    		source: "(59:2) <Head>",
    		ctx
    	});

    	return block;
    }

    // (79:8) <Cell style="cursor:pointer;" on:click={() => openTemplate(item)}>
    function create_default_slot_8$a(ctx) {
    	let t_value = /*item*/ ctx[17].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[17].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$a.name,
    		type: "slot",
    		source: "(79:8) <Cell style=\\\"cursor:pointer;\\\" on:click={() => openTemplate(item)}>",
    		ctx
    	});

    	return block;
    }

    // (86:14) {:else}
    function create_else_block$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("task_alt");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(86:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (84:14) {#if item.adminOnly}
    function create_if_block_1$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("radio_button_unchecked");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(84:14) {#if item.adminOnly}",
    		ctx
    	});

    	return block;
    }

    // (83:12) <Icon class="material-icons">
    function create_default_slot_7$b(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[17].adminOnly) return create_if_block_1$a;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$b.name,
    		type: "slot",
    		source: "(83:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (81:10) <Cell style="{item.type == TemplateType.page ? 'cursor:not-allowed;' : 'cursor:pointer;'}"              on:click={() => changeVisibility(item)} >
    function create_default_slot_6$g(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_7$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$g.name,
    		type: "slot",
    		source: "(81:10) <Cell style=\\\"{item.type == TemplateType.page ? 'cursor:not-allowed;' : 'cursor:pointer;'}\\\"              on:click={() => changeVisibility(item)} >",
    		ctx
    	});

    	return block;
    }

    // (92:12) {#if item.type == TemplateType.file}
    function create_if_block$j(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_5$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(92:12) {#if item.type == TemplateType.file}",
    		ctx
    	});

    	return block;
    }

    // (93:14) <Icon class="material-icons">
    function create_default_slot_5$g(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$g.name,
    		type: "slot",
    		source: "(93:14) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (91:10) <Cell style="{item.type == TemplateType.page ? '' : 'cursor:pointer;'}" on:click={() => deleteTemplate(item)}>
    function create_default_slot_4$h(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*item*/ ctx[17].type == TemplateType.file && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*item*/ ctx[17].type == TemplateType.file) {
    				if (if_block) {
    					if (dirty & /*filtered*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$h.name,
    		type: "slot",
    		source: "(91:10) <Cell style=\\\"{item.type == TemplateType.page ? '' : 'cursor:pointer;'}\\\" on:click={() => deleteTemplate(item)}>",
    		ctx
    	});

    	return block;
    }

    // (80:8) <AdminGuard>
    function create_default_slot_3$k(ctx) {
    	let cell0;
    	let t;
    	let cell1;
    	let current;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[12](/*item*/ ctx[17]);
    	}

    	cell0 = new Cell$2({
    			props: {
    				style: /*item*/ ctx[17].type == TemplateType.page
    				? 'cursor:not-allowed;'
    				: 'cursor:pointer;',
    				$$slots: { default: [create_default_slot_6$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell0.$on("click", click_handler_2);

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[13](/*item*/ ctx[17]);
    	}

    	cell1 = new Cell$2({
    			props: {
    				style: /*item*/ ctx[17].type == TemplateType.page
    				? ''
    				: 'cursor:pointer;',
    				$$slots: { default: [create_default_slot_4$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1.$on("click", click_handler_3);

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t = space();
    			create_component(cell1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(cell1, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const cell0_changes = {};

    			if (dirty & /*filtered*/ 8) cell0_changes.style = /*item*/ ctx[17].type == TemplateType.page
    			? 'cursor:not-allowed;'
    			: 'cursor:pointer;';

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*filtered*/ 8) cell1_changes.style = /*item*/ ctx[17].type == TemplateType.page
    			? ''
    			: 'cursor:pointer;';

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(cell1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$k.name,
    		type: "slot",
    		source: "(80:8) <AdminGuard>",
    		ctx
    	});

    	return block;
    }

    // (78:6) <Row>
    function create_default_slot_2$m(ctx) {
    	let cell;
    	let t0;
    	let adminguard;
    	let t1;
    	let current;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[11](/*item*/ ctx[17]);
    	}

    	cell = new Cell$2({
    			props: {
    				style: "cursor:pointer;",
    				$$slots: { default: [create_default_slot_8$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell.$on("click", click_handler_1);

    	adminguard = new AdminGuard({
    			props: {
    				$$slots: { default: [create_default_slot_3$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    			t0 = space();
    			create_component(adminguard.$$.fragment);
    			t1 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(adminguard, target, anchor);
    			insert_dev(target, t1, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const cell_changes = {};

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    			const adminguard_changes = {};

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				adminguard_changes.$$scope = { dirty, ctx };
    			}

    			adminguard.$set(adminguard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			transition_in(adminguard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			transition_out(adminguard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(adminguard, detaching);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$m.name,
    		type: "slot",
    		source: "(78:6) <Row>",
    		ctx
    	});

    	return block;
    }

    // (77:4) {#each filtered as item }
    function create_each_block$b(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_2$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(77:4) {#each filtered as item }",
    		ctx
    	});

    	return block;
    }

    // (76:2) <Body>
    function create_default_slot_1$o(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered, TemplateType, deleteTemplate, changeVisibility, openTemplate*/ 232) {
    				each_value = /*filtered*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$o.name,
    		type: "slot",
    		source: "(76:2) <Body>",
    		ctx
    	});

    	return block;
    }

    // (51:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={() => sortFunction()}   table$aria-label="Template list"   style="width: 100%;" >
    function create_default_slot$t(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_9$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_1$o] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$t.name,
    		type: "slot",
    		source: "(51:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={() => sortFunction()}   table$aria-label=\\\"Template list\\\"   style=\\\"width: 100%;\\\" >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$N(ctx) {
    	let searchbar;
    	let updating_value;
    	let t0;
    	let adminguard;
    	let t1;
    	let datatable;
    	let updating_sort;
    	let updating_sortDirection;
    	let current;

    	function searchbar_value_binding(value) {
    		/*searchbar_value_binding*/ ctx[9](value);
    	}

    	let searchbar_props = {};

    	if (/*filterValue*/ ctx[0] !== void 0) {
    		searchbar_props.value = /*filterValue*/ ctx[0];
    	}

    	searchbar = new Searchbar({ props: searchbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(searchbar, 'value', searchbar_value_binding));

    	adminguard = new AdminGuard({
    			props: {
    				$$slots: { default: [create_default_slot_20$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function datatable_sort_binding(value) {
    		/*datatable_sort_binding*/ ctx[14](value);
    	}

    	function datatable_sortDirection_binding(value) {
    		/*datatable_sortDirection_binding*/ ctx[15](value);
    	}

    	let datatable_props = {
    		sortable: true,
    		"table$aria-label": "Template list",
    		style: "width: 100%;",
    		$$slots: { default: [create_default_slot$t] },
    		$$scope: { ctx }
    	};

    	if (/*sort*/ ctx[1] !== void 0) {
    		datatable_props.sort = /*sort*/ ctx[1];
    	}

    	if (/*sortDirection*/ ctx[2] !== void 0) {
    		datatable_props.sortDirection = /*sortDirection*/ ctx[2];
    	}

    	datatable = new DataTable({ props: datatable_props, $$inline: true });
    	binding_callbacks.push(() => bind(datatable, 'sort', datatable_sort_binding));
    	binding_callbacks.push(() => bind(datatable, 'sortDirection', datatable_sortDirection_binding));
    	datatable.$on("MDCDataTable:sorted", /*MDCDataTable_sorted_handler*/ ctx[16]);

    	const block = {
    		c: function create() {
    			create_component(searchbar.$$.fragment);
    			t0 = space();
    			create_component(adminguard.$$.fragment);
    			t1 = space();
    			create_component(datatable.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(adminguard, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const searchbar_changes = {};

    			if (!updating_value && dirty & /*filterValue*/ 1) {
    				updating_value = true;
    				searchbar_changes.value = /*filterValue*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			searchbar.$set(searchbar_changes);
    			const adminguard_changes = {};

    			if (dirty & /*$$scope*/ 1048576) {
    				adminguard_changes.$$scope = { dirty, ctx };
    			}

    			adminguard.$set(adminguard_changes);
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered*/ 1048584) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_sort && dirty & /*sort*/ 2) {
    				updating_sort = true;
    				datatable_changes.sort = /*sort*/ ctx[1];
    				add_flush_callback(() => updating_sort = false);
    			}

    			if (!updating_sortDirection && dirty & /*sortDirection*/ 4) {
    				updating_sortDirection = true;
    				datatable_changes.sortDirection = /*sortDirection*/ ctx[2];
    				add_flush_callback(() => updating_sortDirection = false);
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);
    			transition_in(adminguard.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			transition_out(adminguard.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(adminguard, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let filterValue;
    	let filtered;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Templates', slots, []);
    	let sort = 'name';
    	let sortDirection = 'ascending';
    	const sortFunction = () => $$invalidate(3, filtered = filtered.sort(sortFunc(sort, sortDirection)));
    	let items = [];

    	list().then(result => {
    		$$invalidate(8, items = result);
    		sortFunction();
    	});

    	const openTemplate = item => {
    		if (item.type == TemplateType.page) {
    			navigate(item.path);
    		} else {
    			TemplateService.get(item.id).then(response => window.open(response));
    		}
    	};

    	const changeVisibility = item => {
    		if (item.type == TemplateType.page) {
    			return;
    		}

    		TemplateService.update({ id: item.id, adminOnly: !item.adminOnly }).then(_ => {
    			item.adminOnly = !item.adminOnly;
    			$$invalidate(8, items);
    		});
    	};

    	const deleteTemplate = item => {
    		if (item.type == TemplateType.page) {
    			return;
    		}

    		TemplateService.delete(item.id).then(_ => {
    			$$invalidate(8, items = items.filter(i => i.id != item.id));
    		});
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Templates> was created with unknown prop '${key}'`);
    	});

    	function searchbar_value_binding(value) {
    		filterValue = value;
    		$$invalidate(0, filterValue);
    	}

    	const click_handler = () => navigate("template/new");
    	const click_handler_1 = item => openTemplate(item);
    	const click_handler_2 = item => changeVisibility(item);
    	const click_handler_3 = item => deleteTemplate(item);

    	function datatable_sort_binding(value) {
    		sort = value;
    		$$invalidate(1, sort);
    	}

    	function datatable_sortDirection_binding(value) {
    		sortDirection = value;
    		$$invalidate(2, sortDirection);
    	}

    	const MDCDataTable_sorted_handler = () => sortFunction();

    	$$self.$capture_state = () => ({
    		navigate,
    		Icon,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		IconButton,
    		listTemplates: list,
    		TemplateType,
    		AdminGuard,
    		Searchbar,
    		FloatingActionButton,
    		sortFunc,
    		TemplateService,
    		sort,
    		sortDirection,
    		sortFunction,
    		items,
    		openTemplate,
    		changeVisibility,
    		deleteTemplate,
    		filterValue,
    		filtered
    	});

    	$$self.$inject_state = $$props => {
    		if ('sort' in $$props) $$invalidate(1, sort = $$props.sort);
    		if ('sortDirection' in $$props) $$invalidate(2, sortDirection = $$props.sortDirection);
    		if ('items' in $$props) $$invalidate(8, items = $$props.items);
    		if ('filterValue' in $$props) $$invalidate(0, filterValue = $$props.filterValue);
    		if ('filtered' in $$props) $$invalidate(3, filtered = $$props.filtered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items, filterValue*/ 257) {
    			$$invalidate(3, filtered = items.filter(s => s.name.includes(filterValue)));
    		}
    	};

    	$$invalidate(0, filterValue = "");

    	return [
    		filterValue,
    		sort,
    		sortDirection,
    		filtered,
    		sortFunction,
    		openTemplate,
    		changeVisibility,
    		deleteTemplate,
    		items,
    		searchbar_value_binding,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		datatable_sort_binding,
    		datatable_sortDirection_binding,
    		MDCDataTable_sorted_handler
    	];
    }

    class Templates extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$G, create_fragment$N, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Templates",
    			options,
    			id: create_fragment$N.name
    		});
    	}
    }

    /* src/components/H1.svelte generated by Svelte v3.44.3 */

    const file$D = "src/components/H1.svelte";

    // (7:0) {#if showDescription}
    function create_if_block$i(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*description*/ ctx[0]);
    			attr_dev(div, "class", "font-color");
    			add_location(div, file$D, 7, 2, 222);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*description*/ 1) set_data_dev(t, /*description*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(7:0) {#if showDescription}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$M(ctx) {
    	let h1;
    	let t;
    	let if_block_anchor;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
    	let if_block = /*showDescription*/ ctx[1] && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			if (default_slot) default_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h1, "class", "svelte-1hyx1o8");
    			add_location(h1, file$D, 5, 0, 181);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);

    			if (default_slot) {
    				default_slot.m(h1, null);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*showDescription*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$i(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('H1', slots, ['default']);
    	let { description = '' } = $$props;
    	let showDescription = false;
    	const writable_props = ['description'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<H1> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('description' in $$props) $$invalidate(0, description = $$props.description);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ description, showDescription });

    	$$self.$inject_state = $$props => {
    		if ('description' in $$props) $$invalidate(0, description = $$props.description);
    		if ('showDescription' in $$props) $$invalidate(1, showDescription = $$props.showDescription);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*description*/ 1) {
    			$$invalidate(1, showDescription = description !== undefined && description !== null && description !== '');
    		}
    	};

    	return [description, showDescription, $$scope, slots];
    }

    class H1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$F, create_fragment$M, safe_not_equal, { description: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "H1",
    			options,
    			id: create_fragment$M.name
    		});
    	}

    	get description() {
    		throw new Error("<H1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set description(value) {
    		throw new Error("<H1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Group.svelte generated by Svelte v3.44.3 */

    const file$C = "src/components/Group.svelte";

    function create_fragment$L(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "group svelte-1j58i5v");
    			add_location(div, file$C, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Group', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Group> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class Group extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$E, create_fragment$L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Group",
    			options,
    			id: create_fragment$L.name
    		});
    	}
    }

    /* src/routes/Template.svelte generated by Svelte v3.44.3 */
    const file$B = "src/routes/Template.svelte";

    // (24:4) <H1 description="Vorlagen können für Mitarbeiter oder nur für Admins zur Verfügung gestellt werden. Einfach das Häckchen setzen, wenn die hochgeladene Datei nur für Admins ist.">
    function create_default_slot_6$f(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Vorlage hochladen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$f.name,
    		type: "slot",
    		source: "(24:4) <H1 description=\\\"Vorlagen können für Mitarbeiter oder nur für Admins zur Verfügung gestellt werden. Einfach das Häckchen setzen, wenn die hochgeladene Datei nur für Admins ist.\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:8) <Cell span={12}>
    function create_default_slot_5$f(ctx) {
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[3](value);
    	}

    	let stylizedcheckbox_props = { label: "Nur für Admins?" };

    	if (/*adminOnly*/ ctx[1] !== void 0) {
    		stylizedcheckbox_props.value = /*adminOnly*/ ctx[1];
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	const block = {
    		c: function create() {
    			create_component(stylizedcheckbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stylizedcheckbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const stylizedcheckbox_changes = {};

    			if (!updating_value && dirty & /*adminOnly*/ 2) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*adminOnly*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stylizedcheckbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$f.name,
    		type: "slot",
    		source: "(26:8) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (29:8) <Cell span={12}>
    function create_default_slot_4$g(ctx) {
    	let fileupload;
    	let current;
    	let fileupload_props = {};
    	fileupload = new FileUpload({ props: fileupload_props, $$inline: true });
    	/*fileupload_binding*/ ctx[4](fileupload);
    	fileupload.$on("submit", /*save*/ ctx[2]);

    	const block = {
    		c: function create() {
    			create_component(fileupload.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fileupload, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const fileupload_changes = {};
    			fileupload.$set(fileupload_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fileupload.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fileupload.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*fileupload_binding*/ ctx[4](null);
    			destroy_component(fileupload, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$g.name,
    		type: "slot",
    		source: "(29:8) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (32:8) <Cell span={12}>
    function create_default_slot_3$j(ctx) {
    	let div;
    	let floatingactionbutton;
    	let current;

    	floatingactionbutton = new FloatingActionButton({
    			props: {
    				icon: "save",
    				float: false,
    				label: "Speichern"
    			},
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*click_handler*/ ctx[5]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(floatingactionbutton.$$.fragment);
    			attr_dev(div, "class", "right svelte-yjwbci");
    			add_location(div, file$B, 32, 10, 1329);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(floatingactionbutton, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(floatingactionbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$j.name,
    		type: "slot",
    		source: "(32:8) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (25:4) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot_2$l(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_5$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_4$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_3$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, adminOnly*/ 66) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, fileUpload*/ 65) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, fileUpload*/ 65) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$l.name,
    		type: "slot",
    		source: "(25:4) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    // (23:2) <Group>
    function create_default_slot_1$n(ctx) {
    	let h1;
    	let t;
    	let layoutgrid;
    	let current;

    	h1 = new H1({
    			props: {
    				description: "Vorlagen können für Mitarbeiter oder nur für Admins zur Verfügung gestellt werden. Einfach das Häckchen setzen, wenn die hochgeladene Datei nur für Admins ist.",
    				$$slots: { default: [create_default_slot_6$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot_2$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(h1.$$.fragment);
    			t = space();
    			create_component(layoutgrid.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(h1, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(layoutgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h1_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				h1_changes.$$scope = { dirty, ctx };
    			}

    			h1.$set(h1_changes);
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, fileUpload, adminOnly*/ 67) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h1.$$.fragment, local);
    			transition_in(layoutgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h1.$$.fragment, local);
    			transition_out(layoutgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(h1, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(layoutgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$n.name,
    		type: "slot",
    		source: "(23:2) <Group>",
    		ctx
    	});

    	return block;
    }

    // (22:0) <FormContainer>
    function create_default_slot$s(ctx) {
    	let group;
    	let current;

    	group = new Group({
    			props: {
    				$$slots: { default: [create_default_slot_1$n] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const group_changes = {};

    			if (dirty & /*$$scope, fileUpload, adminOnly*/ 67) {
    				group_changes.$$scope = { dirty, ctx };
    			}

    			group.$set(group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$s.name,
    		type: "slot",
    		source: "(22:0) <FormContainer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$K(ctx) {
    	let formcontainer;
    	let current;

    	formcontainer = new FormContainer({
    			props: {
    				$$slots: { default: [create_default_slot$s] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(formcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(formcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const formcontainer_changes = {};

    			if (dirty & /*$$scope, fileUpload, adminOnly*/ 67) {
    				formcontainer_changes.$$scope = { dirty, ctx };
    			}

    			formcontainer.$set(formcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Template', slots, []);
    	let fileUpload;
    	let adminOnly = false;

    	function save(e) {
    		TemplateService.add({
    			file: e.detail.file,
    			fileName: e.detail.file.name,
    			fileExtension: e.detail.file.type,
    			adminOnly
    		}).then(() => navigate('/templates')).catch();
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Template> was created with unknown prop '${key}'`);
    	});

    	function stylizedcheckbox_value_binding(value) {
    		adminOnly = value;
    		$$invalidate(1, adminOnly);
    	}

    	function fileupload_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			fileUpload = $$value;
    			$$invalidate(0, fileUpload);
    		});
    	}

    	const click_handler = () => fileUpload.trigger();

    	$$self.$capture_state = () => ({
    		navigate,
    		LayoutGrid,
    		Cell,
    		TemplateService,
    		H1,
    		FileUpload,
    		FormContainer,
    		Group,
    		StylizedCheckbox,
    		FloatingActionButton,
    		fileUpload,
    		adminOnly,
    		save
    	});

    	$$self.$inject_state = $$props => {
    		if ('fileUpload' in $$props) $$invalidate(0, fileUpload = $$props.fileUpload);
    		if ('adminOnly' in $$props) $$invalidate(1, adminOnly = $$props.adminOnly);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		fileUpload,
    		adminOnly,
    		save,
    		stylizedcheckbox_value_binding,
    		fileupload_binding,
    		click_handler
    	];
    }

    class Template extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$K, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Template",
    			options,
    			id: create_fragment$K.name
    		});
    	}
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function tick_spring(ctx, last_value, current_value, target_value) {
        if (typeof current_value === 'number' || is_date(current_value)) {
            // @ts-ignore
            const delta = target_value - current_value;
            // @ts-ignore
            const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
            const spring = ctx.opts.stiffness * delta;
            const damper = ctx.opts.damping * velocity;
            const acceleration = (spring - damper) * ctx.inv_mass;
            const d = (velocity + acceleration) * ctx.dt;
            if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
                return target_value; // settled
            }
            else {
                ctx.settled = false; // signal loop to keep ticking
                // @ts-ignore
                return is_date(current_value) ?
                    new Date(current_value.getTime() + d) : current_value + d;
            }
        }
        else if (Array.isArray(current_value)) {
            // @ts-ignore
            return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
        }
        else if (typeof current_value === 'object') {
            const next_value = {};
            for (const k in current_value) {
                // @ts-ignore
                next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
            }
            // @ts-ignore
            return next_value;
        }
        else {
            throw new Error(`Cannot spring ${typeof current_value} values`);
        }
    }
    function spring(value, opts = {}) {
        const store = writable(value);
        const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
        let last_time;
        let task;
        let current_token;
        let last_value = value;
        let target_value = value;
        let inv_mass = 1;
        let inv_mass_recovery_rate = 0;
        let cancel_task = false;
        function set(new_value, opts = {}) {
            target_value = new_value;
            const token = current_token = {};
            if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
                cancel_task = true; // cancel any running animation
                last_time = now();
                last_value = new_value;
                store.set(value = target_value);
                return Promise.resolve();
            }
            else if (opts.soft) {
                const rate = opts.soft === true ? .5 : +opts.soft;
                inv_mass_recovery_rate = 1 / (rate * 60);
                inv_mass = 0; // infinite mass, unaffected by spring forces
            }
            if (!task) {
                last_time = now();
                cancel_task = false;
                task = loop(now => {
                    if (cancel_task) {
                        cancel_task = false;
                        task = null;
                        return false;
                    }
                    inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                    const ctx = {
                        inv_mass,
                        opts: spring,
                        settled: true,
                        dt: (now - last_time) * 60 / 1000
                    };
                    const next_value = tick_spring(ctx, last_value, value, target_value);
                    last_time = now;
                    last_value = value;
                    store.set(value = next_value);
                    if (ctx.settled) {
                        task = null;
                    }
                    return !ctx.settled;
                });
            }
            return new Promise(fulfil => {
                task.promise.then(() => {
                    if (token === current_token)
                        fulfil();
                });
            });
        }
        const spring = {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe,
            stiffness,
            damping,
            precision
        };
        return spring;
    }

    function get_interpolator(a, b) {
        if (a === b || a !== a)
            return () => a;
        const type = typeof a;
        if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
            throw new Error('Cannot interpolate values of different type');
        }
        if (Array.isArray(a)) {
            const arr = b.map((bi, i) => {
                return get_interpolator(a[i], bi);
            });
            return t => arr.map(fn => fn(t));
        }
        if (type === 'object') {
            if (!a || !b)
                throw new Error('Object cannot be null');
            if (is_date(a) && is_date(b)) {
                a = a.getTime();
                b = b.getTime();
                const delta = b - a;
                return t => new Date(a + t * delta);
            }
            const keys = Object.keys(b);
            const interpolators = {};
            keys.forEach(key => {
                interpolators[key] = get_interpolator(a[key], b[key]);
            });
            return t => {
                const result = {};
                keys.forEach(key => {
                    result[key] = interpolators[key](t);
                });
                return result;
            };
        }
        if (type === 'number') {
            const delta = b - a;
            return t => a + t * delta;
        }
        throw new Error(`Cannot interpolate ${type} values`);
    }
    function tweened(value, defaults = {}) {
        const store = writable(value);
        let task;
        let target_value = value;
        function set(new_value, opts) {
            if (value == null) {
                store.set(value = new_value);
                return Promise.resolve();
            }
            target_value = new_value;
            let previous_task = task;
            let started = false;
            let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
            if (duration === 0) {
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                store.set(value = target_value);
                return Promise.resolve();
            }
            const start = now() + delay;
            let fn;
            task = loop(now => {
                if (now < start)
                    return true;
                if (!started) {
                    fn = interpolate(value, new_value);
                    if (typeof duration === 'function')
                        duration = duration(value, new_value);
                    started = true;
                }
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                const elapsed = now - start;
                if (elapsed > duration) {
                    store.set(value = new_value);
                    return false;
                }
                // @ts-ignore
                store.set(value = fn(easing(elapsed / duration)));
                return true;
            });
            return task.promise;
        }
        return {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe
        };
    }

    /* src/components/PieChart.svelte generated by Svelte v3.44.3 */
    const file$A = "src/components/PieChart.svelte";

    function create_fragment$J(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let div0_class_value;
    	let t1;
    	let svg;
    	let circle0;
    	let circle1;
    	let circle2;
    	let circle2_r_value;
    	let svg_width_value;
    	let svg_height_value;
    	let div1_style_value;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(/*title*/ ctx[1]);
    			t1 = space();
    			svg = svg_element("svg");
    			circle0 = svg_element("circle");
    			circle1 = svg_element("circle");
    			circle2 = svg_element("circle");
    			attr_dev(div0, "class", div0_class_value = "title " + /*titleClass*/ ctx[2] + " svelte-1vdcm2y");
    			add_location(div0, file$A, 22, 4, 733);
    			attr_dev(circle0, "r", /*radius*/ ctx[4]);
    			attr_dev(circle0, "cx", /*radius*/ ctx[4]);
    			attr_dev(circle0, "cy", /*radius*/ ctx[4]);
    			attr_dev(circle0, "stroke", "black");
    			attr_dev(circle0, "stroke-width", "5");
    			attr_dev(circle0, "fill", "none");
    			add_location(circle0, file$A, 24, 8, 838);
    			attr_dev(circle1, "r", /*radius*/ ctx[4]);
    			attr_dev(circle1, "cx", /*radius*/ ctx[4]);
    			attr_dev(circle1, "cy", /*radius*/ ctx[4]);
    			attr_dev(circle1, "fill", bgColor);
    			add_location(circle1, file$A, 25, 8, 936);
    			attr_dev(circle2, "r", circle2_r_value = /*radius*/ ctx[4] / 2);
    			attr_dev(circle2, "cx", /*radius*/ ctx[4]);
    			attr_dev(circle2, "cy", /*radius*/ ctx[4]);
    			attr_dev(circle2, "fill", bgColor);
    			attr_dev(circle2, "stroke", fgColor);
    			attr_dev(circle2, "stroke-width", /*radius*/ ctx[4]);
    			attr_dev(circle2, "stroke-dasharray", /*dashArray*/ ctx[5]);
    			add_location(circle2, file$A, 26, 8, 1005);
    			attr_dev(svg, "width", svg_width_value = /*size*/ ctx[0] + 5);
    			attr_dev(svg, "height", svg_height_value = /*size*/ ctx[0] + 5);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[6]);
    			add_location(svg, file$A, 23, 4, 783);
    			attr_dev(div1, "class", "container svelte-1vdcm2y");
    			attr_dev(div1, "style", div1_style_value = "--width: " + /*size*/ ctx[0] + "; " + /*containerStyle*/ ctx[3]);
    			add_location(div1, file$A, 21, 0, 663);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			append_dev(div1, svg);
    			append_dev(svg, circle0);
    			append_dev(svg, circle1);
    			append_dev(svg, circle2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 2) set_data_dev(t0, /*title*/ ctx[1]);

    			if (dirty & /*titleClass*/ 4 && div0_class_value !== (div0_class_value = "title " + /*titleClass*/ ctx[2] + " svelte-1vdcm2y")) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle0, "r", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle0, "cx", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle0, "cy", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle1, "r", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle1, "cx", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle1, "cy", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16 && circle2_r_value !== (circle2_r_value = /*radius*/ ctx[4] / 2)) {
    				attr_dev(circle2, "r", circle2_r_value);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle2, "cx", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle2, "cy", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle2, "stroke-width", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*dashArray*/ 32) {
    				attr_dev(circle2, "stroke-dasharray", /*dashArray*/ ctx[5]);
    			}

    			if (dirty & /*size*/ 1 && svg_width_value !== (svg_width_value = /*size*/ ctx[0] + 5)) {
    				attr_dev(svg, "width", svg_width_value);
    			}

    			if (dirty & /*size*/ 1 && svg_height_value !== (svg_height_value = /*size*/ ctx[0] + 5)) {
    				attr_dev(svg, "height", svg_height_value);
    			}

    			if (dirty & /*viewBox*/ 64) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[6]);
    			}

    			if (dirty & /*size, containerStyle*/ 9 && div1_style_value !== (div1_style_value = "--width: " + /*size*/ ctx[0] + "; " + /*containerStyle*/ ctx[3])) {
    				attr_dev(div1, "style", div1_style_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const bgColor = "#fbba00";
    const fgColor = "#2e7d32";

    function instance$C($$self, $$props, $$invalidate) {
    	let viewBox;
    	let radius;
    	let halfCircumference;
    	let pieSize;
    	let dashArray;
    	let $store;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PieChart', slots, []);
    	let { percent = 0 } = $$props;
    	let { size = 200 } = $$props;
    	let { title = '' } = $$props;
    	let { titleClass = '' } = $$props;
    	let { containerStyle = '' } = $$props;
    	const store = tweened(0, { duration: 500 });
    	validate_store(store, 'store');
    	component_subscribe($$self, store, value => $$invalidate(11, $store = value));
    	const writable_props = ['percent', 'size', 'title', 'titleClass', 'containerStyle'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PieChart> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('percent' in $$props) $$invalidate(8, percent = $$props.percent);
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('titleClass' in $$props) $$invalidate(2, titleClass = $$props.titleClass);
    		if ('containerStyle' in $$props) $$invalidate(3, containerStyle = $$props.containerStyle);
    	};

    	$$self.$capture_state = () => ({
    		spring,
    		tweened,
    		percent,
    		size,
    		title,
    		titleClass,
    		containerStyle,
    		store,
    		bgColor,
    		fgColor,
    		pieSize,
    		halfCircumference,
    		dashArray,
    		radius,
    		viewBox,
    		$store
    	});

    	$$self.$inject_state = $$props => {
    		if ('percent' in $$props) $$invalidate(8, percent = $$props.percent);
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('titleClass' in $$props) $$invalidate(2, titleClass = $$props.titleClass);
    		if ('containerStyle' in $$props) $$invalidate(3, containerStyle = $$props.containerStyle);
    		if ('pieSize' in $$props) $$invalidate(9, pieSize = $$props.pieSize);
    		if ('halfCircumference' in $$props) $$invalidate(10, halfCircumference = $$props.halfCircumference);
    		if ('dashArray' in $$props) $$invalidate(5, dashArray = $$props.dashArray);
    		if ('radius' in $$props) $$invalidate(4, radius = $$props.radius);
    		if ('viewBox' in $$props) $$invalidate(6, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*percent*/ 256) {
    			store.set(percent);
    		}

    		if ($$self.$$.dirty & /*size*/ 1) {
    			$$invalidate(6, viewBox = `0 -5 ${size + 5} ${size + 10}`);
    		}

    		if ($$self.$$.dirty & /*size*/ 1) {
    			$$invalidate(4, radius = size / 2);
    		}

    		if ($$self.$$.dirty & /*radius*/ 16) {
    			$$invalidate(10, halfCircumference = Math.PI * radius);
    		}

    		if ($$self.$$.dirty & /*halfCircumference, $store*/ 3072) {
    			$$invalidate(9, pieSize = halfCircumference * ($store / 100));
    		}

    		if ($$self.$$.dirty & /*halfCircumference, pieSize*/ 1536) {
    			$$invalidate(5, dashArray = `0 ${halfCircumference - pieSize} ${pieSize}`);
    		}
    	};

    	return [
    		size,
    		title,
    		titleClass,
    		containerStyle,
    		radius,
    		dashArray,
    		viewBox,
    		store,
    		percent,
    		pieSize,
    		halfCircumference,
    		$store
    	];
    }

    class PieChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$C, create_fragment$J, safe_not_equal, {
    			percent: 8,
    			size: 0,
    			title: 1,
    			titleClass: 2,
    			containerStyle: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PieChart",
    			options,
    			id: create_fragment$J.name
    		});
    	}

    	get percent() {
    		throw new Error("<PieChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set percent(value) {
    		throw new Error("<PieChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<PieChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<PieChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<PieChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<PieChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleClass() {
    		throw new Error("<PieChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleClass(value) {
    		throw new Error("<PieChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerStyle() {
    		throw new Error("<PieChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerStyle(value) {
    		throw new Error("<PieChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/HelpToggleButton.svelte generated by Svelte v3.44.3 */

    // (6:4) <Icon class="material-icons">
    function create_default_slot_2$k(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("help_outline");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$k.name,
    		type: "slot",
    		source: "(6:4) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (7:4) <Icon class="material-icons" on>
    function create_default_slot_1$m(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("help");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$m.name,
    		type: "slot",
    		source: "(7:4) <Icon class=\\\"material-icons\\\" on>",
    		ctx
    	});

    	return block;
    }

    // (5:0) <IconButton toggle bind:pressed={value}>
    function create_default_slot$r(ctx) {
    	let icon0;
    	let t;
    	let icon1;
    	let current;

    	icon0 = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_2$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	icon1 = new Icon$1({
    			props: {
    				class: "material-icons",
    				on: true,
    				$$slots: { default: [create_default_slot_1$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon0.$$.fragment);
    			t = space();
    			create_component(icon1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(icon1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon0_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				icon0_changes.$$scope = { dirty, ctx };
    			}

    			icon0.$set(icon0_changes);
    			const icon1_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				icon1_changes.$$scope = { dirty, ctx };
    			}

    			icon1.$set(icon1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(icon1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$r.name,
    		type: "slot",
    		source: "(5:0) <IconButton toggle bind:pressed={value}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let iconbutton;
    	let updating_pressed;
    	let current;

    	function iconbutton_pressed_binding(value) {
    		/*iconbutton_pressed_binding*/ ctx[1](value);
    	}

    	let iconbutton_props = {
    		toggle: true,
    		$$slots: { default: [create_default_slot$r] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		iconbutton_props.pressed = /*value*/ ctx[0];
    	}

    	iconbutton = new IconButton({ props: iconbutton_props, $$inline: true });
    	binding_callbacks.push(() => bind(iconbutton, 'pressed', iconbutton_pressed_binding));

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_pressed && dirty & /*value*/ 1) {
    				updating_pressed = true;
    				iconbutton_changes.pressed = /*value*/ ctx[0];
    				add_flush_callback(() => updating_pressed = false);
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HelpToggleButton', slots, []);
    	let { value } = $$props;
    	const writable_props = ['value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HelpToggleButton> was created with unknown prop '${key}'`);
    	});

    	function iconbutton_pressed_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({ IconButton, Icon: Icon$1, value });

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, iconbutton_pressed_binding];
    }

    class HelpToggleButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$I, safe_not_equal, { value: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HelpToggleButton",
    			options,
    			id: create_fragment$I.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<HelpToggleButton> was created without expected prop 'value'");
    		}
    	}

    	get value() {
    		throw new Error("<HelpToggleButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<HelpToggleButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/card/dist/Card.svelte generated by Svelte v3.44.3 */
    const file$z = "node_modules/@smui/card/dist/Card.svelte";

    function create_fragment$H(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-card': true,
    				'mdc-card--outlined': /*variant*/ ctx[2] === 'outlined',
    				'smui-card--padded': /*padded*/ ctx[3]
    			})
    		},
    		/*$$restProps*/ ctx[6]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$z, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[10](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[5].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, variant, padded*/ 14 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-card': true,
    					'mdc-card--outlined': /*variant*/ ctx[2] === 'outlined',
    					'smui-card--padded': /*padded*/ ctx[3]
    				}))) && { class: div_class_value },
    				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[10](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","variant","padded","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Card', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { variant = 'raised' } = $$props;
    	let { padded = false } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('variant' in $$new_props) $$invalidate(2, variant = $$new_props.variant);
    		if ('padded' in $$new_props) $$invalidate(3, padded = $$new_props.padded);
    		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		variant,
    		padded,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('variant' in $$props) $$invalidate(2, variant = $$new_props.variant);
    		if ('padded' in $$props) $$invalidate(3, padded = $$new_props.padded);
    		if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		variant,
    		padded,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Card extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$A, create_fragment$H, safe_not_equal, {
    			use: 0,
    			class: 1,
    			variant: 2,
    			padded: 3,
    			getElement: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Card",
    			options,
    			id: create_fragment$H.name
    		});
    	}

    	get use() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get padded() {
    		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set padded(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[7];
    	}

    	set getElement(value) {
    		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Content$2 = classAdderBuilder({
        class: 'smui-card__content',
        component: Div,
    });

    /* node_modules/@smui/card/dist/Media.svelte generated by Svelte v3.44.3 */
    const file$y = "node_modules/@smui/card/dist/Media.svelte";

    function create_fragment$G(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-card__media': true,
    				'mdc-card__media--square': /*aspectRatio*/ ctx[2] === 'square',
    				'mdc-card__media--16-9': /*aspectRatio*/ ctx[2] === '16x9'
    			})
    		},
    		/*$$restProps*/ ctx[5]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$y, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[9](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[4].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, aspectRatio*/ 6 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-card__media': true,
    					'mdc-card__media--square': /*aspectRatio*/ ctx[2] === 'square',
    					'mdc-card__media--16-9': /*aspectRatio*/ ctx[2] === '16x9'
    				}))) && { class: div_class_value },
    				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","aspectRatio","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Media', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { aspectRatio = undefined } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(3, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('aspectRatio' in $$new_props) $$invalidate(2, aspectRatio = $$new_props.aspectRatio);
    		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		aspectRatio,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('aspectRatio' in $$props) $$invalidate(2, aspectRatio = $$new_props.aspectRatio);
    		if ('element' in $$props) $$invalidate(3, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		aspectRatio,
    		element,
    		forwardEvents,
    		$$restProps,
    		getElement,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Media$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$z, create_fragment$G, safe_not_equal, {
    			use: 0,
    			class: 1,
    			aspectRatio: 2,
    			getElement: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Media",
    			options,
    			id: create_fragment$G.name
    		});
    	}

    	get use() {
    		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get aspectRatio() {
    		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aspectRatio(value) {
    		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[6];
    	}

    	set getElement(value) {
    		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var MediaContent = classAdderBuilder({
        class: 'mdc-card__media-content',
        component: Div,
    });

    classAdderBuilder({
        class: 'mdc-card__action-buttons',
        component: Div,
    });

    classAdderBuilder({
        class: 'mdc-card__action-icons',
        component: Div,
    });

    const Media = Media$1;

    /* src/components/NeedsAssessmentCard.svelte generated by Svelte v3.44.3 */
    const file$x = "src/components/NeedsAssessmentCard.svelte";

    // (8:6) <MediaContent>
    function create_default_slot_3$i(ctx) {
    	let h2;
    	let t;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t = text(/*subtitle*/ ctx[0]);
    			attr_dev(h2, "class", "mdc-typography--headline6 svelte-pjt29d");
    			set_style(h2, "color", "#fff");
    			set_style(h2, "position", "absolute");
    			set_style(h2, "bottom", "16px");
    			set_style(h2, "left", "16px");
    			set_style(h2, "margin", "0");
    			add_location(h2, file$x, 8, 8, 293);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*subtitle*/ 1) set_data_dev(t, /*subtitle*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$i.name,
    		type: "slot",
    		source: "(8:6) <MediaContent>",
    		ctx
    	});

    	return block;
    }

    // (7:4) <Media style="background-image: url(https://place-hold.it/320x180?text=16x9&fontsize=23);" aspectRatio="16x9">
    function create_default_slot_2$j(ctx) {
    	let mediacontent;
    	let current;

    	mediacontent = new MediaContent({
    			props: {
    				$$slots: { default: [create_default_slot_3$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mediacontent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mediacontent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mediacontent_changes = {};

    			if (dirty & /*$$scope, subtitle*/ 5) {
    				mediacontent_changes.$$scope = { dirty, ctx };
    			}

    			mediacontent.$set(mediacontent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mediacontent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mediacontent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mediacontent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$j.name,
    		type: "slot",
    		source: "(7:4) <Media style=\\\"background-image: url(https://place-hold.it/320x180?text=16x9&fontsize=23);\\\" aspectRatio=\\\"16x9\\\">",
    		ctx
    	});

    	return block;
    }

    // (17:4) <Content>
    function create_default_slot_1$l(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*text*/ ctx[1]);
    			attr_dev(span, "class", "text svelte-pjt29d");
    			add_location(span, file$x, 16, 13, 522);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*text*/ 2) set_data_dev(t, /*text*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$l.name,
    		type: "slot",
    		source: "(17:4) <Content>",
    		ctx
    	});

    	return block;
    }

    // (6:0) <Card>
    function create_default_slot$q(ctx) {
    	let media;
    	let t;
    	let content;
    	let current;

    	media = new Media({
    			props: {
    				style: "background-image: url(https://place-hold.it/320x180?text=16x9&fontsize=23);",
    				aspectRatio: "16x9",
    				$$slots: { default: [create_default_slot_2$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	content = new Content$2({
    			props: {
    				$$slots: { default: [create_default_slot_1$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(media.$$.fragment);
    			t = space();
    			create_component(content.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(media, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(content, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const media_changes = {};

    			if (dirty & /*$$scope, subtitle*/ 5) {
    				media_changes.$$scope = { dirty, ctx };
    			}

    			media.$set(media_changes);
    			const content_changes = {};

    			if (dirty & /*$$scope, text*/ 6) {
    				content_changes.$$scope = { dirty, ctx };
    			}

    			content.$set(content_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(media.$$.fragment, local);
    			transition_in(content.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(media.$$.fragment, local);
    			transition_out(content.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(media, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(content, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$q.name,
    		type: "slot",
    		source: "(6:0) <Card>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$F(ctx) {
    	let card;
    	let current;

    	card = new Card({
    			props: {
    				$$slots: { default: [create_default_slot$q] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(card.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(card, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const card_changes = {};

    			if (dirty & /*$$scope, text, subtitle*/ 7) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(card, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NeedsAssessmentCard', slots, []);
    	let { subtitle = "" } = $$props;
    	let { text = "" } = $$props;
    	const writable_props = ['subtitle', 'text'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NeedsAssessmentCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    	};

    	$$self.$capture_state = () => ({
    		Card,
    		Content: Content$2,
    		Media,
    		MediaContent,
    		subtitle,
    		text
    	});

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [subtitle, text];
    }

    class NeedsAssessmentCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$F, safe_not_equal, { subtitle: 0, text: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NeedsAssessmentCard",
    			options,
    			id: create_fragment$F.name
    		});
    	}

    	get subtitle() {
    		throw new Error("<NeedsAssessmentCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subtitle(value) {
    		throw new Error("<NeedsAssessmentCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<NeedsAssessmentCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<NeedsAssessmentCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/SelectLegacyContract.svelte generated by Svelte v3.44.3 */
    const file$w = "src/components/SelectLegacyContract.svelte";

    function create_fragment$E(ctx) {
    	let div;
    	let eurotextfield;
    	let updating_integer;
    	let t0;
    	let paymentfrequencycomponent;
    	let updating_paymentFrequency;
    	let t1;
    	let contractorselection;
    	let updating_partner;
    	let current;

    	function eurotextfield_integer_binding(value) {
    		/*eurotextfield_integer_binding*/ ctx[1](value);
    	}

    	let eurotextfield_props = { edit: true };

    	if (/*contract*/ ctx[0].paymentValue !== void 0) {
    		eurotextfield_props.integer = /*contract*/ ctx[0].paymentValue;
    	}

    	eurotextfield = new EuroTextfield({
    			props: eurotextfield_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(eurotextfield, 'integer', eurotextfield_integer_binding));

    	function paymentfrequencycomponent_paymentFrequency_binding(value) {
    		/*paymentfrequencycomponent_paymentFrequency_binding*/ ctx[2](value);
    	}

    	let paymentfrequencycomponent_props = {};

    	if (/*contract*/ ctx[0].paymentFrequency !== void 0) {
    		paymentfrequencycomponent_props.paymentFrequency = /*contract*/ ctx[0].paymentFrequency;
    	}

    	paymentfrequencycomponent = new PaymentFrequencySelection({
    			props: paymentfrequencycomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(paymentfrequencycomponent, 'paymentFrequency', paymentfrequencycomponent_paymentFrequency_binding));

    	function contractorselection_partner_binding(value) {
    		/*contractorselection_partner_binding*/ ctx[3](value);
    	}

    	let contractorselection_props = { edit: true, allowUnfound: true };

    	if (/*contract*/ ctx[0].contractor !== void 0) {
    		contractorselection_props.partner = /*contract*/ ctx[0].contractor;
    	}

    	contractorselection = new ContractorSelection({
    			props: contractorselection_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(contractorselection, 'partner', contractorselection_partner_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(eurotextfield.$$.fragment);
    			t0 = space();
    			create_component(paymentfrequencycomponent.$$.fragment);
    			t1 = space();
    			create_component(contractorselection.$$.fragment);
    			attr_dev(div, "class", "container svelte-1idbjv4");
    			add_location(div, file$w, 6, 0, 258);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(eurotextfield, div, null);
    			append_dev(div, t0);
    			mount_component(paymentfrequencycomponent, div, null);
    			append_dev(div, t1);
    			mount_component(contractorselection, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const eurotextfield_changes = {};

    			if (!updating_integer && dirty & /*contract*/ 1) {
    				updating_integer = true;
    				eurotextfield_changes.integer = /*contract*/ ctx[0].paymentValue;
    				add_flush_callback(() => updating_integer = false);
    			}

    			eurotextfield.$set(eurotextfield_changes);
    			const paymentfrequencycomponent_changes = {};

    			if (!updating_paymentFrequency && dirty & /*contract*/ 1) {
    				updating_paymentFrequency = true;
    				paymentfrequencycomponent_changes.paymentFrequency = /*contract*/ ctx[0].paymentFrequency;
    				add_flush_callback(() => updating_paymentFrequency = false);
    			}

    			paymentfrequencycomponent.$set(paymentfrequencycomponent_changes);
    			const contractorselection_changes = {};

    			if (!updating_partner && dirty & /*contract*/ 1) {
    				updating_partner = true;
    				contractorselection_changes.partner = /*contract*/ ctx[0].contractor;
    				add_flush_callback(() => updating_partner = false);
    			}

    			contractorselection.$set(contractorselection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(eurotextfield.$$.fragment, local);
    			transition_in(paymentfrequencycomponent.$$.fragment, local);
    			transition_in(contractorselection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(eurotextfield.$$.fragment, local);
    			transition_out(paymentfrequencycomponent.$$.fragment, local);
    			transition_out(contractorselection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(eurotextfield);
    			destroy_component(paymentfrequencycomponent);
    			destroy_component(contractorselection);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SelectLegacyContract', slots, []);
    	let { contract } = $$props;
    	const writable_props = ['contract'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SelectLegacyContract> was created with unknown prop '${key}'`);
    	});

    	function eurotextfield_integer_binding(value) {
    		if ($$self.$$.not_equal(contract.paymentValue, value)) {
    			contract.paymentValue = value;
    			$$invalidate(0, contract);
    		}
    	}

    	function paymentfrequencycomponent_paymentFrequency_binding(value) {
    		if ($$self.$$.not_equal(contract.paymentFrequency, value)) {
    			contract.paymentFrequency = value;
    			$$invalidate(0, contract);
    		}
    	}

    	function contractorselection_partner_binding(value) {
    		if ($$self.$$.not_equal(contract.contractor, value)) {
    			contract.contractor = value;
    			$$invalidate(0, contract);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('contract' in $$props) $$invalidate(0, contract = $$props.contract);
    	};

    	$$self.$capture_state = () => ({
    		ContractorSelection,
    		PaymentFrequencyComponent: PaymentFrequencySelection,
    		EuroTextfield,
    		contract
    	});

    	$$self.$inject_state = $$props => {
    		if ('contract' in $$props) $$invalidate(0, contract = $$props.contract);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		contract,
    		eurotextfield_integer_binding,
    		paymentfrequencycomponent_paymentFrequency_binding,
    		contractorselection_partner_binding
    	];
    }

    class SelectLegacyContract extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$E, safe_not_equal, { contract: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SelectLegacyContract",
    			options,
    			id: create_fragment$E.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contract*/ ctx[0] === undefined && !('contract' in props)) {
    			console.warn("<SelectLegacyContract> was created without expected prop 'contract'");
    		}
    	}

    	get contract() {
    		throw new Error("<SelectLegacyContract>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contract(value) {
    		throw new Error("<SelectLegacyContract>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var InvestmentPeriodOptions;
    (function (InvestmentPeriodOptions) {
        InvestmentPeriodOptions["upToFiveYears"] = "upToFiveYears";
        InvestmentPeriodOptions["fiveToTwentyYears"] = "fiveToTwentyYears";
        InvestmentPeriodOptions["moreThanTwentyYears"] = "moreThanTwentyYears";
    })(InvestmentPeriodOptions || (InvestmentPeriodOptions = {}));
    var RiskLevel;
    (function (RiskLevel) {
        RiskLevel["veryHigh"] = "veryHigh";
        RiskLevel["high"] = "high";
        RiskLevel["medium"] = "medium";
        RiskLevel["low"] = "low";
    })(RiskLevel || (RiskLevel = {}));

    let $l$1;
    l.subscribe(v => $l$1 = v);
    const createNeedsAssessment = () => {
        return {
            client: createEmptyClientDto(),
            insurances: {
                accidentInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                },
                disabilityInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                },
                homeInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                    homeOwnership: false,
                    home: {
                        builtArea: '',
                        floors: '',
                        roofType: '',
                        cellar: false,
                        pool: false,
                        photovoltaic: false,
                        photovoltaicRemarks: '',
                        specialAssets: '',
                    },
                    householdInsurance: false,
                    liabilityInsurance: false,
                },
                legalProtectionInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                },
                deathInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                },
                illnessInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                },
                retirementInsurance: {
                    clientHas: false,
                    clientWishes: false,
                    contractor: {},
                },
                careRemarks: '',
            },
            wealthBuilding: {
                retirementProvision: { desired: false },
                saveBig: { desired: false },
                saveEducation: { desired: false },
                otherInvestmentGoal: { desired: false },
                alreadyInvested: { desired: false },
                paymentOnce: { desired: false },
                paymentMonthly: { desired: false },
                paymentYearly: { desired: false },
            },
            cars: [],
            experiences: [
                { name: $l$1.needsAssessment.experiences.lifeInsurance },
                { name: $l$1.needsAssessment.experiences.investmentFonds },
                { name: $l$1.needsAssessment.experiences.bonds },
                { name: $l$1.needsAssessment.experiences.shareHolding },
                { name: $l$1.needsAssessment.experiences.options },
                { name: $l$1.needsAssessment.experiences.financing },
                { name: $l$1.needsAssessment.experiences.guarantees },
                { name: $l$1.needsAssessment.experiences.properties },
                { name: $l$1.needsAssessment.experiences.certificates }
            ],
            powerOfAttorny: {
                date: today()
            },
            legalNotice: {
                date: today()
            }
        };
    };
    function today() {
        let yourDate = new Date();
        const offset = yourDate.getTimezoneOffset();
        yourDate = new Date(yourDate.getTime() - (offset * 60 * 1000));
        return yourDate.toISOString().split('T')[0];
    }

    /* src/components/needs_assessment/BaseInsuranceComponent.svelte generated by Svelte v3.44.3 */
    const file$v = "src/components/needs_assessment/BaseInsuranceComponent.svelte";
    const get_additionalInput_slot_changes = dirty => ({});
    const get_additionalInput_slot_context = ctx => ({});

    // (24:4) {#if helpToggle}
    function create_if_block_1$9(ctx) {
    	let div;
    	let needsassessmentcard;
    	let div_transition;
    	let current;

    	needsassessmentcard = new NeedsAssessmentCard({
    			props: {
    				subtitle: /*helpSubtitle*/ ctx[2],
    				text: /*helpText*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(needsassessmentcard.$$.fragment);
    			attr_dev(div, "class", "help svelte-k8w043");
    			add_location(div, file$v, 24, 4, 809);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(needsassessmentcard, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const needsassessmentcard_changes = {};
    			if (dirty & /*helpSubtitle*/ 4) needsassessmentcard_changes.subtitle = /*helpSubtitle*/ ctx[2];
    			if (dirty & /*helpText*/ 8) needsassessmentcard_changes.text = /*helpText*/ ctx[3];
    			needsassessmentcard.$set(needsassessmentcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(needsassessmentcard.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(needsassessmentcard.$$.fragment, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(needsassessmentcard);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(24:4) {#if helpToggle}",
    		ctx
    	});

    	return block;
    }

    // (34:4) {:else}
    function create_else_block$3(ctx) {
    	let div;
    	let stylizedcheckbox;
    	let updating_value;
    	let div_transition;
    	let current;

    	function stylizedcheckbox_value_binding_1(value) {
    		/*stylizedcheckbox_value_binding_1*/ ctx[11](value);
    	}

    	let stylizedcheckbox_props = {
    		label: /*$l*/ ctx[5].needsAssessment.wishesOffer
    	};

    	if (/*insurance*/ ctx[0].clientWishes !== void 0) {
    		stylizedcheckbox_props.value = /*insurance*/ ctx[0].clientWishes;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding_1));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(stylizedcheckbox.$$.fragment);
    			add_location(div, file$v, 34, 4, 1154);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(stylizedcheckbox, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*$l*/ 32) stylizedcheckbox_changes.label = /*$l*/ ctx[5].needsAssessment.wishesOffer;

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*insurance*/ ctx[0].clientWishes;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(stylizedcheckbox);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(34:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (29:4) {#if insurance.clientHas}
    function create_if_block$h(ctx) {
    	let div;
    	let selectlegacycontract;
    	let updating_contract;
    	let t;
    	let div_transition;
    	let current;

    	function selectlegacycontract_contract_binding(value) {
    		/*selectlegacycontract_contract_binding*/ ctx[10](value);
    	}

    	let selectlegacycontract_props = {};

    	if (/*insurance*/ ctx[0] !== void 0) {
    		selectlegacycontract_props.contract = /*insurance*/ ctx[0];
    	}

    	selectlegacycontract = new SelectLegacyContract({
    			props: selectlegacycontract_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(selectlegacycontract, 'contract', selectlegacycontract_contract_binding));
    	const additionalInput_slot_template = /*#slots*/ ctx[7].additionalInput;
    	const additionalInput_slot = create_slot(additionalInput_slot_template, ctx, /*$$scope*/ ctx[6], get_additionalInput_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(selectlegacycontract.$$.fragment);
    			t = space();
    			if (additionalInput_slot) additionalInput_slot.c();
    			attr_dev(div, "class", "contract svelte-k8w043");
    			add_location(div, file$v, 29, 4, 978);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(selectlegacycontract, div, null);
    			append_dev(div, t);

    			if (additionalInput_slot) {
    				additionalInput_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const selectlegacycontract_changes = {};

    			if (!updating_contract && dirty & /*insurance*/ 1) {
    				updating_contract = true;
    				selectlegacycontract_changes.contract = /*insurance*/ ctx[0];
    				add_flush_callback(() => updating_contract = false);
    			}

    			selectlegacycontract.$set(selectlegacycontract_changes);

    			if (additionalInput_slot) {
    				if (additionalInput_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						additionalInput_slot,
    						additionalInput_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(additionalInput_slot_template, /*$$scope*/ ctx[6], dirty, get_additionalInput_slot_changes),
    						get_additionalInput_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(selectlegacycontract.$$.fragment, local);
    			transition_in(additionalInput_slot, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(selectlegacycontract.$$.fragment, local);
    			transition_out(additionalInput_slot, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(selectlegacycontract);
    			if (additionalInput_slot) additionalInput_slot.d(detaching);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(29:4) {#if insurance.clientHas}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$D(ctx) {
    	let div2;
    	let div0;
    	let stylizedcheckbox;
    	let updating_value;
    	let t0;
    	let div1;
    	let helptogglebutton;
    	let updating_value_1;
    	let t1;
    	let t2;
    	let current_block_type_index;
    	let if_block1;
    	let current;

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[8](value);
    	}

    	let stylizedcheckbox_props = { label: /*label*/ ctx[1] };

    	if (/*insurance*/ ctx[0].clientHas !== void 0) {
    		stylizedcheckbox_props.value = /*insurance*/ ctx[0].clientHas;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	function helptogglebutton_value_binding(value) {
    		/*helptogglebutton_value_binding*/ ctx[9](value);
    	}

    	let helptogglebutton_props = {};

    	if (/*helpToggle*/ ctx[4] !== void 0) {
    		helptogglebutton_props.value = /*helpToggle*/ ctx[4];
    	}

    	helptogglebutton = new HelpToggleButton({
    			props: helptogglebutton_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(helptogglebutton, 'value', helptogglebutton_value_binding));
    	let if_block0 = /*helpToggle*/ ctx[4] && create_if_block_1$9(ctx);
    	const if_block_creators = [create_if_block$h, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*insurance*/ ctx[0].clientHas) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(stylizedcheckbox.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(helptogglebutton.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if_block1.c();
    			attr_dev(div0, "class", "label svelte-k8w043");
    			add_location(div0, file$v, 17, 4, 596);
    			attr_dev(div1, "class", "toggle svelte-k8w043");
    			add_location(div1, file$v, 20, 4, 700);
    			attr_dev(div2, "class", "insurance-item svelte-k8w043");
    			add_location(div2, file$v, 16, 0, 563);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(stylizedcheckbox, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(helptogglebutton, div1, null);
    			append_dev(div2, t1);
    			if (if_block0) if_block0.m(div2, null);
    			append_dev(div2, t2);
    			if_blocks[current_block_type_index].m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*label*/ 2) stylizedcheckbox_changes.label = /*label*/ ctx[1];

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*insurance*/ ctx[0].clientHas;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    			const helptogglebutton_changes = {};

    			if (!updating_value_1 && dirty & /*helpToggle*/ 16) {
    				updating_value_1 = true;
    				helptogglebutton_changes.value = /*helpToggle*/ ctx[4];
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			helptogglebutton.$set(helptogglebutton_changes);

    			if (/*helpToggle*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*helpToggle*/ 16) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$9(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div2, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div2, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			transition_in(helptogglebutton.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			transition_out(helptogglebutton.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(stylizedcheckbox);
    			destroy_component(helptogglebutton);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(5, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BaseInsuranceComponent', slots, ['additionalInput']);
    	let helpToggle = false;
    	let { insurance } = $$props;
    	let { label = "" } = $$props;
    	let { helpSubtitle = "" } = $$props;
    	let { helpText = "" } = $$props;
    	const writable_props = ['insurance', 'label', 'helpSubtitle', 'helpText'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BaseInsuranceComponent> was created with unknown prop '${key}'`);
    	});

    	function stylizedcheckbox_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.clientHas, value)) {
    			insurance.clientHas = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function helptogglebutton_value_binding(value) {
    		helpToggle = value;
    		$$invalidate(4, helpToggle);
    	}

    	function selectlegacycontract_contract_binding(value) {
    		insurance = value;
    		$$invalidate(0, insurance);
    	}

    	function stylizedcheckbox_value_binding_1(value) {
    		if ($$self.$$.not_equal(insurance.clientWishes, value)) {
    			insurance.clientWishes = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('insurance' in $$props) $$invalidate(0, insurance = $$props.insurance);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('helpSubtitle' in $$props) $$invalidate(2, helpSubtitle = $$props.helpSubtitle);
    		if ('helpText' in $$props) $$invalidate(3, helpText = $$props.helpText);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		slide,
    		HelpToggleButton,
    		NeedsAssessmentCard,
    		SelectLegacyContract,
    		StylizedCheckbox,
    		helpToggle,
    		insurance,
    		label,
    		helpSubtitle,
    		helpText,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('helpToggle' in $$props) $$invalidate(4, helpToggle = $$props.helpToggle);
    		if ('insurance' in $$props) $$invalidate(0, insurance = $$props.insurance);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('helpSubtitle' in $$props) $$invalidate(2, helpSubtitle = $$props.helpSubtitle);
    		if ('helpText' in $$props) $$invalidate(3, helpText = $$props.helpText);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		insurance,
    		label,
    		helpSubtitle,
    		helpText,
    		helpToggle,
    		$l,
    		$$scope,
    		slots,
    		stylizedcheckbox_value_binding,
    		helptogglebutton_value_binding,
    		selectlegacycontract_contract_binding,
    		stylizedcheckbox_value_binding_1
    	];
    }

    class BaseInsuranceComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$D, safe_not_equal, {
    			insurance: 0,
    			label: 1,
    			helpSubtitle: 2,
    			helpText: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BaseInsuranceComponent",
    			options,
    			id: create_fragment$D.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*insurance*/ ctx[0] === undefined && !('insurance' in props)) {
    			console.warn("<BaseInsuranceComponent> was created without expected prop 'insurance'");
    		}
    	}

    	get insurance() {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insurance(value) {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get helpSubtitle() {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set helpSubtitle(value) {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get helpText() {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set helpText(value) {
    		throw new Error("<BaseInsuranceComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/checkbox/dist/Checkbox.svelte generated by Svelte v3.44.3 */
    const file$u = "node_modules/@smui/checkbox/dist/Checkbox.svelte";

    function create_fragment$C(ctx) {
    	let div3;
    	let input;
    	let input_class_value;
    	let input_value_value;
    	let input_data_indeterminate_value;
    	let useActions_action;
    	let t0;
    	let div1;
    	let svg;
    	let path;
    	let t1;
    	let div0;
    	let t2;
    	let div2;
    	let div3_class_value;
    	let div3_style_value;
    	let useActions_action_1;
    	let Ripple_action;
    	let mounted;
    	let dispose;

    	let input_levels = [
    		{
    			class: input_class_value = classMap({
    				[/*input$class*/ ctx[9]]: true,
    				'mdc-checkbox__native-control': true
    			})
    		},
    		{ type: "checkbox" },
    		/*inputProps*/ ctx[20],
    		{ disabled: /*disabled*/ ctx[1] },
    		{
    			__value: input_value_value = /*isUninitializedValue*/ ctx[19](/*valueKey*/ ctx[7])
    			? /*value*/ ctx[6]
    			: /*valueKey*/ ctx[7]
    		},
    		{
    			"data-indeterminate": input_data_indeterminate_value = !/*isUninitializedValue*/ ctx[19](/*indeterminate*/ ctx[0]) && /*indeterminate*/ ctx[0]
    			? 'true'
    			: undefined
    		},
    		/*nativeControlAttrs*/ ctx[16],
    		prefixFilter(/*$$restProps*/ ctx[26], 'input$')
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	let div3_levels = [
    		{
    			class: div3_class_value = classMap({
    				[/*className*/ ctx[3]]: true,
    				'mdc-checkbox': true,
    				'mdc-checkbox--disabled': /*disabled*/ ctx[1],
    				'mdc-checkbox--touch': /*touch*/ ctx[5],
    				'mdc-data-table__header-row-checkbox': /*context*/ ctx[21] === 'data-table' && /*dataTableHeader*/ ctx[22],
    				'mdc-data-table__row-checkbox': /*context*/ ctx[21] === 'data-table' && !/*dataTableHeader*/ ctx[22],
    				.../*internalClasses*/ ctx[14]
    			})
    		},
    		{
    			style: div3_style_value = Object.entries(/*internalStyles*/ ctx[15]).map(func$3).concat([/*style*/ ctx[4]]).join(' ')
    		},
    		exclude(/*$$restProps*/ ctx[26], ['input$'])
    	];

    	let div3_data = {};

    	for (let i = 0; i < div3_levels.length; i += 1) {
    		div3_data = assign(div3_data, div3_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			input = element("input");
    			t0 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t1 = space();
    			div0 = element("div");
    			t2 = space();
    			div2 = element("div");
    			set_attributes(input, input_data);
    			add_location(input, file$u, 30, 2, 804);
    			attr_dev(path, "class", "mdc-checkbox__checkmark-path");
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "d", "M1.73,12.91 8.1,19.28 22.79,4.59");
    			add_location(path, file$u, 52, 6, 1442);
    			attr_dev(svg, "class", "mdc-checkbox__checkmark");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$u, 51, 4, 1378);
    			attr_dev(div0, "class", "mdc-checkbox__mixedmark");
    			add_location(div0, file$u, 58, 4, 1582);
    			attr_dev(div1, "class", "mdc-checkbox__background");
    			add_location(div1, file$u, 50, 2, 1335);
    			attr_dev(div2, "class", "mdc-checkbox__ripple");
    			add_location(div2, file$u, 60, 2, 1633);
    			set_attributes(div3, div3_data);
    			add_location(div3, file$u, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, input);
    			if (input.autofocus) input.focus();
    			/*input_binding*/ ctx[36](input);
    			input.checked = /*nativeChecked*/ ctx[12];
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			/*div3_binding*/ ctx[38](div3);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, input, /*input$use*/ ctx[8])),
    					listen_dev(input, "change", /*input_change_handler*/ ctx[37]),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[34], false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[35], false, false, false),
    					action_destroyer(useActions_action_1 = useActions.call(null, div3, /*use*/ ctx[2])),
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, div3)),
    					action_destroyer(Ripple_action = Ripple.call(null, div3, {
    						unbounded: true,
    						addClass: /*addClass*/ ctx[23],
    						removeClass: /*removeClass*/ ctx[24],
    						addStyle: /*addStyle*/ ctx[25],
    						active: /*rippleActive*/ ctx[17],
    						eventTarget: /*checkbox*/ ctx[11]
    					})),
    					listen_dev(div3, "animationend", /*animationend_handler*/ ctx[39], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				dirty[0] & /*input$class*/ 512 && input_class_value !== (input_class_value = classMap({
    					[/*input$class*/ ctx[9]]: true,
    					'mdc-checkbox__native-control': true
    				})) && { class: input_class_value },
    				{ type: "checkbox" },
    				/*inputProps*/ ctx[20],
    				dirty[0] & /*disabled*/ 2 && { disabled: /*disabled*/ ctx[1] },
    				dirty[0] & /*valueKey, value*/ 192 && input_value_value !== (input_value_value = /*isUninitializedValue*/ ctx[19](/*valueKey*/ ctx[7])
    				? /*value*/ ctx[6]
    				: /*valueKey*/ ctx[7]) && { __value: input_value_value },
    				dirty[0] & /*indeterminate*/ 1 && input_data_indeterminate_value !== (input_data_indeterminate_value = !/*isUninitializedValue*/ ctx[19](/*indeterminate*/ ctx[0]) && /*indeterminate*/ ctx[0]
    				? 'true'
    				: undefined) && {
    					"data-indeterminate": input_data_indeterminate_value
    				},
    				dirty[0] & /*nativeControlAttrs*/ 65536 && /*nativeControlAttrs*/ ctx[16],
    				dirty[0] & /*$$restProps*/ 67108864 && prefixFilter(/*$$restProps*/ ctx[26], 'input$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*input$use*/ 256) useActions_action.update.call(null, /*input$use*/ ctx[8]);

    			if (dirty[0] & /*nativeChecked*/ 4096) {
    				input.checked = /*nativeChecked*/ ctx[12];
    			}

    			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
    				dirty[0] & /*className, disabled, touch, internalClasses*/ 16426 && div3_class_value !== (div3_class_value = classMap({
    					[/*className*/ ctx[3]]: true,
    					'mdc-checkbox': true,
    					'mdc-checkbox--disabled': /*disabled*/ ctx[1],
    					'mdc-checkbox--touch': /*touch*/ ctx[5],
    					'mdc-data-table__header-row-checkbox': /*context*/ ctx[21] === 'data-table' && /*dataTableHeader*/ ctx[22],
    					'mdc-data-table__row-checkbox': /*context*/ ctx[21] === 'data-table' && !/*dataTableHeader*/ ctx[22],
    					.../*internalClasses*/ ctx[14]
    				})) && { class: div3_class_value },
    				dirty[0] & /*internalStyles, style*/ 32784 && div3_style_value !== (div3_style_value = Object.entries(/*internalStyles*/ ctx[15]).map(func$3).concat([/*style*/ ctx[4]]).join(' ')) && { style: div3_style_value },
    				dirty[0] & /*$$restProps*/ 67108864 && exclude(/*$$restProps*/ ctx[26], ['input$'])
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*use*/ 4) useActions_action_1.update.call(null, /*use*/ ctx[2]);

    			if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*rippleActive, checkbox*/ 133120) Ripple_action.update.call(null, {
    				unbounded: true,
    				addClass: /*addClass*/ ctx[23],
    				removeClass: /*removeClass*/ ctx[24],
    				addStyle: /*addStyle*/ ctx[25],
    				active: /*rippleActive*/ ctx[17],
    				eventTarget: /*checkbox*/ ctx[11]
    			});
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			/*input_binding*/ ctx[36](null);
    			/*div3_binding*/ ctx[38](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$3 = ([name, value]) => `${name}: ${value};`;

    function instance_1$6($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","disabled","touch","indeterminate","group","checked","value","valueKey","input$use","input$class","getId","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Checkbox', slots, []);
    	var _a;
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { disabled = false } = $$props;
    	let { touch = false } = $$props;
    	let { indeterminate = uninitializedValue } = $$props;
    	let { group = uninitializedValue } = $$props;
    	let { checked = uninitializedValue } = $$props;
    	let { value = null } = $$props;
    	let { valueKey = uninitializedValue } = $$props;
    	let { input$use = [] } = $$props;
    	let { input$class = '' } = $$props;
    	let element;
    	let instance;
    	let checkbox;
    	let internalClasses = {};
    	let internalStyles = {};
    	let nativeControlAttrs = {};
    	let rippleActive = false;

    	let inputProps = (_a = getContext('SMUI:generic:input:props')) !== null && _a !== void 0
    	? _a
    	: {};

    	let nativeChecked = isUninitializedValue(group)
    	? isUninitializedValue(checked)
    		? false
    		: checked !== null && checked !== void 0
    			? checked
    			: undefined
    	: group.indexOf(value) !== -1;

    	let context = getContext('SMUI:checkbox:context');
    	let dataTableHeader = getContext('SMUI:data-table:row:header');
    	let previousChecked = checked;
    	let previousGroup = isUninitializedValue(group) ? [] : [...group];
    	let previousNativeChecked = nativeChecked;

    	onMount(() => {
    		$$invalidate(11, checkbox.indeterminate = !isUninitializedValue(indeterminate) && indeterminate, checkbox);

    		$$invalidate(10, instance = new MDCCheckboxFoundation({
    				addClass,
    				forceLayout: () => element.offsetWidth,
    				hasNativeControl: () => true,
    				isAttachedToDOM: () => Boolean(element.parentNode),
    				isChecked: () => nativeChecked !== null && nativeChecked !== void 0
    				? nativeChecked
    				: false,
    				isIndeterminate: () => isUninitializedValue(indeterminate)
    				? false
    				: indeterminate,
    				removeClass,
    				removeNativeControlAttr,
    				setNativeControlAttr: addNativeControlAttr,
    				setNativeControlDisabled: value => $$invalidate(1, disabled = value)
    			}));

    		const accessor = {
    			_smui_checkbox_accessor: true,
    			get element() {
    				return getElement();
    			},
    			get checked() {
    				return nativeChecked !== null && nativeChecked !== void 0
    				? nativeChecked
    				: false;
    			},
    			set checked(value) {
    				if (nativeChecked !== value) {
    					$$invalidate(12, nativeChecked = value);
    				}
    			},
    			get indeterminate() {
    				return isUninitializedValue(indeterminate)
    				? false
    				: indeterminate;
    			},
    			set indeterminate(value) {
    				$$invalidate(0, indeterminate = value);
    			},
    			activateRipple() {
    				if (!disabled) {
    					$$invalidate(17, rippleActive = true);
    				}
    			},
    			deactivateRipple() {
    				$$invalidate(17, rippleActive = false);
    			}
    		};

    		dispatch(element, 'SMUIGenericInput:mount', accessor);
    		dispatch(element, 'SMUICheckbox:mount', accessor);
    		instance.init();

    		return () => {
    			dispatch(element, 'SMUIGenericInput:unmount', accessor);
    			dispatch(element, 'SMUICheckbox:unmount', accessor);
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(14, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(14, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(15, internalStyles);
    			} else {
    				$$invalidate(15, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function addNativeControlAttr(name, value) {
    		if (nativeControlAttrs[name] !== value) {
    			$$invalidate(16, nativeControlAttrs[name] = value, nativeControlAttrs);
    		}
    	}

    	function removeNativeControlAttr(name) {
    		if (!(name in nativeControlAttrs) || nativeControlAttrs[name] != null) {
    			$$invalidate(16, nativeControlAttrs[name] = undefined, nativeControlAttrs);
    		}
    	}

    	function getId() {
    		return inputProps && inputProps.id;
    	}

    	function getElement() {
    		return element;
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			checkbox = $$value;
    			((((((((($$invalidate(11, checkbox), $$invalidate(27, group)), $$invalidate(33, previousNativeChecked)), $$invalidate(12, nativeChecked)), $$invalidate(6, value)), $$invalidate(32, previousGroup)), $$invalidate(28, checked)), $$invalidate(31, previousChecked)), $$invalidate(0, indeterminate)), $$invalidate(10, instance));
    		});
    	}

    	function input_change_handler() {
    		nativeChecked = this.checked;
    		((((((((($$invalidate(12, nativeChecked), $$invalidate(27, group)), $$invalidate(33, previousNativeChecked)), $$invalidate(6, value)), $$invalidate(32, previousGroup)), $$invalidate(28, checked)), $$invalidate(31, previousChecked)), $$invalidate(0, indeterminate)), $$invalidate(11, checkbox)), $$invalidate(10, instance));
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(13, element);
    		});
    	}

    	const animationend_handler = () => instance && instance.handleAnimationEnd();

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(26, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
    		if ('disabled' in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
    		if ('touch' in $$new_props) $$invalidate(5, touch = $$new_props.touch);
    		if ('indeterminate' in $$new_props) $$invalidate(0, indeterminate = $$new_props.indeterminate);
    		if ('group' in $$new_props) $$invalidate(27, group = $$new_props.group);
    		if ('checked' in $$new_props) $$invalidate(28, checked = $$new_props.checked);
    		if ('value' in $$new_props) $$invalidate(6, value = $$new_props.value);
    		if ('valueKey' in $$new_props) $$invalidate(7, valueKey = $$new_props.valueKey);
    		if ('input$use' in $$new_props) $$invalidate(8, input$use = $$new_props.input$use);
    		if ('input$class' in $$new_props) $$invalidate(9, input$class = $$new_props.input$class);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		MDCCheckboxFoundation,
    		onMount,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		Ripple,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		style,
    		disabled,
    		touch,
    		indeterminate,
    		group,
    		checked,
    		value,
    		valueKey,
    		input$use,
    		input$class,
    		element,
    		instance,
    		checkbox,
    		internalClasses,
    		internalStyles,
    		nativeControlAttrs,
    		rippleActive,
    		inputProps,
    		nativeChecked,
    		context,
    		dataTableHeader,
    		previousChecked,
    		previousGroup,
    		previousNativeChecked,
    		addClass,
    		removeClass,
    		addStyle,
    		addNativeControlAttr,
    		removeNativeControlAttr,
    		getId,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) _a = $$new_props._a;
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$new_props.disabled);
    		if ('touch' in $$props) $$invalidate(5, touch = $$new_props.touch);
    		if ('indeterminate' in $$props) $$invalidate(0, indeterminate = $$new_props.indeterminate);
    		if ('group' in $$props) $$invalidate(27, group = $$new_props.group);
    		if ('checked' in $$props) $$invalidate(28, checked = $$new_props.checked);
    		if ('value' in $$props) $$invalidate(6, value = $$new_props.value);
    		if ('valueKey' in $$props) $$invalidate(7, valueKey = $$new_props.valueKey);
    		if ('input$use' in $$props) $$invalidate(8, input$use = $$new_props.input$use);
    		if ('input$class' in $$props) $$invalidate(9, input$class = $$new_props.input$class);
    		if ('element' in $$props) $$invalidate(13, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(10, instance = $$new_props.instance);
    		if ('checkbox' in $$props) $$invalidate(11, checkbox = $$new_props.checkbox);
    		if ('internalClasses' in $$props) $$invalidate(14, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(15, internalStyles = $$new_props.internalStyles);
    		if ('nativeControlAttrs' in $$props) $$invalidate(16, nativeControlAttrs = $$new_props.nativeControlAttrs);
    		if ('rippleActive' in $$props) $$invalidate(17, rippleActive = $$new_props.rippleActive);
    		if ('inputProps' in $$props) $$invalidate(20, inputProps = $$new_props.inputProps);
    		if ('nativeChecked' in $$props) $$invalidate(12, nativeChecked = $$new_props.nativeChecked);
    		if ('context' in $$props) $$invalidate(21, context = $$new_props.context);
    		if ('dataTableHeader' in $$props) $$invalidate(22, dataTableHeader = $$new_props.dataTableHeader);
    		if ('previousChecked' in $$props) $$invalidate(31, previousChecked = $$new_props.previousChecked);
    		if ('previousGroup' in $$props) $$invalidate(32, previousGroup = $$new_props.previousGroup);
    		if ('previousNativeChecked' in $$props) $$invalidate(33, previousNativeChecked = $$new_props.previousNativeChecked);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*group, nativeChecked, value, checked, indeterminate, checkbox, instance*/ 402660417 | $$self.$$.dirty[1] & /*previousNativeChecked, previousGroup, previousChecked*/ 7) {
    			{
    				// This is a substitute for an on:change listener that is
    				// smarter about when it calls the instance's handler. I do
    				// this so that a group of changes will only trigger one
    				// handler call, since the handler will reset currently
    				// running animations.
    				let callHandleChange = false;

    				// First check for group state.
    				if (!isUninitializedValue(group)) {
    					if (previousNativeChecked !== nativeChecked) {
    						// The change needs to flow up.
    						const idx = group.indexOf(value);

    						if (nativeChecked && idx === -1) {
    							group.push(value);
    							((((((((($$invalidate(27, group), $$invalidate(33, previousNativeChecked)), $$invalidate(12, nativeChecked)), $$invalidate(6, value)), $$invalidate(32, previousGroup)), $$invalidate(28, checked)), $$invalidate(31, previousChecked)), $$invalidate(0, indeterminate)), $$invalidate(11, checkbox)), $$invalidate(10, instance));
    						} else if (!nativeChecked && idx !== -1) {
    							group.splice(idx, 1);
    							((((((((($$invalidate(27, group), $$invalidate(33, previousNativeChecked)), $$invalidate(12, nativeChecked)), $$invalidate(6, value)), $$invalidate(32, previousGroup)), $$invalidate(28, checked)), $$invalidate(31, previousChecked)), $$invalidate(0, indeterminate)), $$invalidate(11, checkbox)), $$invalidate(10, instance));
    						}

    						callHandleChange = true;
    					} else {
    						// Potential changes need to flow down.
    						const idxPrev = previousGroup.indexOf(value);

    						const idx = group.indexOf(value);

    						if (idxPrev > -1 && idx === -1) {
    							// The checkbox was removed from the group.
    							$$invalidate(12, nativeChecked = false);

    							callHandleChange = true;
    						} else if (idx > -1 && idxPrev === -1) {
    							// The checkbox was added to the group.
    							$$invalidate(12, nativeChecked = true);

    							callHandleChange = true;
    						}
    					}
    				}

    				// Now check individual state.
    				if (isUninitializedValue(checked)) {
    					if (!!previousNativeChecked !== !!nativeChecked) {
    						// The checkbox was clicked by the user.
    						callHandleChange = true;
    					}
    				} else if (checked !== (nativeChecked !== null && nativeChecked !== void 0
    				? nativeChecked
    				: null)) {
    					if (checked === previousChecked) {
    						// The checkbox was clicked by the user
    						// and the change needs to flow up.
    						$$invalidate(28, checked = nativeChecked !== null && nativeChecked !== void 0
    						? nativeChecked
    						: null);

    						if (!isUninitializedValue(indeterminate)) {
    							$$invalidate(0, indeterminate = false);
    						}
    					} else {
    						// The checkbox was changed programmatically
    						// and the change needs to flow down.
    						$$invalidate(12, nativeChecked = checked !== null && checked !== void 0
    						? checked
    						: undefined);
    					}

    					callHandleChange = true;
    				}

    				if (checkbox) {
    					// Sync indeterminate state with the native input.
    					if (isUninitializedValue(indeterminate)) {
    						if (checkbox.indeterminate) {
    							// I don't think this can happen, but just in case.
    							$$invalidate(11, checkbox.indeterminate = false, checkbox);

    							callHandleChange = true;
    						}
    					} else {
    						if (!indeterminate && checkbox.indeterminate) {
    							$$invalidate(11, checkbox.indeterminate = false, checkbox);
    							callHandleChange = true;
    						} else if (indeterminate && !checkbox.indeterminate) {
    							$$invalidate(11, checkbox.indeterminate = true, checkbox);
    							callHandleChange = true;
    						}
    					}
    				}

    				$$invalidate(31, previousChecked = checked);
    				$$invalidate(32, previousGroup = isUninitializedValue(group) ? [] : [...group]);
    				$$invalidate(33, previousNativeChecked = nativeChecked);

    				if (callHandleChange && instance) {
    					instance.handleChange();
    				}
    			}
    		}
    	};

    	return [
    		indeterminate,
    		disabled,
    		use,
    		className,
    		style,
    		touch,
    		value,
    		valueKey,
    		input$use,
    		input$class,
    		instance,
    		checkbox,
    		nativeChecked,
    		element,
    		internalClasses,
    		internalStyles,
    		nativeControlAttrs,
    		rippleActive,
    		forwardEvents,
    		isUninitializedValue,
    		inputProps,
    		context,
    		dataTableHeader,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		group,
    		checked,
    		getId,
    		getElement,
    		previousChecked,
    		previousGroup,
    		previousNativeChecked,
    		blur_handler,
    		focus_handler,
    		input_binding,
    		input_change_handler,
    		div3_binding,
    		animationend_handler
    	];
    }

    class Checkbox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$6,
    			create_fragment$C,
    			safe_not_equal,
    			{
    				use: 2,
    				class: 3,
    				style: 4,
    				disabled: 1,
    				touch: 5,
    				indeterminate: 0,
    				group: 27,
    				checked: 28,
    				value: 6,
    				valueKey: 7,
    				input$use: 8,
    				input$class: 9,
    				getId: 29,
    				getElement: 30
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Checkbox",
    			options,
    			id: create_fragment$C.name
    		});
    	}

    	get use() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indeterminate() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indeterminate(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checked() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valueKey() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valueKey(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input$use() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input$use(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input$class() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input$class(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getId() {
    		return this.$$.ctx[29];
    	}

    	set getId(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[30];
    	}

    	set getElement(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/HomeInsurance.svelte generated by Svelte v3.44.3 */
    const file$t = "src/components/needs_assessment/HomeInsurance.svelte";

    // (15:2) <FormField>
    function create_default_slot_4$f(ctx) {
    	let checkbox;
    	let updating_checked;
    	let current;

    	function checkbox_checked_binding(value) {
    		/*checkbox_checked_binding*/ ctx[5](value);
    	}

    	let checkbox_props = { touch: true };

    	if (/*insurance*/ ctx[0].home.cellar !== void 0) {
    		checkbox_props.checked = /*insurance*/ ctx[0].home.cellar;
    	}

    	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
    	binding_callbacks.push(() => bind(checkbox, 'checked', checkbox_checked_binding));

    	const block = {
    		c: function create() {
    			create_component(checkbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checkbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checkbox_changes = {};

    			if (!updating_checked && dirty & /*insurance*/ 1) {
    				updating_checked = true;
    				checkbox_changes.checked = /*insurance*/ ctx[0].home.cellar;
    				add_flush_callback(() => updating_checked = false);
    			}

    			checkbox.$set(checkbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checkbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$f.name,
    		type: "slot",
    		source: "(15:2) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (17:4) 
    function create_label_slot_1$2(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[1].personal.home.cellar + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$t, 16, 4, 1026);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t_value !== (t_value = /*$l*/ ctx[1].personal.home.cellar + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1$2.name,
    		type: "slot",
    		source: "(17:4) ",
    		ctx
    	});

    	return block;
    }

    // (19:2) <FormField>
    function create_default_slot_3$h(ctx) {
    	let checkbox;
    	let updating_checked;
    	let current;

    	function checkbox_checked_binding_1(value) {
    		/*checkbox_checked_binding_1*/ ctx[6](value);
    	}

    	let checkbox_props = { touch: true };

    	if (/*insurance*/ ctx[0].home.pool !== void 0) {
    		checkbox_props.checked = /*insurance*/ ctx[0].home.pool;
    	}

    	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
    	binding_callbacks.push(() => bind(checkbox, 'checked', checkbox_checked_binding_1));

    	const block = {
    		c: function create() {
    			create_component(checkbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checkbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checkbox_changes = {};

    			if (!updating_checked && dirty & /*insurance*/ 1) {
    				updating_checked = true;
    				checkbox_changes.checked = /*insurance*/ ctx[0].home.pool;
    				add_flush_callback(() => updating_checked = false);
    			}

    			checkbox.$set(checkbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checkbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$h.name,
    		type: "slot",
    		source: "(19:2) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (21:4) 
    function create_label_slot$4(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[1].personal.home.pool + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$t, 20, 4, 1169);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t_value !== (t_value = /*$l*/ ctx[1].personal.home.pool + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$4.name,
    		type: "slot",
    		source: "(21:4) ",
    		ctx
    	});

    	return block;
    }

    // (23:2) <StylizedCheckbox bind:value={insurance.home.photovoltaic} label={$l.personal.home.photovoltaic}>
    function create_default_slot_2$i(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[7](value);
    	}

    	let textfield_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.home.photovoltaicRemarks
    	};

    	if (/*insurance*/ ctx[0].home.photovoltaicRemarks !== void 0) {
    		textfield_props.value = /*insurance*/ ctx[0].home.photovoltaicRemarks;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.home.photovoltaicRemarks;

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*insurance*/ ctx[0].home.photovoltaicRemarks;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$i.name,
    		type: "slot",
    		source: "(23:2) <StylizedCheckbox bind:value={insurance.home.photovoltaic} label={$l.personal.home.photovoltaic}>",
    		ctx
    	});

    	return block;
    }

    // (11:0) <StylizedCheckbox bind:value={insurance.homeOwnership} label={$l.needsAssessment.insurances.homeInsurance.homeOwnershipLabel}>
    function create_default_slot_1$k(ctx) {
    	let textfield0;
    	let updating_value;
    	let t0;
    	let textfield1;
    	let updating_value_1;
    	let t1;
    	let textfield2;
    	let updating_value_2;
    	let t2;
    	let formfield0;
    	let t3;
    	let formfield1;
    	let t4;
    	let stylizedcheckbox;
    	let updating_value_3;
    	let t5;
    	let textfield3;
    	let updating_value_4;
    	let current;

    	function textfield0_value_binding(value) {
    		/*textfield0_value_binding*/ ctx[2](value);
    	}

    	let textfield0_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.home.builtArea
    	};

    	if (/*insurance*/ ctx[0].home.builtArea !== void 0) {
    		textfield0_props.value = /*insurance*/ ctx[0].home.builtArea;
    	}

    	textfield0 = new Textfield({ props: textfield0_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield0, 'value', textfield0_value_binding));

    	function textfield1_value_binding(value) {
    		/*textfield1_value_binding*/ ctx[3](value);
    	}

    	let textfield1_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.home.floors
    	};

    	if (/*insurance*/ ctx[0].home.floors !== void 0) {
    		textfield1_props.value = /*insurance*/ ctx[0].home.floors;
    	}

    	textfield1 = new Textfield({ props: textfield1_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield1, 'value', textfield1_value_binding));

    	function textfield2_value_binding(value) {
    		/*textfield2_value_binding*/ ctx[4](value);
    	}

    	let textfield2_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.home.roofType
    	};

    	if (/*insurance*/ ctx[0].home.roofType !== void 0) {
    		textfield2_props.value = /*insurance*/ ctx[0].home.roofType;
    	}

    	textfield2 = new Textfield({ props: textfield2_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield2, 'value', textfield2_value_binding));

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_1$2],
    					default: [create_default_slot_4$f]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$4],
    					default: [create_default_slot_3$h]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[8](value);
    	}

    	let stylizedcheckbox_props = {
    		label: /*$l*/ ctx[1].personal.home.photovoltaic,
    		$$slots: { default: [create_default_slot_2$i] },
    		$$scope: { ctx }
    	};

    	if (/*insurance*/ ctx[0].home.photovoltaic !== void 0) {
    		stylizedcheckbox_props.value = /*insurance*/ ctx[0].home.photovoltaic;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	function textfield3_value_binding(value) {
    		/*textfield3_value_binding*/ ctx[9](value);
    	}

    	let textfield3_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.home.specialAssets
    	};

    	if (/*insurance*/ ctx[0].home.specialAssets !== void 0) {
    		textfield3_props.value = /*insurance*/ ctx[0].home.specialAssets;
    	}

    	textfield3 = new Textfield({ props: textfield3_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield3, 'value', textfield3_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield0.$$.fragment);
    			t0 = space();
    			create_component(textfield1.$$.fragment);
    			t1 = space();
    			create_component(textfield2.$$.fragment);
    			t2 = space();
    			create_component(formfield0.$$.fragment);
    			t3 = space();
    			create_component(formfield1.$$.fragment);
    			t4 = space();
    			create_component(stylizedcheckbox.$$.fragment);
    			t5 = space();
    			create_component(textfield3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(textfield1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(textfield2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(formfield0, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(formfield1, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(stylizedcheckbox, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(textfield3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield0_changes = {};
    			if (dirty & /*$l*/ 2) textfield0_changes.label = /*$l*/ ctx[1].personal.home.builtArea;

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				textfield0_changes.value = /*insurance*/ ctx[0].home.builtArea;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield0.$set(textfield0_changes);
    			const textfield1_changes = {};
    			if (dirty & /*$l*/ 2) textfield1_changes.label = /*$l*/ ctx[1].personal.home.floors;

    			if (!updating_value_1 && dirty & /*insurance*/ 1) {
    				updating_value_1 = true;
    				textfield1_changes.value = /*insurance*/ ctx[0].home.floors;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			textfield1.$set(textfield1_changes);
    			const textfield2_changes = {};
    			if (dirty & /*$l*/ 2) textfield2_changes.label = /*$l*/ ctx[1].personal.home.roofType;

    			if (!updating_value_2 && dirty & /*insurance*/ 1) {
    				updating_value_2 = true;
    				textfield2_changes.value = /*insurance*/ ctx[0].home.roofType;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			textfield2.$set(textfield2_changes);
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, $l, insurance*/ 32771) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, $l, insurance*/ 32771) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*$l*/ 2) stylizedcheckbox_changes.label = /*$l*/ ctx[1].personal.home.photovoltaic;

    			if (dirty & /*$$scope, $l, insurance*/ 32771) {
    				stylizedcheckbox_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty & /*insurance*/ 1) {
    				updating_value_3 = true;
    				stylizedcheckbox_changes.value = /*insurance*/ ctx[0].home.photovoltaic;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    			const textfield3_changes = {};
    			if (dirty & /*$l*/ 2) textfield3_changes.label = /*$l*/ ctx[1].personal.home.specialAssets;

    			if (!updating_value_4 && dirty & /*insurance*/ 1) {
    				updating_value_4 = true;
    				textfield3_changes.value = /*insurance*/ ctx[0].home.specialAssets;
    				add_flush_callback(() => updating_value_4 = false);
    			}

    			textfield3.$set(textfield3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield0.$$.fragment, local);
    			transition_in(textfield1.$$.fragment, local);
    			transition_in(textfield2.$$.fragment, local);
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			transition_in(textfield3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield0.$$.fragment, local);
    			transition_out(textfield1.$$.fragment, local);
    			transition_out(textfield2.$$.fragment, local);
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			transition_out(textfield3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(textfield1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(textfield2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(formfield0, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(formfield1, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(stylizedcheckbox, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(textfield3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$k.name,
    		type: "slot",
    		source: "(11:0) <StylizedCheckbox bind:value={insurance.homeOwnership} label={$l.needsAssessment.insurances.homeInsurance.homeOwnershipLabel}>",
    		ctx
    	});

    	return block;
    }

    // (30:0) <StylizedCheckbox bind:value={insurance.householdInsurance} label={$l.needsAssessment.insurances.homeInsurance.householdInsuranceLabel}>
    function create_default_slot$p(ctx) {
    	let textfield0;
    	let updating_value;
    	let t;
    	let textfield1;
    	let updating_value_1;
    	let current;

    	function textfield0_value_binding_1(value) {
    		/*textfield0_value_binding_1*/ ctx[11](value);
    	}

    	let textfield0_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.home.area
    	};

    	if (/*insurance*/ ctx[0].householdArea !== void 0) {
    		textfield0_props.value = /*insurance*/ ctx[0].householdArea;
    	}

    	textfield0 = new Textfield({ props: textfield0_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield0, 'value', textfield0_value_binding_1));

    	function textfield1_value_binding_1(value) {
    		/*textfield1_value_binding_1*/ ctx[12](value);
    	}

    	let textfield1_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[1].personal.pets
    	};

    	if (/*insurance*/ ctx[0].petsRemarks !== void 0) {
    		textfield1_props.value = /*insurance*/ ctx[0].petsRemarks;
    	}

    	textfield1 = new Textfield({ props: textfield1_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield1, 'value', textfield1_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(textfield0.$$.fragment);
    			t = space();
    			create_component(textfield1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(textfield1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield0_changes = {};
    			if (dirty & /*$l*/ 2) textfield0_changes.label = /*$l*/ ctx[1].personal.home.area;

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				textfield0_changes.value = /*insurance*/ ctx[0].householdArea;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield0.$set(textfield0_changes);
    			const textfield1_changes = {};
    			if (dirty & /*$l*/ 2) textfield1_changes.label = /*$l*/ ctx[1].personal.pets;

    			if (!updating_value_1 && dirty & /*insurance*/ 1) {
    				updating_value_1 = true;
    				textfield1_changes.value = /*insurance*/ ctx[0].petsRemarks;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			textfield1.$set(textfield1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield0.$$.fragment, local);
    			transition_in(textfield1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield0.$$.fragment, local);
    			transition_out(textfield1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(textfield1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$p.name,
    		type: "slot",
    		source: "(30:0) <StylizedCheckbox bind:value={insurance.householdInsurance} label={$l.needsAssessment.insurances.homeInsurance.householdInsuranceLabel}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let div0;
    	let stylizedcheckbox0;
    	let updating_value;
    	let t0;
    	let div1;
    	let stylizedcheckbox1;
    	let updating_value_1;
    	let t1;
    	let div2;
    	let stylizedcheckbox2;
    	let updating_value_2;
    	let current;

    	function stylizedcheckbox0_value_binding(value) {
    		/*stylizedcheckbox0_value_binding*/ ctx[10](value);
    	}

    	let stylizedcheckbox0_props = {
    		label: /*$l*/ ctx[1].needsAssessment.insurances.homeInsurance.homeOwnershipLabel,
    		$$slots: { default: [create_default_slot_1$k] },
    		$$scope: { ctx }
    	};

    	if (/*insurance*/ ctx[0].homeOwnership !== void 0) {
    		stylizedcheckbox0_props.value = /*insurance*/ ctx[0].homeOwnership;
    	}

    	stylizedcheckbox0 = new StylizedCheckbox({
    			props: stylizedcheckbox0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox0, 'value', stylizedcheckbox0_value_binding));

    	function stylizedcheckbox1_value_binding(value) {
    		/*stylizedcheckbox1_value_binding*/ ctx[13](value);
    	}

    	let stylizedcheckbox1_props = {
    		label: /*$l*/ ctx[1].needsAssessment.insurances.homeInsurance.householdInsuranceLabel,
    		$$slots: { default: [create_default_slot$p] },
    		$$scope: { ctx }
    	};

    	if (/*insurance*/ ctx[0].householdInsurance !== void 0) {
    		stylizedcheckbox1_props.value = /*insurance*/ ctx[0].householdInsurance;
    	}

    	stylizedcheckbox1 = new StylizedCheckbox({
    			props: stylizedcheckbox1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox1, 'value', stylizedcheckbox1_value_binding));

    	function stylizedcheckbox2_value_binding(value) {
    		/*stylizedcheckbox2_value_binding*/ ctx[14](value);
    	}

    	let stylizedcheckbox2_props = {
    		label: /*$l*/ ctx[1].needsAssessment.insurances.homeInsurance.liabilityInsuranceLabel
    	};

    	if (/*insurance*/ ctx[0].liabilityInsurance !== void 0) {
    		stylizedcheckbox2_props.value = /*insurance*/ ctx[0].liabilityInsurance;
    	}

    	stylizedcheckbox2 = new StylizedCheckbox({
    			props: stylizedcheckbox2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox2, 'value', stylizedcheckbox2_value_binding));

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(stylizedcheckbox0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(stylizedcheckbox1.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(stylizedcheckbox2.$$.fragment);
    			attr_dev(div0, "class", "item svelte-tp4fkv");
    			add_location(div0, file$t, 9, 0, 300);
    			attr_dev(div1, "class", "item svelte-tp4fkv");
    			add_location(div1, file$t, 28, 0, 1753);
    			attr_dev(div2, "class", "item svelte-tp4fkv");
    			add_location(div2, file$t, 34, 0, 2257);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(stylizedcheckbox0, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(stylizedcheckbox1, div1, null);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			mount_component(stylizedcheckbox2, div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const stylizedcheckbox0_changes = {};
    			if (dirty & /*$l*/ 2) stylizedcheckbox0_changes.label = /*$l*/ ctx[1].needsAssessment.insurances.homeInsurance.homeOwnershipLabel;

    			if (dirty & /*$$scope, $l, insurance*/ 32771) {
    				stylizedcheckbox0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				stylizedcheckbox0_changes.value = /*insurance*/ ctx[0].homeOwnership;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox0.$set(stylizedcheckbox0_changes);
    			const stylizedcheckbox1_changes = {};
    			if (dirty & /*$l*/ 2) stylizedcheckbox1_changes.label = /*$l*/ ctx[1].needsAssessment.insurances.homeInsurance.householdInsuranceLabel;

    			if (dirty & /*$$scope, $l, insurance*/ 32771) {
    				stylizedcheckbox1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty & /*insurance*/ 1) {
    				updating_value_1 = true;
    				stylizedcheckbox1_changes.value = /*insurance*/ ctx[0].householdInsurance;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			stylizedcheckbox1.$set(stylizedcheckbox1_changes);
    			const stylizedcheckbox2_changes = {};
    			if (dirty & /*$l*/ 2) stylizedcheckbox2_changes.label = /*$l*/ ctx[1].needsAssessment.insurances.homeInsurance.liabilityInsuranceLabel;

    			if (!updating_value_2 && dirty & /*insurance*/ 1) {
    				updating_value_2 = true;
    				stylizedcheckbox2_changes.value = /*insurance*/ ctx[0].liabilityInsurance;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			stylizedcheckbox2.$set(stylizedcheckbox2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox0.$$.fragment, local);
    			transition_in(stylizedcheckbox1.$$.fragment, local);
    			transition_in(stylizedcheckbox2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox0.$$.fragment, local);
    			transition_out(stylizedcheckbox1.$$.fragment, local);
    			transition_out(stylizedcheckbox2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(stylizedcheckbox0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			destroy_component(stylizedcheckbox1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			destroy_component(stylizedcheckbox2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(1, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HomeInsurance', slots, []);
    	let { insurance } = $$props;
    	const writable_props = ['insurance'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HomeInsurance> was created with unknown prop '${key}'`);
    	});

    	function textfield0_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.builtArea, value)) {
    			insurance.home.builtArea = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function textfield1_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.floors, value)) {
    			insurance.home.floors = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function textfield2_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.roofType, value)) {
    			insurance.home.roofType = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function checkbox_checked_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.cellar, value)) {
    			insurance.home.cellar = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function checkbox_checked_binding_1(value) {
    		if ($$self.$$.not_equal(insurance.home.pool, value)) {
    			insurance.home.pool = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function textfield_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.photovoltaicRemarks, value)) {
    			insurance.home.photovoltaicRemarks = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function stylizedcheckbox_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.photovoltaic, value)) {
    			insurance.home.photovoltaic = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function textfield3_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.home.specialAssets, value)) {
    			insurance.home.specialAssets = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function stylizedcheckbox0_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.homeOwnership, value)) {
    			insurance.homeOwnership = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function textfield0_value_binding_1(value) {
    		if ($$self.$$.not_equal(insurance.householdArea, value)) {
    			insurance.householdArea = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function textfield1_value_binding_1(value) {
    		if ($$self.$$.not_equal(insurance.petsRemarks, value)) {
    			insurance.petsRemarks = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function stylizedcheckbox1_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.householdInsurance, value)) {
    			insurance.householdInsurance = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	function stylizedcheckbox2_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.liabilityInsurance, value)) {
    			insurance.liabilityInsurance = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('insurance' in $$props) $$invalidate(0, insurance = $$props.insurance);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		StylizedCheckbox,
    		Textfield,
    		FormField,
    		Checkbox,
    		insurance,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('insurance' in $$props) $$invalidate(0, insurance = $$props.insurance);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		insurance,
    		$l,
    		textfield0_value_binding,
    		textfield1_value_binding,
    		textfield2_value_binding,
    		checkbox_checked_binding,
    		checkbox_checked_binding_1,
    		textfield_value_binding,
    		stylizedcheckbox_value_binding,
    		textfield3_value_binding,
    		stylizedcheckbox0_value_binding,
    		textfield0_value_binding_1,
    		textfield1_value_binding_1,
    		stylizedcheckbox1_value_binding,
    		stylizedcheckbox2_value_binding
    	];
    }

    class HomeInsurance extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$B, safe_not_equal, { insurance: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HomeInsurance",
    			options,
    			id: create_fragment$B.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*insurance*/ ctx[0] === undefined && !('insurance' in props)) {
    			console.warn("<HomeInsurance> was created without expected prop 'insurance'");
    		}
    	}

    	get insurance() {
    		throw new Error("<HomeInsurance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insurance(value) {
    		throw new Error("<HomeInsurance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/BaseInsurancesComponent.svelte generated by Svelte v3.44.3 */
    const file$s = "src/components/needs_assessment/BaseInsurancesComponent.svelte";

    // (39:8) 
    function create_additionalInput_slot(ctx) {
    	let homeinsurance;
    	let updating_insurance;
    	let current;

    	function homeinsurance_insurance_binding(value) {
    		/*homeinsurance_insurance_binding*/ ctx[5](value);
    	}

    	let homeinsurance_props = { slot: "additionalInput" };

    	if (/*assessment*/ ctx[0].insurances.homeInsurance !== void 0) {
    		homeinsurance_props.insurance = /*assessment*/ ctx[0].insurances.homeInsurance;
    	}

    	homeinsurance = new HomeInsurance({
    			props: homeinsurance_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(homeinsurance, 'insurance', homeinsurance_insurance_binding));

    	const block = {
    		c: function create() {
    			create_component(homeinsurance.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(homeinsurance, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const homeinsurance_changes = {};

    			if (!updating_insurance && dirty & /*assessment*/ 1) {
    				updating_insurance = true;
    				homeinsurance_changes.insurance = /*assessment*/ ctx[0].insurances.homeInsurance;
    				add_flush_callback(() => updating_insurance = false);
    			}

    			homeinsurance.$set(homeinsurance_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(homeinsurance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(homeinsurance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(homeinsurance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_additionalInput_slot.name,
    		type: "slot",
    		source: "(39:8) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let div1;
    	let div0;
    	let piechart;
    	let t0;
    	let baseinsurancecomponent0;
    	let updating_insurance;
    	let t1;
    	let divider;
    	let t2;
    	let baseinsurancecomponent1;
    	let updating_insurance_1;
    	let t3;
    	let baseinsurancecomponent2;
    	let updating_insurance_2;
    	let t4;
    	let baseinsurancecomponent3;
    	let updating_insurance_3;
    	let current;

    	piechart = new PieChart({
    			props: {
    				size: 300,
    				percent: /*percent*/ ctx[1],
    				title: /*$l*/ ctx[2].needsAssessment.insurances.chartTitle,
    				titleClass: "mdc-typography--headline5",
    				containerStyle: "position: sticky; top: 5px;"
    			},
    			$$inline: true
    		});

    	function baseinsurancecomponent0_insurance_binding(value) {
    		/*baseinsurancecomponent0_insurance_binding*/ ctx[3](value);
    	}

    	let baseinsurancecomponent0_props = {
    		label: /*$l*/ ctx[2].needsAssessment.insurances.accidentInsurance.name,
    		helpSubtitle: /*$l*/ ctx[2].needsAssessment.insurances.accidentInsurance.helpSubtitle,
    		helpText: /*$l*/ ctx[2].needsAssessment.insurances.accidentInsurance.helpText
    	};

    	if (/*assessment*/ ctx[0].insurances.accidentInsurance !== void 0) {
    		baseinsurancecomponent0_props.insurance = /*assessment*/ ctx[0].insurances.accidentInsurance;
    	}

    	baseinsurancecomponent0 = new BaseInsuranceComponent({
    			props: baseinsurancecomponent0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(baseinsurancecomponent0, 'insurance', baseinsurancecomponent0_insurance_binding));

    	divider = new Divider({
    			props: { margin: "20px 0" },
    			$$inline: true
    		});

    	function baseinsurancecomponent1_insurance_binding(value) {
    		/*baseinsurancecomponent1_insurance_binding*/ ctx[4](value);
    	}

    	let baseinsurancecomponent1_props = {
    		label: /*$l*/ ctx[2].needsAssessment.insurances.disabilityInsurance.name,
    		helpSubtitle: /*$l*/ ctx[2].needsAssessment.insurances.disabilityInsurance.helpSubtitle,
    		helpText: /*$l*/ ctx[2].needsAssessment.insurances.disabilityInsurance.helpText
    	};

    	if (/*assessment*/ ctx[0].insurances.disabilityInsurance !== void 0) {
    		baseinsurancecomponent1_props.insurance = /*assessment*/ ctx[0].insurances.disabilityInsurance;
    	}

    	baseinsurancecomponent1 = new BaseInsuranceComponent({
    			props: baseinsurancecomponent1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(baseinsurancecomponent1, 'insurance', baseinsurancecomponent1_insurance_binding));

    	function baseinsurancecomponent2_insurance_binding(value) {
    		/*baseinsurancecomponent2_insurance_binding*/ ctx[6](value);
    	}

    	let baseinsurancecomponent2_props = {
    		label: /*$l*/ ctx[2].needsAssessment.insurances.homeInsurance.name,
    		helpSubtitle: /*$l*/ ctx[2].needsAssessment.insurances.homeInsurance.helpSubtitle,
    		helpText: /*$l*/ ctx[2].needsAssessment.insurances.homeInsurance.helpText,
    		$$slots: {
    			additionalInput: [create_additionalInput_slot]
    		},
    		$$scope: { ctx }
    	};

    	if (/*assessment*/ ctx[0].insurances.homeInsurance !== void 0) {
    		baseinsurancecomponent2_props.insurance = /*assessment*/ ctx[0].insurances.homeInsurance;
    	}

    	baseinsurancecomponent2 = new BaseInsuranceComponent({
    			props: baseinsurancecomponent2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(baseinsurancecomponent2, 'insurance', baseinsurancecomponent2_insurance_binding));

    	function baseinsurancecomponent3_insurance_binding(value) {
    		/*baseinsurancecomponent3_insurance_binding*/ ctx[7](value);
    	}

    	let baseinsurancecomponent3_props = {
    		label: /*$l*/ ctx[2].needsAssessment.insurances.legalProtectionInsurance.name,
    		helpSubtitle: /*$l*/ ctx[2].needsAssessment.insurances.legalProtectionInsurance.helpSubtitle,
    		helpText: /*$l*/ ctx[2].needsAssessment.insurances.legalProtectionInsurance.helpText
    	};

    	if (/*assessment*/ ctx[0].insurances.legalProtectionInsurance !== void 0) {
    		baseinsurancecomponent3_props.insurance = /*assessment*/ ctx[0].insurances.legalProtectionInsurance;
    	}

    	baseinsurancecomponent3 = new BaseInsuranceComponent({
    			props: baseinsurancecomponent3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(baseinsurancecomponent3, 'insurance', baseinsurancecomponent3_insurance_binding));

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(piechart.$$.fragment);
    			t0 = space();
    			create_component(baseinsurancecomponent0.$$.fragment);
    			t1 = space();
    			create_component(divider.$$.fragment);
    			t2 = space();
    			create_component(baseinsurancecomponent1.$$.fragment);
    			t3 = space();
    			create_component(baseinsurancecomponent2.$$.fragment);
    			t4 = space();
    			create_component(baseinsurancecomponent3.$$.fragment);
    			attr_dev(div0, "class", "insurance-pie svelte-1emnfif");
    			add_location(div0, file$s, 16, 4, 682);
    			attr_dev(div1, "class", "insurance-container svelte-1emnfif");
    			add_location(div1, file$s, 15, 2, 644);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(piechart, div0, null);
    			append_dev(div1, t0);
    			mount_component(baseinsurancecomponent0, div1, null);
    			append_dev(div1, t1);
    			mount_component(divider, div1, null);
    			append_dev(div1, t2);
    			mount_component(baseinsurancecomponent1, div1, null);
    			append_dev(div1, t3);
    			mount_component(baseinsurancecomponent2, div1, null);
    			append_dev(div1, t4);
    			mount_component(baseinsurancecomponent3, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const piechart_changes = {};
    			if (dirty & /*percent*/ 2) piechart_changes.percent = /*percent*/ ctx[1];
    			if (dirty & /*$l*/ 4) piechart_changes.title = /*$l*/ ctx[2].needsAssessment.insurances.chartTitle;
    			piechart.$set(piechart_changes);
    			const baseinsurancecomponent0_changes = {};
    			if (dirty & /*$l*/ 4) baseinsurancecomponent0_changes.label = /*$l*/ ctx[2].needsAssessment.insurances.accidentInsurance.name;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent0_changes.helpSubtitle = /*$l*/ ctx[2].needsAssessment.insurances.accidentInsurance.helpSubtitle;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent0_changes.helpText = /*$l*/ ctx[2].needsAssessment.insurances.accidentInsurance.helpText;

    			if (!updating_insurance && dirty & /*assessment*/ 1) {
    				updating_insurance = true;
    				baseinsurancecomponent0_changes.insurance = /*assessment*/ ctx[0].insurances.accidentInsurance;
    				add_flush_callback(() => updating_insurance = false);
    			}

    			baseinsurancecomponent0.$set(baseinsurancecomponent0_changes);
    			const baseinsurancecomponent1_changes = {};
    			if (dirty & /*$l*/ 4) baseinsurancecomponent1_changes.label = /*$l*/ ctx[2].needsAssessment.insurances.disabilityInsurance.name;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent1_changes.helpSubtitle = /*$l*/ ctx[2].needsAssessment.insurances.disabilityInsurance.helpSubtitle;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent1_changes.helpText = /*$l*/ ctx[2].needsAssessment.insurances.disabilityInsurance.helpText;

    			if (!updating_insurance_1 && dirty & /*assessment*/ 1) {
    				updating_insurance_1 = true;
    				baseinsurancecomponent1_changes.insurance = /*assessment*/ ctx[0].insurances.disabilityInsurance;
    				add_flush_callback(() => updating_insurance_1 = false);
    			}

    			baseinsurancecomponent1.$set(baseinsurancecomponent1_changes);
    			const baseinsurancecomponent2_changes = {};
    			if (dirty & /*$l*/ 4) baseinsurancecomponent2_changes.label = /*$l*/ ctx[2].needsAssessment.insurances.homeInsurance.name;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent2_changes.helpSubtitle = /*$l*/ ctx[2].needsAssessment.insurances.homeInsurance.helpSubtitle;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent2_changes.helpText = /*$l*/ ctx[2].needsAssessment.insurances.homeInsurance.helpText;

    			if (dirty & /*$$scope, assessment*/ 257) {
    				baseinsurancecomponent2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_insurance_2 && dirty & /*assessment*/ 1) {
    				updating_insurance_2 = true;
    				baseinsurancecomponent2_changes.insurance = /*assessment*/ ctx[0].insurances.homeInsurance;
    				add_flush_callback(() => updating_insurance_2 = false);
    			}

    			baseinsurancecomponent2.$set(baseinsurancecomponent2_changes);
    			const baseinsurancecomponent3_changes = {};
    			if (dirty & /*$l*/ 4) baseinsurancecomponent3_changes.label = /*$l*/ ctx[2].needsAssessment.insurances.legalProtectionInsurance.name;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent3_changes.helpSubtitle = /*$l*/ ctx[2].needsAssessment.insurances.legalProtectionInsurance.helpSubtitle;
    			if (dirty & /*$l*/ 4) baseinsurancecomponent3_changes.helpText = /*$l*/ ctx[2].needsAssessment.insurances.legalProtectionInsurance.helpText;

    			if (!updating_insurance_3 && dirty & /*assessment*/ 1) {
    				updating_insurance_3 = true;
    				baseinsurancecomponent3_changes.insurance = /*assessment*/ ctx[0].insurances.legalProtectionInsurance;
    				add_flush_callback(() => updating_insurance_3 = false);
    			}

    			baseinsurancecomponent3.$set(baseinsurancecomponent3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(piechart.$$.fragment, local);
    			transition_in(baseinsurancecomponent0.$$.fragment, local);
    			transition_in(divider.$$.fragment, local);
    			transition_in(baseinsurancecomponent1.$$.fragment, local);
    			transition_in(baseinsurancecomponent2.$$.fragment, local);
    			transition_in(baseinsurancecomponent3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(piechart.$$.fragment, local);
    			transition_out(baseinsurancecomponent0.$$.fragment, local);
    			transition_out(divider.$$.fragment, local);
    			transition_out(baseinsurancecomponent1.$$.fragment, local);
    			transition_out(baseinsurancecomponent2.$$.fragment, local);
    			transition_out(baseinsurancecomponent3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(piechart);
    			destroy_component(baseinsurancecomponent0);
    			destroy_component(divider);
    			destroy_component(baseinsurancecomponent1);
    			destroy_component(baseinsurancecomponent2);
    			destroy_component(baseinsurancecomponent3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BaseInsurancesComponent', slots, []);
    	let { assessment } = $$props;
    	let percent = 0;
    	const writable_props = ['assessment'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BaseInsurancesComponent> was created with unknown prop '${key}'`);
    	});

    	function baseinsurancecomponent0_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.accidentInsurance, value)) {
    			assessment.insurances.accidentInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function baseinsurancecomponent1_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.disabilityInsurance, value)) {
    			assessment.insurances.disabilityInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function homeinsurance_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.homeInsurance, value)) {
    			assessment.insurances.homeInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function baseinsurancecomponent2_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.homeInsurance, value)) {
    			assessment.insurances.homeInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function baseinsurancecomponent3_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.legalProtectionInsurance, value)) {
    			assessment.insurances.legalProtectionInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		PieChart,
    		BaseInsuranceComponent,
    		HomeInsurance,
    		Divider,
    		assessment,
    		percent,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    		if ('percent' in $$props) $$invalidate(1, percent = $$props.percent);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*assessment*/ 1) {
    			$$invalidate(1, percent = (assessment.insurances.accidentInsurance.clientHas
    			? 30
    			: 0) + (assessment.insurances.disabilityInsurance.clientHas
    			? 30
    			: 0) + (assessment.insurances.homeInsurance.clientHas ? 30 : 0) + (assessment.insurances.legalProtectionInsurance.clientHas
    			? 10
    			: 0));
    		}
    	};

    	return [
    		assessment,
    		percent,
    		$l,
    		baseinsurancecomponent0_insurance_binding,
    		baseinsurancecomponent1_insurance_binding,
    		homeinsurance_insurance_binding,
    		baseinsurancecomponent2_insurance_binding,
    		baseinsurancecomponent3_insurance_binding
    	];
    }

    class BaseInsurancesComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$A, safe_not_equal, { assessment: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BaseInsurancesComponent",
    			options,
    			id: create_fragment$A.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*assessment*/ ctx[0] === undefined && !('assessment' in props)) {
    			console.warn("<BaseInsurancesComponent> was created without expected prop 'assessment'");
    		}
    	}

    	get assessment() {
    		throw new Error("<BaseInsurancesComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set assessment(value) {
    		throw new Error("<BaseInsurancesComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/OpenCloseToggle.svelte generated by Svelte v3.44.3 */
    const file$r = "src/components/OpenCloseToggle.svelte";

    // (10:12) <Icon class="material-icons" on>
    function create_default_slot_2$h(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("expand_less");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$h.name,
    		type: "slot",
    		source: "(10:12) <Icon class=\\\"material-icons\\\" on>",
    		ctx
    	});

    	return block;
    }

    // (11:12) <Icon class="material-icons">
    function create_default_slot_1$j(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("expand_more");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$j.name,
    		type: "slot",
    		source: "(11:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (9:8) <IconButton toggle bind:pressed={open}>
    function create_default_slot$o(ctx) {
    	let icon0;
    	let t;
    	let icon1;
    	let current;

    	icon0 = new Icon$1({
    			props: {
    				class: "material-icons",
    				on: true,
    				$$slots: { default: [create_default_slot_2$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	icon1 = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_1$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon0.$$.fragment);
    			t = space();
    			create_component(icon1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(icon1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon0_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				icon0_changes.$$scope = { dirty, ctx };
    			}

    			icon0.$set(icon0_changes);
    			const icon1_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				icon1_changes.$$scope = { dirty, ctx };
    			}

    			icon1.$set(icon1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(icon1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$o.name,
    		type: "slot",
    		source: "(9:8) <IconButton toggle bind:pressed={open}>",
    		ctx
    	});

    	return block;
    }

    // (15:4) {#if open}
    function create_if_block$g(ctx) {
    	let div;
    	let div_transition;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "content svelte-1qajbts");
    			add_location(div, file$r, 15, 8, 555);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(15:4) {#if open}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$z(ctx) {
    	let div2;
    	let div0;
    	let iconbutton;
    	let updating_pressed;
    	let t0;
    	let div1;
    	let t1;
    	let div1_class_value;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;

    	function iconbutton_pressed_binding(value) {
    		/*iconbutton_pressed_binding*/ ctx[4](value);
    	}

    	let iconbutton_props = {
    		toggle: true,
    		$$slots: { default: [create_default_slot$o] },
    		$$scope: { ctx }
    	};

    	if (/*open*/ ctx[2] !== void 0) {
    		iconbutton_props.pressed = /*open*/ ctx[2];
    	}

    	iconbutton = new IconButton({ props: iconbutton_props, $$inline: true });
    	binding_callbacks.push(() => bind(iconbutton, 'pressed', iconbutton_pressed_binding));
    	let if_block = /*open*/ ctx[2] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(iconbutton.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			t1 = text(/*label*/ ctx[0]);
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "button svelte-1qajbts");
    			add_location(div0, file$r, 7, 4, 227);
    			attr_dev(div1, "class", div1_class_value = "label " + /*labelStyle*/ ctx[1] + " svelte-1qajbts");
    			add_location(div1, file$r, 13, 4, 456);
    			attr_dev(div2, "class", "container svelte-1qajbts");
    			add_location(div2, file$r, 6, 0, 199);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(iconbutton, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, t1);
    			append_dev(div2, t2);
    			if (if_block) if_block.m(div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_pressed && dirty & /*open*/ 4) {
    				updating_pressed = true;
    				iconbutton_changes.pressed = /*open*/ ctx[2];
    				add_flush_callback(() => updating_pressed = false);
    			}

    			iconbutton.$set(iconbutton_changes);
    			if (!current || dirty & /*label*/ 1) set_data_dev(t1, /*label*/ ctx[0]);

    			if (!current || dirty & /*labelStyle*/ 2 && div1_class_value !== (div1_class_value = "label " + /*labelStyle*/ ctx[1] + " svelte-1qajbts")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (/*open*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*open*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(iconbutton);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('OpenCloseToggle', slots, ['default']);
    	let open = false;
    	let { label = "" } = $$props;
    	let { labelStyle = "body1" } = $$props;
    	const writable_props = ['label', 'labelStyle'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<OpenCloseToggle> was created with unknown prop '${key}'`);
    	});

    	function iconbutton_pressed_binding(value) {
    		open = value;
    		$$invalidate(2, open);
    	}

    	const click_handler = () => $$invalidate(2, open = !open);

    	$$self.$$set = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('labelStyle' in $$props) $$invalidate(1, labelStyle = $$props.labelStyle);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		IconButton,
    		Icon: Icon$1,
    		open,
    		label,
    		labelStyle
    	});

    	$$self.$inject_state = $$props => {
    		if ('open' in $$props) $$invalidate(2, open = $$props.open);
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('labelStyle' in $$props) $$invalidate(1, labelStyle = $$props.labelStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		label,
    		labelStyle,
    		open,
    		slots,
    		iconbutton_pressed_binding,
    		click_handler,
    		$$scope
    	];
    }

    class OpenCloseToggle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$z, safe_not_equal, { label: 0, labelStyle: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "OpenCloseToggle",
    			options,
    			id: create_fragment$z.name
    		});
    	}

    	get label() {
    		throw new Error("<OpenCloseToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<OpenCloseToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelStyle() {
    		throw new Error("<OpenCloseToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelStyle(value) {
    		throw new Error("<OpenCloseToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/ProvisionComponent.svelte generated by Svelte v3.44.3 */
    const file$q = "src/components/needs_assessment/ProvisionComponent.svelte";
    const get_additional_content_slot_changes = dirty => ({});
    const get_additional_content_slot_context = ctx => ({});

    // (10:4) <StylizedCheckbox bind:value={insurance.clientHas} {label}>
    function create_default_slot$n(ctx) {
    	let div;
    	let t;
    	let selectlegacycontract;
    	let updating_contract;
    	let current;
    	const additional_content_slot_template = /*#slots*/ ctx[2]["additional-content"];
    	const additional_content_slot = create_slot(additional_content_slot_template, ctx, /*$$scope*/ ctx[5], get_additional_content_slot_context);

    	function selectlegacycontract_contract_binding(value) {
    		/*selectlegacycontract_contract_binding*/ ctx[3](value);
    	}

    	let selectlegacycontract_props = {};

    	if (/*insurance*/ ctx[0] !== void 0) {
    		selectlegacycontract_props.contract = /*insurance*/ ctx[0];
    	}

    	selectlegacycontract = new SelectLegacyContract({
    			props: selectlegacycontract_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(selectlegacycontract, 'contract', selectlegacycontract_contract_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (additional_content_slot) additional_content_slot.c();
    			t = space();
    			create_component(selectlegacycontract.$$.fragment);
    			attr_dev(div, "class", "content svelte-fh0c5k");
    			add_location(div, file$q, 10, 8, 348);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (additional_content_slot) {
    				additional_content_slot.m(div, null);
    			}

    			append_dev(div, t);
    			mount_component(selectlegacycontract, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (additional_content_slot) {
    				if (additional_content_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						additional_content_slot,
    						additional_content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(additional_content_slot_template, /*$$scope*/ ctx[5], dirty, get_additional_content_slot_changes),
    						get_additional_content_slot_context
    					);
    				}
    			}

    			const selectlegacycontract_changes = {};

    			if (!updating_contract && dirty & /*insurance*/ 1) {
    				updating_contract = true;
    				selectlegacycontract_changes.contract = /*insurance*/ ctx[0];
    				add_flush_callback(() => updating_contract = false);
    			}

    			selectlegacycontract.$set(selectlegacycontract_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(additional_content_slot, local);
    			transition_in(selectlegacycontract.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(additional_content_slot, local);
    			transition_out(selectlegacycontract.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (additional_content_slot) additional_content_slot.d(detaching);
    			destroy_component(selectlegacycontract);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$n.name,
    		type: "slot",
    		source: "(10:4) <StylizedCheckbox bind:value={insurance.clientHas} {label}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let div;
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[4](value);
    	}

    	let stylizedcheckbox_props = {
    		label: /*label*/ ctx[1],
    		$$slots: { default: [create_default_slot$n] },
    		$$scope: { ctx }
    	};

    	if (/*insurance*/ ctx[0].clientHas !== void 0) {
    		stylizedcheckbox_props.value = /*insurance*/ ctx[0].clientHas;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(stylizedcheckbox.$$.fragment);
    			attr_dev(div, "class", "container svelte-fh0c5k");
    			add_location(div, file$q, 8, 0, 252);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(stylizedcheckbox, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*label*/ 2) stylizedcheckbox_changes.label = /*label*/ ctx[1];

    			if (dirty & /*$$scope, insurance*/ 33) {
    				stylizedcheckbox_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*insurance*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*insurance*/ ctx[0].clientHas;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(stylizedcheckbox);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProvisionComponent', slots, ['additional-content']);
    	let { insurance } = $$props;
    	let { label = "" } = $$props;
    	const writable_props = ['insurance', 'label'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProvisionComponent> was created with unknown prop '${key}'`);
    	});

    	function selectlegacycontract_contract_binding(value) {
    		insurance = value;
    		$$invalidate(0, insurance);
    	}

    	function stylizedcheckbox_value_binding(value) {
    		if ($$self.$$.not_equal(insurance.clientHas, value)) {
    			insurance.clientHas = value;
    			$$invalidate(0, insurance);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('insurance' in $$props) $$invalidate(0, insurance = $$props.insurance);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		SelectLegacyContract,
    		StylizedCheckbox,
    		insurance,
    		label
    	});

    	$$self.$inject_state = $$props => {
    		if ('insurance' in $$props) $$invalidate(0, insurance = $$props.insurance);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		insurance,
    		label,
    		slots,
    		selectlegacycontract_contract_binding,
    		stylizedcheckbox_value_binding,
    		$$scope
    	];
    }

    class ProvisionComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$y, safe_not_equal, { insurance: 0, label: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProvisionComponent",
    			options,
    			id: create_fragment$y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*insurance*/ ctx[0] === undefined && !('insurance' in props)) {
    			console.warn("<ProvisionComponent> was created without expected prop 'insurance'");
    		}
    	}

    	get insurance() {
    		throw new Error("<ProvisionComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insurance(value) {
    		throw new Error("<ProvisionComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<ProvisionComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<ProvisionComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/client/CarComponent.svelte generated by Svelte v3.44.3 */

    // (9:4) <Cell span={6}>
    function create_default_slot_15$3(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[2](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.name,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].name !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].name;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.name;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].name;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$3.name,
    		type: "slot",
    		source: "(9:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (12:4) <Cell span={6}>
    function create_default_slot_14$5(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_1(value) {
    		/*textfield_value_binding_1*/ ctx[3](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.contractor,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].contractor !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].contractor;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.contractor;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].contractor;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$5.name,
    		type: "slot",
    		source: "(12:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (15:4) <Cell span={6}>
    function create_default_slot_13$7(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_2(value) {
    		/*textfield_value_binding_2*/ ctx[4](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.contractNumber,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].contractNumber !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].contractNumber;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.contractNumber;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].contractNumber;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$7.name,
    		type: "slot",
    		source: "(15:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (18:4) <Cell span={6}>
    function create_default_slot_12$7(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_3(value) {
    		/*textfield_value_binding_3*/ ctx[5](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.bonusLevel,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].bonusLevel !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].bonusLevel;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_3));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.bonusLevel;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].bonusLevel;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$7.name,
    		type: "slot",
    		source: "(18:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (21:4) <Cell span={6}>
    function create_default_slot_11$7(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_4(value) {
    		/*textfield_value_binding_4*/ ctx[6](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.mainDue,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].mainDue !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].mainDue;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_4));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.mainDue;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].mainDue;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$7.name,
    		type: "slot",
    		source: "(21:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (24:4) <Cell span={6}>
    function create_default_slot_10$7(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_5(value) {
    		/*textfield_value_binding_5*/ ctx[7](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.make,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].make !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].make;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_5));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.make;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].make;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$7.name,
    		type: "slot",
    		source: "(24:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (27:4) <Cell span={6}>
    function create_default_slot_9$7(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_6(value) {
    		/*textfield_value_binding_6*/ ctx[8](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.power,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].power !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].power;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_6));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.power;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].power;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$7.name,
    		type: "slot",
    		source: "(27:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (30:4) <Cell span={6}>
    function create_default_slot_8$9(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_7(value) {
    		/*textfield_value_binding_7*/ ctx[9](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.driveType,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].driveType !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].driveType;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_7));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.driveType;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].driveType;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$9.name,
    		type: "slot",
    		source: "(30:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (33:4) <Cell span={6}>
    function create_default_slot_7$a(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_8(value) {
    		/*textfield_value_binding_8*/ ctx[10](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.licensePlate,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].licensePlate !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].licensePlate;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_8));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.licensePlate;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].licensePlate;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$a.name,
    		type: "slot",
    		source: "(33:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (36:4) <Cell span={6}>
    function create_default_slot_6$e(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_9(value) {
    		/*textfield_value_binding_9*/ ctx[11](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.constructionYear,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].constructionYear !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].constructionYear;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_9));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.constructionYear;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].constructionYear;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$e.name,
    		type: "slot",
    		source: "(36:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (39:4) <Cell span={6}>
    function create_default_slot_5$e(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_10(value) {
    		/*textfield_value_binding_10*/ ctx[12](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.insuranceType,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].insuranceType !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].insuranceType;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_10));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.insuranceType;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].insuranceType;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$e.name,
    		type: "slot",
    		source: "(39:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (42:4) <Cell span={6}>
    function create_default_slot_4$e(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_11(value) {
    		/*textfield_value_binding_11*/ ctx[13](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.originalPrice,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].originalPrice !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].originalPrice;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_11));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.originalPrice;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].originalPrice;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$e.name,
    		type: "slot",
    		source: "(42:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (45:4) <Cell span={6}>
    function create_default_slot_3$g(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_12(value) {
    		/*textfield_value_binding_12*/ ctx[14](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.deductible,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].deductible !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].deductible;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_12));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.deductible;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].deductible;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$g.name,
    		type: "slot",
    		source: "(45:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (48:4) <Cell span={6}>
    function create_default_slot_2$g(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_13(value) {
    		/*textfield_value_binding_13*/ ctx[15](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.bonus,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].bonus !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].bonus;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_13));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.bonus;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].bonus;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$g.name,
    		type: "slot",
    		source: "(48:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (51:4) <Cell span={6}>
    function create_default_slot_1$i(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_14(value) {
    		/*textfield_value_binding_14*/ ctx[16](value);
    	}

    	let textfield_props = {
    		label: /*$l*/ ctx[1].personal.car.paymentType,
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*car*/ ctx[0].paymentType !== void 0) {
    		textfield_props.value = /*car*/ ctx[0].paymentType;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_14));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 2) textfield_changes.label = /*$l*/ ctx[1].personal.car.paymentType;

    			if (!updating_value && dirty & /*car*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*car*/ ctx[0].paymentType;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$i.name,
    		type: "slot",
    		source: "(51:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (8:0) <LayoutGrid style="width: 100%">
    function create_default_slot$m(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let cell4;
    	let t4;
    	let cell5;
    	let t5;
    	let cell6;
    	let t6;
    	let cell7;
    	let t7;
    	let cell8;
    	let t8;
    	let cell9;
    	let t9;
    	let cell10;
    	let t10;
    	let cell11;
    	let t11;
    	let cell12;
    	let t12;
    	let cell13;
    	let t13;
    	let cell14;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_15$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_14$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_13$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_12$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_11$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell5 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_10$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell6 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_9$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell7 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_8$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell8 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_7$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell9 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_6$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell10 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_5$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell11 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_4$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell12 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_3$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell13 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_2$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell14 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_1$i] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    			create_component(cell4.$$.fragment);
    			t4 = space();
    			create_component(cell5.$$.fragment);
    			t5 = space();
    			create_component(cell6.$$.fragment);
    			t6 = space();
    			create_component(cell7.$$.fragment);
    			t7 = space();
    			create_component(cell8.$$.fragment);
    			t8 = space();
    			create_component(cell9.$$.fragment);
    			t9 = space();
    			create_component(cell10.$$.fragment);
    			t10 = space();
    			create_component(cell11.$$.fragment);
    			t11 = space();
    			create_component(cell12.$$.fragment);
    			t12 = space();
    			create_component(cell13.$$.fragment);
    			t13 = space();
    			create_component(cell14.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell5, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(cell6, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(cell7, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(cell8, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(cell9, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(cell10, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(cell11, target, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(cell12, target, anchor);
    			insert_dev(target, t12, anchor);
    			mount_component(cell13, target, anchor);
    			insert_dev(target, t13, anchor);
    			mount_component(cell14, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    			const cell5_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell5_changes.$$scope = { dirty, ctx };
    			}

    			cell5.$set(cell5_changes);
    			const cell6_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell6_changes.$$scope = { dirty, ctx };
    			}

    			cell6.$set(cell6_changes);
    			const cell7_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell7_changes.$$scope = { dirty, ctx };
    			}

    			cell7.$set(cell7_changes);
    			const cell8_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell8_changes.$$scope = { dirty, ctx };
    			}

    			cell8.$set(cell8_changes);
    			const cell9_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell9_changes.$$scope = { dirty, ctx };
    			}

    			cell9.$set(cell9_changes);
    			const cell10_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell10_changes.$$scope = { dirty, ctx };
    			}

    			cell10.$set(cell10_changes);
    			const cell11_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell11_changes.$$scope = { dirty, ctx };
    			}

    			cell11.$set(cell11_changes);
    			const cell12_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell12_changes.$$scope = { dirty, ctx };
    			}

    			cell12.$set(cell12_changes);
    			const cell13_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell13_changes.$$scope = { dirty, ctx };
    			}

    			cell13.$set(cell13_changes);
    			const cell14_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				cell14_changes.$$scope = { dirty, ctx };
    			}

    			cell14.$set(cell14_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			transition_in(cell5.$$.fragment, local);
    			transition_in(cell6.$$.fragment, local);
    			transition_in(cell7.$$.fragment, local);
    			transition_in(cell8.$$.fragment, local);
    			transition_in(cell9.$$.fragment, local);
    			transition_in(cell10.$$.fragment, local);
    			transition_in(cell11.$$.fragment, local);
    			transition_in(cell12.$$.fragment, local);
    			transition_in(cell13.$$.fragment, local);
    			transition_in(cell14.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			transition_out(cell5.$$.fragment, local);
    			transition_out(cell6.$$.fragment, local);
    			transition_out(cell7.$$.fragment, local);
    			transition_out(cell8.$$.fragment, local);
    			transition_out(cell9.$$.fragment, local);
    			transition_out(cell10.$$.fragment, local);
    			transition_out(cell11.$$.fragment, local);
    			transition_out(cell12.$$.fragment, local);
    			transition_out(cell13.$$.fragment, local);
    			transition_out(cell14.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell5, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(cell6, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(cell7, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(cell8, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(cell9, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(cell10, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(cell11, detaching);
    			if (detaching) detach_dev(t11);
    			destroy_component(cell12, detaching);
    			if (detaching) detach_dev(t12);
    			destroy_component(cell13, detaching);
    			if (detaching) detach_dev(t13);
    			destroy_component(cell14, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$m.name,
    		type: "slot",
    		source: "(8:0) <LayoutGrid style=\\\"width: 100%\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let layoutgrid;
    	let current;

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "width: 100%",
    				$$slots: { default: [create_default_slot$m] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(layoutgrid.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layoutgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, $l, car*/ 131075) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layoutgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(1, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CarComponent', slots, []);
    	let { car } = $$props;
    	const writable_props = ['car'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CarComponent> was created with unknown prop '${key}'`);
    	});

    	function textfield_value_binding(value) {
    		if ($$self.$$.not_equal(car.name, value)) {
    			car.name = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_1(value) {
    		if ($$self.$$.not_equal(car.contractor, value)) {
    			car.contractor = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_2(value) {
    		if ($$self.$$.not_equal(car.contractNumber, value)) {
    			car.contractNumber = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_3(value) {
    		if ($$self.$$.not_equal(car.bonusLevel, value)) {
    			car.bonusLevel = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_4(value) {
    		if ($$self.$$.not_equal(car.mainDue, value)) {
    			car.mainDue = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_5(value) {
    		if ($$self.$$.not_equal(car.make, value)) {
    			car.make = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_6(value) {
    		if ($$self.$$.not_equal(car.power, value)) {
    			car.power = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_7(value) {
    		if ($$self.$$.not_equal(car.driveType, value)) {
    			car.driveType = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_8(value) {
    		if ($$self.$$.not_equal(car.licensePlate, value)) {
    			car.licensePlate = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_9(value) {
    		if ($$self.$$.not_equal(car.constructionYear, value)) {
    			car.constructionYear = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_10(value) {
    		if ($$self.$$.not_equal(car.insuranceType, value)) {
    			car.insuranceType = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_11(value) {
    		if ($$self.$$.not_equal(car.originalPrice, value)) {
    			car.originalPrice = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_12(value) {
    		if ($$self.$$.not_equal(car.deductible, value)) {
    			car.deductible = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_13(value) {
    		if ($$self.$$.not_equal(car.bonus, value)) {
    			car.bonus = value;
    			$$invalidate(0, car);
    		}
    	}

    	function textfield_value_binding_14(value) {
    		if ($$self.$$.not_equal(car.paymentType, value)) {
    			car.paymentType = value;
    			$$invalidate(0, car);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('car' in $$props) $$invalidate(0, car = $$props.car);
    	};

    	$$self.$capture_state = () => ({ l, Textfield, LayoutGrid, Cell, car, $l });

    	$$self.$inject_state = $$props => {
    		if ('car' in $$props) $$invalidate(0, car = $$props.car);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		car,
    		$l,
    		textfield_value_binding,
    		textfield_value_binding_1,
    		textfield_value_binding_2,
    		textfield_value_binding_3,
    		textfield_value_binding_4,
    		textfield_value_binding_5,
    		textfield_value_binding_6,
    		textfield_value_binding_7,
    		textfield_value_binding_8,
    		textfield_value_binding_9,
    		textfield_value_binding_10,
    		textfield_value_binding_11,
    		textfield_value_binding_12,
    		textfield_value_binding_13,
    		textfield_value_binding_14
    	];
    }

    class CarComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$x, safe_not_equal, { car: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CarComponent",
    			options,
    			id: create_fragment$x.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*car*/ ctx[0] === undefined && !('car' in props)) {
    			console.warn("<CarComponent> was created without expected prop 'car'");
    		}
    	}

    	get car() {
    		throw new Error("<CarComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set car(value) {
    		throw new Error("<CarComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/ProvisionsComponent.svelte generated by Svelte v3.44.3 */
    const file$p = "src/components/needs_assessment/ProvisionsComponent.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	child_ctx[14] = list;
    	child_ctx[15] = i;
    	return child_ctx;
    }

    // (26:4) 
    function create_additional_content_slot(ctx) {
    	let a;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "pensionskontorechner.at";
    			attr_dev(a, "slot", "additional-content");
    			attr_dev(a, "class", "retirement-link svelte-1qae3a9");
    			attr_dev(a, "href", "https://www.pensionskontorechner.at/#/start");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noopener noreferrer");
    			add_location(a, file$p, 25, 4, 996);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_additional_content_slot.name,
    		type: "slot",
    		source: "(26:4) ",
    		ctx
    	});

    	return block;
    }

    // (30:0) <StylizedCheckbox bind:value={care} label={$l.needsAssessment.provisions.care}>
    function create_default_slot_6$d(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[8](value);
    	}

    	let textfield_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		label: /*$l*/ ctx[2].remarks,
    		style: "width:100%"
    	};

    	if (/*assessment*/ ctx[0].insurances.careRemarks !== void 0) {
    		textfield_props.value = /*assessment*/ ctx[0].insurances.careRemarks;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 4) textfield_changes.label = /*$l*/ ctx[2].remarks;

    			if (!updating_value && dirty & /*assessment*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*assessment*/ ctx[0].insurances.careRemarks;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$d.name,
    		type: "slot",
    		source: "(30:0) <StylizedCheckbox bind:value={care} label={$l.needsAssessment.provisions.care}>",
    		ctx
    	});

    	return block;
    }

    // (38:12) <Icon class="material-icons">
    function create_default_slot_5$d(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$d.name,
    		type: "slot",
    		source: "(38:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (37:8) <Button on:click={() => removeCar(car)}>
    function create_default_slot_4$d(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_5$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$d.name,
    		type: "slot",
    		source: "(37:8) <Button on:click={() => removeCar(car)}>",
    		ctx
    	});

    	return block;
    }

    // (34:4) {#each assessment.cars as car}
    function create_each_block$a(ctx) {
    	let div;
    	let carcomponent;
    	let updating_car;
    	let t;
    	let button;
    	let current;

    	function carcomponent_car_binding(value) {
    		/*carcomponent_car_binding*/ ctx[10](value, /*car*/ ctx[13], /*each_value*/ ctx[14], /*car_index*/ ctx[15]);
    	}

    	let carcomponent_props = {};

    	if (/*car*/ ctx[13] !== void 0) {
    		carcomponent_props.car = /*car*/ ctx[13];
    	}

    	carcomponent = new CarComponent({
    			props: carcomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(carcomponent, 'car', carcomponent_car_binding));

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*car*/ ctx[13]);
    	}

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_4$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(carcomponent.$$.fragment);
    			t = space();
    			create_component(button.$$.fragment);
    			attr_dev(div, "class", "car-container svelte-1qae3a9");
    			add_location(div, file$p, 34, 8, 1671);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(carcomponent, div, null);
    			append_dev(div, t);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const carcomponent_changes = {};

    			if (!updating_car && dirty & /*assessment*/ 1) {
    				updating_car = true;
    				carcomponent_changes.car = /*car*/ ctx[13];
    				add_flush_callback(() => updating_car = false);
    			}

    			carcomponent.$set(carcomponent_changes);
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(carcomponent.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(carcomponent.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(carcomponent);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(34:4) {#each assessment.cars as car}",
    		ctx
    	});

    	return block;
    }

    // (43:8) <Icon class="material-icons">
    function create_default_slot_3$f(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$f.name,
    		type: "slot",
    		source: "(43:8) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (44:8) <Label>
    function create_default_slot_2$f(ctx) {
    	let t_value = /*$l*/ ctx[2].personal.car.addCar + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].personal.car.addCar + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$f.name,
    		type: "slot",
    		source: "(44:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (42:4) <Button on:click={() => addCar()}>
    function create_default_slot_1$h(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_3$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_2$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 65540) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$h.name,
    		type: "slot",
    		source: "(42:4) <Button on:click={() => addCar()}>",
    		ctx
    	});

    	return block;
    }

    // (33:0) <OpenCloseToggle label={$l.personal.car.label}>
    function create_default_slot$l(ctx) {
    	let t;
    	let button;
    	let current;
    	let each_value = /*assessment*/ ctx[0].cars;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_1$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler_1*/ ctx[12]);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*removeCar, assessment*/ 17) {
    				each_value = /*assessment*/ ctx[0].cars;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t.parentNode, t);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const button_changes = {};

    			if (dirty & /*$$scope, $l*/ 65540) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$l.name,
    		type: "slot",
    		source: "(33:0) <OpenCloseToggle label={$l.personal.car.label}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let provisioncomponent0;
    	let updating_insurance;
    	let t0;
    	let provisioncomponent1;
    	let updating_insurance_1;
    	let t1;
    	let provisioncomponent2;
    	let updating_insurance_2;
    	let t2;
    	let stylizedcheckbox;
    	let updating_value;
    	let t3;
    	let openclosetoggle;
    	let current;

    	function provisioncomponent0_insurance_binding(value) {
    		/*provisioncomponent0_insurance_binding*/ ctx[5](value);
    	}

    	let provisioncomponent0_props = {
    		label: /*$l*/ ctx[2].needsAssessment.provisions.death
    	};

    	if (/*assessment*/ ctx[0].insurances.deathInsurance !== void 0) {
    		provisioncomponent0_props.insurance = /*assessment*/ ctx[0].insurances.deathInsurance;
    	}

    	provisioncomponent0 = new ProvisionComponent({
    			props: provisioncomponent0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(provisioncomponent0, 'insurance', provisioncomponent0_insurance_binding));

    	function provisioncomponent1_insurance_binding(value) {
    		/*provisioncomponent1_insurance_binding*/ ctx[6](value);
    	}

    	let provisioncomponent1_props = {
    		label: /*$l*/ ctx[2].needsAssessment.provisions.retirement,
    		$$slots: {
    			"additional-content": [create_additional_content_slot]
    		},
    		$$scope: { ctx }
    	};

    	if (/*assessment*/ ctx[0].insurances.retirementInsurance !== void 0) {
    		provisioncomponent1_props.insurance = /*assessment*/ ctx[0].insurances.retirementInsurance;
    	}

    	provisioncomponent1 = new ProvisionComponent({
    			props: provisioncomponent1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(provisioncomponent1, 'insurance', provisioncomponent1_insurance_binding));

    	function provisioncomponent2_insurance_binding(value) {
    		/*provisioncomponent2_insurance_binding*/ ctx[7](value);
    	}

    	let provisioncomponent2_props = {
    		label: /*$l*/ ctx[2].needsAssessment.provisions.illness
    	};

    	if (/*assessment*/ ctx[0].insurances.illnessInsurance !== void 0) {
    		provisioncomponent2_props.insurance = /*assessment*/ ctx[0].insurances.illnessInsurance;
    	}

    	provisioncomponent2 = new ProvisionComponent({
    			props: provisioncomponent2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(provisioncomponent2, 'insurance', provisioncomponent2_insurance_binding));

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[9](value);
    	}

    	let stylizedcheckbox_props = {
    		label: /*$l*/ ctx[2].needsAssessment.provisions.care,
    		$$slots: { default: [create_default_slot_6$d] },
    		$$scope: { ctx }
    	};

    	if (/*care*/ ctx[1] !== void 0) {
    		stylizedcheckbox_props.value = /*care*/ ctx[1];
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	openclosetoggle = new OpenCloseToggle({
    			props: {
    				label: /*$l*/ ctx[2].personal.car.label,
    				$$slots: { default: [create_default_slot$l] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(provisioncomponent0.$$.fragment);
    			t0 = space();
    			create_component(provisioncomponent1.$$.fragment);
    			t1 = space();
    			create_component(provisioncomponent2.$$.fragment);
    			t2 = space();
    			create_component(stylizedcheckbox.$$.fragment);
    			t3 = space();
    			create_component(openclosetoggle.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(provisioncomponent0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(provisioncomponent1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(provisioncomponent2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(stylizedcheckbox, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(openclosetoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const provisioncomponent0_changes = {};
    			if (dirty & /*$l*/ 4) provisioncomponent0_changes.label = /*$l*/ ctx[2].needsAssessment.provisions.death;

    			if (!updating_insurance && dirty & /*assessment*/ 1) {
    				updating_insurance = true;
    				provisioncomponent0_changes.insurance = /*assessment*/ ctx[0].insurances.deathInsurance;
    				add_flush_callback(() => updating_insurance = false);
    			}

    			provisioncomponent0.$set(provisioncomponent0_changes);
    			const provisioncomponent1_changes = {};
    			if (dirty & /*$l*/ 4) provisioncomponent1_changes.label = /*$l*/ ctx[2].needsAssessment.provisions.retirement;

    			if (dirty & /*$$scope*/ 65536) {
    				provisioncomponent1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_insurance_1 && dirty & /*assessment*/ 1) {
    				updating_insurance_1 = true;
    				provisioncomponent1_changes.insurance = /*assessment*/ ctx[0].insurances.retirementInsurance;
    				add_flush_callback(() => updating_insurance_1 = false);
    			}

    			provisioncomponent1.$set(provisioncomponent1_changes);
    			const provisioncomponent2_changes = {};
    			if (dirty & /*$l*/ 4) provisioncomponent2_changes.label = /*$l*/ ctx[2].needsAssessment.provisions.illness;

    			if (!updating_insurance_2 && dirty & /*assessment*/ 1) {
    				updating_insurance_2 = true;
    				provisioncomponent2_changes.insurance = /*assessment*/ ctx[0].insurances.illnessInsurance;
    				add_flush_callback(() => updating_insurance_2 = false);
    			}

    			provisioncomponent2.$set(provisioncomponent2_changes);
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*$l*/ 4) stylizedcheckbox_changes.label = /*$l*/ ctx[2].needsAssessment.provisions.care;

    			if (dirty & /*$$scope, $l, assessment*/ 65541) {
    				stylizedcheckbox_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*care*/ 2) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*care*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    			const openclosetoggle_changes = {};
    			if (dirty & /*$l*/ 4) openclosetoggle_changes.label = /*$l*/ ctx[2].personal.car.label;

    			if (dirty & /*$$scope, $l, assessment*/ 65541) {
    				openclosetoggle_changes.$$scope = { dirty, ctx };
    			}

    			openclosetoggle.$set(openclosetoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(provisioncomponent0.$$.fragment, local);
    			transition_in(provisioncomponent1.$$.fragment, local);
    			transition_in(provisioncomponent2.$$.fragment, local);
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			transition_in(openclosetoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(provisioncomponent0.$$.fragment, local);
    			transition_out(provisioncomponent1.$$.fragment, local);
    			transition_out(provisioncomponent2.$$.fragment, local);
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			transition_out(openclosetoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(provisioncomponent0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(provisioncomponent1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(provisioncomponent2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(stylizedcheckbox, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(openclosetoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProvisionsComponent', slots, []);
    	let { assessment } = $$props;

    	function addCar() {
    		let items = assessment.cars;
    		let item = {};
    		items.push(item);
    		$$invalidate(0, assessment.cars = items, assessment);
    	}

    	function removeCar(item) {
    		let items = assessment.cars;
    		$$invalidate(0, assessment.cars = items.filter(value => item !== value), assessment);
    	}

    	let care = false;
    	const writable_props = ['assessment'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProvisionsComponent> was created with unknown prop '${key}'`);
    	});

    	function provisioncomponent0_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.deathInsurance, value)) {
    			assessment.insurances.deathInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function provisioncomponent1_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.retirementInsurance, value)) {
    			assessment.insurances.retirementInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function provisioncomponent2_insurance_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.illnessInsurance, value)) {
    			assessment.insurances.illnessInsurance = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function textfield_value_binding(value) {
    		if ($$self.$$.not_equal(assessment.insurances.careRemarks, value)) {
    			assessment.insurances.careRemarks = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function stylizedcheckbox_value_binding(value) {
    		care = value;
    		$$invalidate(1, care);
    	}

    	function carcomponent_car_binding(value, car, each_value, car_index) {
    		each_value[car_index] = value;
    		$$invalidate(0, assessment);
    	}

    	const click_handler = car => removeCar(car);
    	const click_handler_1 = () => addCar();

    	$$self.$$set = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		Button: Button_1,
    		Label,
    		Icon: Icon$1,
    		Textfield,
    		OpenCloseToggle,
    		ProvisionComponent,
    		CarComponent,
    		StylizedCheckbox,
    		assessment,
    		addCar,
    		removeCar,
    		care,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    		if ('care' in $$props) $$invalidate(1, care = $$props.care);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		assessment,
    		care,
    		$l,
    		addCar,
    		removeCar,
    		provisioncomponent0_insurance_binding,
    		provisioncomponent1_insurance_binding,
    		provisioncomponent2_insurance_binding,
    		textfield_value_binding,
    		stylizedcheckbox_value_binding,
    		carcomponent_car_binding,
    		click_handler,
    		click_handler_1
    	];
    }

    class ProvisionsComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$w, safe_not_equal, { assessment: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProvisionsComponent",
    			options,
    			id: create_fragment$w.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*assessment*/ ctx[0] === undefined && !('assessment' in props)) {
    			console.warn("<ProvisionsComponent> was created without expected prop 'assessment'");
    		}
    	}

    	get assessment() {
    		throw new Error("<ProvisionsComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set assessment(value) {
    		throw new Error("<ProvisionsComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Sign.svelte generated by Svelte v3.44.3 */
    const file$o = "src/components/Sign.svelte";

    // (57:4) <Icon class="material-icons">
    function create_default_slot_1$g(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$g.name,
    		type: "slot",
    		source: "(57:4) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (56:2) <IconButton on:click={() => clearCanvas()} style="float: right;">
    function create_default_slot$k(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_1$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 2097152) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$k.name,
    		type: "slot",
    		source: "(56:2) <IconButton on:click={() => clearCanvas()} style=\\\"float: right;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let div;
    	let iconbutton;
    	let t;
    	let canvas_1;
    	let current;
    	let mounted;
    	let dispose;

    	iconbutton = new IconButton({
    			props: {
    				style: "float: right;",
    				$$slots: { default: [create_default_slot$k] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton.$on("click", /*click_handler*/ ctx[8]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(iconbutton.$$.fragment);
    			t = space();
    			canvas_1 = element("canvas");
    			attr_dev(canvas_1, "class", "svelte-u4hijc");
    			add_location(canvas_1, file$o, 58, 2, 1507);
    			attr_dev(div, "id", "canvas-container");
    			attr_dev(div, "class", "svelte-u4hijc");
    			add_location(div, file$o, 54, 0, 1325);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(iconbutton, div, null);
    			append_dev(div, t);
    			append_dev(div, canvas_1);
    			/*canvas_1_binding*/ ctx[9](canvas_1);
    			/*div_binding*/ ctx[15](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(canvas_1, "mousedown", /*mousedown_handler*/ ctx[10], false, false, false),
    					listen_dev(canvas_1, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
    					listen_dev(canvas_1, "mousemove", /*mousemove_handler*/ ctx[12], false, false, false),
    					listen_dev(canvas_1, "touchstart", /*touchstart_handler*/ ctx[13], false, false, false),
    					listen_dev(canvas_1, "touchmove", /*touchmove_handler*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 2097152) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(iconbutton);
    			/*canvas_1_binding*/ ctx[9](null);
    			/*div_binding*/ ctx[15](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sign', slots, []);
    	let container;
    	let canvas;
    	let ctx;

    	onMount(() => {
    		ctx = canvas.getContext('2d');
    		ctx.canvas.height = container.offsetHeight;
    		ctx.canvas.width = container.offsetWidth;
    	});

    	// last known position
    	var pos = { x: 0, y: 0 };

    	function setTouchPosition(e) {
    		setPosition(e.touches[0].clientX, e.touches[0].clientY);
    	}

    	function setMousePosition(e) {
    		setPosition(e.clientX, e.clientY);
    	}

    	function setPosition(x, y) {
    		const rect = canvas.getBoundingClientRect();
    		pos.x = x - rect.left;
    		pos.y = y - rect.top;
    	}

    	function touchDraw(e) {
    		beginDrawing();
    		setTouchPosition(e);
    		endDrawing();
    	}

    	function mouseDraw(e) {
    		// mouse left button must be pressed
    		if (e.buttons !== 1) return;

    		beginDrawing();
    		setMousePosition(e);
    		endDrawing();
    	}

    	function beginDrawing() {
    		ctx.beginPath(); // begin
    		ctx.lineWidth = 5;
    		ctx.lineCap = 'round';
    		ctx.strokeStyle = '#005D7F';
    		ctx.moveTo(pos.x, pos.y); // from
    	}

    	function endDrawing() {
    		ctx.lineTo(pos.x, pos.y); // to
    		ctx.stroke(); // draw it!
    		$$invalidate(7, signature = canvas.toDataURL());
    	}

    	function clearCanvas() {
    		ctx.clearRect(0, 0, canvas.width, canvas.height);
    	}

    	let { signature = '' } = $$props;
    	const writable_props = ['signature'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sign> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => clearCanvas();

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			canvas = $$value;
    			$$invalidate(1, canvas);
    		});
    	}

    	const mousedown_handler = e => setMousePosition(e);
    	const mouseenter_handler = e => setMousePosition(e);
    	const mousemove_handler = e => mouseDraw(e);
    	const touchstart_handler = e => setTouchPosition(e);
    	const touchmove_handler = e => touchDraw(e);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('signature' in $$props) $$invalidate(7, signature = $$props.signature);
    	};

    	$$self.$capture_state = () => ({
    		IconButton,
    		Icon: Icon$1,
    		onMount,
    		container,
    		canvas,
    		ctx,
    		pos,
    		setTouchPosition,
    		setMousePosition,
    		setPosition,
    		touchDraw,
    		mouseDraw,
    		beginDrawing,
    		endDrawing,
    		clearCanvas,
    		signature
    	});

    	$$self.$inject_state = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('canvas' in $$props) $$invalidate(1, canvas = $$props.canvas);
    		if ('ctx' in $$props) ctx = $$props.ctx;
    		if ('pos' in $$props) pos = $$props.pos;
    		if ('signature' in $$props) $$invalidate(7, signature = $$props.signature);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		container,
    		canvas,
    		setTouchPosition,
    		setMousePosition,
    		touchDraw,
    		mouseDraw,
    		clearCanvas,
    		signature,
    		click_handler,
    		canvas_1_binding,
    		mousedown_handler,
    		mouseenter_handler,
    		mousemove_handler,
    		touchstart_handler,
    		touchmove_handler,
    		div_binding
    	];
    }

    class Sign extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$v, safe_not_equal, { signature: 7 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sign",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get signature() {
    		throw new Error("<Sign>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set signature(value) {
    		throw new Error("<Sign>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/LegalComponent.svelte generated by Svelte v3.44.3 */
    const file$n = "src/components/needs_assessment/LegalComponent.svelte";

    function create_fragment$u(ctx) {
    	let h30;
    	let t0_value = /*$l*/ ctx[2].needsAssessment.signing.powerOfAttornyTitle + "";
    	let t0;
    	let t1;
    	let p0;
    	let raw0_value = format(/*$l*/ ctx[2].needsAssessment.signing.powerOfAttornyText, /*identification*/ ctx[1]) + "";
    	let t2;
    	let div0;
    	let textfield0;
    	let updating_value;
    	let t3;
    	let textfield1;
    	let updating_value_1;
    	let t4;
    	let sign0;
    	let updating_signature;
    	let t5;
    	let h31;
    	let t6_value = /*$l*/ ctx[2].needsAssessment.signing.noticeTitle + "";
    	let t6;
    	let t7;
    	let p1;
    	let raw1_value = /*$l*/ ctx[2].needsAssessment.signing.noticeText + "";
    	let t8;
    	let div1;
    	let textfield2;
    	let updating_value_2;
    	let t9;
    	let textfield3;
    	let updating_value_3;
    	let t10;
    	let sign1;
    	let updating_signature_1;
    	let current;

    	function textfield0_value_binding(value) {
    		/*textfield0_value_binding*/ ctx[3](value);
    	}

    	let textfield0_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[2].needsAssessment.signing.date,
    		type: "date"
    	};

    	if (/*assessment*/ ctx[0].powerOfAttorny.date !== void 0) {
    		textfield0_props.value = /*assessment*/ ctx[0].powerOfAttorny.date;
    	}

    	textfield0 = new Textfield({ props: textfield0_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield0, 'value', textfield0_value_binding));

    	function textfield1_value_binding(value) {
    		/*textfield1_value_binding*/ ctx[4](value);
    	}

    	let textfield1_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[2].needsAssessment.signing.place
    	};

    	if (/*assessment*/ ctx[0].powerOfAttorny.place !== void 0) {
    		textfield1_props.value = /*assessment*/ ctx[0].powerOfAttorny.place;
    	}

    	textfield1 = new Textfield({ props: textfield1_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield1, 'value', textfield1_value_binding));

    	function sign0_signature_binding(value) {
    		/*sign0_signature_binding*/ ctx[5](value);
    	}

    	let sign0_props = {};

    	if (/*assessment*/ ctx[0].powerOfAttorny.signature !== void 0) {
    		sign0_props.signature = /*assessment*/ ctx[0].powerOfAttorny.signature;
    	}

    	sign0 = new Sign({ props: sign0_props, $$inline: true });
    	binding_callbacks.push(() => bind(sign0, 'signature', sign0_signature_binding));

    	function textfield2_value_binding(value) {
    		/*textfield2_value_binding*/ ctx[6](value);
    	}

    	let textfield2_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[2].needsAssessment.signing.date,
    		type: "date"
    	};

    	if (/*assessment*/ ctx[0].legalNotice.date !== void 0) {
    		textfield2_props.value = /*assessment*/ ctx[0].legalNotice.date;
    	}

    	textfield2 = new Textfield({ props: textfield2_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield2, 'value', textfield2_value_binding));

    	function textfield3_value_binding(value) {
    		/*textfield3_value_binding*/ ctx[7](value);
    	}

    	let textfield3_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*$l*/ ctx[2].needsAssessment.signing.place
    	};

    	if (/*assessment*/ ctx[0].legalNotice.place !== void 0) {
    		textfield3_props.value = /*assessment*/ ctx[0].legalNotice.place;
    	}

    	textfield3 = new Textfield({ props: textfield3_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield3, 'value', textfield3_value_binding));

    	function sign1_signature_binding(value) {
    		/*sign1_signature_binding*/ ctx[8](value);
    	}

    	let sign1_props = {};

    	if (/*assessment*/ ctx[0].legalNotice.signature !== void 0) {
    		sign1_props.signature = /*assessment*/ ctx[0].legalNotice.signature;
    	}

    	sign1 = new Sign({ props: sign1_props, $$inline: true });
    	binding_callbacks.push(() => bind(sign1, 'signature', sign1_signature_binding));

    	const block = {
    		c: function create() {
    			h30 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			p0 = element("p");
    			t2 = space();
    			div0 = element("div");
    			create_component(textfield0.$$.fragment);
    			t3 = space();
    			create_component(textfield1.$$.fragment);
    			t4 = space();
    			create_component(sign0.$$.fragment);
    			t5 = space();
    			h31 = element("h3");
    			t6 = text(t6_value);
    			t7 = space();
    			p1 = element("p");
    			t8 = space();
    			div1 = element("div");
    			create_component(textfield2.$$.fragment);
    			t9 = space();
    			create_component(textfield3.$$.fragment);
    			t10 = space();
    			create_component(sign1.$$.fragment);
    			add_location(h30, file$n, 8, 0, 292);
    			add_location(p0, file$n, 9, 0, 350);
    			attr_dev(div0, "class", "group svelte-1pqo07h");
    			add_location(div0, file$n, 10, 0, 435);
    			add_location(h31, file$n, 15, 0, 899);
    			add_location(p1, file$n, 16, 0, 949);
    			attr_dev(div1, "class", "group svelte-1pqo07h");
    			add_location(div1, file$n, 17, 0, 1002);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h30, anchor);
    			append_dev(h30, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			p0.innerHTML = raw0_value;
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(textfield0, div0, null);
    			append_dev(div0, t3);
    			mount_component(textfield1, div0, null);
    			insert_dev(target, t4, anchor);
    			mount_component(sign0, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			append_dev(h31, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, p1, anchor);
    			p1.innerHTML = raw1_value;
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(textfield2, div1, null);
    			append_dev(div1, t9);
    			mount_component(textfield3, div1, null);
    			insert_dev(target, t10, anchor);
    			mount_component(sign1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$l*/ 4) && t0_value !== (t0_value = /*$l*/ ctx[2].needsAssessment.signing.powerOfAttornyTitle + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*$l, identification*/ 6) && raw0_value !== (raw0_value = format(/*$l*/ ctx[2].needsAssessment.signing.powerOfAttornyText, /*identification*/ ctx[1]) + "")) p0.innerHTML = raw0_value;			const textfield0_changes = {};
    			if (dirty & /*$l*/ 4) textfield0_changes.label = /*$l*/ ctx[2].needsAssessment.signing.date;

    			if (!updating_value && dirty & /*assessment*/ 1) {
    				updating_value = true;
    				textfield0_changes.value = /*assessment*/ ctx[0].powerOfAttorny.date;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield0.$set(textfield0_changes);
    			const textfield1_changes = {};
    			if (dirty & /*$l*/ 4) textfield1_changes.label = /*$l*/ ctx[2].needsAssessment.signing.place;

    			if (!updating_value_1 && dirty & /*assessment*/ 1) {
    				updating_value_1 = true;
    				textfield1_changes.value = /*assessment*/ ctx[0].powerOfAttorny.place;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			textfield1.$set(textfield1_changes);
    			const sign0_changes = {};

    			if (!updating_signature && dirty & /*assessment*/ 1) {
    				updating_signature = true;
    				sign0_changes.signature = /*assessment*/ ctx[0].powerOfAttorny.signature;
    				add_flush_callback(() => updating_signature = false);
    			}

    			sign0.$set(sign0_changes);
    			if ((!current || dirty & /*$l*/ 4) && t6_value !== (t6_value = /*$l*/ ctx[2].needsAssessment.signing.noticeTitle + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty & /*$l*/ 4) && raw1_value !== (raw1_value = /*$l*/ ctx[2].needsAssessment.signing.noticeText + "")) p1.innerHTML = raw1_value;			const textfield2_changes = {};
    			if (dirty & /*$l*/ 4) textfield2_changes.label = /*$l*/ ctx[2].needsAssessment.signing.date;

    			if (!updating_value_2 && dirty & /*assessment*/ 1) {
    				updating_value_2 = true;
    				textfield2_changes.value = /*assessment*/ ctx[0].legalNotice.date;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			textfield2.$set(textfield2_changes);
    			const textfield3_changes = {};
    			if (dirty & /*$l*/ 4) textfield3_changes.label = /*$l*/ ctx[2].needsAssessment.signing.place;

    			if (!updating_value_3 && dirty & /*assessment*/ 1) {
    				updating_value_3 = true;
    				textfield3_changes.value = /*assessment*/ ctx[0].legalNotice.place;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			textfield3.$set(textfield3_changes);
    			const sign1_changes = {};

    			if (!updating_signature_1 && dirty & /*assessment*/ 1) {
    				updating_signature_1 = true;
    				sign1_changes.signature = /*assessment*/ ctx[0].legalNotice.signature;
    				add_flush_callback(() => updating_signature_1 = false);
    			}

    			sign1.$set(sign1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield0.$$.fragment, local);
    			transition_in(textfield1.$$.fragment, local);
    			transition_in(sign0.$$.fragment, local);
    			transition_in(textfield2.$$.fragment, local);
    			transition_in(textfield3.$$.fragment, local);
    			transition_in(sign1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield0.$$.fragment, local);
    			transition_out(textfield1.$$.fragment, local);
    			transition_out(sign0.$$.fragment, local);
    			transition_out(textfield2.$$.fragment, local);
    			transition_out(textfield3.$$.fragment, local);
    			transition_out(sign1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div0);
    			destroy_component(textfield0);
    			destroy_component(textfield1);
    			if (detaching) detach_dev(t4);
    			destroy_component(sign0, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div1);
    			destroy_component(textfield2);
    			destroy_component(textfield3);
    			if (detaching) detach_dev(t10);
    			destroy_component(sign1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let identification;
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LegalComponent', slots, []);
    	let { assessment } = $$props;
    	const writable_props = ['assessment'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LegalComponent> was created with unknown prop '${key}'`);
    	});

    	function textfield0_value_binding(value) {
    		if ($$self.$$.not_equal(assessment.powerOfAttorny.date, value)) {
    			assessment.powerOfAttorny.date = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function textfield1_value_binding(value) {
    		if ($$self.$$.not_equal(assessment.powerOfAttorny.place, value)) {
    			assessment.powerOfAttorny.place = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function sign0_signature_binding(value) {
    		if ($$self.$$.not_equal(assessment.powerOfAttorny.signature, value)) {
    			assessment.powerOfAttorny.signature = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function textfield2_value_binding(value) {
    		if ($$self.$$.not_equal(assessment.legalNotice.date, value)) {
    			assessment.legalNotice.date = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function textfield3_value_binding(value) {
    		if ($$self.$$.not_equal(assessment.legalNotice.place, value)) {
    			assessment.legalNotice.place = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function sign1_signature_binding(value) {
    		if ($$self.$$.not_equal(assessment.legalNotice.signature, value)) {
    			assessment.legalNotice.signature = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		format,
    		Textfield,
    		Sign,
    		assessment,
    		identification,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    		if ('identification' in $$props) $$invalidate(1, identification = $$props.identification);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*assessment*/ 1) {
    			$$invalidate(1, identification = assessment.client.firstName + ' ' + assessment.client.lastName);
    		}
    	};

    	return [
    		assessment,
    		identification,
    		$l,
    		textfield0_value_binding,
    		textfield1_value_binding,
    		sign0_signature_binding,
    		textfield2_value_binding,
    		textfield3_value_binding,
    		sign1_signature_binding
    	];
    }

    class LegalComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$u, safe_not_equal, { assessment: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LegalComponent",
    			options,
    			id: create_fragment$u.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*assessment*/ ctx[0] === undefined && !('assessment' in props)) {
    			console.warn("<LegalComponent> was created without expected prop 'assessment'");
    		}
    	}

    	get assessment() {
    		throw new Error("<LegalComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set assessment(value) {
    		throw new Error("<LegalComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/PrintKeyValue.svelte generated by Svelte v3.44.3 */

    const file$m = "src/components/needs_assessment/PrintKeyValue.svelte";

    // (10:0) {#if result}
    function create_if_block$f(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let t1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(/*k*/ ctx[0]);
    			div1 = element("div");
    			t1 = text(/*v*/ ctx[1]);
    			attr_dev(div0, "class", /*kc*/ ctx[2]);
    			add_location(div0, file$m, 10, 0, 329);
    			attr_dev(div1, "class", /*vc*/ ctx[3]);
    			add_location(div1, file$m, 10, 27, 356);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*k*/ 1) set_data_dev(t0, /*k*/ ctx[0]);

    			if (dirty & /*kc*/ 4) {
    				attr_dev(div0, "class", /*kc*/ ctx[2]);
    			}

    			if (dirty & /*v*/ 2) set_data_dev(t1, /*v*/ ctx[1]);

    			if (dirty & /*vc*/ 8) {
    				attr_dev(div1, "class", /*vc*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(10:0) {#if result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let if_block_anchor;
    	let if_block = /*result*/ ctx[4] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*result*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PrintKeyValue', slots, []);
    	let { k } = $$props;
    	let { v } = $$props;
    	let { check = v } = $$props;
    	let { kc = 'key' } = $$props;
    	let { vc = 'value' } = $$props;
    	let result = false;
    	const writable_props = ['k', 'v', 'check', 'kc', 'vc'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PrintKeyValue> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('k' in $$props) $$invalidate(0, k = $$props.k);
    		if ('v' in $$props) $$invalidate(1, v = $$props.v);
    		if ('check' in $$props) $$invalidate(5, check = $$props.check);
    		if ('kc' in $$props) $$invalidate(2, kc = $$props.kc);
    		if ('vc' in $$props) $$invalidate(3, vc = $$props.vc);
    	};

    	$$self.$capture_state = () => ({ k, v, check, kc, vc, result });

    	$$self.$inject_state = $$props => {
    		if ('k' in $$props) $$invalidate(0, k = $$props.k);
    		if ('v' in $$props) $$invalidate(1, v = $$props.v);
    		if ('check' in $$props) $$invalidate(5, check = $$props.check);
    		if ('kc' in $$props) $$invalidate(2, kc = $$props.kc);
    		if ('vc' in $$props) $$invalidate(3, vc = $$props.vc);
    		if ('result' in $$props) $$invalidate(4, result = $$props.result);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*check, v*/ 34) {
    			$$invalidate(5, check = check !== undefined && check !== null ? check : v);
    		}

    		if ($$self.$$.dirty & /*check*/ 32) {
    			$$invalidate(4, result = check !== undefined && check !== null && (typeof check == 'boolean' ? check === true : true));
    		}
    	};

    	return [k, v, kc, vc, result, check];
    }

    class PrintKeyValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$t, safe_not_equal, { k: 0, v: 1, check: 5, kc: 2, vc: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PrintKeyValue",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*k*/ ctx[0] === undefined && !('k' in props)) {
    			console.warn("<PrintKeyValue> was created without expected prop 'k'");
    		}

    		if (/*v*/ ctx[1] === undefined && !('v' in props)) {
    			console.warn("<PrintKeyValue> was created without expected prop 'v'");
    		}
    	}

    	get k() {
    		throw new Error("<PrintKeyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set k(value) {
    		throw new Error("<PrintKeyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get v() {
    		throw new Error("<PrintKeyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set v(value) {
    		throw new Error("<PrintKeyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get check() {
    		throw new Error("<PrintKeyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set check(value) {
    		throw new Error("<PrintKeyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get kc() {
    		throw new Error("<PrintKeyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set kc(value) {
    		throw new Error("<PrintKeyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vc() {
    		throw new Error("<PrintKeyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vc(value) {
    		throw new Error("<PrintKeyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/PrintKeyCheckbox.svelte generated by Svelte v3.44.3 */
    const file$l = "src/components/needs_assessment/PrintKeyCheckbox.svelte";

    // (14:0) {#if result}
    function create_if_block$e(ctx) {
    	let div0;
    	let t0;
    	let div1;

    	let t1_value = (/*v*/ ctx[1] == true
    	? /*$l*/ ctx[7].yes
    	: /*$l*/ ctx[7].no) + "";

    	let t1;
    	let t2;
    	let if_block = /*showRemarks*/ ctx[6] && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(/*k*/ ctx[0]);
    			div1 = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", /*kc*/ ctx[2]);
    			add_location(div0, file$l, 14, 0, 415);
    			attr_dev(div1, "class", /*vc*/ ctx[3]);
    			add_location(div1, file$l, 14, 27, 442);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t1);
    			append_dev(div1, t2);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*k*/ 1) set_data_dev(t0, /*k*/ ctx[0]);

    			if (dirty & /*kc*/ 4) {
    				attr_dev(div0, "class", /*kc*/ ctx[2]);
    			}

    			if (dirty & /*v, $l*/ 130 && t1_value !== (t1_value = (/*v*/ ctx[1] == true
    			? /*$l*/ ctx[7].yes
    			: /*$l*/ ctx[7].no) + "")) set_data_dev(t1, t1_value);

    			if (/*showRemarks*/ ctx[6]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$8(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*vc*/ 8) {
    				attr_dev(div1, "class", /*vc*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(14:0) {#if result}",
    		ctx
    	});

    	return block;
    }

    // (16:2) {#if showRemarks}
    function create_if_block_1$8(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*remarks*/ ctx[4]);
    			attr_dev(div, "class", "remarks");
    			add_location(div, file$l, 16, 4, 512);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*remarks*/ 16) set_data_dev(t, /*remarks*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(16:2) {#if showRemarks}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let if_block_anchor;
    	let if_block = /*result*/ ctx[5] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*result*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(7, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PrintKeyCheckbox', slots, []);
    	let { k } = $$props;
    	let { v } = $$props;
    	let { check = null } = $$props;
    	let { kc = 'key' } = $$props;
    	let { vc = 'value' } = $$props;
    	let { remarks = '' } = $$props;
    	let result = false;
    	let showRemarks = false;
    	const writable_props = ['k', 'v', 'check', 'kc', 'vc', 'remarks'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PrintKeyCheckbox> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('k' in $$props) $$invalidate(0, k = $$props.k);
    		if ('v' in $$props) $$invalidate(1, v = $$props.v);
    		if ('check' in $$props) $$invalidate(8, check = $$props.check);
    		if ('kc' in $$props) $$invalidate(2, kc = $$props.kc);
    		if ('vc' in $$props) $$invalidate(3, vc = $$props.vc);
    		if ('remarks' in $$props) $$invalidate(4, remarks = $$props.remarks);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		k,
    		v,
    		check,
    		kc,
    		vc,
    		remarks,
    		result,
    		showRemarks,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('k' in $$props) $$invalidate(0, k = $$props.k);
    		if ('v' in $$props) $$invalidate(1, v = $$props.v);
    		if ('check' in $$props) $$invalidate(8, check = $$props.check);
    		if ('kc' in $$props) $$invalidate(2, kc = $$props.kc);
    		if ('vc' in $$props) $$invalidate(3, vc = $$props.vc);
    		if ('remarks' in $$props) $$invalidate(4, remarks = $$props.remarks);
    		if ('result' in $$props) $$invalidate(5, result = $$props.result);
    		if ('showRemarks' in $$props) $$invalidate(6, showRemarks = $$props.showRemarks);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*remarks*/ 16) {
    			$$invalidate(6, showRemarks = remarks !== undefined && remarks !== null);
    		}

    		if ($$self.$$.dirty & /*check*/ 256) {
    			$$invalidate(5, result = check === undefined || check === null || (typeof check == 'boolean' ? check === true : true));
    		}
    	};

    	return [k, v, kc, vc, remarks, result, showRemarks, $l, check];
    }

    class PrintKeyCheckbox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$s, safe_not_equal, {
    			k: 0,
    			v: 1,
    			check: 8,
    			kc: 2,
    			vc: 3,
    			remarks: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PrintKeyCheckbox",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*k*/ ctx[0] === undefined && !('k' in props)) {
    			console.warn("<PrintKeyCheckbox> was created without expected prop 'k'");
    		}

    		if (/*v*/ ctx[1] === undefined && !('v' in props)) {
    			console.warn("<PrintKeyCheckbox> was created without expected prop 'v'");
    		}
    	}

    	get k() {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set k(value) {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get v() {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set v(value) {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get check() {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set check(value) {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get kc() {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set kc(value) {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vc() {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vc(value) {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get remarks() {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set remarks(value) {
    		throw new Error("<PrintKeyCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    let $l;
    l.subscribe(v => $l = v);
    function getEuro(integer) {
        if (integer) {
            let temp = integer.toString();
            temp = temp.substring(0, temp.length - 2) + ',' + temp.substring(temp.length - 2, temp.length);
            return temp + '€';
        }
        return '';
    }
    function getFrequency(frequency) {
        if (frequency) {
            switch (frequency) {
                case PaymentFrequency.MONTHLY:
                    return $l.payment.monthly;
                case PaymentFrequency.QUARTERLY:
                    return $l.payment.quarterly;
                case PaymentFrequency.YEARLY:
                    return $l.payment.yearly;
            }
        }
        return '';
    }

    /* src/components/needs_assessment/PrintInsurance.svelte generated by Svelte v3.44.3 */

    // (18:4) {#if insurance.clientWishes}
    function create_if_block_1$7(ctx) {
    	let kc;
    	let current;

    	kc = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[2].needsAssessment.wishesOffer,
    				kc: "payment-key key",
    				v: /*insurance*/ ctx[1].clientWishes
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(kc.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(kc, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kc_changes = {};
    			if (dirty & /*$l*/ 4) kc_changes.k = /*$l*/ ctx[2].needsAssessment.wishesOffer;
    			if (dirty & /*insurance*/ 2) kc_changes.v = /*insurance*/ ctx[1].clientWishes;
    			kc.$set(kc_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kc.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kc.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kc, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(18:4) {#if insurance.clientWishes}",
    		ctx
    	});

    	return block;
    }

    // (12:2) {#if insurance.clientHas}
    function create_if_block$d(ctx) {
    	let kv0;
    	let t0;
    	let kv1;
    	let t1;
    	let kv2;
    	let t2;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[2].payment.contractor,
    				kc: "payment-key key",
    				v: /*insurance*/ ctx[1].contractor.name
    			},
    			$$inline: true
    		});

    	kv1 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[2].payment.paymentFrequency,
    				kc: "payment-key key",
    				v: getFrequency(/*insurance*/ ctx[1].paymentFrequency)
    			},
    			$$inline: true
    		});

    	kv2 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[2].payment.euroTextfieldLabel,
    				kc: "payment-key key",
    				v: getEuro(/*insurance*/ ctx[1].paymentValue)
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			create_component(kv0.$$.fragment);
    			t0 = space();
    			create_component(kv1.$$.fragment);
    			t1 = space();
    			create_component(kv2.$$.fragment);
    			t2 = space();
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			mount_component(kv0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(kv1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(kv2, target, anchor);
    			insert_dev(target, t2, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 4) kv0_changes.k = /*$l*/ ctx[2].payment.contractor;
    			if (dirty & /*insurance*/ 2) kv0_changes.v = /*insurance*/ ctx[1].contractor.name;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 4) kv1_changes.k = /*$l*/ ctx[2].payment.paymentFrequency;
    			if (dirty & /*insurance*/ 2) kv1_changes.v = getFrequency(/*insurance*/ ctx[1].paymentFrequency);
    			kv1.$set(kv1_changes);
    			const kv2_changes = {};
    			if (dirty & /*$l*/ 4) kv2_changes.k = /*$l*/ ctx[2].payment.euroTextfieldLabel;
    			if (dirty & /*insurance*/ 2) kv2_changes.v = getEuro(/*insurance*/ ctx[1].paymentValue);
    			kv2.$set(kv2_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			transition_in(kv2.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			transition_out(kv2.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kv0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(kv1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(kv2, detaching);
    			if (detaching) detach_dev(t2);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(12:2) {#if insurance.clientHas}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let kc;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;

    	kc = new PrintKeyCheckbox({
    			props: {
    				k: /*label*/ ctx[0],
    				kc: "key payment-header",
    				v: /*insurance*/ ctx[1].clientHas
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$d, create_if_block_1$7];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*insurance*/ ctx[1].clientHas) return 0;
    		if (/*insurance*/ ctx[1].clientWishes) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			create_component(kc.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(kc, target, anchor);
    			insert_dev(target, t, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const kc_changes = {};
    			if (dirty & /*label*/ 1) kc_changes.k = /*label*/ ctx[0];
    			if (dirty & /*insurance*/ 2) kc_changes.v = /*insurance*/ ctx[1].clientHas;
    			kc.$set(kc_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kc.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kc.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kc, detaching);
    			if (detaching) detach_dev(t);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PrintInsurance', slots, ['default']);
    	let { label } = $$props;
    	let { insurance } = $$props;
    	const writable_props = ['label', 'insurance'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PrintInsurance> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('insurance' in $$props) $$invalidate(1, insurance = $$props.insurance);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		KV: PrintKeyValue,
    		KC: PrintKeyCheckbox,
    		getFrequency,
    		getEuro,
    		label,
    		insurance,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('insurance' in $$props) $$invalidate(1, insurance = $$props.insurance);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [label, insurance, $l, $$scope, slots];
    }

    class PrintInsurance extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$r, safe_not_equal, { label: 0, insurance: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PrintInsurance",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*label*/ ctx[0] === undefined && !('label' in props)) {
    			console.warn("<PrintInsurance> was created without expected prop 'label'");
    		}

    		if (/*insurance*/ ctx[1] === undefined && !('insurance' in props)) {
    			console.warn("<PrintInsurance> was created without expected prop 'insurance'");
    		}
    	}

    	get label() {
    		throw new Error("<PrintInsurance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<PrintInsurance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get insurance() {
    		throw new Error("<PrintInsurance>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set insurance(value) {
    		throw new Error("<PrintInsurance>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/Print.svelte generated by Svelte v3.44.3 */
    const file$k = "src/components/needs_assessment/Print.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (188:2) {#if d.client.maritalStatus == MaritalStatus.MARRIED}
    function create_if_block_7(ctx) {
    	let section;
    	let h3;
    	let t0_value = /*$l*/ ctx[3].personal.partnerLabel + "";
    	let t0;
    	let t1;
    	let div;
    	let kv0;
    	let t2;
    	let kv1;
    	let t3;
    	let kv2;
    	let t4;
    	let kv3;
    	let t5;
    	let kv4;
    	let t6;
    	let kv5;
    	let t7;
    	let kv6;
    	let t8;
    	let kv7;
    	let t9;
    	let kv8;
    	let t10;
    	let kv9;
    	let t11;
    	let kv10;
    	let t12;
    	let kv11;
    	let t13;
    	let kv12;
    	let t14;
    	let kv13;
    	let t15;
    	let kv14;
    	let t16;
    	let kv15;
    	let t17;
    	let kv16;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.title,
    				v: /*d*/ ctx[0].client.partner.title
    			},
    			$$inline: true
    		});

    	kv1 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.firstName,
    				v: /*d*/ ctx[0].client.partner.firstName
    			},
    			$$inline: true
    		});

    	kv2 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.lastName,
    				v: /*d*/ ctx[0].client.partner.lastName
    			},
    			$$inline: true
    		});

    	kv3 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.degree,
    				v: /*d*/ ctx[0].client.partner.academicDegree
    			},
    			$$inline: true
    		});

    	kv4 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.gender.label,
    				v: /*getGender*/ ctx[4](/*d*/ ctx[0].client.partner.gender)
    			},
    			$$inline: true
    		});

    	kv5 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.birthday,
    				v: /*d*/ ctx[0].client.partner.birthday
    			},
    			$$inline: true
    		});

    	kv6 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.nationality,
    				v: mapCountryToName(/*d*/ ctx[0].client.partner.nationality)
    			},
    			$$inline: true
    		});

    	kv7 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.birthPlace,
    				v: /*d*/ ctx[0].client.partner.birthPlace
    			},
    			$$inline: true
    		});

    	kv8 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.occupation,
    				v: /*d*/ ctx[0].client.partner.occupation
    			},
    			$$inline: true
    		});

    	kv9 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.socialInsuranceInstitution,
    				v: mapCodeToSocialInsuranceInstitutionName(/*d*/ ctx[0].client.partner.socialInsuranceInstitution)
    			},
    			$$inline: true
    		});

    	kv10 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.address,
    				v: /*d*/ ctx[0].client.partner.address
    			},
    			$$inline: true
    		});

    	kv11 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.zipCode,
    				v: /*d*/ ctx[0].client.partner.zipCode
    			},
    			$$inline: true
    		});

    	kv12 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.city,
    				v: /*d*/ ctx[0].client.partner.city
    			},
    			$$inline: true
    		});

    	kv13 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.country,
    				v: mapCountryToName(/*d*/ ctx[0].client.partner.country)
    			},
    			$$inline: true
    		});

    	kv14 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.phone,
    				v: /*d*/ ctx[0].client.partner.phone
    			},
    			$$inline: true
    		});

    	kv15 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.mobile,
    				v: /*d*/ ctx[0].client.partner.mobile
    			},
    			$$inline: true
    		});

    	kv16 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.email,
    				v: /*d*/ ctx[0].client.partner.email
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div = element("div");
    			create_component(kv0.$$.fragment);
    			t2 = space();
    			create_component(kv1.$$.fragment);
    			t3 = space();
    			create_component(kv2.$$.fragment);
    			t4 = space();
    			create_component(kv3.$$.fragment);
    			t5 = space();
    			create_component(kv4.$$.fragment);
    			t6 = space();
    			create_component(kv5.$$.fragment);
    			t7 = space();
    			create_component(kv6.$$.fragment);
    			t8 = space();
    			create_component(kv7.$$.fragment);
    			t9 = space();
    			create_component(kv8.$$.fragment);
    			t10 = space();
    			create_component(kv9.$$.fragment);
    			t11 = space();
    			create_component(kv10.$$.fragment);
    			t12 = space();
    			create_component(kv11.$$.fragment);
    			t13 = space();
    			create_component(kv12.$$.fragment);
    			t14 = space();
    			create_component(kv13.$$.fragment);
    			t15 = space();
    			create_component(kv14.$$.fragment);
    			t16 = space();
    			create_component(kv15.$$.fragment);
    			t17 = space();
    			create_component(kv16.$$.fragment);
    			add_location(h3, file$k, 189, 4, 6031);
    			attr_dev(div, "class", "partner kv-container");
    			add_location(div, file$k, 190, 4, 6071);
    			add_location(section, file$k, 188, 2, 6017);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h3);
    			append_dev(h3, t0);
    			append_dev(section, t1);
    			append_dev(section, div);
    			mount_component(kv0, div, null);
    			append_dev(div, t2);
    			mount_component(kv1, div, null);
    			append_dev(div, t3);
    			mount_component(kv2, div, null);
    			append_dev(div, t4);
    			mount_component(kv3, div, null);
    			append_dev(div, t5);
    			mount_component(kv4, div, null);
    			append_dev(div, t6);
    			mount_component(kv5, div, null);
    			append_dev(div, t7);
    			mount_component(kv6, div, null);
    			append_dev(div, t8);
    			mount_component(kv7, div, null);
    			append_dev(div, t9);
    			mount_component(kv8, div, null);
    			append_dev(div, t10);
    			mount_component(kv9, div, null);
    			append_dev(div, t11);
    			mount_component(kv10, div, null);
    			append_dev(div, t12);
    			mount_component(kv11, div, null);
    			append_dev(div, t13);
    			mount_component(kv12, div, null);
    			append_dev(div, t14);
    			mount_component(kv13, div, null);
    			append_dev(div, t15);
    			mount_component(kv14, div, null);
    			append_dev(div, t16);
    			mount_component(kv15, div, null);
    			append_dev(div, t17);
    			mount_component(kv16, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$l*/ 8) && t0_value !== (t0_value = /*$l*/ ctx[3].personal.partnerLabel + "")) set_data_dev(t0, t0_value);
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 8) kv0_changes.k = /*$l*/ ctx[3].personal.title;
    			if (dirty & /*d*/ 1) kv0_changes.v = /*d*/ ctx[0].client.partner.title;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 8) kv1_changes.k = /*$l*/ ctx[3].personal.firstName;
    			if (dirty & /*d*/ 1) kv1_changes.v = /*d*/ ctx[0].client.partner.firstName;
    			kv1.$set(kv1_changes);
    			const kv2_changes = {};
    			if (dirty & /*$l*/ 8) kv2_changes.k = /*$l*/ ctx[3].personal.lastName;
    			if (dirty & /*d*/ 1) kv2_changes.v = /*d*/ ctx[0].client.partner.lastName;
    			kv2.$set(kv2_changes);
    			const kv3_changes = {};
    			if (dirty & /*$l*/ 8) kv3_changes.k = /*$l*/ ctx[3].personal.degree;
    			if (dirty & /*d*/ 1) kv3_changes.v = /*d*/ ctx[0].client.partner.academicDegree;
    			kv3.$set(kv3_changes);
    			const kv4_changes = {};
    			if (dirty & /*$l*/ 8) kv4_changes.k = /*$l*/ ctx[3].personal.gender.label;
    			if (dirty & /*d*/ 1) kv4_changes.v = /*getGender*/ ctx[4](/*d*/ ctx[0].client.partner.gender);
    			kv4.$set(kv4_changes);
    			const kv5_changes = {};
    			if (dirty & /*$l*/ 8) kv5_changes.k = /*$l*/ ctx[3].personal.birthday;
    			if (dirty & /*d*/ 1) kv5_changes.v = /*d*/ ctx[0].client.partner.birthday;
    			kv5.$set(kv5_changes);
    			const kv6_changes = {};
    			if (dirty & /*$l*/ 8) kv6_changes.k = /*$l*/ ctx[3].personal.nationality;
    			if (dirty & /*d*/ 1) kv6_changes.v = mapCountryToName(/*d*/ ctx[0].client.partner.nationality);
    			kv6.$set(kv6_changes);
    			const kv7_changes = {};
    			if (dirty & /*$l*/ 8) kv7_changes.k = /*$l*/ ctx[3].personal.birthPlace;
    			if (dirty & /*d*/ 1) kv7_changes.v = /*d*/ ctx[0].client.partner.birthPlace;
    			kv7.$set(kv7_changes);
    			const kv8_changes = {};
    			if (dirty & /*$l*/ 8) kv8_changes.k = /*$l*/ ctx[3].personal.occupation;
    			if (dirty & /*d*/ 1) kv8_changes.v = /*d*/ ctx[0].client.partner.occupation;
    			kv8.$set(kv8_changes);
    			const kv9_changes = {};
    			if (dirty & /*$l*/ 8) kv9_changes.k = /*$l*/ ctx[3].personal.socialInsuranceInstitution;
    			if (dirty & /*d*/ 1) kv9_changes.v = mapCodeToSocialInsuranceInstitutionName(/*d*/ ctx[0].client.partner.socialInsuranceInstitution);
    			kv9.$set(kv9_changes);
    			const kv10_changes = {};
    			if (dirty & /*$l*/ 8) kv10_changes.k = /*$l*/ ctx[3].personal.address;
    			if (dirty & /*d*/ 1) kv10_changes.v = /*d*/ ctx[0].client.partner.address;
    			kv10.$set(kv10_changes);
    			const kv11_changes = {};
    			if (dirty & /*$l*/ 8) kv11_changes.k = /*$l*/ ctx[3].personal.zipCode;
    			if (dirty & /*d*/ 1) kv11_changes.v = /*d*/ ctx[0].client.partner.zipCode;
    			kv11.$set(kv11_changes);
    			const kv12_changes = {};
    			if (dirty & /*$l*/ 8) kv12_changes.k = /*$l*/ ctx[3].personal.city;
    			if (dirty & /*d*/ 1) kv12_changes.v = /*d*/ ctx[0].client.partner.city;
    			kv12.$set(kv12_changes);
    			const kv13_changes = {};
    			if (dirty & /*$l*/ 8) kv13_changes.k = /*$l*/ ctx[3].personal.country;
    			if (dirty & /*d*/ 1) kv13_changes.v = mapCountryToName(/*d*/ ctx[0].client.partner.country);
    			kv13.$set(kv13_changes);
    			const kv14_changes = {};
    			if (dirty & /*$l*/ 8) kv14_changes.k = /*$l*/ ctx[3].personal.phone;
    			if (dirty & /*d*/ 1) kv14_changes.v = /*d*/ ctx[0].client.partner.phone;
    			kv14.$set(kv14_changes);
    			const kv15_changes = {};
    			if (dirty & /*$l*/ 8) kv15_changes.k = /*$l*/ ctx[3].personal.mobile;
    			if (dirty & /*d*/ 1) kv15_changes.v = /*d*/ ctx[0].client.partner.mobile;
    			kv15.$set(kv15_changes);
    			const kv16_changes = {};
    			if (dirty & /*$l*/ 8) kv16_changes.k = /*$l*/ ctx[3].personal.email;
    			if (dirty & /*d*/ 1) kv16_changes.v = /*d*/ ctx[0].client.partner.email;
    			kv16.$set(kv16_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			transition_in(kv2.$$.fragment, local);
    			transition_in(kv3.$$.fragment, local);
    			transition_in(kv4.$$.fragment, local);
    			transition_in(kv5.$$.fragment, local);
    			transition_in(kv6.$$.fragment, local);
    			transition_in(kv7.$$.fragment, local);
    			transition_in(kv8.$$.fragment, local);
    			transition_in(kv9.$$.fragment, local);
    			transition_in(kv10.$$.fragment, local);
    			transition_in(kv11.$$.fragment, local);
    			transition_in(kv12.$$.fragment, local);
    			transition_in(kv13.$$.fragment, local);
    			transition_in(kv14.$$.fragment, local);
    			transition_in(kv15.$$.fragment, local);
    			transition_in(kv16.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			transition_out(kv2.$$.fragment, local);
    			transition_out(kv3.$$.fragment, local);
    			transition_out(kv4.$$.fragment, local);
    			transition_out(kv5.$$.fragment, local);
    			transition_out(kv6.$$.fragment, local);
    			transition_out(kv7.$$.fragment, local);
    			transition_out(kv8.$$.fragment, local);
    			transition_out(kv9.$$.fragment, local);
    			transition_out(kv10.$$.fragment, local);
    			transition_out(kv11.$$.fragment, local);
    			transition_out(kv12.$$.fragment, local);
    			transition_out(kv13.$$.fragment, local);
    			transition_out(kv14.$$.fragment, local);
    			transition_out(kv15.$$.fragment, local);
    			transition_out(kv16.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(kv0);
    			destroy_component(kv1);
    			destroy_component(kv2);
    			destroy_component(kv3);
    			destroy_component(kv4);
    			destroy_component(kv5);
    			destroy_component(kv6);
    			destroy_component(kv7);
    			destroy_component(kv8);
    			destroy_component(kv9);
    			destroy_component(kv10);
    			destroy_component(kv11);
    			destroy_component(kv12);
    			destroy_component(kv13);
    			destroy_component(kv14);
    			destroy_component(kv15);
    			destroy_component(kv16);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(188:2) {#if d.client.maritalStatus == MaritalStatus.MARRIED}",
    		ctx
    	});

    	return block;
    }

    // (213:2) {#if d.client.children && d.client.children.length > 0}
    function create_if_block_6(ctx) {
    	let section;
    	let h3;
    	let t0_value = /*$l*/ ctx[3].personal.childrenLabel + "";
    	let t0;
    	let t1;
    	let current;
    	let each_value_2 = /*d*/ ctx[0].client.children;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			section = element("section");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(h3, file$k, 214, 4, 7464);
    			add_location(section, file$k, 213, 2, 7450);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h3);
    			append_dev(h3, t0);
    			append_dev(section, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$l*/ 8) && t0_value !== (t0_value = /*$l*/ ctx[3].personal.childrenLabel + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$l, d, getGender*/ 25) {
    				each_value_2 = /*d*/ ctx[0].client.children;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(213:2) {#if d.client.children && d.client.children.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (216:4) {#each d.client.children as child}
    function create_each_block_2(ctx) {
    	let div;
    	let kv0;
    	let t0;
    	let kv1;
    	let t1;
    	let kv2;
    	let t2;
    	let kv3;
    	let t3;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.firstName,
    				v: /*child*/ ctx[17].firstName
    			},
    			$$inline: true
    		});

    	kv1 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.lastName,
    				v: /*child*/ ctx[17].lastName
    			},
    			$$inline: true
    		});

    	kv2 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.gender.label,
    				v: /*getGender*/ ctx[4](/*child*/ ctx[17].gender)
    			},
    			$$inline: true
    		});

    	kv3 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.birthday,
    				v: /*child*/ ctx[17].birthday
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(kv0.$$.fragment);
    			t0 = space();
    			create_component(kv1.$$.fragment);
    			t1 = space();
    			create_component(kv2.$$.fragment);
    			t2 = space();
    			create_component(kv3.$$.fragment);
    			t3 = space();
    			attr_dev(div, "class", "children kv-container");
    			add_location(div, file$k, 216, 4, 7544);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(kv0, div, null);
    			append_dev(div, t0);
    			mount_component(kv1, div, null);
    			append_dev(div, t1);
    			mount_component(kv2, div, null);
    			append_dev(div, t2);
    			mount_component(kv3, div, null);
    			append_dev(div, t3);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 8) kv0_changes.k = /*$l*/ ctx[3].personal.firstName;
    			if (dirty & /*d*/ 1) kv0_changes.v = /*child*/ ctx[17].firstName;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 8) kv1_changes.k = /*$l*/ ctx[3].personal.lastName;
    			if (dirty & /*d*/ 1) kv1_changes.v = /*child*/ ctx[17].lastName;
    			kv1.$set(kv1_changes);
    			const kv2_changes = {};
    			if (dirty & /*$l*/ 8) kv2_changes.k = /*$l*/ ctx[3].personal.gender.label;
    			if (dirty & /*d*/ 1) kv2_changes.v = /*getGender*/ ctx[4](/*child*/ ctx[17].gender);
    			kv2.$set(kv2_changes);
    			const kv3_changes = {};
    			if (dirty & /*$l*/ 8) kv3_changes.k = /*$l*/ ctx[3].personal.birthday;
    			if (dirty & /*d*/ 1) kv3_changes.v = /*child*/ ctx[17].birthday;
    			kv3.$set(kv3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			transition_in(kv2.$$.fragment, local);
    			transition_in(kv3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			transition_out(kv2.$$.fragment, local);
    			transition_out(kv3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(kv0);
    			destroy_component(kv1);
    			destroy_component(kv2);
    			destroy_component(kv3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(216:4) {#each d.client.children as child}",
    		ctx
    	});

    	return block;
    }

    // (239:4) {#if d.insurances.homeInsurance.homeOwnership}
    function create_if_block_5(ctx) {
    	let kv0;
    	let t0;
    	let kv1;
    	let t1;
    	let kv2;
    	let t2;
    	let kc0;
    	let t3;
    	let kc1;
    	let t4;
    	let kc2;
    	let t5;
    	let kv3;
    	let t6;
    	let kv4;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.builtArea,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.builtArea
    			},
    			$$inline: true
    		});

    	kv1 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.floors,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.floors
    			},
    			$$inline: true
    		});

    	kv2 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.roofType,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.roofType
    			},
    			$$inline: true
    		});

    	kc0 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.cellar,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.cellar
    			},
    			$$inline: true
    		});

    	kc1 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.pool,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.pool
    			},
    			$$inline: true
    		});

    	kc2 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.photovoltaic,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.photovoltaic
    			},
    			$$inline: true
    		});

    	kv3 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.photovoltaicRemarks,
    				check: /*d*/ ctx[0].insurances.homeInsurance.home.photovoltaic,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.photovoltaicRemarks
    			},
    			$$inline: true
    		});

    	kv4 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.specialAssets,
    				v: /*d*/ ctx[0].insurances.homeInsurance.home.specialAssets
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(kv0.$$.fragment);
    			t0 = space();
    			create_component(kv1.$$.fragment);
    			t1 = space();
    			create_component(kv2.$$.fragment);
    			t2 = space();
    			create_component(kc0.$$.fragment);
    			t3 = space();
    			create_component(kc1.$$.fragment);
    			t4 = space();
    			create_component(kc2.$$.fragment);
    			t5 = space();
    			create_component(kv3.$$.fragment);
    			t6 = space();
    			create_component(kv4.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(kv0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(kv1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(kv2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(kc0, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(kc1, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(kc2, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(kv3, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(kv4, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 8) kv0_changes.k = /*$l*/ ctx[3].personal.home.builtArea;
    			if (dirty & /*d*/ 1) kv0_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.builtArea;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 8) kv1_changes.k = /*$l*/ ctx[3].personal.home.floors;
    			if (dirty & /*d*/ 1) kv1_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.floors;
    			kv1.$set(kv1_changes);
    			const kv2_changes = {};
    			if (dirty & /*$l*/ 8) kv2_changes.k = /*$l*/ ctx[3].personal.home.roofType;
    			if (dirty & /*d*/ 1) kv2_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.roofType;
    			kv2.$set(kv2_changes);
    			const kc0_changes = {};
    			if (dirty & /*$l*/ 8) kc0_changes.k = /*$l*/ ctx[3].personal.home.cellar;
    			if (dirty & /*d*/ 1) kc0_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.cellar;
    			kc0.$set(kc0_changes);
    			const kc1_changes = {};
    			if (dirty & /*$l*/ 8) kc1_changes.k = /*$l*/ ctx[3].personal.home.pool;
    			if (dirty & /*d*/ 1) kc1_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.pool;
    			kc1.$set(kc1_changes);
    			const kc2_changes = {};
    			if (dirty & /*$l*/ 8) kc2_changes.k = /*$l*/ ctx[3].personal.home.photovoltaic;
    			if (dirty & /*d*/ 1) kc2_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.photovoltaic;
    			kc2.$set(kc2_changes);
    			const kv3_changes = {};
    			if (dirty & /*$l*/ 8) kv3_changes.k = /*$l*/ ctx[3].personal.home.photovoltaicRemarks;
    			if (dirty & /*d*/ 1) kv3_changes.check = /*d*/ ctx[0].insurances.homeInsurance.home.photovoltaic;
    			if (dirty & /*d*/ 1) kv3_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.photovoltaicRemarks;
    			kv3.$set(kv3_changes);
    			const kv4_changes = {};
    			if (dirty & /*$l*/ 8) kv4_changes.k = /*$l*/ ctx[3].personal.home.specialAssets;
    			if (dirty & /*d*/ 1) kv4_changes.v = /*d*/ ctx[0].insurances.homeInsurance.home.specialAssets;
    			kv4.$set(kv4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			transition_in(kv2.$$.fragment, local);
    			transition_in(kc0.$$.fragment, local);
    			transition_in(kc1.$$.fragment, local);
    			transition_in(kc2.$$.fragment, local);
    			transition_in(kv3.$$.fragment, local);
    			transition_in(kv4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			transition_out(kv2.$$.fragment, local);
    			transition_out(kc0.$$.fragment, local);
    			transition_out(kc1.$$.fragment, local);
    			transition_out(kc2.$$.fragment, local);
    			transition_out(kv3.$$.fragment, local);
    			transition_out(kv4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kv0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(kv1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(kv2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(kc0, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(kc1, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(kc2, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(kv3, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(kv4, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(239:4) {#if d.insurances.homeInsurance.homeOwnership}",
    		ctx
    	});

    	return block;
    }

    // (250:4) {#if d.insurances.homeInsurance.householdInsurance}
    function create_if_block_4(ctx) {
    	let kv0;
    	let t;
    	let kv1;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.home.area,
    				v: /*d*/ ctx[0].insurances.homeInsurance.householdArea
    			},
    			$$inline: true
    		});

    	kv1 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.petsRemarks,
    				v: /*d*/ ctx[0].insurances.homeInsurance.petsRemarks
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(kv0.$$.fragment);
    			t = space();
    			create_component(kv1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(kv0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(kv1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 8) kv0_changes.k = /*$l*/ ctx[3].personal.home.area;
    			if (dirty & /*d*/ 1) kv0_changes.v = /*d*/ ctx[0].insurances.homeInsurance.householdArea;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 8) kv1_changes.k = /*$l*/ ctx[3].personal.petsRemarks;
    			if (dirty & /*d*/ 1) kv1_changes.v = /*d*/ ctx[0].insurances.homeInsurance.petsRemarks;
    			kv1.$set(kv1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kv0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(kv1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(250:4) {#if d.insurances.homeInsurance.householdInsurance}",
    		ctx
    	});

    	return block;
    }

    // (237:2) <PrintInsurance label={$l.needsAssessment.insurances.homeInsurance.name} insurance={d.insurances.homeInsurance}>
    function create_default_slot$j(ctx) {
    	let kc0;
    	let t0;
    	let t1;
    	let kc1;
    	let t2;
    	let t3;
    	let kc2;
    	let current;

    	kc0 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.homeOwnershipLabel,
    				v: /*d*/ ctx[0].insurances.homeInsurance.homeOwnership
    			},
    			$$inline: true
    		});

    	let if_block0 = /*d*/ ctx[0].insurances.homeInsurance.homeOwnership && create_if_block_5(ctx);

    	kc1 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.householdInsuranceLabel,
    				v: /*d*/ ctx[0].insurances.homeInsurance.householdInsurance
    			},
    			$$inline: true
    		});

    	let if_block1 = /*d*/ ctx[0].insurances.homeInsurance.householdInsurance && create_if_block_4(ctx);

    	kc2 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.liabilityInsuranceLabel,
    				v: /*d*/ ctx[0].insurances.homeInsurance.liabilityInsurance
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(kc0.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			create_component(kc1.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			create_component(kc2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(kc0, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(kc1, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(kc2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kc0_changes = {};
    			if (dirty & /*$l*/ 8) kc0_changes.k = /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.homeOwnershipLabel;
    			if (dirty & /*d*/ 1) kc0_changes.v = /*d*/ ctx[0].insurances.homeInsurance.homeOwnership;
    			kc0.$set(kc0_changes);

    			if (/*d*/ ctx[0].insurances.homeInsurance.homeOwnership) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*d*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const kc1_changes = {};
    			if (dirty & /*$l*/ 8) kc1_changes.k = /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.householdInsuranceLabel;
    			if (dirty & /*d*/ 1) kc1_changes.v = /*d*/ ctx[0].insurances.homeInsurance.householdInsurance;
    			kc1.$set(kc1_changes);

    			if (/*d*/ ctx[0].insurances.homeInsurance.householdInsurance) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*d*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const kc2_changes = {};
    			if (dirty & /*$l*/ 8) kc2_changes.k = /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.liabilityInsuranceLabel;
    			if (dirty & /*d*/ 1) kc2_changes.v = /*d*/ ctx[0].insurances.homeInsurance.liabilityInsurance;
    			kc2.$set(kc2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kc0.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(kc1.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(kc2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kc0.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(kc1.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(kc2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(kc0, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(kc1, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(kc2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$j.name,
    		type: "slot",
    		source: "(237:2) <PrintInsurance label={$l.needsAssessment.insurances.homeInsurance.name} insurance={d.insurances.homeInsurance}>",
    		ctx
    	});

    	return block;
    }

    // (290:2) {#if d.cars && d.cars.length > 0}
    function create_if_block_3(ctx) {
    	let h3;
    	let t0_value = /*$l*/ ctx[3].personal.car.label + "";
    	let t0;
    	let t1;
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*d*/ ctx[0].cars;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			add_location(h3, file$k, 290, 4, 12366);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			insert_dev(target, t1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$l*/ 8) && t0_value !== (t0_value = /*$l*/ ctx[3].personal.car.label + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$l, d*/ 9) {
    				each_value_1 = /*d*/ ctx[0].cars;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(290:2) {#if d.cars && d.cars.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (292:4) {#each d.cars as car}
    function create_each_block_1(ctx) {
    	let section;
    	let div;
    	let kv0;
    	let t0;
    	let kv1;
    	let t1;
    	let kv2;
    	let t2;
    	let kv3;
    	let t3;
    	let kv4;
    	let t4;
    	let kv5;
    	let t5;
    	let kv6;
    	let t6;
    	let kv7;
    	let t7;
    	let kv8;
    	let t8;
    	let kv9;
    	let t9;
    	let kv10;
    	let t10;
    	let kv11;
    	let t11;
    	let kv12;
    	let t12;
    	let kv13;
    	let t13;
    	let kv14;
    	let t14;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.name,
    				v: /*car*/ ctx[14].name
    			},
    			$$inline: true
    		});

    	kv1 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.contractor,
    				v: /*car*/ ctx[14].contractor
    			},
    			$$inline: true
    		});

    	kv2 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.contractNumber,
    				v: /*car*/ ctx[14].contractNumber
    			},
    			$$inline: true
    		});

    	kv3 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.bonusLevel,
    				v: /*car*/ ctx[14].bonusLevel
    			},
    			$$inline: true
    		});

    	kv4 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.mainDue,
    				v: /*car*/ ctx[14].mainDue
    			},
    			$$inline: true
    		});

    	kv5 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.make,
    				v: /*car*/ ctx[14].make
    			},
    			$$inline: true
    		});

    	kv6 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.power,
    				v: /*car*/ ctx[14].power
    			},
    			$$inline: true
    		});

    	kv7 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.driveType,
    				v: /*car*/ ctx[14].driveType
    			},
    			$$inline: true
    		});

    	kv8 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.licensePlate,
    				v: /*car*/ ctx[14].licensePlate
    			},
    			$$inline: true
    		});

    	kv9 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.constructionYear,
    				v: /*car*/ ctx[14].constructionYear
    			},
    			$$inline: true
    		});

    	kv10 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.insuranceType,
    				v: /*car*/ ctx[14].insuranceType
    			},
    			$$inline: true
    		});

    	kv11 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.originalPrice,
    				v: /*car*/ ctx[14].originalPrice
    			},
    			$$inline: true
    		});

    	kv12 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.deductible,
    				v: /*car*/ ctx[14].deductible
    			},
    			$$inline: true
    		});

    	kv13 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.bonus,
    				v: /*car*/ ctx[14].bonus
    			},
    			$$inline: true
    		});

    	kv14 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.car.paymentType,
    				v: /*car*/ ctx[14].paymentType
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			create_component(kv0.$$.fragment);
    			t0 = space();
    			create_component(kv1.$$.fragment);
    			t1 = space();
    			create_component(kv2.$$.fragment);
    			t2 = space();
    			create_component(kv3.$$.fragment);
    			t3 = space();
    			create_component(kv4.$$.fragment);
    			t4 = space();
    			create_component(kv5.$$.fragment);
    			t5 = space();
    			create_component(kv6.$$.fragment);
    			t6 = space();
    			create_component(kv7.$$.fragment);
    			t7 = space();
    			create_component(kv8.$$.fragment);
    			t8 = space();
    			create_component(kv9.$$.fragment);
    			t9 = space();
    			create_component(kv10.$$.fragment);
    			t10 = space();
    			create_component(kv11.$$.fragment);
    			t11 = space();
    			create_component(kv12.$$.fragment);
    			t12 = space();
    			create_component(kv13.$$.fragment);
    			t13 = space();
    			create_component(kv14.$$.fragment);
    			t14 = space();
    			attr_dev(div, "class", "car kv-container");
    			add_location(div, file$k, 293, 6, 12445);
    			add_location(section, file$k, 292, 4, 12429);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			mount_component(kv0, div, null);
    			append_dev(div, t0);
    			mount_component(kv1, div, null);
    			append_dev(div, t1);
    			mount_component(kv2, div, null);
    			append_dev(div, t2);
    			mount_component(kv3, div, null);
    			append_dev(div, t3);
    			mount_component(kv4, div, null);
    			append_dev(div, t4);
    			mount_component(kv5, div, null);
    			append_dev(div, t5);
    			mount_component(kv6, div, null);
    			append_dev(div, t6);
    			mount_component(kv7, div, null);
    			append_dev(div, t7);
    			mount_component(kv8, div, null);
    			append_dev(div, t8);
    			mount_component(kv9, div, null);
    			append_dev(div, t9);
    			mount_component(kv10, div, null);
    			append_dev(div, t10);
    			mount_component(kv11, div, null);
    			append_dev(div, t11);
    			mount_component(kv12, div, null);
    			append_dev(div, t12);
    			mount_component(kv13, div, null);
    			append_dev(div, t13);
    			mount_component(kv14, div, null);
    			append_dev(section, t14);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 8) kv0_changes.k = /*$l*/ ctx[3].personal.car.name;
    			if (dirty & /*d*/ 1) kv0_changes.v = /*car*/ ctx[14].name;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 8) kv1_changes.k = /*$l*/ ctx[3].personal.car.contractor;
    			if (dirty & /*d*/ 1) kv1_changes.v = /*car*/ ctx[14].contractor;
    			kv1.$set(kv1_changes);
    			const kv2_changes = {};
    			if (dirty & /*$l*/ 8) kv2_changes.k = /*$l*/ ctx[3].personal.car.contractNumber;
    			if (dirty & /*d*/ 1) kv2_changes.v = /*car*/ ctx[14].contractNumber;
    			kv2.$set(kv2_changes);
    			const kv3_changes = {};
    			if (dirty & /*$l*/ 8) kv3_changes.k = /*$l*/ ctx[3].personal.car.bonusLevel;
    			if (dirty & /*d*/ 1) kv3_changes.v = /*car*/ ctx[14].bonusLevel;
    			kv3.$set(kv3_changes);
    			const kv4_changes = {};
    			if (dirty & /*$l*/ 8) kv4_changes.k = /*$l*/ ctx[3].personal.car.mainDue;
    			if (dirty & /*d*/ 1) kv4_changes.v = /*car*/ ctx[14].mainDue;
    			kv4.$set(kv4_changes);
    			const kv5_changes = {};
    			if (dirty & /*$l*/ 8) kv5_changes.k = /*$l*/ ctx[3].personal.car.make;
    			if (dirty & /*d*/ 1) kv5_changes.v = /*car*/ ctx[14].make;
    			kv5.$set(kv5_changes);
    			const kv6_changes = {};
    			if (dirty & /*$l*/ 8) kv6_changes.k = /*$l*/ ctx[3].personal.car.power;
    			if (dirty & /*d*/ 1) kv6_changes.v = /*car*/ ctx[14].power;
    			kv6.$set(kv6_changes);
    			const kv7_changes = {};
    			if (dirty & /*$l*/ 8) kv7_changes.k = /*$l*/ ctx[3].personal.car.driveType;
    			if (dirty & /*d*/ 1) kv7_changes.v = /*car*/ ctx[14].driveType;
    			kv7.$set(kv7_changes);
    			const kv8_changes = {};
    			if (dirty & /*$l*/ 8) kv8_changes.k = /*$l*/ ctx[3].personal.car.licensePlate;
    			if (dirty & /*d*/ 1) kv8_changes.v = /*car*/ ctx[14].licensePlate;
    			kv8.$set(kv8_changes);
    			const kv9_changes = {};
    			if (dirty & /*$l*/ 8) kv9_changes.k = /*$l*/ ctx[3].personal.car.constructionYear;
    			if (dirty & /*d*/ 1) kv9_changes.v = /*car*/ ctx[14].constructionYear;
    			kv9.$set(kv9_changes);
    			const kv10_changes = {};
    			if (dirty & /*$l*/ 8) kv10_changes.k = /*$l*/ ctx[3].personal.car.insuranceType;
    			if (dirty & /*d*/ 1) kv10_changes.v = /*car*/ ctx[14].insuranceType;
    			kv10.$set(kv10_changes);
    			const kv11_changes = {};
    			if (dirty & /*$l*/ 8) kv11_changes.k = /*$l*/ ctx[3].personal.car.originalPrice;
    			if (dirty & /*d*/ 1) kv11_changes.v = /*car*/ ctx[14].originalPrice;
    			kv11.$set(kv11_changes);
    			const kv12_changes = {};
    			if (dirty & /*$l*/ 8) kv12_changes.k = /*$l*/ ctx[3].personal.car.deductible;
    			if (dirty & /*d*/ 1) kv12_changes.v = /*car*/ ctx[14].deductible;
    			kv12.$set(kv12_changes);
    			const kv13_changes = {};
    			if (dirty & /*$l*/ 8) kv13_changes.k = /*$l*/ ctx[3].personal.car.bonus;
    			if (dirty & /*d*/ 1) kv13_changes.v = /*car*/ ctx[14].bonus;
    			kv13.$set(kv13_changes);
    			const kv14_changes = {};
    			if (dirty & /*$l*/ 8) kv14_changes.k = /*$l*/ ctx[3].personal.car.paymentType;
    			if (dirty & /*d*/ 1) kv14_changes.v = /*car*/ ctx[14].paymentType;
    			kv14.$set(kv14_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			transition_in(kv2.$$.fragment, local);
    			transition_in(kv3.$$.fragment, local);
    			transition_in(kv4.$$.fragment, local);
    			transition_in(kv5.$$.fragment, local);
    			transition_in(kv6.$$.fragment, local);
    			transition_in(kv7.$$.fragment, local);
    			transition_in(kv8.$$.fragment, local);
    			transition_in(kv9.$$.fragment, local);
    			transition_in(kv10.$$.fragment, local);
    			transition_in(kv11.$$.fragment, local);
    			transition_in(kv12.$$.fragment, local);
    			transition_in(kv13.$$.fragment, local);
    			transition_in(kv14.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			transition_out(kv2.$$.fragment, local);
    			transition_out(kv3.$$.fragment, local);
    			transition_out(kv4.$$.fragment, local);
    			transition_out(kv5.$$.fragment, local);
    			transition_out(kv6.$$.fragment, local);
    			transition_out(kv7.$$.fragment, local);
    			transition_out(kv8.$$.fragment, local);
    			transition_out(kv9.$$.fragment, local);
    			transition_out(kv10.$$.fragment, local);
    			transition_out(kv11.$$.fragment, local);
    			transition_out(kv12.$$.fragment, local);
    			transition_out(kv13.$$.fragment, local);
    			transition_out(kv14.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(kv0);
    			destroy_component(kv1);
    			destroy_component(kv2);
    			destroy_component(kv3);
    			destroy_component(kv4);
    			destroy_component(kv5);
    			destroy_component(kv6);
    			destroy_component(kv7);
    			destroy_component(kv8);
    			destroy_component(kv9);
    			destroy_component(kv10);
    			destroy_component(kv11);
    			destroy_component(kv12);
    			destroy_component(kv13);
    			destroy_component(kv14);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(292:4) {#each d.cars as car}",
    		ctx
    	});

    	return block;
    }

    // (323:10) {:else}
    function create_else_block$2(ctx) {
    	let t_value = /*$l*/ ctx[3].needsAssessment.experiences.noExperience + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 8 && t_value !== (t_value = /*$l*/ ctx[3].needsAssessment.experiences.noExperience + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(323:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (321:8) {#if exp.hasExperience}
    function create_if_block_2$2(ctx) {
    	let t_value = /*$l*/ ctx[3].needsAssessment.experiences.yesExperience + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 8 && t_value !== (t_value = /*$l*/ ctx[3].needsAssessment.experiences.yesExperience + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(321:8) {#if exp.hasExperience}",
    		ctx
    	});

    	return block;
    }

    // (328:8) {#if exp.hasExperience}
    function create_if_block_1$6(ctx) {
    	let t_value = /*exp*/ ctx[11].since + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*d*/ 1 && t_value !== (t_value = /*exp*/ ctx[11].since + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(328:8) {#if exp.hasExperience}",
    		ctx
    	});

    	return block;
    }

    // (333:8) {#if exp.hasExperience}
    function create_if_block$c(ctx) {
    	let t_value = /*exp*/ ctx[11].level + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*d*/ 1 && t_value !== (t_value = /*exp*/ ctx[11].level + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(333:8) {#if exp.hasExperience}",
    		ctx
    	});

    	return block;
    }

    // (318:4) {#each d.experiences as exp}
    function create_each_block$9(ctx) {
    	let div0;
    	let t0_value = /*exp*/ ctx[11].name + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let t3;
    	let div3;
    	let t4;

    	function select_block_type(ctx, dirty) {
    		if (/*exp*/ ctx[11].hasExperience) return create_if_block_2$2;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*exp*/ ctx[11].hasExperience && create_if_block_1$6(ctx);
    	let if_block2 = /*exp*/ ctx[11].hasExperience && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			if_block0.c();
    			t2 = space();
    			div2 = element("div");
    			if (if_block1) if_block1.c();
    			t3 = space();
    			div3 = element("div");
    			if (if_block2) if_block2.c();
    			t4 = space();
    			attr_dev(div0, "class", "exp-name");
    			add_location(div0, file$k, 318, 6, 13633);
    			attr_dev(div1, "class", "exp-has");
    			add_location(div1, file$k, 319, 6, 13678);
    			attr_dev(div2, "class", "exp-since");
    			add_location(div2, file$k, 326, 6, 13896);
    			attr_dev(div3, "class", "exp-level");
    			add_location(div3, file$k, 331, 6, 14005);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			if_block0.m(div1, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			if (if_block1) if_block1.m(div2, null);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			if (if_block2) if_block2.m(div3, null);
    			append_dev(div3, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*d*/ 1 && t0_value !== (t0_value = /*exp*/ ctx[11].name + "")) set_data_dev(t0, t0_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div1, null);
    				}
    			}

    			if (/*exp*/ ctx[11].hasExperience) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$6(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*exp*/ ctx[11].hasExperience) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$c(ctx);
    					if_block2.c();
    					if_block2.m(div3, t4);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if_block0.d();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(318:4) {#each d.experiences as exp}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let div11;
    	let div10;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let section0;
    	let h1;
    	let t1_value = /*$l*/ ctx[3].needsAssessment.title + "";
    	let t1;
    	let t2;
    	let h20;
    	let t3_value = /*$l*/ ctx[3].needsAssessment.subtitles.personal + "";
    	let t3;
    	let t4;
    	let div0;
    	let kv0;
    	let t5;
    	let kv1;
    	let updating_v;
    	let t6;
    	let kv2;
    	let t7;
    	let kv3;
    	let t8;
    	let kv4;
    	let t9;
    	let kv5;
    	let t10;
    	let kv6;
    	let t11;
    	let kv7;
    	let t12;
    	let div1;
    	let kv8;
    	let t13;
    	let kv9;
    	let t14;
    	let kv10;
    	let t15;
    	let kv11;
    	let t16;
    	let kv12;
    	let t17;
    	let kv13;
    	let t18;
    	let kv14;
    	let t19;
    	let div2;
    	let kv15;
    	let t20;
    	let kv16;
    	let t21;
    	let kc0;
    	let t22;
    	let kc1;
    	let t23;
    	let kc2;
    	let t24;
    	let kv17;
    	let t25;
    	let kv18;
    	let t26;
    	let t27;
    	let t28;
    	let section1;
    	let h21;
    	let t29_value = /*$l*/ ctx[3].needsAssessment.subtitles.insurance + "";
    	let t29;
    	let t30;
    	let div3;
    	let printinsurance0;
    	let t31;
    	let section2;
    	let printinsurance1;
    	let t32;
    	let section3;
    	let printinsurance2;
    	let t33;
    	let section4;
    	let printinsurance3;
    	let t34;
    	let section5;
    	let h22;
    	let t35_value = /*$l*/ ctx[3].needsAssessment.subtitles.provision + "";
    	let t35;
    	let t36;
    	let div4;
    	let printinsurance4;
    	let t37;
    	let section6;
    	let printinsurance5;
    	let t38;
    	let section7;
    	let printinsurance6;
    	let t39;
    	let section8;
    	let h3;
    	let t40_value = /*$l*/ ctx[3].needsAssessment.provisions.wealthBuilding + "";
    	let t40;
    	let t41;
    	let div5;
    	let kc3;
    	let t42;
    	let kc4;
    	let t43;
    	let kc5;
    	let t44;
    	let kc6;
    	let t45;
    	let kc7;
    	let t46;
    	let kv19;
    	let t47;
    	let kc8;
    	let t48;
    	let kc9;
    	let t49;
    	let kc10;
    	let t50;
    	let h4;
    	let t51_value = /*$l*/ ctx[3].needsAssessment.wealthBuilding.riskTolerance + "";
    	let t51;
    	let t52;
    	let div6;
    	let span0;
    	let span1;
    	let t55;
    	let t56;
    	let section9;
    	let h23;
    	let t57_value = /*$l*/ ctx[3].needsAssessment.subtitles.experiences + "";
    	let t57;
    	let t58;
    	let div7;
    	let t59;
    	let section10;
    	let h24;
    	let t60_value = /*$l*/ ctx[3].needsAssessment.signing.powerOfAttornyTitle + "";
    	let t60;
    	let t61;
    	let p0;
    	let raw0_value = format(/*$l*/ ctx[3].needsAssessment.signing.powerOfAttornyText, /*identification*/ ctx[2]) + "";
    	let t62;
    	let div8;
    	let t63_value = /*d*/ ctx[0].powerOfAttorny.place + "";
    	let t63;
    	let t64;
    	let t65_value = /*d*/ ctx[0].powerOfAttorny.date + "";
    	let t65;
    	let t66;
    	let img1;
    	let img1_src_value;
    	let t67;
    	let section11;
    	let h25;
    	let t68_value = /*$l*/ ctx[3].needsAssessment.signing.noticeTitle + "";
    	let t68;
    	let t69;
    	let p1;
    	let raw1_value = /*$l*/ ctx[3].needsAssessment.signing.noticeText + "";
    	let t70;
    	let div9;
    	let t71_value = /*d*/ ctx[0].legalNotice.place + "";
    	let t71;
    	let t72;
    	let t73_value = /*d*/ ctx[0].legalNotice.date + "";
    	let t73;
    	let t74;
    	let img2;
    	let img2_src_value;
    	let current;

    	kv0 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.title,
    				v: /*d*/ ctx[0].client.title
    			},
    			$$inline: true
    		});

    	function kv1_v_binding(value) {
    		/*kv1_v_binding*/ ctx[9](value);
    	}

    	let kv1_props = { k: /*$l*/ ctx[3].personal.firstName };

    	if (/*d*/ ctx[0].client.firstName !== void 0) {
    		kv1_props.v = /*d*/ ctx[0].client.firstName;
    	}

    	kv1 = new PrintKeyValue({ props: kv1_props, $$inline: true });
    	binding_callbacks.push(() => bind(kv1, 'v', kv1_v_binding));

    	kv2 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.lastName,
    				v: /*d*/ ctx[0].client.lastName
    			},
    			$$inline: true
    		});

    	kv3 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.degree,
    				v: /*d*/ ctx[0].client.academicDegree
    			},
    			$$inline: true
    		});

    	kv4 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.gender.label,
    				v: /*getGender*/ ctx[4](/*d*/ ctx[0].client.gender)
    			},
    			$$inline: true
    		});

    	kv5 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.birthday,
    				v: /*d*/ ctx[0].client.birthday
    			},
    			$$inline: true
    		});

    	kv6 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.nationality,
    				v: mapCountryToName(/*d*/ ctx[0].client.nationality)
    			},
    			$$inline: true
    		});

    	kv7 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.birthPlace,
    				v: /*d*/ ctx[0].client.birthPlace
    			},
    			$$inline: true
    		});

    	kv8 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.address,
    				v: /*d*/ ctx[0].client.address
    			},
    			$$inline: true
    		});

    	kv9 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.zipCode,
    				v: /*d*/ ctx[0].client.zipCode
    			},
    			$$inline: true
    		});

    	kv10 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.city,
    				v: /*d*/ ctx[0].client.city
    			},
    			$$inline: true
    		});

    	kv11 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.country,
    				v: mapCountryToName(/*d*/ ctx[0].client.country)
    			},
    			$$inline: true
    		});

    	kv12 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.phone,
    				v: /*d*/ ctx[0].client.phone
    			},
    			$$inline: true
    		});

    	kv13 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.mobile,
    				v: /*d*/ ctx[0].client.mobile
    			},
    			$$inline: true
    		});

    	kv14 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.email,
    				v: /*d*/ ctx[0].client.email
    			},
    			$$inline: true
    		});

    	kv15 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.occupation,
    				v: /*d*/ ctx[0].client.occupation
    			},
    			$$inline: true
    		});

    	kv16 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.socialInsuranceInstitution,
    				v: mapCodeToSocialInsuranceInstitutionName(/*d*/ ctx[0].client.socialInsuranceInstitution)
    			},
    			$$inline: true
    		});

    	kc0 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].personal.militaryServiceDone,
    				v: /*d*/ ctx[0].client.militaryServiceDone
    			},
    			$$inline: true
    		});

    	kc1 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].personal.smoker,
    				v: /*d*/ ctx[0].client.smoker
    			},
    			$$inline: true
    		});

    	kc2 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].personal.pets,
    				v: /*d*/ ctx[0].client.pets
    			},
    			$$inline: true
    		});

    	kv17 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.petsRemarks,
    				check: /*d*/ ctx[0].client.pets,
    				v: /*d*/ ctx[0].client.petsRemarks
    			},
    			$$inline: true
    		});

    	kv18 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].personal.maritalStatus.label,
    				v: /*getMaritalStatus*/ ctx[5](/*d*/ ctx[0].client.maritalStatus)
    			},
    			$$inline: true
    		});

    	let if_block0 = /*d*/ ctx[0].client.maritalStatus == MaritalStatus.MARRIED && create_if_block_7(ctx);
    	let if_block1 = /*d*/ ctx[0].client.children && /*d*/ ctx[0].client.children.length > 0 && create_if_block_6(ctx);

    	printinsurance0 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.insurances.accidentInsurance.name,
    				insurance: /*d*/ ctx[0].insurances.accidentInsurance
    			},
    			$$inline: true
    		});

    	printinsurance1 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.insurances.disabilityInsurance.name,
    				insurance: /*d*/ ctx[0].insurances.disabilityInsurance
    			},
    			$$inline: true
    		});

    	printinsurance2 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.name,
    				insurance: /*d*/ ctx[0].insurances.homeInsurance,
    				$$slots: { default: [create_default_slot$j] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	printinsurance3 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.insurances.legalProtectionInsurance.name,
    				insurance: /*d*/ ctx[0].insurances.legalProtectionInsurance
    			},
    			$$inline: true
    		});

    	printinsurance4 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.provisions.death,
    				insurance: /*d*/ ctx[0].insurances.deathInsurance
    			},
    			$$inline: true
    		});

    	printinsurance5 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.provisions.retirement,
    				insurance: /*d*/ ctx[0].insurances.retirementInsurance
    			},
    			$$inline: true
    		});

    	printinsurance6 = new PrintInsurance({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.provisions.illness,
    				insurance: /*d*/ ctx[0].insurances.illnessInsurance
    			},
    			$$inline: true
    		});

    	kc3 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.retirementProvision,
    				v: /*d*/ ctx[0].wealthBuilding.retirementProvision.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.retirementProvision.remarks
    			},
    			$$inline: true
    		});

    	kc4 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.saveBig,
    				v: /*d*/ ctx[0].wealthBuilding.saveBig.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.saveBig.remarks
    			},
    			$$inline: true
    		});

    	kc5 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.saveEducation,
    				v: /*d*/ ctx[0].wealthBuilding.saveEducation.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.saveEducation.remarks
    			},
    			$$inline: true
    		});

    	kc6 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.otherInvestmentGoal,
    				v: /*d*/ ctx[0].wealthBuilding.otherInvestmentGoal.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.otherInvestmentGoal.remarks
    			},
    			$$inline: true
    		});

    	kc7 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.alreadyInvested,
    				v: /*d*/ ctx[0].wealthBuilding.alreadyInvested.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.alreadyInvested.remarks
    			},
    			$$inline: true
    		});

    	kv19 = new PrintKeyValue({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.plannedInvestmentPeriod,
    				v: /*getPlannedInvestmentPeriod*/ ctx[6](/*d*/ ctx[0].wealthBuilding.plannedInvestmentPeriod)
    			},
    			$$inline: true
    		});

    	kc8 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.paymentOnce,
    				v: /*d*/ ctx[0].wealthBuilding.paymentOnce.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.paymentOnce.remarks
    			},
    			$$inline: true
    		});

    	kc9 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.paymentMonthly,
    				v: /*d*/ ctx[0].wealthBuilding.paymentMonthly.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.paymentMonthly.remarks
    			},
    			$$inline: true
    		});

    	kc10 = new PrintKeyCheckbox({
    			props: {
    				k: /*$l*/ ctx[3].needsAssessment.wealthBuilding.paymentYearly,
    				v: /*d*/ ctx[0].wealthBuilding.paymentYearly.desired,
    				remarks: /*d*/ ctx[0].wealthBuilding.paymentYearly.remarks
    			},
    			$$inline: true
    		});

    	let if_block2 = /*d*/ ctx[0].cars && /*d*/ ctx[0].cars.length > 0 && create_if_block_3(ctx);
    	let each_value = /*d*/ ctx[0].experiences;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div11 = element("div");
    			div10 = element("div");
    			img0 = element("img");
    			t0 = space();
    			section0 = element("section");
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			h20 = element("h2");
    			t3 = text(t3_value);
    			t4 = space();
    			div0 = element("div");
    			create_component(kv0.$$.fragment);
    			t5 = space();
    			create_component(kv1.$$.fragment);
    			t6 = space();
    			create_component(kv2.$$.fragment);
    			t7 = space();
    			create_component(kv3.$$.fragment);
    			t8 = space();
    			create_component(kv4.$$.fragment);
    			t9 = space();
    			create_component(kv5.$$.fragment);
    			t10 = space();
    			create_component(kv6.$$.fragment);
    			t11 = space();
    			create_component(kv7.$$.fragment);
    			t12 = space();
    			div1 = element("div");
    			create_component(kv8.$$.fragment);
    			t13 = space();
    			create_component(kv9.$$.fragment);
    			t14 = space();
    			create_component(kv10.$$.fragment);
    			t15 = space();
    			create_component(kv11.$$.fragment);
    			t16 = space();
    			create_component(kv12.$$.fragment);
    			t17 = space();
    			create_component(kv13.$$.fragment);
    			t18 = space();
    			create_component(kv14.$$.fragment);
    			t19 = space();
    			div2 = element("div");
    			create_component(kv15.$$.fragment);
    			t20 = space();
    			create_component(kv16.$$.fragment);
    			t21 = space();
    			create_component(kc0.$$.fragment);
    			t22 = space();
    			create_component(kc1.$$.fragment);
    			t23 = space();
    			create_component(kc2.$$.fragment);
    			t24 = space();
    			create_component(kv17.$$.fragment);
    			t25 = space();
    			create_component(kv18.$$.fragment);
    			t26 = space();
    			if (if_block0) if_block0.c();
    			t27 = space();
    			if (if_block1) if_block1.c();
    			t28 = space();
    			section1 = element("section");
    			h21 = element("h2");
    			t29 = text(t29_value);
    			t30 = space();
    			div3 = element("div");
    			create_component(printinsurance0.$$.fragment);
    			t31 = space();
    			section2 = element("section");
    			create_component(printinsurance1.$$.fragment);
    			t32 = space();
    			section3 = element("section");
    			create_component(printinsurance2.$$.fragment);
    			t33 = space();
    			section4 = element("section");
    			create_component(printinsurance3.$$.fragment);
    			t34 = space();
    			section5 = element("section");
    			h22 = element("h2");
    			t35 = text(t35_value);
    			t36 = space();
    			div4 = element("div");
    			create_component(printinsurance4.$$.fragment);
    			t37 = space();
    			section6 = element("section");
    			create_component(printinsurance5.$$.fragment);
    			t38 = space();
    			section7 = element("section");
    			create_component(printinsurance6.$$.fragment);
    			t39 = space();
    			section8 = element("section");
    			h3 = element("h3");
    			t40 = text(t40_value);
    			t41 = space();
    			div5 = element("div");
    			create_component(kc3.$$.fragment);
    			t42 = space();
    			create_component(kc4.$$.fragment);
    			t43 = space();
    			create_component(kc5.$$.fragment);
    			t44 = space();
    			create_component(kc6.$$.fragment);
    			t45 = space();
    			create_component(kc7.$$.fragment);
    			t46 = space();
    			create_component(kv19.$$.fragment);
    			t47 = space();
    			create_component(kc8.$$.fragment);
    			t48 = space();
    			create_component(kc9.$$.fragment);
    			t49 = space();
    			create_component(kc10.$$.fragment);
    			t50 = space();
    			h4 = element("h4");
    			t51 = text(t51_value);
    			t52 = space();
    			div6 = element("div");
    			span0 = element("span");
    			span0.textContent = `${/*getRiskTolerance*/ ctx[7]().name}`;
    			span1 = element("span");
    			span1.textContent = `${/*getRiskTolerance*/ ctx[7]().desc}`;
    			t55 = space();
    			if (if_block2) if_block2.c();
    			t56 = space();
    			section9 = element("section");
    			h23 = element("h2");
    			t57 = text(t57_value);
    			t58 = space();
    			div7 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t59 = space();
    			section10 = element("section");
    			h24 = element("h2");
    			t60 = text(t60_value);
    			t61 = space();
    			p0 = element("p");
    			t62 = space();
    			div8 = element("div");
    			t63 = text(t63_value);
    			t64 = text(", ");
    			t65 = text(t65_value);
    			t66 = space();
    			img1 = element("img");
    			t67 = space();
    			section11 = element("section");
    			h25 = element("h2");
    			t68 = text(t68_value);
    			t69 = space();
    			p1 = element("p");
    			t70 = space();
    			div9 = element("div");
    			t71 = text(t71_value);
    			t72 = text(", ");
    			t73 = text(t73_value);
    			t74 = space();
    			img2 = element("img");
    			attr_dev(img0, "class", "logo");
    			if (!src_url_equal(img0.src, img0_src_value = "../logo.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "LiberoLife Logo");
    			add_location(img0, file$k, 153, 2, 4224);
    			add_location(h1, file$k, 155, 2, 4299);
    			add_location(h20, file$k, 156, 2, 4337);
    			attr_dev(div0, "class", "kv-container");
    			add_location(div0, file$k, 157, 2, 4388);
    			attr_dev(div1, "class", "kv-container");
    			add_location(div1, file$k, 167, 2, 4930);
    			attr_dev(div2, "class", "kv-container");
    			add_location(div2, file$k, 176, 2, 5355);
    			add_location(section0, file$k, 154, 2, 4287);
    			add_location(h21, file$k, 227, 4, 7880);
    			attr_dev(div3, "class", "kv-container");
    			add_location(div3, file$k, 228, 4, 7934);
    			add_location(section1, file$k, 226, 2, 7866);
    			attr_dev(section2, "class", "kv-container");
    			add_location(section2, file$k, 232, 2, 8114);
    			attr_dev(section3, "class", "kv-container");
    			add_location(section3, file$k, 235, 2, 8289);
    			attr_dev(section4, "class", "kv-container");
    			add_location(section4, file$k, 256, 2, 9924);
    			add_location(h22, file$k, 260, 2, 10121);
    			attr_dev(div4, "class", "kv-container");
    			add_location(div4, file$k, 261, 2, 10173);
    			add_location(section5, file$k, 259, 2, 10109);
    			attr_dev(section6, "class", "kv-container");
    			add_location(section6, file$k, 265, 2, 10329);
    			attr_dev(section7, "class", "kv-container");
    			add_location(section7, file$k, 268, 0, 10490);
    			add_location(h3, file$k, 273, 2, 10656);
    			attr_dev(div5, "class", "kv-container");
    			add_location(div5, file$k, 274, 2, 10714);
    			add_location(h4, file$k, 285, 4, 12161);
    			add_location(span0, file$k, 286, 9, 12229);
    			add_location(span1, file$k, 286, 47, 12267);
    			add_location(div6, file$k, 286, 4, 12224);
    			add_location(section8, file$k, 272, 2, 10644);
    			add_location(h23, file$k, 315, 4, 13502);
    			attr_dev(div7, "class", "experiences-container");
    			add_location(div7, file$k, 316, 4, 13558);
    			add_location(section9, file$k, 314, 2, 13488);
    			add_location(h24, file$k, 341, 4, 14161);
    			add_location(p0, file$k, 342, 4, 14223);
    			attr_dev(div8, "class", "placetime");
    			add_location(div8, file$k, 343, 4, 14312);
    			attr_dev(img1, "class", "signature");
    			if (!src_url_equal(img1.src, img1_src_value = /*d*/ ctx[0].powerOfAttorny.signature)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "signature");
    			add_location(img1, file$k, 344, 4, 14395);
    			add_location(section10, file$k, 340, 2, 14147);
    			add_location(h25, file$k, 348, 4, 14499);
    			add_location(p1, file$k, 349, 4, 14553);
    			attr_dev(div9, "class", "placetime");
    			add_location(div9, file$k, 350, 4, 14610);
    			attr_dev(img2, "class", "signature");
    			if (!src_url_equal(img2.src, img2_src_value = /*d*/ ctx[0].legalNotice.signature)) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "signature");
    			add_location(img2, file$k, 351, 4, 14687);
    			add_location(section11, file$k, 347, 2, 14485);
    			add_location(div10, file$k, 152, 0, 4199);
    			set_style(div11, "display", "none");
    			add_location(div11, file$k, 149, 0, 4168);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div10);
    			append_dev(div10, img0);
    			append_dev(div10, t0);
    			append_dev(div10, section0);
    			append_dev(section0, h1);
    			append_dev(h1, t1);
    			append_dev(section0, t2);
    			append_dev(section0, h20);
    			append_dev(h20, t3);
    			append_dev(section0, t4);
    			append_dev(section0, div0);
    			mount_component(kv0, div0, null);
    			append_dev(div0, t5);
    			mount_component(kv1, div0, null);
    			append_dev(div0, t6);
    			mount_component(kv2, div0, null);
    			append_dev(div0, t7);
    			mount_component(kv3, div0, null);
    			append_dev(div0, t8);
    			mount_component(kv4, div0, null);
    			append_dev(div0, t9);
    			mount_component(kv5, div0, null);
    			append_dev(div0, t10);
    			mount_component(kv6, div0, null);
    			append_dev(div0, t11);
    			mount_component(kv7, div0, null);
    			append_dev(section0, t12);
    			append_dev(section0, div1);
    			mount_component(kv8, div1, null);
    			append_dev(div1, t13);
    			mount_component(kv9, div1, null);
    			append_dev(div1, t14);
    			mount_component(kv10, div1, null);
    			append_dev(div1, t15);
    			mount_component(kv11, div1, null);
    			append_dev(div1, t16);
    			mount_component(kv12, div1, null);
    			append_dev(div1, t17);
    			mount_component(kv13, div1, null);
    			append_dev(div1, t18);
    			mount_component(kv14, div1, null);
    			append_dev(section0, t19);
    			append_dev(section0, div2);
    			mount_component(kv15, div2, null);
    			append_dev(div2, t20);
    			mount_component(kv16, div2, null);
    			append_dev(div2, t21);
    			mount_component(kc0, div2, null);
    			append_dev(div2, t22);
    			mount_component(kc1, div2, null);
    			append_dev(div2, t23);
    			mount_component(kc2, div2, null);
    			append_dev(div2, t24);
    			mount_component(kv17, div2, null);
    			append_dev(div2, t25);
    			mount_component(kv18, div2, null);
    			append_dev(div10, t26);
    			if (if_block0) if_block0.m(div10, null);
    			append_dev(div10, t27);
    			if (if_block1) if_block1.m(div10, null);
    			append_dev(div10, t28);
    			append_dev(div10, section1);
    			append_dev(section1, h21);
    			append_dev(h21, t29);
    			append_dev(section1, t30);
    			append_dev(section1, div3);
    			mount_component(printinsurance0, div3, null);
    			append_dev(div10, t31);
    			append_dev(div10, section2);
    			mount_component(printinsurance1, section2, null);
    			append_dev(div10, t32);
    			append_dev(div10, section3);
    			mount_component(printinsurance2, section3, null);
    			append_dev(div10, t33);
    			append_dev(div10, section4);
    			mount_component(printinsurance3, section4, null);
    			append_dev(div10, t34);
    			append_dev(div10, section5);
    			append_dev(section5, h22);
    			append_dev(h22, t35);
    			append_dev(section5, t36);
    			append_dev(section5, div4);
    			mount_component(printinsurance4, div4, null);
    			append_dev(div10, t37);
    			append_dev(div10, section6);
    			mount_component(printinsurance5, section6, null);
    			append_dev(div10, t38);
    			append_dev(div10, section7);
    			mount_component(printinsurance6, section7, null);
    			append_dev(div10, t39);
    			append_dev(div10, section8);
    			append_dev(section8, h3);
    			append_dev(h3, t40);
    			append_dev(section8, t41);
    			append_dev(section8, div5);
    			mount_component(kc3, div5, null);
    			append_dev(div5, t42);
    			mount_component(kc4, div5, null);
    			append_dev(div5, t43);
    			mount_component(kc5, div5, null);
    			append_dev(div5, t44);
    			mount_component(kc6, div5, null);
    			append_dev(div5, t45);
    			mount_component(kc7, div5, null);
    			append_dev(div5, t46);
    			mount_component(kv19, div5, null);
    			append_dev(div5, t47);
    			mount_component(kc8, div5, null);
    			append_dev(div5, t48);
    			mount_component(kc9, div5, null);
    			append_dev(div5, t49);
    			mount_component(kc10, div5, null);
    			append_dev(section8, t50);
    			append_dev(section8, h4);
    			append_dev(h4, t51);
    			append_dev(section8, t52);
    			append_dev(section8, div6);
    			append_dev(div6, span0);
    			append_dev(div6, span1);
    			append_dev(div10, t55);
    			if (if_block2) if_block2.m(div10, null);
    			append_dev(div10, t56);
    			append_dev(div10, section9);
    			append_dev(section9, h23);
    			append_dev(h23, t57);
    			append_dev(section9, t58);
    			append_dev(section9, div7);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div7, null);
    			}

    			append_dev(div10, t59);
    			append_dev(div10, section10);
    			append_dev(section10, h24);
    			append_dev(h24, t60);
    			append_dev(section10, t61);
    			append_dev(section10, p0);
    			p0.innerHTML = raw0_value;
    			append_dev(section10, t62);
    			append_dev(section10, div8);
    			append_dev(div8, t63);
    			append_dev(div8, t64);
    			append_dev(div8, t65);
    			append_dev(section10, t66);
    			append_dev(section10, img1);
    			append_dev(div10, t67);
    			append_dev(div10, section11);
    			append_dev(section11, h25);
    			append_dev(h25, t68);
    			append_dev(section11, t69);
    			append_dev(section11, p1);
    			p1.innerHTML = raw1_value;
    			append_dev(section11, t70);
    			append_dev(section11, div9);
    			append_dev(div9, t71);
    			append_dev(div9, t72);
    			append_dev(div9, t73);
    			append_dev(section11, t74);
    			append_dev(section11, img2);
    			/*div10_binding*/ ctx[10](div10);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$l*/ 8) && t1_value !== (t1_value = /*$l*/ ctx[3].needsAssessment.title + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*$l*/ 8) && t3_value !== (t3_value = /*$l*/ ctx[3].needsAssessment.subtitles.personal + "")) set_data_dev(t3, t3_value);
    			const kv0_changes = {};
    			if (dirty & /*$l*/ 8) kv0_changes.k = /*$l*/ ctx[3].personal.title;
    			if (dirty & /*d*/ 1) kv0_changes.v = /*d*/ ctx[0].client.title;
    			kv0.$set(kv0_changes);
    			const kv1_changes = {};
    			if (dirty & /*$l*/ 8) kv1_changes.k = /*$l*/ ctx[3].personal.firstName;

    			if (!updating_v && dirty & /*d*/ 1) {
    				updating_v = true;
    				kv1_changes.v = /*d*/ ctx[0].client.firstName;
    				add_flush_callback(() => updating_v = false);
    			}

    			kv1.$set(kv1_changes);
    			const kv2_changes = {};
    			if (dirty & /*$l*/ 8) kv2_changes.k = /*$l*/ ctx[3].personal.lastName;
    			if (dirty & /*d*/ 1) kv2_changes.v = /*d*/ ctx[0].client.lastName;
    			kv2.$set(kv2_changes);
    			const kv3_changes = {};
    			if (dirty & /*$l*/ 8) kv3_changes.k = /*$l*/ ctx[3].personal.degree;
    			if (dirty & /*d*/ 1) kv3_changes.v = /*d*/ ctx[0].client.academicDegree;
    			kv3.$set(kv3_changes);
    			const kv4_changes = {};
    			if (dirty & /*$l*/ 8) kv4_changes.k = /*$l*/ ctx[3].personal.gender.label;
    			if (dirty & /*d*/ 1) kv4_changes.v = /*getGender*/ ctx[4](/*d*/ ctx[0].client.gender);
    			kv4.$set(kv4_changes);
    			const kv5_changes = {};
    			if (dirty & /*$l*/ 8) kv5_changes.k = /*$l*/ ctx[3].personal.birthday;
    			if (dirty & /*d*/ 1) kv5_changes.v = /*d*/ ctx[0].client.birthday;
    			kv5.$set(kv5_changes);
    			const kv6_changes = {};
    			if (dirty & /*$l*/ 8) kv6_changes.k = /*$l*/ ctx[3].personal.nationality;
    			if (dirty & /*d*/ 1) kv6_changes.v = mapCountryToName(/*d*/ ctx[0].client.nationality);
    			kv6.$set(kv6_changes);
    			const kv7_changes = {};
    			if (dirty & /*$l*/ 8) kv7_changes.k = /*$l*/ ctx[3].personal.birthPlace;
    			if (dirty & /*d*/ 1) kv7_changes.v = /*d*/ ctx[0].client.birthPlace;
    			kv7.$set(kv7_changes);
    			const kv8_changes = {};
    			if (dirty & /*$l*/ 8) kv8_changes.k = /*$l*/ ctx[3].personal.address;
    			if (dirty & /*d*/ 1) kv8_changes.v = /*d*/ ctx[0].client.address;
    			kv8.$set(kv8_changes);
    			const kv9_changes = {};
    			if (dirty & /*$l*/ 8) kv9_changes.k = /*$l*/ ctx[3].personal.zipCode;
    			if (dirty & /*d*/ 1) kv9_changes.v = /*d*/ ctx[0].client.zipCode;
    			kv9.$set(kv9_changes);
    			const kv10_changes = {};
    			if (dirty & /*$l*/ 8) kv10_changes.k = /*$l*/ ctx[3].personal.city;
    			if (dirty & /*d*/ 1) kv10_changes.v = /*d*/ ctx[0].client.city;
    			kv10.$set(kv10_changes);
    			const kv11_changes = {};
    			if (dirty & /*$l*/ 8) kv11_changes.k = /*$l*/ ctx[3].personal.country;
    			if (dirty & /*d*/ 1) kv11_changes.v = mapCountryToName(/*d*/ ctx[0].client.country);
    			kv11.$set(kv11_changes);
    			const kv12_changes = {};
    			if (dirty & /*$l*/ 8) kv12_changes.k = /*$l*/ ctx[3].personal.phone;
    			if (dirty & /*d*/ 1) kv12_changes.v = /*d*/ ctx[0].client.phone;
    			kv12.$set(kv12_changes);
    			const kv13_changes = {};
    			if (dirty & /*$l*/ 8) kv13_changes.k = /*$l*/ ctx[3].personal.mobile;
    			if (dirty & /*d*/ 1) kv13_changes.v = /*d*/ ctx[0].client.mobile;
    			kv13.$set(kv13_changes);
    			const kv14_changes = {};
    			if (dirty & /*$l*/ 8) kv14_changes.k = /*$l*/ ctx[3].personal.email;
    			if (dirty & /*d*/ 1) kv14_changes.v = /*d*/ ctx[0].client.email;
    			kv14.$set(kv14_changes);
    			const kv15_changes = {};
    			if (dirty & /*$l*/ 8) kv15_changes.k = /*$l*/ ctx[3].personal.occupation;
    			if (dirty & /*d*/ 1) kv15_changes.v = /*d*/ ctx[0].client.occupation;
    			kv15.$set(kv15_changes);
    			const kv16_changes = {};
    			if (dirty & /*$l*/ 8) kv16_changes.k = /*$l*/ ctx[3].personal.socialInsuranceInstitution;
    			if (dirty & /*d*/ 1) kv16_changes.v = mapCodeToSocialInsuranceInstitutionName(/*d*/ ctx[0].client.socialInsuranceInstitution);
    			kv16.$set(kv16_changes);
    			const kc0_changes = {};
    			if (dirty & /*$l*/ 8) kc0_changes.k = /*$l*/ ctx[3].personal.militaryServiceDone;
    			if (dirty & /*d*/ 1) kc0_changes.v = /*d*/ ctx[0].client.militaryServiceDone;
    			kc0.$set(kc0_changes);
    			const kc1_changes = {};
    			if (dirty & /*$l*/ 8) kc1_changes.k = /*$l*/ ctx[3].personal.smoker;
    			if (dirty & /*d*/ 1) kc1_changes.v = /*d*/ ctx[0].client.smoker;
    			kc1.$set(kc1_changes);
    			const kc2_changes = {};
    			if (dirty & /*$l*/ 8) kc2_changes.k = /*$l*/ ctx[3].personal.pets;
    			if (dirty & /*d*/ 1) kc2_changes.v = /*d*/ ctx[0].client.pets;
    			kc2.$set(kc2_changes);
    			const kv17_changes = {};
    			if (dirty & /*$l*/ 8) kv17_changes.k = /*$l*/ ctx[3].personal.petsRemarks;
    			if (dirty & /*d*/ 1) kv17_changes.check = /*d*/ ctx[0].client.pets;
    			if (dirty & /*d*/ 1) kv17_changes.v = /*d*/ ctx[0].client.petsRemarks;
    			kv17.$set(kv17_changes);
    			const kv18_changes = {};
    			if (dirty & /*$l*/ 8) kv18_changes.k = /*$l*/ ctx[3].personal.maritalStatus.label;
    			if (dirty & /*d*/ 1) kv18_changes.v = /*getMaritalStatus*/ ctx[5](/*d*/ ctx[0].client.maritalStatus);
    			kv18.$set(kv18_changes);

    			if (/*d*/ ctx[0].client.maritalStatus == MaritalStatus.MARRIED) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*d*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div10, t27);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*d*/ ctx[0].client.children && /*d*/ ctx[0].client.children.length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*d*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div10, t28);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*$l*/ 8) && t29_value !== (t29_value = /*$l*/ ctx[3].needsAssessment.subtitles.insurance + "")) set_data_dev(t29, t29_value);
    			const printinsurance0_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance0_changes.label = /*$l*/ ctx[3].needsAssessment.insurances.accidentInsurance.name;
    			if (dirty & /*d*/ 1) printinsurance0_changes.insurance = /*d*/ ctx[0].insurances.accidentInsurance;
    			printinsurance0.$set(printinsurance0_changes);
    			const printinsurance1_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance1_changes.label = /*$l*/ ctx[3].needsAssessment.insurances.disabilityInsurance.name;
    			if (dirty & /*d*/ 1) printinsurance1_changes.insurance = /*d*/ ctx[0].insurances.disabilityInsurance;
    			printinsurance1.$set(printinsurance1_changes);
    			const printinsurance2_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance2_changes.label = /*$l*/ ctx[3].needsAssessment.insurances.homeInsurance.name;
    			if (dirty & /*d*/ 1) printinsurance2_changes.insurance = /*d*/ ctx[0].insurances.homeInsurance;

    			if (dirty & /*$$scope, $l, d*/ 1048585) {
    				printinsurance2_changes.$$scope = { dirty, ctx };
    			}

    			printinsurance2.$set(printinsurance2_changes);
    			const printinsurance3_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance3_changes.label = /*$l*/ ctx[3].needsAssessment.insurances.legalProtectionInsurance.name;
    			if (dirty & /*d*/ 1) printinsurance3_changes.insurance = /*d*/ ctx[0].insurances.legalProtectionInsurance;
    			printinsurance3.$set(printinsurance3_changes);
    			if ((!current || dirty & /*$l*/ 8) && t35_value !== (t35_value = /*$l*/ ctx[3].needsAssessment.subtitles.provision + "")) set_data_dev(t35, t35_value);
    			const printinsurance4_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance4_changes.label = /*$l*/ ctx[3].needsAssessment.provisions.death;
    			if (dirty & /*d*/ 1) printinsurance4_changes.insurance = /*d*/ ctx[0].insurances.deathInsurance;
    			printinsurance4.$set(printinsurance4_changes);
    			const printinsurance5_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance5_changes.label = /*$l*/ ctx[3].needsAssessment.provisions.retirement;
    			if (dirty & /*d*/ 1) printinsurance5_changes.insurance = /*d*/ ctx[0].insurances.retirementInsurance;
    			printinsurance5.$set(printinsurance5_changes);
    			const printinsurance6_changes = {};
    			if (dirty & /*$l*/ 8) printinsurance6_changes.label = /*$l*/ ctx[3].needsAssessment.provisions.illness;
    			if (dirty & /*d*/ 1) printinsurance6_changes.insurance = /*d*/ ctx[0].insurances.illnessInsurance;
    			printinsurance6.$set(printinsurance6_changes);
    			if ((!current || dirty & /*$l*/ 8) && t40_value !== (t40_value = /*$l*/ ctx[3].needsAssessment.provisions.wealthBuilding + "")) set_data_dev(t40, t40_value);
    			const kc3_changes = {};
    			if (dirty & /*$l*/ 8) kc3_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.retirementProvision;
    			if (dirty & /*d*/ 1) kc3_changes.v = /*d*/ ctx[0].wealthBuilding.retirementProvision.desired;
    			if (dirty & /*d*/ 1) kc3_changes.remarks = /*d*/ ctx[0].wealthBuilding.retirementProvision.remarks;
    			kc3.$set(kc3_changes);
    			const kc4_changes = {};
    			if (dirty & /*$l*/ 8) kc4_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.saveBig;
    			if (dirty & /*d*/ 1) kc4_changes.v = /*d*/ ctx[0].wealthBuilding.saveBig.desired;
    			if (dirty & /*d*/ 1) kc4_changes.remarks = /*d*/ ctx[0].wealthBuilding.saveBig.remarks;
    			kc4.$set(kc4_changes);
    			const kc5_changes = {};
    			if (dirty & /*$l*/ 8) kc5_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.saveEducation;
    			if (dirty & /*d*/ 1) kc5_changes.v = /*d*/ ctx[0].wealthBuilding.saveEducation.desired;
    			if (dirty & /*d*/ 1) kc5_changes.remarks = /*d*/ ctx[0].wealthBuilding.saveEducation.remarks;
    			kc5.$set(kc5_changes);
    			const kc6_changes = {};
    			if (dirty & /*$l*/ 8) kc6_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.otherInvestmentGoal;
    			if (dirty & /*d*/ 1) kc6_changes.v = /*d*/ ctx[0].wealthBuilding.otherInvestmentGoal.desired;
    			if (dirty & /*d*/ 1) kc6_changes.remarks = /*d*/ ctx[0].wealthBuilding.otherInvestmentGoal.remarks;
    			kc6.$set(kc6_changes);
    			const kc7_changes = {};
    			if (dirty & /*$l*/ 8) kc7_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.alreadyInvested;
    			if (dirty & /*d*/ 1) kc7_changes.v = /*d*/ ctx[0].wealthBuilding.alreadyInvested.desired;
    			if (dirty & /*d*/ 1) kc7_changes.remarks = /*d*/ ctx[0].wealthBuilding.alreadyInvested.remarks;
    			kc7.$set(kc7_changes);
    			const kv19_changes = {};
    			if (dirty & /*$l*/ 8) kv19_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.plannedInvestmentPeriod;
    			if (dirty & /*d*/ 1) kv19_changes.v = /*getPlannedInvestmentPeriod*/ ctx[6](/*d*/ ctx[0].wealthBuilding.plannedInvestmentPeriod);
    			kv19.$set(kv19_changes);
    			const kc8_changes = {};
    			if (dirty & /*$l*/ 8) kc8_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.paymentOnce;
    			if (dirty & /*d*/ 1) kc8_changes.v = /*d*/ ctx[0].wealthBuilding.paymentOnce.desired;
    			if (dirty & /*d*/ 1) kc8_changes.remarks = /*d*/ ctx[0].wealthBuilding.paymentOnce.remarks;
    			kc8.$set(kc8_changes);
    			const kc9_changes = {};
    			if (dirty & /*$l*/ 8) kc9_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.paymentMonthly;
    			if (dirty & /*d*/ 1) kc9_changes.v = /*d*/ ctx[0].wealthBuilding.paymentMonthly.desired;
    			if (dirty & /*d*/ 1) kc9_changes.remarks = /*d*/ ctx[0].wealthBuilding.paymentMonthly.remarks;
    			kc9.$set(kc9_changes);
    			const kc10_changes = {};
    			if (dirty & /*$l*/ 8) kc10_changes.k = /*$l*/ ctx[3].needsAssessment.wealthBuilding.paymentYearly;
    			if (dirty & /*d*/ 1) kc10_changes.v = /*d*/ ctx[0].wealthBuilding.paymentYearly.desired;
    			if (dirty & /*d*/ 1) kc10_changes.remarks = /*d*/ ctx[0].wealthBuilding.paymentYearly.remarks;
    			kc10.$set(kc10_changes);
    			if ((!current || dirty & /*$l*/ 8) && t51_value !== (t51_value = /*$l*/ ctx[3].needsAssessment.wealthBuilding.riskTolerance + "")) set_data_dev(t51, t51_value);

    			if (/*d*/ ctx[0].cars && /*d*/ ctx[0].cars.length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*d*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_3(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div10, t56);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*$l*/ 8) && t57_value !== (t57_value = /*$l*/ ctx[3].needsAssessment.subtitles.experiences + "")) set_data_dev(t57, t57_value);

    			if (dirty & /*d, $l*/ 9) {
    				each_value = /*d*/ ctx[0].experiences;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div7, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if ((!current || dirty & /*$l*/ 8) && t60_value !== (t60_value = /*$l*/ ctx[3].needsAssessment.signing.powerOfAttornyTitle + "")) set_data_dev(t60, t60_value);
    			if ((!current || dirty & /*$l, identification*/ 12) && raw0_value !== (raw0_value = format(/*$l*/ ctx[3].needsAssessment.signing.powerOfAttornyText, /*identification*/ ctx[2]) + "")) p0.innerHTML = raw0_value;			if ((!current || dirty & /*d*/ 1) && t63_value !== (t63_value = /*d*/ ctx[0].powerOfAttorny.place + "")) set_data_dev(t63, t63_value);
    			if ((!current || dirty & /*d*/ 1) && t65_value !== (t65_value = /*d*/ ctx[0].powerOfAttorny.date + "")) set_data_dev(t65, t65_value);

    			if (!current || dirty & /*d*/ 1 && !src_url_equal(img1.src, img1_src_value = /*d*/ ctx[0].powerOfAttorny.signature)) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if ((!current || dirty & /*$l*/ 8) && t68_value !== (t68_value = /*$l*/ ctx[3].needsAssessment.signing.noticeTitle + "")) set_data_dev(t68, t68_value);
    			if ((!current || dirty & /*$l*/ 8) && raw1_value !== (raw1_value = /*$l*/ ctx[3].needsAssessment.signing.noticeText + "")) p1.innerHTML = raw1_value;			if ((!current || dirty & /*d*/ 1) && t71_value !== (t71_value = /*d*/ ctx[0].legalNotice.place + "")) set_data_dev(t71, t71_value);
    			if ((!current || dirty & /*d*/ 1) && t73_value !== (t73_value = /*d*/ ctx[0].legalNotice.date + "")) set_data_dev(t73, t73_value);

    			if (!current || dirty & /*d*/ 1 && !src_url_equal(img2.src, img2_src_value = /*d*/ ctx[0].legalNotice.signature)) {
    				attr_dev(img2, "src", img2_src_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(kv0.$$.fragment, local);
    			transition_in(kv1.$$.fragment, local);
    			transition_in(kv2.$$.fragment, local);
    			transition_in(kv3.$$.fragment, local);
    			transition_in(kv4.$$.fragment, local);
    			transition_in(kv5.$$.fragment, local);
    			transition_in(kv6.$$.fragment, local);
    			transition_in(kv7.$$.fragment, local);
    			transition_in(kv8.$$.fragment, local);
    			transition_in(kv9.$$.fragment, local);
    			transition_in(kv10.$$.fragment, local);
    			transition_in(kv11.$$.fragment, local);
    			transition_in(kv12.$$.fragment, local);
    			transition_in(kv13.$$.fragment, local);
    			transition_in(kv14.$$.fragment, local);
    			transition_in(kv15.$$.fragment, local);
    			transition_in(kv16.$$.fragment, local);
    			transition_in(kc0.$$.fragment, local);
    			transition_in(kc1.$$.fragment, local);
    			transition_in(kc2.$$.fragment, local);
    			transition_in(kv17.$$.fragment, local);
    			transition_in(kv18.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(printinsurance0.$$.fragment, local);
    			transition_in(printinsurance1.$$.fragment, local);
    			transition_in(printinsurance2.$$.fragment, local);
    			transition_in(printinsurance3.$$.fragment, local);
    			transition_in(printinsurance4.$$.fragment, local);
    			transition_in(printinsurance5.$$.fragment, local);
    			transition_in(printinsurance6.$$.fragment, local);
    			transition_in(kc3.$$.fragment, local);
    			transition_in(kc4.$$.fragment, local);
    			transition_in(kc5.$$.fragment, local);
    			transition_in(kc6.$$.fragment, local);
    			transition_in(kc7.$$.fragment, local);
    			transition_in(kv19.$$.fragment, local);
    			transition_in(kc8.$$.fragment, local);
    			transition_in(kc9.$$.fragment, local);
    			transition_in(kc10.$$.fragment, local);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(kv0.$$.fragment, local);
    			transition_out(kv1.$$.fragment, local);
    			transition_out(kv2.$$.fragment, local);
    			transition_out(kv3.$$.fragment, local);
    			transition_out(kv4.$$.fragment, local);
    			transition_out(kv5.$$.fragment, local);
    			transition_out(kv6.$$.fragment, local);
    			transition_out(kv7.$$.fragment, local);
    			transition_out(kv8.$$.fragment, local);
    			transition_out(kv9.$$.fragment, local);
    			transition_out(kv10.$$.fragment, local);
    			transition_out(kv11.$$.fragment, local);
    			transition_out(kv12.$$.fragment, local);
    			transition_out(kv13.$$.fragment, local);
    			transition_out(kv14.$$.fragment, local);
    			transition_out(kv15.$$.fragment, local);
    			transition_out(kv16.$$.fragment, local);
    			transition_out(kc0.$$.fragment, local);
    			transition_out(kc1.$$.fragment, local);
    			transition_out(kc2.$$.fragment, local);
    			transition_out(kv17.$$.fragment, local);
    			transition_out(kv18.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(printinsurance0.$$.fragment, local);
    			transition_out(printinsurance1.$$.fragment, local);
    			transition_out(printinsurance2.$$.fragment, local);
    			transition_out(printinsurance3.$$.fragment, local);
    			transition_out(printinsurance4.$$.fragment, local);
    			transition_out(printinsurance5.$$.fragment, local);
    			transition_out(printinsurance6.$$.fragment, local);
    			transition_out(kc3.$$.fragment, local);
    			transition_out(kc4.$$.fragment, local);
    			transition_out(kc5.$$.fragment, local);
    			transition_out(kc6.$$.fragment, local);
    			transition_out(kc7.$$.fragment, local);
    			transition_out(kv19.$$.fragment, local);
    			transition_out(kc8.$$.fragment, local);
    			transition_out(kc9.$$.fragment, local);
    			transition_out(kc10.$$.fragment, local);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div11);
    			destroy_component(kv0);
    			destroy_component(kv1);
    			destroy_component(kv2);
    			destroy_component(kv3);
    			destroy_component(kv4);
    			destroy_component(kv5);
    			destroy_component(kv6);
    			destroy_component(kv7);
    			destroy_component(kv8);
    			destroy_component(kv9);
    			destroy_component(kv10);
    			destroy_component(kv11);
    			destroy_component(kv12);
    			destroy_component(kv13);
    			destroy_component(kv14);
    			destroy_component(kv15);
    			destroy_component(kv16);
    			destroy_component(kc0);
    			destroy_component(kc1);
    			destroy_component(kc2);
    			destroy_component(kv17);
    			destroy_component(kv18);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(printinsurance0);
    			destroy_component(printinsurance1);
    			destroy_component(printinsurance2);
    			destroy_component(printinsurance3);
    			destroy_component(printinsurance4);
    			destroy_component(printinsurance5);
    			destroy_component(printinsurance6);
    			destroy_component(kc3);
    			destroy_component(kc4);
    			destroy_component(kc5);
    			destroy_component(kc6);
    			destroy_component(kc7);
    			destroy_component(kv19);
    			destroy_component(kc8);
    			destroy_component(kc9);
    			destroy_component(kc10);
    			if (if_block2) if_block2.d();
    			destroy_each(each_blocks, detaching);
    			/*div10_binding*/ ctx[10](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let identification;
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(3, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Print', slots, []);
    	let { d } = $$props;
    	let page;

    	function print() {
    		const template = `<!DOCTYPE html>
<html>
  <head>
    <title>LiberoLife</title>
    <style>
    @page {
      size: A4;
      margin: 0;
    }
    body{
      margin-left: 20mm;
      margin-bottom: 20mm;
      width: 170mm;
      height: 257mm;
      font-family: 'Calibri', 'Roboto', sans-serif;
    }
    h1 {
      font-size: 10mm;
    }
    .kv-container {
      display: grid;
      grid-template-columns: auto 1fr;
      padding: 5mm 5mm 7mm 5mm;
      row-gap: 2mm;
    }
    .key {
      color: #4f4e4e;
      border-bottom: 1px solid #eaeaea;
      width: 75mm;
    }
    .value {
      border-bottom: 1px solid #eaeaea;
    }
    .payment-key {
      padding-left: 5mm;
    }
    .payment-header {
      font-weight: bold;
    }
    section {
      padding-top: 20mm;
      break-inside: avoid;
    }
    .experiences-container {
      display: grid;
      grid-template-columns: auto auto auto auto;
      grid-gap: 5mm;
    }
    img {
      width: 100mm;
    }
    .logo {
      width: 15mm;
      position: absolute;
      right: 20mm;
      top: 20mm;
    }
    </style>
  </head>
  <body>${page.innerHTML}</body>
</html>`;

    		var a = window.open('', '', 'height=500, width=500');
    		a.document.write(template);
    		a.document.close();
    		a.print();
    		a.close();
    	}

    	function getGender(gender) {
    		if (!gender) {
    			return null;
    		}

    		switch (gender) {
    			case Gender.M:
    				{
    					return $l.personal.gender.male;
    				}
    			case Gender.F:
    				{
    					return $l.personal.gender.female;
    				}
    			case Gender.X:
    				{
    					return $l.personal.gender.divers;
    				}
    		}
    	}

    	function getMaritalStatus(status) {
    		if (!status) {
    			return null;
    		}

    		switch (status) {
    			case MaritalStatus.SINGLE:
    				{
    					return $l.personal.maritalStatus.single;
    				}
    			case MaritalStatus.DIVORCED:
    				{
    					return $l.personal.maritalStatus.divorced;
    				}
    			case MaritalStatus.MARRIED:
    				{
    					return $l.personal.maritalStatus.married;
    				}
    		}
    	}

    	function getPlannedInvestmentPeriod(period) {
    		if (!period) {
    			return null;
    		}

    		switch (period) {
    			case InvestmentPeriodOptions.upToFiveYears:
    				{
    					return $l.needsAssessment.wealthBuilding.investmentPeriodOptions.upToFiveYears;
    				}
    			case InvestmentPeriodOptions.fiveToTwentyYears:
    				{
    					return $l.needsAssessment.wealthBuilding.investmentPeriodOptions.fiveToTwentyYears;
    				}
    			case InvestmentPeriodOptions.moreThanTwentyYears:
    				{
    					return $l.needsAssessment.wealthBuilding.investmentPeriodOptions.moreThanTwentyYears;
    				}
    		}
    	}

    	function getRiskTolerance() {
    		let level = d.wealthBuilding.riskLevel;

    		if (!level) {
    			return { name: '', desc: '' };
    		}

    		switch (level) {
    			case RiskLevel.veryHigh:
    				{
    					return {
    						name: $l.needsAssessment.wealthBuilding.veryHigh.name,
    						desc: $l.needsAssessment.wealthBuilding.veryHigh.description
    					};
    				}
    			case RiskLevel.high:
    				{
    					return {
    						name: $l.needsAssessment.wealthBuilding.high.name,
    						desc: $l.needsAssessment.wealthBuilding.high.description
    					};
    				}
    			case RiskLevel.medium:
    				{
    					return {
    						name: $l.needsAssessment.wealthBuilding.medium.name,
    						desc: $l.needsAssessment.wealthBuilding.medium.description
    					};
    				}
    			case RiskLevel.low:
    				{
    					return {
    						name: $l.needsAssessment.wealthBuilding.low.name,
    						desc: $l.needsAssessment.wealthBuilding.low.description
    					};
    				}
    		}
    	}

    	const writable_props = ['d'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Print> was created with unknown prop '${key}'`);
    	});

    	function kv1_v_binding(value) {
    		if ($$self.$$.not_equal(d.client.firstName, value)) {
    			d.client.firstName = value;
    			$$invalidate(0, d);
    		}
    	}

    	function div10_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			page = $$value;
    			$$invalidate(1, page);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('d' in $$props) $$invalidate(0, d = $$props.d);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		format,
    		KV: PrintKeyValue,
    		KC: PrintKeyCheckbox,
    		Gender,
    		MaritalStatus,
    		mapCountryToName,
    		mapCodeToSocialInsuranceInstitutionName,
    		PrintInsurance,
    		InvestmentPeriodOptions,
    		RiskLevel,
    		d,
    		page,
    		print,
    		getGender,
    		getMaritalStatus,
    		getPlannedInvestmentPeriod,
    		getRiskTolerance,
    		identification,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('d' in $$props) $$invalidate(0, d = $$props.d);
    		if ('page' in $$props) $$invalidate(1, page = $$props.page);
    		if ('identification' in $$props) $$invalidate(2, identification = $$props.identification);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*d*/ 1) {
    			$$invalidate(2, identification = d.client.firstName + ' ' + d.client.lastName);
    		}
    	};

    	return [
    		d,
    		page,
    		identification,
    		$l,
    		getGender,
    		getMaritalStatus,
    		getPlannedInvestmentPeriod,
    		getRiskTolerance,
    		print,
    		kv1_v_binding,
    		div10_binding
    	];
    }

    class Print extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$q, safe_not_equal, { d: 0, print: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Print",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*d*/ ctx[0] === undefined && !('d' in props)) {
    			console.warn("<Print> was created without expected prop 'd'");
    		}
    	}

    	get d() {
    		throw new Error("<Print>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set d(value) {
    		throw new Error("<Print>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get print() {
    		return this.$$.ctx[8];
    	}

    	set print(value) {
    		throw new Error("<Print>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/InvestmentGoalComponent.svelte generated by Svelte v3.44.3 */
    const file$j = "src/components/needs_assessment/InvestmentGoalComponent.svelte";

    // (12:0) <FormField>
    function create_default_slot$i(ctx) {
    	let checkbox;
    	let updating_checked;
    	let current;

    	function checkbox_checked_binding(value) {
    		/*checkbox_checked_binding*/ ctx[3](value);
    	}

    	let checkbox_props = { touch: true };

    	if (/*goal*/ ctx[0].desired !== void 0) {
    		checkbox_props.checked = /*goal*/ ctx[0].desired;
    	}

    	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
    	binding_callbacks.push(() => bind(checkbox, 'checked', checkbox_checked_binding));

    	const block = {
    		c: function create() {
    			create_component(checkbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checkbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checkbox_changes = {};

    			if (!updating_checked && dirty & /*goal*/ 1) {
    				updating_checked = true;
    				checkbox_changes.checked = /*goal*/ ctx[0].desired;
    				add_flush_callback(() => updating_checked = false);
    			}

    			checkbox.$set(checkbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checkbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$i.name,
    		type: "slot",
    		source: "(12:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (14:4) 
    function create_label_slot$3(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*label*/ ctx[1]);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$j, 13, 4, 408);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$3.name,
    		type: "slot",
    		source: "(14:4) ",
    		ctx
    	});

    	return block;
    }

    // (16:0) {#if goal.desired && goal.desired == true}
    function create_if_block$b(ctx) {
    	let div;
    	let textfield;
    	let updating_value;
    	let div_transition;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[4](value);
    	}

    	let textfield_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;",
    		label: /*textfieldLabel*/ ctx[2]
    	};

    	if (/*goal*/ ctx[0].remarks !== void 0) {
    		textfield_props.value = /*goal*/ ctx[0].remarks;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(textfield.$$.fragment);
    			attr_dev(div, "class", "remarks-container svelte-788k8d");
    			add_location(div, file$j, 16, 0, 498);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(textfield, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*textfieldLabel*/ 4) textfield_changes.label = /*textfieldLabel*/ ctx[2];

    			if (!updating_value && dirty & /*goal*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*goal*/ ctx[0].remarks;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(textfield);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(16:0) {#if goal.desired && goal.desired == true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let formfield;
    	let t;
    	let if_block_anchor;
    	let current;

    	formfield = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$3],
    					default: [create_default_slot$i]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*goal*/ ctx[0].desired && /*goal*/ ctx[0].desired == true && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			create_component(formfield.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(formfield, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const formfield_changes = {};

    			if (dirty & /*$$scope, label, goal*/ 67) {
    				formfield_changes.$$scope = { dirty, ctx };
    			}

    			formfield.$set(formfield_changes);

    			if (/*goal*/ ctx[0].desired && /*goal*/ ctx[0].desired == true) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*goal*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formfield.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formfield.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formfield, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(5, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InvestmentGoalComponent', slots, []);
    	let { goal } = $$props;
    	let { label = '' } = $$props;
    	let { textfieldLabel = $l.remarks } = $$props;
    	const writable_props = ['goal', 'label', 'textfieldLabel'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InvestmentGoalComponent> was created with unknown prop '${key}'`);
    	});

    	function checkbox_checked_binding(value) {
    		if ($$self.$$.not_equal(goal.desired, value)) {
    			goal.desired = value;
    			$$invalidate(0, goal);
    		}
    	}

    	function textfield_value_binding(value) {
    		if ($$self.$$.not_equal(goal.remarks, value)) {
    			goal.remarks = value;
    			$$invalidate(0, goal);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('goal' in $$props) $$invalidate(0, goal = $$props.goal);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('textfieldLabel' in $$props) $$invalidate(2, textfieldLabel = $$props.textfieldLabel);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		slide,
    		FormField,
    		Checkbox,
    		Textfield,
    		goal,
    		label,
    		textfieldLabel,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('goal' in $$props) $$invalidate(0, goal = $$props.goal);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('textfieldLabel' in $$props) $$invalidate(2, textfieldLabel = $$props.textfieldLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [goal, label, textfieldLabel, checkbox_checked_binding, textfield_value_binding];
    }

    class InvestmentGoalComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$p, safe_not_equal, { goal: 0, label: 1, textfieldLabel: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InvestmentGoalComponent",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*goal*/ ctx[0] === undefined && !('goal' in props)) {
    			console.warn("<InvestmentGoalComponent> was created without expected prop 'goal'");
    		}
    	}

    	get goal() {
    		throw new Error("<InvestmentGoalComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set goal(value) {
    		throw new Error("<InvestmentGoalComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<InvestmentGoalComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<InvestmentGoalComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textfieldLabel() {
    		throw new Error("<InvestmentGoalComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textfieldLabel(value) {
    		throw new Error("<InvestmentGoalComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/ExperienceComponent.svelte generated by Svelte v3.44.3 */
    const file$i = "src/components/needs_assessment/ExperienceComponent.svelte";

    // (15:4) <FormField>
    function create_default_slot_6$c(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding(value) {
    		/*radio_group_binding*/ ctx[3](value);
    	}

    	let radio_props = { value: "true", touch: true };

    	if (/*radioSelection*/ ctx[1] !== void 0) {
    		radio_props.group = /*radioSelection*/ ctx[1];
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*radioSelection*/ 2) {
    				updating_group = true;
    				radio_changes.group = /*radioSelection*/ ctx[1];
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$c.name,
    		type: "slot",
    		source: "(15:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (17:8) 
    function create_label_slot_6$1(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[2].needsAssessment.experiences.yesExperience + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 16, 8, 505);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].needsAssessment.experiences.yesExperience + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_6$1.name,
    		type: "slot",
    		source: "(17:8) ",
    		ctx
    	});

    	return block;
    }

    // (19:4) <FormField>
    function create_default_slot_5$c(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_1(value) {
    		/*radio_group_binding_1*/ ctx[4](value);
    	}

    	let radio_props = { value: "false", touch: true };

    	if (/*radioSelection*/ ctx[1] !== void 0) {
    		radio_props.group = /*radioSelection*/ ctx[1];
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_1));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*radioSelection*/ 2) {
    				updating_group = true;
    				radio_changes.group = /*radioSelection*/ ctx[1];
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$c.name,
    		type: "slot",
    		source: "(19:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (21:8) 
    function create_label_slot_5$1(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[2].needsAssessment.experiences.noExperience + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 20, 8, 685);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 4 && t_value !== (t_value = /*$l*/ ctx[2].needsAssessment.experiences.noExperience + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_5$1.name,
    		type: "slot",
    		source: "(21:8) ",
    		ctx
    	});

    	return block;
    }

    // (24:0) {#if experience.hasExperience == true}
    function create_if_block$a(ctx) {
    	let div;
    	let textfield;
    	let updating_value;
    	let t0;
    	let formfield0;
    	let t1;
    	let formfield1;
    	let t2;
    	let formfield2;
    	let t3;
    	let formfield3;
    	let t4;
    	let formfield4;
    	let div_transition;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[5](value);
    	}

    	let textfield_props = {
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		label: /*$l*/ ctx[2].needsAssessment.experiences.since
    	};

    	if (/*experience*/ ctx[0].since !== void 0) {
    		textfield_props.value = /*experience*/ ctx[0].since;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_4$1],
    					default: [create_default_slot_4$c]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_3$1],
    					default: [create_default_slot_3$e]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield2 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_2$1],
    					default: [create_default_slot_2$e]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield3 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_1$1],
    					default: [create_default_slot_1$f]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield4 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$2],
    					default: [create_default_slot$h]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(textfield.$$.fragment);
    			t0 = space();
    			create_component(formfield0.$$.fragment);
    			t1 = space();
    			create_component(formfield1.$$.fragment);
    			t2 = space();
    			create_component(formfield2.$$.fragment);
    			t3 = space();
    			create_component(formfield3.$$.fragment);
    			t4 = space();
    			create_component(formfield4.$$.fragment);
    			add_location(div, file$i, 24, 0, 820);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(textfield, div, null);
    			append_dev(div, t0);
    			mount_component(formfield0, div, null);
    			append_dev(div, t1);
    			mount_component(formfield1, div, null);
    			append_dev(div, t2);
    			mount_component(formfield2, div, null);
    			append_dev(div, t3);
    			mount_component(formfield3, div, null);
    			append_dev(div, t4);
    			mount_component(formfield4, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};
    			if (dirty & /*$l*/ 4) textfield_changes.label = /*$l*/ ctx[2].needsAssessment.experiences.since;

    			if (!updating_value && dirty & /*experience*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*experience*/ ctx[0].since;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, experience*/ 2049) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, experience*/ 2049) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);
    			const formfield2_changes = {};

    			if (dirty & /*$$scope, experience*/ 2049) {
    				formfield2_changes.$$scope = { dirty, ctx };
    			}

    			formfield2.$set(formfield2_changes);
    			const formfield3_changes = {};

    			if (dirty & /*$$scope, experience*/ 2049) {
    				formfield3_changes.$$scope = { dirty, ctx };
    			}

    			formfield3.$set(formfield3_changes);
    			const formfield4_changes = {};

    			if (dirty & /*$$scope, experience*/ 2049) {
    				formfield4_changes.$$scope = { dirty, ctx };
    			}

    			formfield4.$set(formfield4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(formfield2.$$.fragment, local);
    			transition_in(formfield3.$$.fragment, local);
    			transition_in(formfield4.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(formfield2.$$.fragment, local);
    			transition_out(formfield3.$$.fragment, local);
    			transition_out(formfield4.$$.fragment, local);

    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(textfield);
    			destroy_component(formfield0);
    			destroy_component(formfield1);
    			destroy_component(formfield2);
    			destroy_component(formfield3);
    			destroy_component(formfield4);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(24:0) {#if experience.hasExperience == true}",
    		ctx
    	});

    	return block;
    }

    // (27:4) <FormField>
    function create_default_slot_4$c(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_2(value) {
    		/*radio_group_binding_2*/ ctx[6](value);
    	}

    	let radio_props = { value: "1", touch: true };

    	if (/*experience*/ ctx[0].level !== void 0) {
    		radio_props.group = /*experience*/ ctx[0].level;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_2));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*experience*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*experience*/ ctx[0].level;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$c.name,
    		type: "slot",
    		source: "(27:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (29:8) 
    function create_label_slot_4$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "1";
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 28, 8, 1090);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_4$1.name,
    		type: "slot",
    		source: "(29:8) ",
    		ctx
    	});

    	return block;
    }

    // (31:4) <FormField>
    function create_default_slot_3$e(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_3(value) {
    		/*radio_group_binding_3*/ ctx[7](value);
    	}

    	let radio_props = { value: "2", touch: true };

    	if (/*experience*/ ctx[0].level !== void 0) {
    		radio_props.group = /*experience*/ ctx[0].level;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_3));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*experience*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*experience*/ ctx[0].level;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$e.name,
    		type: "slot",
    		source: "(31:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (33:8) 
    function create_label_slot_3$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "2";
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 32, 8, 1223);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_3$1.name,
    		type: "slot",
    		source: "(33:8) ",
    		ctx
    	});

    	return block;
    }

    // (35:4) <FormField>
    function create_default_slot_2$e(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_4(value) {
    		/*radio_group_binding_4*/ ctx[8](value);
    	}

    	let radio_props = { value: "3", touch: true };

    	if (/*experience*/ ctx[0].level !== void 0) {
    		radio_props.group = /*experience*/ ctx[0].level;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_4));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*experience*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*experience*/ ctx[0].level;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$e.name,
    		type: "slot",
    		source: "(35:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (37:8) 
    function create_label_slot_2$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "3";
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 36, 8, 1356);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2$1.name,
    		type: "slot",
    		source: "(37:8) ",
    		ctx
    	});

    	return block;
    }

    // (39:4) <FormField>
    function create_default_slot_1$f(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_5(value) {
    		/*radio_group_binding_5*/ ctx[9](value);
    	}

    	let radio_props = { value: "4", touch: true };

    	if (/*experience*/ ctx[0].level !== void 0) {
    		radio_props.group = /*experience*/ ctx[0].level;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_5));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*experience*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*experience*/ ctx[0].level;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$f.name,
    		type: "slot",
    		source: "(39:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (41:8) 
    function create_label_slot_1$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "4";
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 40, 8, 1489);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1$1.name,
    		type: "slot",
    		source: "(41:8) ",
    		ctx
    	});

    	return block;
    }

    // (43:4) <FormField>
    function create_default_slot$h(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_6(value) {
    		/*radio_group_binding_6*/ ctx[10](value);
    	}

    	let radio_props = { value: "5", touch: true };

    	if (/*experience*/ ctx[0].level !== void 0) {
    		radio_props.group = /*experience*/ ctx[0].level;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_6));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*experience*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*experience*/ ctx[0].level;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$h.name,
    		type: "slot",
    		source: "(43:4) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (45:8) 
    function create_label_slot$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "5";
    			attr_dev(span, "slot", "label");
    			add_location(span, file$i, 44, 8, 1622);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$2.name,
    		type: "slot",
    		source: "(45:8) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*experience*/ ctx[0].name + "";
    	let t0;
    	let t1;
    	let formfield0;
    	let t2;
    	let formfield1;
    	let t3;
    	let if_block_anchor;
    	let current;

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_6$1],
    					default: [create_default_slot_6$c]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_5$1],
    					default: [create_default_slot_5$c]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*experience*/ ctx[0].hasExperience == true && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(formfield0.$$.fragment);
    			t2 = space();
    			create_component(formfield1.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h3, "class", "svelte-1pcdop3");
    			add_location(h3, file$i, 13, 4, 389);
    			add_location(div, file$i, 12, 0, 379);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			mount_component(formfield0, div, null);
    			append_dev(div, t2);
    			mount_component(formfield1, div, null);
    			insert_dev(target, t3, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*experience*/ 1) && t0_value !== (t0_value = /*experience*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, $l, radioSelection*/ 2054) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, $l, radioSelection*/ 2054) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);

    			if (/*experience*/ ctx[0].hasExperience == true) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*experience*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(formfield0);
    			destroy_component(formfield1);
    			if (detaching) detach_dev(t3);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(2, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExperienceComponent', slots, []);
    	let { experience } = $$props;
    	let radioSelection;
    	const writable_props = ['experience'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExperienceComponent> was created with unknown prop '${key}'`);
    	});

    	function radio_group_binding(value) {
    		radioSelection = value;
    		$$invalidate(1, radioSelection);
    	}

    	function radio_group_binding_1(value) {
    		radioSelection = value;
    		$$invalidate(1, radioSelection);
    	}

    	function textfield_value_binding(value) {
    		if ($$self.$$.not_equal(experience.since, value)) {
    			experience.since = value;
    			($$invalidate(0, experience), $$invalidate(1, radioSelection));
    		}
    	}

    	function radio_group_binding_2(value) {
    		if ($$self.$$.not_equal(experience.level, value)) {
    			experience.level = value;
    			($$invalidate(0, experience), $$invalidate(1, radioSelection));
    		}
    	}

    	function radio_group_binding_3(value) {
    		if ($$self.$$.not_equal(experience.level, value)) {
    			experience.level = value;
    			($$invalidate(0, experience), $$invalidate(1, radioSelection));
    		}
    	}

    	function radio_group_binding_4(value) {
    		if ($$self.$$.not_equal(experience.level, value)) {
    			experience.level = value;
    			($$invalidate(0, experience), $$invalidate(1, radioSelection));
    		}
    	}

    	function radio_group_binding_5(value) {
    		if ($$self.$$.not_equal(experience.level, value)) {
    			experience.level = value;
    			($$invalidate(0, experience), $$invalidate(1, radioSelection));
    		}
    	}

    	function radio_group_binding_6(value) {
    		if ($$self.$$.not_equal(experience.level, value)) {
    			experience.level = value;
    			($$invalidate(0, experience), $$invalidate(1, radioSelection));
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('experience' in $$props) $$invalidate(0, experience = $$props.experience);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		slide,
    		Radio,
    		FormField,
    		Textfield,
    		experience,
    		radioSelection,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('experience' in $$props) $$invalidate(0, experience = $$props.experience);
    		if ('radioSelection' in $$props) $$invalidate(1, radioSelection = $$props.radioSelection);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*radioSelection*/ 2) {
    			if (radioSelection) {
    				$$invalidate(0, experience.hasExperience = radioSelection == "true", experience);
    			}
    		}
    	};

    	return [
    		experience,
    		radioSelection,
    		$l,
    		radio_group_binding,
    		radio_group_binding_1,
    		textfield_value_binding,
    		radio_group_binding_2,
    		radio_group_binding_3,
    		radio_group_binding_4,
    		radio_group_binding_5,
    		radio_group_binding_6
    	];
    }

    class ExperienceComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$o, safe_not_equal, { experience: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExperienceComponent",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*experience*/ ctx[0] === undefined && !('experience' in props)) {
    			console.warn("<ExperienceComponent> was created without expected prop 'experience'");
    		}
    	}

    	get experience() {
    		throw new Error("<ExperienceComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set experience(value) {
    		throw new Error("<ExperienceComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/needs_assessment/WealthBuilding.svelte generated by Svelte v3.44.3 */
    const file$h = "src/components/needs_assessment/WealthBuilding.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (20:0) <FormField>
    function create_default_slot_6$b(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding(value) {
    		/*radio_group_binding*/ ctx[7](value);
    	}

    	let radio_props = { value: "upToFiveYears", touch: true };

    	if (/*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$b.name,
    		type: "slot",
    		source: "(20:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (22:4) 
    function create_label_slot_6(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.investmentPeriodOptions.upToFiveYears + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$h, 21, 4, 1446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t_value !== (t_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.investmentPeriodOptions.upToFiveYears + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_6.name,
    		type: "slot",
    		source: "(22:4) ",
    		ctx
    	});

    	return block;
    }

    // (24:0) <FormField>
    function create_default_slot_5$b(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_1(value) {
    		/*radio_group_binding_1*/ ctx[8](value);
    	}

    	let radio_props = { value: "fiveToTwentyYears", touch: true };

    	if (/*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_1));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$b.name,
    		type: "slot",
    		source: "(24:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (26:4) 
    function create_label_slot_5(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.investmentPeriodOptions.fiveToTwentyYears + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$h, 25, 4, 1684);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t_value !== (t_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.investmentPeriodOptions.fiveToTwentyYears + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_5.name,
    		type: "slot",
    		source: "(26:4) ",
    		ctx
    	});

    	return block;
    }

    // (28:0) <FormField>
    function create_default_slot_4$b(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_2(value) {
    		/*radio_group_binding_2*/ ctx[9](value);
    	}

    	let radio_props = {
    		value: "moreThanTwentyYears",
    		touch: true
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_2));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.plannedInvestmentPeriod;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$b.name,
    		type: "slot",
    		source: "(28:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (30:4) 
    function create_label_slot_4(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.investmentPeriodOptions.moreThanTwentyYears + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "slot", "label");
    			add_location(span, file$h, 29, 4, 1928);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t_value !== (t_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.investmentPeriodOptions.moreThanTwentyYears + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_4.name,
    		type: "slot",
    		source: "(30:4) ",
    		ctx
    	});

    	return block;
    }

    // (40:0) {#each assessment.experiences as experience}
    function create_each_block$8(ctx) {
    	let experiencecomponent;
    	let current;

    	experiencecomponent = new ExperienceComponent({
    			props: { experience: /*experience*/ ctx[17] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(experiencecomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(experiencecomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const experiencecomponent_changes = {};
    			if (dirty & /*assessment*/ 1) experiencecomponent_changes.experience = /*experience*/ ctx[17];
    			experiencecomponent.$set(experiencecomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(experiencecomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(experiencecomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(experiencecomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(40:0) {#each assessment.experiences as experience}",
    		ctx
    	});

    	return block;
    }

    // (45:0) <FormField>
    function create_default_slot_3$d(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_3(value) {
    		/*radio_group_binding_3*/ ctx[13](value);
    	}

    	let radio_props = { value: "veryHigh", touch: true };

    	if (/*assessment*/ ctx[0].wealthBuilding.riskLevel !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_3));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$d.name,
    		type: "slot",
    		source: "(45:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (47:4) 
    function create_label_slot_3(ctx) {
    	let span2;
    	let span0;
    	let t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.veryHigh.name + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.veryHigh.description + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span2 = element("span");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(t2_value);
    			attr_dev(span0, "class", "risk_title svelte-1me1u2");
    			add_location(span0, file$h, 47, 8, 3053);
    			attr_dev(span1, "class", "risk_desc svelte-1me1u2");
    			add_location(span1, file$h, 48, 8, 3143);
    			attr_dev(span2, "slot", "label");
    			add_location(span2, file$h, 46, 4, 3025);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span2, anchor);
    			append_dev(span2, span0);
    			append_dev(span0, t0);
    			append_dev(span2, t1);
    			append_dev(span2, span1);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t0_value !== (t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.veryHigh.name + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$l*/ 2 && t2_value !== (t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.veryHigh.description + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_3.name,
    		type: "slot",
    		source: "(47:4) ",
    		ctx
    	});

    	return block;
    }

    // (52:0) <FormField>
    function create_default_slot_2$d(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_4(value) {
    		/*radio_group_binding_4*/ ctx[14](value);
    	}

    	let radio_props = { value: "high", touch: true };

    	if (/*assessment*/ ctx[0].wealthBuilding.riskLevel !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_4));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$d.name,
    		type: "slot",
    		source: "(52:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (54:4) 
    function create_label_slot_2(ctx) {
    	let span2;
    	let span0;
    	let t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.high.name + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.high.description + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span2 = element("span");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(t2_value);
    			attr_dev(span0, "class", "risk_title svelte-1me1u2");
    			add_location(span0, file$h, 54, 8, 3382);
    			attr_dev(span1, "class", "risk_desc svelte-1me1u2");
    			add_location(span1, file$h, 55, 8, 3468);
    			attr_dev(span2, "slot", "label");
    			add_location(span2, file$h, 53, 4, 3354);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span2, anchor);
    			append_dev(span2, span0);
    			append_dev(span0, t0);
    			append_dev(span2, t1);
    			append_dev(span2, span1);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t0_value !== (t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.high.name + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$l*/ 2 && t2_value !== (t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.high.description + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2.name,
    		type: "slot",
    		source: "(54:4) ",
    		ctx
    	});

    	return block;
    }

    // (59:0) <FormField>
    function create_default_slot_1$e(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_5(value) {
    		/*radio_group_binding_5*/ ctx[15](value);
    	}

    	let radio_props = { value: "medium", touch: true };

    	if (/*assessment*/ ctx[0].wealthBuilding.riskLevel !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_5));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$e.name,
    		type: "slot",
    		source: "(59:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (61:4) 
    function create_label_slot_1(ctx) {
    	let span2;
    	let span0;
    	let t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.medium.name + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.medium.description + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span2 = element("span");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(t2_value);
    			attr_dev(span0, "class", "risk_title svelte-1me1u2");
    			add_location(span0, file$h, 61, 8, 3705);
    			attr_dev(span1, "class", "risk_desc svelte-1me1u2");
    			add_location(span1, file$h, 62, 8, 3793);
    			attr_dev(span2, "slot", "label");
    			add_location(span2, file$h, 60, 4, 3677);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span2, anchor);
    			append_dev(span2, span0);
    			append_dev(span0, t0);
    			append_dev(span2, t1);
    			append_dev(span2, span1);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t0_value !== (t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.medium.name + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$l*/ 2 && t2_value !== (t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.medium.description + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1.name,
    		type: "slot",
    		source: "(61:4) ",
    		ctx
    	});

    	return block;
    }

    // (66:0) <FormField>
    function create_default_slot$g(ctx) {
    	let radio;
    	let updating_group;
    	let current;

    	function radio_group_binding_6(value) {
    		/*radio_group_binding_6*/ ctx[16](value);
    	}

    	let radio_props = { value: "low", touch: true };

    	if (/*assessment*/ ctx[0].wealthBuilding.riskLevel !== void 0) {
    		radio_props.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    	}

    	radio = new Radio({ props: radio_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio, 'group', radio_group_binding_6));

    	const block = {
    		c: function create() {
    			create_component(radio.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radio, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const radio_changes = {};

    			if (!updating_group && dirty & /*assessment*/ 1) {
    				updating_group = true;
    				radio_changes.group = /*assessment*/ ctx[0].wealthBuilding.riskLevel;
    				add_flush_callback(() => updating_group = false);
    			}

    			radio.$set(radio_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radio, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$g.name,
    		type: "slot",
    		source: "(66:0) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (68:4) 
    function create_label_slot$1(ctx) {
    	let span2;
    	let span0;
    	let t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.low.name + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.low.description + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span2 = element("span");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(t2_value);
    			attr_dev(span0, "class", "risk_title svelte-1me1u2");
    			add_location(span0, file$h, 68, 8, 4029);
    			attr_dev(span1, "class", "risk_desc svelte-1me1u2");
    			add_location(span1, file$h, 69, 8, 4114);
    			attr_dev(span2, "slot", "label");
    			add_location(span2, file$h, 67, 4, 4001);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span2, anchor);
    			append_dev(span2, span0);
    			append_dev(span0, t0);
    			append_dev(span2, t1);
    			append_dev(span2, span1);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 2 && t0_value !== (t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.low.name + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$l*/ 2 && t2_value !== (t2_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.low.description + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$1.name,
    		type: "slot",
    		source: "(68:4) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let h30;
    	let t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.plannedInvestmentGoals + "";
    	let t0;
    	let t1;
    	let div0;
    	let investmentgoalcomponent0;
    	let updating_goal;
    	let t2;
    	let investmentgoalcomponent1;
    	let updating_goal_1;
    	let t3;
    	let investmentgoalcomponent2;
    	let updating_goal_2;
    	let t4;
    	let investmentgoalcomponent3;
    	let updating_goal_3;
    	let t5;
    	let investmentgoalcomponent4;
    	let updating_goal_4;
    	let t6;
    	let h31;
    	let t7_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.plannedInvestmentPeriod + "";
    	let t7;
    	let t8;
    	let formfield0;
    	let t9;
    	let formfield1;
    	let t10;
    	let formfield2;
    	let t11;
    	let h32;
    	let t12_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.plannedMethodOfPayment + "";
    	let t12;
    	let t13;
    	let div1;
    	let investmentgoalcomponent5;
    	let updating_goal_5;
    	let t14;
    	let investmentgoalcomponent6;
    	let updating_goal_6;
    	let t15;
    	let investmentgoalcomponent7;
    	let updating_goal_7;
    	let t16;
    	let h33;
    	let t17_value = /*$l*/ ctx[1].needsAssessment.subtitles.experiences + "";
    	let t17;
    	let t18;
    	let div2;
    	let t19;
    	let h34;
    	let t20_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.riskTolerance + "";
    	let t20;
    	let t21;
    	let formfield3;
    	let t22;
    	let formfield4;
    	let t23;
    	let formfield5;
    	let t24;
    	let formfield6;
    	let current;

    	function investmentgoalcomponent0_goal_binding(value) {
    		/*investmentgoalcomponent0_goal_binding*/ ctx[2](value);
    	}

    	let investmentgoalcomponent0_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.retirementProvision
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.retirementProvision !== void 0) {
    		investmentgoalcomponent0_props.goal = /*assessment*/ ctx[0].wealthBuilding.retirementProvision;
    	}

    	investmentgoalcomponent0 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent0, 'goal', investmentgoalcomponent0_goal_binding));

    	function investmentgoalcomponent1_goal_binding(value) {
    		/*investmentgoalcomponent1_goal_binding*/ ctx[3](value);
    	}

    	let investmentgoalcomponent1_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.saveBig
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.saveBig !== void 0) {
    		investmentgoalcomponent1_props.goal = /*assessment*/ ctx[0].wealthBuilding.saveBig;
    	}

    	investmentgoalcomponent1 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent1, 'goal', investmentgoalcomponent1_goal_binding));

    	function investmentgoalcomponent2_goal_binding(value) {
    		/*investmentgoalcomponent2_goal_binding*/ ctx[4](value);
    	}

    	let investmentgoalcomponent2_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.saveEducation
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.saveEducation !== void 0) {
    		investmentgoalcomponent2_props.goal = /*assessment*/ ctx[0].wealthBuilding.saveEducation;
    	}

    	investmentgoalcomponent2 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent2, 'goal', investmentgoalcomponent2_goal_binding));

    	function investmentgoalcomponent3_goal_binding(value) {
    		/*investmentgoalcomponent3_goal_binding*/ ctx[5](value);
    	}

    	let investmentgoalcomponent3_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.otherInvestmentGoal
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.otherInvestmentGoal !== void 0) {
    		investmentgoalcomponent3_props.goal = /*assessment*/ ctx[0].wealthBuilding.otherInvestmentGoal;
    	}

    	investmentgoalcomponent3 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent3, 'goal', investmentgoalcomponent3_goal_binding));

    	function investmentgoalcomponent4_goal_binding(value) {
    		/*investmentgoalcomponent4_goal_binding*/ ctx[6](value);
    	}

    	let investmentgoalcomponent4_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.alreadyInvested
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.alreadyInvested !== void 0) {
    		investmentgoalcomponent4_props.goal = /*assessment*/ ctx[0].wealthBuilding.alreadyInvested;
    	}

    	investmentgoalcomponent4 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent4_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent4, 'goal', investmentgoalcomponent4_goal_binding));

    	formfield0 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_6],
    					default: [create_default_slot_6$b]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield1 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_5],
    					default: [create_default_slot_5$b]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield2 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_4],
    					default: [create_default_slot_4$b]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function investmentgoalcomponent5_goal_binding(value) {
    		/*investmentgoalcomponent5_goal_binding*/ ctx[10](value);
    	}

    	let investmentgoalcomponent5_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.paymentOnce
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.paymentOnce !== void 0) {
    		investmentgoalcomponent5_props.goal = /*assessment*/ ctx[0].wealthBuilding.paymentOnce;
    	}

    	investmentgoalcomponent5 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent5_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent5, 'goal', investmentgoalcomponent5_goal_binding));

    	function investmentgoalcomponent6_goal_binding(value) {
    		/*investmentgoalcomponent6_goal_binding*/ ctx[11](value);
    	}

    	let investmentgoalcomponent6_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.paymentMonthly
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.paymentMonthly !== void 0) {
    		investmentgoalcomponent6_props.goal = /*assessment*/ ctx[0].wealthBuilding.paymentMonthly;
    	}

    	investmentgoalcomponent6 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent6_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent6, 'goal', investmentgoalcomponent6_goal_binding));

    	function investmentgoalcomponent7_goal_binding(value) {
    		/*investmentgoalcomponent7_goal_binding*/ ctx[12](value);
    	}

    	let investmentgoalcomponent7_props = {
    		label: /*$l*/ ctx[1].needsAssessment.wealthBuilding.paymentYearly
    	};

    	if (/*assessment*/ ctx[0].wealthBuilding.paymentYearly !== void 0) {
    		investmentgoalcomponent7_props.goal = /*assessment*/ ctx[0].wealthBuilding.paymentYearly;
    	}

    	investmentgoalcomponent7 = new InvestmentGoalComponent({
    			props: investmentgoalcomponent7_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(investmentgoalcomponent7, 'goal', investmentgoalcomponent7_goal_binding));
    	let each_value = /*assessment*/ ctx[0].experiences;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	formfield3 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_3],
    					default: [create_default_slot_3$d]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield4 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_2],
    					default: [create_default_slot_2$d]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield5 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot_1],
    					default: [create_default_slot_1$e]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formfield6 = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot$1],
    					default: [create_default_slot$g]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h30 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			create_component(investmentgoalcomponent0.$$.fragment);
    			t2 = space();
    			create_component(investmentgoalcomponent1.$$.fragment);
    			t3 = space();
    			create_component(investmentgoalcomponent2.$$.fragment);
    			t4 = space();
    			create_component(investmentgoalcomponent3.$$.fragment);
    			t5 = space();
    			create_component(investmentgoalcomponent4.$$.fragment);
    			t6 = space();
    			h31 = element("h3");
    			t7 = text(t7_value);
    			t8 = space();
    			create_component(formfield0.$$.fragment);
    			t9 = space();
    			create_component(formfield1.$$.fragment);
    			t10 = space();
    			create_component(formfield2.$$.fragment);
    			t11 = space();
    			h32 = element("h3");
    			t12 = text(t12_value);
    			t13 = space();
    			div1 = element("div");
    			create_component(investmentgoalcomponent5.$$.fragment);
    			t14 = space();
    			create_component(investmentgoalcomponent6.$$.fragment);
    			t15 = space();
    			create_component(investmentgoalcomponent7.$$.fragment);
    			t16 = space();
    			h33 = element("h3");
    			t17 = text(t17_value);
    			t18 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t19 = space();
    			h34 = element("h3");
    			t20 = text(t20_value);
    			t21 = space();
    			create_component(formfield3.$$.fragment);
    			t22 = space();
    			create_component(formfield4.$$.fragment);
    			t23 = space();
    			create_component(formfield5.$$.fragment);
    			t24 = space();
    			create_component(formfield6.$$.fragment);
    			attr_dev(h30, "class", "mdc-typography--headline5");
    			add_location(h30, file$h, 10, 0, 367);
    			attr_dev(div0, "class", "investment-container svelte-1me1u2");
    			add_location(div0, file$h, 11, 0, 469);
    			attr_dev(h31, "class", "mdc-typography--headline5");
    			add_location(h31, file$h, 18, 0, 1222);
    			attr_dev(h32, "class", "mdc-typography--headline5");
    			add_location(h32, file$h, 31, 0, 2047);
    			attr_dev(div1, "class", "investment-container svelte-1me1u2");
    			add_location(div1, file$h, 32, 0, 2149);
    			attr_dev(h33, "class", "mdc-typography--headline5");
    			add_location(h33, file$h, 37, 0, 2609);
    			attr_dev(div2, "class", "experience-container svelte-1me1u2");
    			add_location(div2, file$h, 38, 0, 2695);
    			attr_dev(h34, "class", "mdc-typography--headline5");
    			add_location(h34, file$h, 43, 0, 2830);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h30, anchor);
    			append_dev(h30, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(investmentgoalcomponent0, div0, null);
    			append_dev(div0, t2);
    			mount_component(investmentgoalcomponent1, div0, null);
    			append_dev(div0, t3);
    			mount_component(investmentgoalcomponent2, div0, null);
    			append_dev(div0, t4);
    			mount_component(investmentgoalcomponent3, div0, null);
    			append_dev(div0, t5);
    			mount_component(investmentgoalcomponent4, div0, null);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, h31, anchor);
    			append_dev(h31, t7);
    			insert_dev(target, t8, anchor);
    			mount_component(formfield0, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(formfield1, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(formfield2, target, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, h32, anchor);
    			append_dev(h32, t12);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(investmentgoalcomponent5, div1, null);
    			append_dev(div1, t14);
    			mount_component(investmentgoalcomponent6, div1, null);
    			append_dev(div1, t15);
    			mount_component(investmentgoalcomponent7, div1, null);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, h33, anchor);
    			append_dev(h33, t17);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, div2, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			insert_dev(target, t19, anchor);
    			insert_dev(target, h34, anchor);
    			append_dev(h34, t20);
    			insert_dev(target, t21, anchor);
    			mount_component(formfield3, target, anchor);
    			insert_dev(target, t22, anchor);
    			mount_component(formfield4, target, anchor);
    			insert_dev(target, t23, anchor);
    			mount_component(formfield5, target, anchor);
    			insert_dev(target, t24, anchor);
    			mount_component(formfield6, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$l*/ 2) && t0_value !== (t0_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.plannedInvestmentGoals + "")) set_data_dev(t0, t0_value);
    			const investmentgoalcomponent0_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent0_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.retirementProvision;

    			if (!updating_goal && dirty & /*assessment*/ 1) {
    				updating_goal = true;
    				investmentgoalcomponent0_changes.goal = /*assessment*/ ctx[0].wealthBuilding.retirementProvision;
    				add_flush_callback(() => updating_goal = false);
    			}

    			investmentgoalcomponent0.$set(investmentgoalcomponent0_changes);
    			const investmentgoalcomponent1_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent1_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.saveBig;

    			if (!updating_goal_1 && dirty & /*assessment*/ 1) {
    				updating_goal_1 = true;
    				investmentgoalcomponent1_changes.goal = /*assessment*/ ctx[0].wealthBuilding.saveBig;
    				add_flush_callback(() => updating_goal_1 = false);
    			}

    			investmentgoalcomponent1.$set(investmentgoalcomponent1_changes);
    			const investmentgoalcomponent2_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent2_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.saveEducation;

    			if (!updating_goal_2 && dirty & /*assessment*/ 1) {
    				updating_goal_2 = true;
    				investmentgoalcomponent2_changes.goal = /*assessment*/ ctx[0].wealthBuilding.saveEducation;
    				add_flush_callback(() => updating_goal_2 = false);
    			}

    			investmentgoalcomponent2.$set(investmentgoalcomponent2_changes);
    			const investmentgoalcomponent3_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent3_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.otherInvestmentGoal;

    			if (!updating_goal_3 && dirty & /*assessment*/ 1) {
    				updating_goal_3 = true;
    				investmentgoalcomponent3_changes.goal = /*assessment*/ ctx[0].wealthBuilding.otherInvestmentGoal;
    				add_flush_callback(() => updating_goal_3 = false);
    			}

    			investmentgoalcomponent3.$set(investmentgoalcomponent3_changes);
    			const investmentgoalcomponent4_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent4_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.alreadyInvested;

    			if (!updating_goal_4 && dirty & /*assessment*/ 1) {
    				updating_goal_4 = true;
    				investmentgoalcomponent4_changes.goal = /*assessment*/ ctx[0].wealthBuilding.alreadyInvested;
    				add_flush_callback(() => updating_goal_4 = false);
    			}

    			investmentgoalcomponent4.$set(investmentgoalcomponent4_changes);
    			if ((!current || dirty & /*$l*/ 2) && t7_value !== (t7_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.plannedInvestmentPeriod + "")) set_data_dev(t7, t7_value);
    			const formfield0_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield0_changes.$$scope = { dirty, ctx };
    			}

    			formfield0.$set(formfield0_changes);
    			const formfield1_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield1_changes.$$scope = { dirty, ctx };
    			}

    			formfield1.$set(formfield1_changes);
    			const formfield2_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield2_changes.$$scope = { dirty, ctx };
    			}

    			formfield2.$set(formfield2_changes);
    			if ((!current || dirty & /*$l*/ 2) && t12_value !== (t12_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.plannedMethodOfPayment + "")) set_data_dev(t12, t12_value);
    			const investmentgoalcomponent5_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent5_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.paymentOnce;

    			if (!updating_goal_5 && dirty & /*assessment*/ 1) {
    				updating_goal_5 = true;
    				investmentgoalcomponent5_changes.goal = /*assessment*/ ctx[0].wealthBuilding.paymentOnce;
    				add_flush_callback(() => updating_goal_5 = false);
    			}

    			investmentgoalcomponent5.$set(investmentgoalcomponent5_changes);
    			const investmentgoalcomponent6_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent6_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.paymentMonthly;

    			if (!updating_goal_6 && dirty & /*assessment*/ 1) {
    				updating_goal_6 = true;
    				investmentgoalcomponent6_changes.goal = /*assessment*/ ctx[0].wealthBuilding.paymentMonthly;
    				add_flush_callback(() => updating_goal_6 = false);
    			}

    			investmentgoalcomponent6.$set(investmentgoalcomponent6_changes);
    			const investmentgoalcomponent7_changes = {};
    			if (dirty & /*$l*/ 2) investmentgoalcomponent7_changes.label = /*$l*/ ctx[1].needsAssessment.wealthBuilding.paymentYearly;

    			if (!updating_goal_7 && dirty & /*assessment*/ 1) {
    				updating_goal_7 = true;
    				investmentgoalcomponent7_changes.goal = /*assessment*/ ctx[0].wealthBuilding.paymentYearly;
    				add_flush_callback(() => updating_goal_7 = false);
    			}

    			investmentgoalcomponent7.$set(investmentgoalcomponent7_changes);
    			if ((!current || dirty & /*$l*/ 2) && t17_value !== (t17_value = /*$l*/ ctx[1].needsAssessment.subtitles.experiences + "")) set_data_dev(t17, t17_value);

    			if (dirty & /*assessment*/ 1) {
    				each_value = /*assessment*/ ctx[0].experiences;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div2, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if ((!current || dirty & /*$l*/ 2) && t20_value !== (t20_value = /*$l*/ ctx[1].needsAssessment.wealthBuilding.riskTolerance + "")) set_data_dev(t20, t20_value);
    			const formfield3_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield3_changes.$$scope = { dirty, ctx };
    			}

    			formfield3.$set(formfield3_changes);
    			const formfield4_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield4_changes.$$scope = { dirty, ctx };
    			}

    			formfield4.$set(formfield4_changes);
    			const formfield5_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield5_changes.$$scope = { dirty, ctx };
    			}

    			formfield5.$set(formfield5_changes);
    			const formfield6_changes = {};

    			if (dirty & /*$$scope, $l, assessment*/ 1048579) {
    				formfield6_changes.$$scope = { dirty, ctx };
    			}

    			formfield6.$set(formfield6_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(investmentgoalcomponent0.$$.fragment, local);
    			transition_in(investmentgoalcomponent1.$$.fragment, local);
    			transition_in(investmentgoalcomponent2.$$.fragment, local);
    			transition_in(investmentgoalcomponent3.$$.fragment, local);
    			transition_in(investmentgoalcomponent4.$$.fragment, local);
    			transition_in(formfield0.$$.fragment, local);
    			transition_in(formfield1.$$.fragment, local);
    			transition_in(formfield2.$$.fragment, local);
    			transition_in(investmentgoalcomponent5.$$.fragment, local);
    			transition_in(investmentgoalcomponent6.$$.fragment, local);
    			transition_in(investmentgoalcomponent7.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(formfield3.$$.fragment, local);
    			transition_in(formfield4.$$.fragment, local);
    			transition_in(formfield5.$$.fragment, local);
    			transition_in(formfield6.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(investmentgoalcomponent0.$$.fragment, local);
    			transition_out(investmentgoalcomponent1.$$.fragment, local);
    			transition_out(investmentgoalcomponent2.$$.fragment, local);
    			transition_out(investmentgoalcomponent3.$$.fragment, local);
    			transition_out(investmentgoalcomponent4.$$.fragment, local);
    			transition_out(formfield0.$$.fragment, local);
    			transition_out(formfield1.$$.fragment, local);
    			transition_out(formfield2.$$.fragment, local);
    			transition_out(investmentgoalcomponent5.$$.fragment, local);
    			transition_out(investmentgoalcomponent6.$$.fragment, local);
    			transition_out(investmentgoalcomponent7.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(formfield3.$$.fragment, local);
    			transition_out(formfield4.$$.fragment, local);
    			transition_out(formfield5.$$.fragment, local);
    			transition_out(formfield6.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div0);
    			destroy_component(investmentgoalcomponent0);
    			destroy_component(investmentgoalcomponent1);
    			destroy_component(investmentgoalcomponent2);
    			destroy_component(investmentgoalcomponent3);
    			destroy_component(investmentgoalcomponent4);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t8);
    			destroy_component(formfield0, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(formfield1, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(formfield2, detaching);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div1);
    			destroy_component(investmentgoalcomponent5);
    			destroy_component(investmentgoalcomponent6);
    			destroy_component(investmentgoalcomponent7);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(h33);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(h34);
    			if (detaching) detach_dev(t21);
    			destroy_component(formfield3, detaching);
    			if (detaching) detach_dev(t22);
    			destroy_component(formfield4, detaching);
    			if (detaching) detach_dev(t23);
    			destroy_component(formfield5, detaching);
    			if (detaching) detach_dev(t24);
    			destroy_component(formfield6, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(1, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WealthBuilding', slots, []);
    	let { assessment } = $$props;
    	const writable_props = ['assessment'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<WealthBuilding> was created with unknown prop '${key}'`);
    	});

    	function investmentgoalcomponent0_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.retirementProvision, value)) {
    			assessment.wealthBuilding.retirementProvision = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent1_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.saveBig, value)) {
    			assessment.wealthBuilding.saveBig = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent2_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.saveEducation, value)) {
    			assessment.wealthBuilding.saveEducation = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent3_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.otherInvestmentGoal, value)) {
    			assessment.wealthBuilding.otherInvestmentGoal = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent4_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.alreadyInvested, value)) {
    			assessment.wealthBuilding.alreadyInvested = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.plannedInvestmentPeriod, value)) {
    			assessment.wealthBuilding.plannedInvestmentPeriod = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding_1(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.plannedInvestmentPeriod, value)) {
    			assessment.wealthBuilding.plannedInvestmentPeriod = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding_2(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.plannedInvestmentPeriod, value)) {
    			assessment.wealthBuilding.plannedInvestmentPeriod = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent5_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.paymentOnce, value)) {
    			assessment.wealthBuilding.paymentOnce = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent6_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.paymentMonthly, value)) {
    			assessment.wealthBuilding.paymentMonthly = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function investmentgoalcomponent7_goal_binding(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.paymentYearly, value)) {
    			assessment.wealthBuilding.paymentYearly = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding_3(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.riskLevel, value)) {
    			assessment.wealthBuilding.riskLevel = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding_4(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.riskLevel, value)) {
    			assessment.wealthBuilding.riskLevel = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding_5(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.riskLevel, value)) {
    			assessment.wealthBuilding.riskLevel = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function radio_group_binding_6(value) {
    		if ($$self.$$.not_equal(assessment.wealthBuilding.riskLevel, value)) {
    			assessment.wealthBuilding.riskLevel = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    	};

    	$$self.$capture_state = () => ({
    		l,
    		FormField,
    		Radio,
    		InvestmentGoalComponent,
    		ExperienceComponent,
    		assessment,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		assessment,
    		$l,
    		investmentgoalcomponent0_goal_binding,
    		investmentgoalcomponent1_goal_binding,
    		investmentgoalcomponent2_goal_binding,
    		investmentgoalcomponent3_goal_binding,
    		investmentgoalcomponent4_goal_binding,
    		radio_group_binding,
    		radio_group_binding_1,
    		radio_group_binding_2,
    		investmentgoalcomponent5_goal_binding,
    		investmentgoalcomponent6_goal_binding,
    		investmentgoalcomponent7_goal_binding,
    		radio_group_binding_3,
    		radio_group_binding_4,
    		radio_group_binding_5,
    		radio_group_binding_6
    	];
    }

    class WealthBuilding extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$n, safe_not_equal, { assessment: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WealthBuilding",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*assessment*/ ctx[0] === undefined && !('assessment' in props)) {
    			console.warn("<WealthBuilding> was created without expected prop 'assessment'");
    		}
    	}

    	get assessment() {
    		throw new Error("<WealthBuilding>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set assessment(value) {
    		throw new Error("<WealthBuilding>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/NeedsAssessment.svelte generated by Svelte v3.44.3 */
    const file$g = "src/routes/NeedsAssessment.svelte";

    // (26:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.personal} labelStyle="mdc-typography--headline4">
    function create_default_slot_6$a(ctx) {
    	let personalcomponent;
    	let updating_client;
    	let current;

    	function personalcomponent_client_binding(value) {
    		/*personalcomponent_client_binding*/ ctx[5](value);
    	}

    	let personalcomponent_props = { edit: true };

    	if (/*assessment*/ ctx[0].client !== void 0) {
    		personalcomponent_props.client = /*assessment*/ ctx[0].client;
    	}

    	personalcomponent = new PersonalComponent({
    			props: personalcomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(personalcomponent, 'client', personalcomponent_client_binding));

    	const block = {
    		c: function create() {
    			create_component(personalcomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(personalcomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const personalcomponent_changes = {};

    			if (!updating_client && dirty & /*assessment*/ 1) {
    				updating_client = true;
    				personalcomponent_changes.client = /*assessment*/ ctx[0].client;
    				add_flush_callback(() => updating_client = false);
    			}

    			personalcomponent.$set(personalcomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(personalcomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(personalcomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(personalcomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$a.name,
    		type: "slot",
    		source: "(26:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.personal} labelStyle=\\\"mdc-typography--headline4\\\">",
    		ctx
    	});

    	return block;
    }

    // (30:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.insurance} labelStyle="mdc-typography--headline4">
    function create_default_slot_5$a(ctx) {
    	let baseinsurancescomponent;
    	let updating_assessment;
    	let current;

    	function baseinsurancescomponent_assessment_binding(value) {
    		/*baseinsurancescomponent_assessment_binding*/ ctx[6](value);
    	}

    	let baseinsurancescomponent_props = {};

    	if (/*assessment*/ ctx[0] !== void 0) {
    		baseinsurancescomponent_props.assessment = /*assessment*/ ctx[0];
    	}

    	baseinsurancescomponent = new BaseInsurancesComponent({
    			props: baseinsurancescomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(baseinsurancescomponent, 'assessment', baseinsurancescomponent_assessment_binding));

    	const block = {
    		c: function create() {
    			create_component(baseinsurancescomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(baseinsurancescomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const baseinsurancescomponent_changes = {};

    			if (!updating_assessment && dirty & /*assessment*/ 1) {
    				updating_assessment = true;
    				baseinsurancescomponent_changes.assessment = /*assessment*/ ctx[0];
    				add_flush_callback(() => updating_assessment = false);
    			}

    			baseinsurancescomponent.$set(baseinsurancescomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(baseinsurancescomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(baseinsurancescomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(baseinsurancescomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$a.name,
    		type: "slot",
    		source: "(30:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.insurance} labelStyle=\\\"mdc-typography--headline4\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.provision} labelStyle="mdc-typography--headline4">
    function create_default_slot_4$a(ctx) {
    	let provisionscomponent;
    	let updating_assessment;
    	let current;

    	function provisionscomponent_assessment_binding(value) {
    		/*provisionscomponent_assessment_binding*/ ctx[7](value);
    	}

    	let provisionscomponent_props = {};

    	if (/*assessment*/ ctx[0] !== void 0) {
    		provisionscomponent_props.assessment = /*assessment*/ ctx[0];
    	}

    	provisionscomponent = new ProvisionsComponent({
    			props: provisionscomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(provisionscomponent, 'assessment', provisionscomponent_assessment_binding));

    	const block = {
    		c: function create() {
    			create_component(provisionscomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(provisionscomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const provisionscomponent_changes = {};

    			if (!updating_assessment && dirty & /*assessment*/ 1) {
    				updating_assessment = true;
    				provisionscomponent_changes.assessment = /*assessment*/ ctx[0];
    				add_flush_callback(() => updating_assessment = false);
    			}

    			provisionscomponent.$set(provisionscomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(provisionscomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(provisionscomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(provisionscomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$a.name,
    		type: "slot",
    		source: "(34:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.provision} labelStyle=\\\"mdc-typography--headline4\\\">",
    		ctx
    	});

    	return block;
    }

    // (38:8) <OpenCloseToggle label={$l.needsAssessment.provisions.wealthBuilding} labelStyle="mdc-typography--headline4">
    function create_default_slot_3$c(ctx) {
    	let wealthbuilding;
    	let updating_assessment;
    	let current;

    	function wealthbuilding_assessment_binding(value) {
    		/*wealthbuilding_assessment_binding*/ ctx[8](value);
    	}

    	let wealthbuilding_props = {};

    	if (/*assessment*/ ctx[0] !== void 0) {
    		wealthbuilding_props.assessment = /*assessment*/ ctx[0];
    	}

    	wealthbuilding = new WealthBuilding({
    			props: wealthbuilding_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(wealthbuilding, 'assessment', wealthbuilding_assessment_binding));

    	const block = {
    		c: function create() {
    			create_component(wealthbuilding.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(wealthbuilding, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const wealthbuilding_changes = {};

    			if (!updating_assessment && dirty & /*assessment*/ 1) {
    				updating_assessment = true;
    				wealthbuilding_changes.assessment = /*assessment*/ ctx[0];
    				add_flush_callback(() => updating_assessment = false);
    			}

    			wealthbuilding.$set(wealthbuilding_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(wealthbuilding.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(wealthbuilding.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(wealthbuilding, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$c.name,
    		type: "slot",
    		source: "(38:8) <OpenCloseToggle label={$l.needsAssessment.provisions.wealthBuilding} labelStyle=\\\"mdc-typography--headline4\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.legal} labelStyle="mdc-typography--headline4">
    function create_default_slot_2$c(ctx) {
    	let legalcomponent;
    	let updating_assessment;
    	let current;

    	function legalcomponent_assessment_binding(value) {
    		/*legalcomponent_assessment_binding*/ ctx[9](value);
    	}

    	let legalcomponent_props = {};

    	if (/*assessment*/ ctx[0] !== void 0) {
    		legalcomponent_props.assessment = /*assessment*/ ctx[0];
    	}

    	legalcomponent = new LegalComponent({
    			props: legalcomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(legalcomponent, 'assessment', legalcomponent_assessment_binding));

    	const block = {
    		c: function create() {
    			create_component(legalcomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(legalcomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const legalcomponent_changes = {};

    			if (!updating_assessment && dirty & /*assessment*/ 1) {
    				updating_assessment = true;
    				legalcomponent_changes.assessment = /*assessment*/ ctx[0];
    				add_flush_callback(() => updating_assessment = false);
    			}

    			legalcomponent.$set(legalcomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(legalcomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(legalcomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(legalcomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$c.name,
    		type: "slot",
    		source: "(41:8) <OpenCloseToggle label={$l.needsAssessment.subtitles.legal} labelStyle=\\\"mdc-typography--headline4\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:12) <Label>
    function create_default_slot_1$d(ctx) {
    	let t_value = /*$l*/ ctx[3].needsAssessment.finishButton + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 8 && t_value !== (t_value = /*$l*/ ctx[3].needsAssessment.finishButton + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$d.name,
    		type: "slot",
    		source: "(49:12) <Label>",
    		ctx
    	});

    	return block;
    }

    // (48:8) <Button on:click={finish} variant="raised">
    function create_default_slot$f(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_1$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, $l*/ 8200) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$f.name,
    		type: "slot",
    		source: "(48:8) <Button on:click={finish} variant=\\\"raised\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div;
    	let h1;
    	let t0_value = /*$l*/ ctx[3].needsAssessment.title + "";
    	let t0;
    	let t1;
    	let openclosetoggle0;
    	let t2;
    	let openclosetoggle1;
    	let t3;
    	let openclosetoggle2;
    	let t4;
    	let openclosetoggle3;
    	let t5;
    	let openclosetoggle4;
    	let t6;
    	let stylizedcheckbox;
    	let updating_value;
    	let t7;
    	let button;
    	let t8;
    	let print_1;
    	let updating_d;
    	let current;

    	openclosetoggle0 = new OpenCloseToggle({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.subtitles.personal,
    				labelStyle: "mdc-typography--headline4",
    				$$slots: { default: [create_default_slot_6$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	openclosetoggle1 = new OpenCloseToggle({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.subtitles.insurance,
    				labelStyle: "mdc-typography--headline4",
    				$$slots: { default: [create_default_slot_5$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	openclosetoggle2 = new OpenCloseToggle({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.subtitles.provision,
    				labelStyle: "mdc-typography--headline4",
    				$$slots: { default: [create_default_slot_4$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	openclosetoggle3 = new OpenCloseToggle({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.provisions.wealthBuilding,
    				labelStyle: "mdc-typography--headline4",
    				$$slots: { default: [create_default_slot_3$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	openclosetoggle4 = new OpenCloseToggle({
    			props: {
    				label: /*$l*/ ctx[3].needsAssessment.subtitles.legal,
    				labelStyle: "mdc-typography--headline4",
    				$$slots: { default: [create_default_slot_2$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[10](value);
    	}

    	let stylizedcheckbox_props = {
    		label: /*$l*/ ctx[3].needsAssessment.saveClient
    	};

    	if (/*saveNewClient*/ ctx[2] !== void 0) {
    		stylizedcheckbox_props.value = /*saveNewClient*/ ctx[2];
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	button = new Button_1({
    			props: {
    				variant: "raised",
    				$$slots: { default: [create_default_slot$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*finish*/ ctx[4]);

    	function print_1_d_binding(value) {
    		/*print_1_d_binding*/ ctx[12](value);
    	}

    	let print_1_props = {};

    	if (/*assessment*/ ctx[0] !== void 0) {
    		print_1_props.d = /*assessment*/ ctx[0];
    	}

    	print_1 = new Print({ props: print_1_props, $$inline: true });
    	/*print_1_binding*/ ctx[11](print_1);
    	binding_callbacks.push(() => bind(print_1, 'd', print_1_d_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(openclosetoggle0.$$.fragment);
    			t2 = space();
    			create_component(openclosetoggle1.$$.fragment);
    			t3 = space();
    			create_component(openclosetoggle2.$$.fragment);
    			t4 = space();
    			create_component(openclosetoggle3.$$.fragment);
    			t5 = space();
    			create_component(openclosetoggle4.$$.fragment);
    			t6 = space();
    			create_component(stylizedcheckbox.$$.fragment);
    			t7 = space();
    			create_component(button.$$.fragment);
    			t8 = space();
    			create_component(print_1.$$.fragment);
    			attr_dev(h1, "class", "mdc-typography--headline2");
    			add_location(h1, file$g, 24, 8, 1200);
    			attr_dev(div, "class", "form-container svelte-flj6o6");
    			add_location(div, file$g, 23, 0, 1163);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(h1, t0);
    			append_dev(div, t1);
    			mount_component(openclosetoggle0, div, null);
    			append_dev(div, t2);
    			mount_component(openclosetoggle1, div, null);
    			append_dev(div, t3);
    			mount_component(openclosetoggle2, div, null);
    			append_dev(div, t4);
    			mount_component(openclosetoggle3, div, null);
    			append_dev(div, t5);
    			mount_component(openclosetoggle4, div, null);
    			append_dev(div, t6);
    			mount_component(stylizedcheckbox, div, null);
    			append_dev(div, t7);
    			mount_component(button, div, null);
    			append_dev(div, t8);
    			mount_component(print_1, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$l*/ 8) && t0_value !== (t0_value = /*$l*/ ctx[3].needsAssessment.title + "")) set_data_dev(t0, t0_value);
    			const openclosetoggle0_changes = {};
    			if (dirty & /*$l*/ 8) openclosetoggle0_changes.label = /*$l*/ ctx[3].needsAssessment.subtitles.personal;

    			if (dirty & /*$$scope, assessment*/ 8193) {
    				openclosetoggle0_changes.$$scope = { dirty, ctx };
    			}

    			openclosetoggle0.$set(openclosetoggle0_changes);
    			const openclosetoggle1_changes = {};
    			if (dirty & /*$l*/ 8) openclosetoggle1_changes.label = /*$l*/ ctx[3].needsAssessment.subtitles.insurance;

    			if (dirty & /*$$scope, assessment*/ 8193) {
    				openclosetoggle1_changes.$$scope = { dirty, ctx };
    			}

    			openclosetoggle1.$set(openclosetoggle1_changes);
    			const openclosetoggle2_changes = {};
    			if (dirty & /*$l*/ 8) openclosetoggle2_changes.label = /*$l*/ ctx[3].needsAssessment.subtitles.provision;

    			if (dirty & /*$$scope, assessment*/ 8193) {
    				openclosetoggle2_changes.$$scope = { dirty, ctx };
    			}

    			openclosetoggle2.$set(openclosetoggle2_changes);
    			const openclosetoggle3_changes = {};
    			if (dirty & /*$l*/ 8) openclosetoggle3_changes.label = /*$l*/ ctx[3].needsAssessment.provisions.wealthBuilding;

    			if (dirty & /*$$scope, assessment*/ 8193) {
    				openclosetoggle3_changes.$$scope = { dirty, ctx };
    			}

    			openclosetoggle3.$set(openclosetoggle3_changes);
    			const openclosetoggle4_changes = {};
    			if (dirty & /*$l*/ 8) openclosetoggle4_changes.label = /*$l*/ ctx[3].needsAssessment.subtitles.legal;

    			if (dirty & /*$$scope, assessment*/ 8193) {
    				openclosetoggle4_changes.$$scope = { dirty, ctx };
    			}

    			openclosetoggle4.$set(openclosetoggle4_changes);
    			const stylizedcheckbox_changes = {};
    			if (dirty & /*$l*/ 8) stylizedcheckbox_changes.label = /*$l*/ ctx[3].needsAssessment.saveClient;

    			if (!updating_value && dirty & /*saveNewClient*/ 4) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*saveNewClient*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    			const button_changes = {};

    			if (dirty & /*$$scope, $l*/ 8200) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    			const print_1_changes = {};

    			if (!updating_d && dirty & /*assessment*/ 1) {
    				updating_d = true;
    				print_1_changes.d = /*assessment*/ ctx[0];
    				add_flush_callback(() => updating_d = false);
    			}

    			print_1.$set(print_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(openclosetoggle0.$$.fragment, local);
    			transition_in(openclosetoggle1.$$.fragment, local);
    			transition_in(openclosetoggle2.$$.fragment, local);
    			transition_in(openclosetoggle3.$$.fragment, local);
    			transition_in(openclosetoggle4.$$.fragment, local);
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			transition_in(print_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(openclosetoggle0.$$.fragment, local);
    			transition_out(openclosetoggle1.$$.fragment, local);
    			transition_out(openclosetoggle2.$$.fragment, local);
    			transition_out(openclosetoggle3.$$.fragment, local);
    			transition_out(openclosetoggle4.$$.fragment, local);
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			transition_out(print_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(openclosetoggle0);
    			destroy_component(openclosetoggle1);
    			destroy_component(openclosetoggle2);
    			destroy_component(openclosetoggle3);
    			destroy_component(openclosetoggle4);
    			destroy_component(stylizedcheckbox);
    			destroy_component(button);
    			/*print_1_binding*/ ctx[11](null);
    			destroy_component(print_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(3, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NeedsAssessment', slots, []);
    	let assessment = createNeedsAssessment();
    	let print;
    	let saveNewClient = false;

    	const finish = () => {
    		if (saveNewClient) {
    			ClientService.add(assessment.client).then(_ => snackbar.set("Kunde angelegt"));
    		}

    		print.print();
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NeedsAssessment> was created with unknown prop '${key}'`);
    	});

    	function personalcomponent_client_binding(value) {
    		if ($$self.$$.not_equal(assessment.client, value)) {
    			assessment.client = value;
    			$$invalidate(0, assessment);
    		}
    	}

    	function baseinsurancescomponent_assessment_binding(value) {
    		assessment = value;
    		$$invalidate(0, assessment);
    	}

    	function provisionscomponent_assessment_binding(value) {
    		assessment = value;
    		$$invalidate(0, assessment);
    	}

    	function wealthbuilding_assessment_binding(value) {
    		assessment = value;
    		$$invalidate(0, assessment);
    	}

    	function legalcomponent_assessment_binding(value) {
    		assessment = value;
    		$$invalidate(0, assessment);
    	}

    	function stylizedcheckbox_value_binding(value) {
    		saveNewClient = value;
    		$$invalidate(2, saveNewClient);
    	}

    	function print_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			print = $$value;
    			$$invalidate(1, print);
    		});
    	}

    	function print_1_d_binding(value) {
    		assessment = value;
    		$$invalidate(0, assessment);
    	}

    	$$self.$capture_state = () => ({
    		l,
    		snackbar,
    		Button: Button_1,
    		Label,
    		PersonalComponent,
    		BaseInsurancesComponent,
    		ProvisionsComponent,
    		OpenCloseToggle,
    		createNeedsAssessment,
    		LegalComponent,
    		Print,
    		WealthBuilding,
    		StylizedCheckbox,
    		ClientService,
    		assessment,
    		print,
    		saveNewClient,
    		finish,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('assessment' in $$props) $$invalidate(0, assessment = $$props.assessment);
    		if ('print' in $$props) $$invalidate(1, print = $$props.print);
    		if ('saveNewClient' in $$props) $$invalidate(2, saveNewClient = $$props.saveNewClient);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		assessment,
    		print,
    		saveNewClient,
    		$l,
    		finish,
    		personalcomponent_client_binding,
    		baseinsurancescomponent_assessment_binding,
    		provisionscomponent_assessment_binding,
    		wealthbuilding_assessment_binding,
    		legalcomponent_assessment_binding,
    		stylizedcheckbox_value_binding,
    		print_1_binding,
    		print_1_d_binding
    	];
    }

    class NeedsAssessment extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NeedsAssessment",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* src/routes/PartnerServiceTypes.svelte generated by Svelte v3.44.3 */
    const file$f = "src/routes/PartnerServiceTypes.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (28:6) <Icon class="material-icons">
    function create_default_slot_3$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$b.name,
    		type: "slot",
    		source: "(28:6) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (27:4) <Button on:click={() => remove(item)}>
    function create_default_slot_2$b(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_3$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$b.name,
    		type: "slot",
    		source: "(27:4) <Button on:click={() => remove(item)}>",
    		ctx
    	});

    	return block;
    }

    // (25:2) {#each items as item}
    function create_each_block$7(ctx) {
    	let div1;
    	let button;
    	let t0;
    	let div0;
    	let t1_value = /*item*/ ctx[8].service + "";
    	let t1;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*item*/ ctx[8]);
    	}

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_2$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(button.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			t1 = text(t1_value);
    			attr_dev(div0, "class", "label svelte-h8pmub");
    			add_location(div0, file$f, 29, 4, 791);
    			attr_dev(div1, "class", "container svelte-h8pmub");
    			add_location(div1, file$f, 25, 2, 658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(button, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    			if ((!current || dirty & /*items*/ 2) && t1_value !== (t1_value = /*item*/ ctx[8].service + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(25:2) {#each items as item}",
    		ctx
    	});

    	return block;
    }

    // (36:6) <Icon class="material-icons">
    function create_default_slot_1$c(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$c.name,
    		type: "slot",
    		source: "(36:6) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (35:4) <Button style="align-self: center;" on:click={() => add()}>
    function create_default_slot$e(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_1$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$e.name,
    		type: "slot",
    		source: "(35:4) <Button style=\\\"align-self: center;\\\" on:click={() => add()}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let button;
    	let t1;
    	let textfield;
    	let updating_value;
    	let current;
    	let each_value = /*items*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	button = new Button_1({
    			props: {
    				style: "align-self: center;",
    				$$slots: { default: [create_default_slot$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler_1*/ ctx[5]);

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[6](value);
    	}

    	let textfield_props = {
    		label: "New Service Type",
    		input$emptyValueUndefined: true,
    		input$emptyValueNull: true,
    		style: "width: 100%;"
    	};

    	if (/*newService*/ ctx[0] !== void 0) {
    		textfield_props.value = /*newService*/ ctx[0];
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div0 = element("div");
    			create_component(button.$$.fragment);
    			t1 = space();
    			create_component(textfield.$$.fragment);
    			attr_dev(div0, "class", "container input svelte-h8pmub");
    			add_location(div0, file$f, 33, 2, 853);
    			attr_dev(div1, "class", "content svelte-h8pmub");
    			add_location(div1, file$f, 23, 0, 610);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(button, div0, null);
    			append_dev(div0, t1);
    			mount_component(textfield, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*items, remove*/ 6) {
    				each_value = /*items*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, t0);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const button_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    			const textfield_changes = {};

    			if (!updating_value && dirty & /*newService*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*newService*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(button.$$.fragment, local);
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(button.$$.fragment, local);
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			destroy_component(button);
    			destroy_component(textfield);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PartnerServiceTypes', slots, []);
    	let newService = '';
    	let items = [];

    	function list() {
    		PartnerServiceTypeService.list().then(response => $$invalidate(1, items = response));
    	}

    	list();

    	function remove(item) {
    		PartnerServiceTypeService.delete(item.id).then(_ => {
    			$$invalidate(1, items = items.filter(item => item.id == item.id));
    			list();
    		});
    	}

    	function add() {
    		PartnerServiceTypeService.add({ service: newService }).then(_ => {
    			$$invalidate(0, newService = '');
    			list();
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PartnerServiceTypes> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => remove(item);
    	const click_handler_1 = () => add();

    	function textfield_value_binding(value) {
    		newService = value;
    		$$invalidate(0, newService);
    	}

    	$$self.$capture_state = () => ({
    		Button: Button_1,
    		Icon: Icon$1,
    		Textfield,
    		PartnerServiceTypeService,
    		newService,
    		items,
    		list,
    		remove,
    		add
    	});

    	$$self.$inject_state = $$props => {
    		if ('newService' in $$props) $$invalidate(0, newService = $$props.newService);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		newService,
    		items,
    		remove,
    		add,
    		click_handler,
    		click_handler_1,
    		textfield_value_binding
    	];
    }

    class PartnerServiceTypes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PartnerServiceTypes",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* src/components/FloatingSettingsButton.svelte generated by Svelte v3.44.3 */
    const file$e = "src/components/FloatingSettingsButton.svelte";

    // (11:2) <IconButton color="primary" class="material-icons" on:click={doDispatch}>
    function create_default_slot$d(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*icon*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*icon*/ 1) set_data_dev(t, /*icon*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$d.name,
    		type: "slot",
    		source: "(11:2) <IconButton color=\\\"primary\\\" class=\\\"material-icons\\\" on:click={doDispatch}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div;
    	let iconbutton;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				color: "primary",
    				class: "material-icons",
    				$$slots: { default: [create_default_slot$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton.$on("click", /*doDispatch*/ ctx[1]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(iconbutton.$$.fragment);
    			attr_dev(div, "class", "float svelte-1ksx0zw");
    			add_location(div, file$e, 9, 0, 242);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(iconbutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope, icon*/ 9) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(iconbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FloatingSettingsButton', slots, []);
    	let { icon = 'settings' } = $$props;
    	const dispatch = createEventDispatcher();

    	function doDispatch() {
    		dispatch('click');
    	}

    	const writable_props = ['icon'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FloatingSettingsButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		IconButton,
    		icon,
    		dispatch,
    		doDispatch
    	});

    	$$self.$inject_state = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [icon, doDispatch];
    }

    class FloatingSettingsButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$k, safe_not_equal, { icon: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FloatingSettingsButton",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get icon() {
    		throw new Error("<FloatingSettingsButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<FloatingSettingsButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/Partners.svelte generated by Svelte v3.44.3 */

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    // (20:0) <AdminGuard>
    function create_default_slot_13$6(ctx) {
    	let floatingactionbutton;
    	let t;
    	let floatingsettingsbutton;
    	let current;
    	floatingactionbutton = new FloatingActionButton({ $$inline: true });
    	floatingactionbutton.$on("click", /*click_handler*/ ctx[7]);
    	floatingsettingsbutton = new FloatingSettingsButton({ $$inline: true });
    	floatingsettingsbutton.$on("click", /*click_handler_1*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(floatingactionbutton.$$.fragment);
    			t = space();
    			create_component(floatingsettingsbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatingactionbutton, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(floatingsettingsbutton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatingactionbutton.$$.fragment, local);
    			transition_in(floatingsettingsbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatingactionbutton.$$.fragment, local);
    			transition_out(floatingsettingsbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(floatingactionbutton, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(floatingsettingsbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$6.name,
    		type: "slot",
    		source: "(20:0) <AdminGuard>",
    		ctx
    	});

    	return block;
    }

    // (36:8) <Label>
    function create_default_slot_12$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$6.name,
    		type: "slot",
    		source: "(36:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (37:8) <IconButton class="material-icons">
    function create_default_slot_11$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$6.name,
    		type: "slot",
    		source: "(37:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (35:6) <Cell columnId="name" style="width: 100%;">
    function create_default_slot_10$6(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_12$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_11$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$6.name,
    		type: "slot",
    		source: "(35:6) <Cell columnId=\\\"name\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (40:8) <Label>
    function create_default_slot_9$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Services");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$6.name,
    		type: "slot",
    		source: "(40:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (41:8) <IconButton class="material-icons">
    function create_default_slot_8$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$8.name,
    		type: "slot",
    		source: "(41:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (39:6) <Cell columnId="services">
    function create_default_slot_7$9(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_9$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_8$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$9.name,
    		type: "slot",
    		source: "(39:6) <Cell columnId=\\\"services\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:4) <Row>
    function create_default_slot_6$9(ctx) {
    	let cell0;
    	let t;
    	let cell1;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				columnId: "name",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_10$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				columnId: "services",
    				$$slots: { default: [create_default_slot_7$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t = space();
    			create_component(cell1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(cell1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(cell1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$9.name,
    		type: "slot",
    		source: "(34:4) <Row>",
    		ctx
    	});

    	return block;
    }

    // (33:2) <Head>
    function create_default_slot_5$9(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_6$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$9.name,
    		type: "slot",
    		source: "(33:2) <Head>",
    		ctx
    	});

    	return block;
    }

    // (48:8) <Cell>
    function create_default_slot_4$9(ctx) {
    	let t_value = /*item*/ ctx[13].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[13].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$9.name,
    		type: "slot",
    		source: "(48:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (49:8) <Cell>
    function create_default_slot_3$a(ctx) {
    	let t_value = /*item*/ ctx[13].services.map(func$2).join(', ') + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 8 && t_value !== (t_value = /*item*/ ctx[13].services.map(func$2).join(', ') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$a.name,
    		type: "slot",
    		source: "(49:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (47:6) <Row on:click={() => navigate('partner/'+item.id)}>
    function create_default_slot_2$a(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_4$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_3$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, filtered*/ 65544) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, filtered*/ 65544) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$a.name,
    		type: "slot",
    		source: "(47:6) <Row on:click={() => navigate('partner/'+item.id)}>",
    		ctx
    	});

    	return block;
    }

    // (46:4) {#each filtered as item (item.name)}
    function create_each_block$6(key_1, ctx) {
    	let first;
    	let row;
    	let current;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[9](/*item*/ ctx[13]);
    	}

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_2$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row.$on("click", click_handler_2);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(row.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const row_changes = {};

    			if (dirty & /*$$scope, filtered*/ 65544) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(46:4) {#each filtered as item (item.name)}",
    		ctx
    	});

    	return block;
    }

    // (45:2) <Body>
    function create_default_slot_1$b(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[3];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[13].name;
    	validate_each_keys(ctx, each_value, get_each_context$6, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$6(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*navigate, filtered*/ 8) {
    				each_value = /*filtered*/ ctx[3];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$6, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$6, each_1_anchor, get_each_context$6);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$b.name,
    		type: "slot",
    		source: "(45:2) <Body>",
    		ctx
    	});

    	return block;
    }

    // (25:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={() => sortFunction()}   table$aria-label="Partner list"   style="width: 100%;" >
    function create_default_slot$c(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_5$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_1$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered*/ 65544) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$c.name,
    		type: "slot",
    		source: "(25:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={() => sortFunction()}   table$aria-label=\\\"Partner list\\\"   style=\\\"width: 100%;\\\" >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let searchbar;
    	let updating_value;
    	let t0;
    	let adminguard;
    	let t1;
    	let datatable;
    	let updating_sort;
    	let updating_sortDirection;
    	let current;

    	function searchbar_value_binding(value) {
    		/*searchbar_value_binding*/ ctx[6](value);
    	}

    	let searchbar_props = {};

    	if (/*filterValue*/ ctx[0] !== void 0) {
    		searchbar_props.value = /*filterValue*/ ctx[0];
    	}

    	searchbar = new Searchbar({ props: searchbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(searchbar, 'value', searchbar_value_binding));

    	adminguard = new AdminGuard({
    			props: {
    				$$slots: { default: [create_default_slot_13$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function datatable_sort_binding(value) {
    		/*datatable_sort_binding*/ ctx[10](value);
    	}

    	function datatable_sortDirection_binding(value) {
    		/*datatable_sortDirection_binding*/ ctx[11](value);
    	}

    	let datatable_props = {
    		sortable: true,
    		"table$aria-label": "Partner list",
    		style: "width: 100%;",
    		$$slots: { default: [create_default_slot$c] },
    		$$scope: { ctx }
    	};

    	if (/*sort*/ ctx[1] !== void 0) {
    		datatable_props.sort = /*sort*/ ctx[1];
    	}

    	if (/*sortDirection*/ ctx[2] !== void 0) {
    		datatable_props.sortDirection = /*sortDirection*/ ctx[2];
    	}

    	datatable = new DataTable({ props: datatable_props, $$inline: true });
    	binding_callbacks.push(() => bind(datatable, 'sort', datatable_sort_binding));
    	binding_callbacks.push(() => bind(datatable, 'sortDirection', datatable_sortDirection_binding));
    	datatable.$on("MDCDataTable:sorted", /*MDCDataTable_sorted_handler*/ ctx[12]);

    	const block = {
    		c: function create() {
    			create_component(searchbar.$$.fragment);
    			t0 = space();
    			create_component(adminguard.$$.fragment);
    			t1 = space();
    			create_component(datatable.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(adminguard, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const searchbar_changes = {};

    			if (!updating_value && dirty & /*filterValue*/ 1) {
    				updating_value = true;
    				searchbar_changes.value = /*filterValue*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			searchbar.$set(searchbar_changes);
    			const adminguard_changes = {};

    			if (dirty & /*$$scope*/ 65536) {
    				adminguard_changes.$$scope = { dirty, ctx };
    			}

    			adminguard.$set(adminguard_changes);
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered*/ 65544) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_sort && dirty & /*sort*/ 2) {
    				updating_sort = true;
    				datatable_changes.sort = /*sort*/ ctx[1];
    				add_flush_callback(() => updating_sort = false);
    			}

    			if (!updating_sortDirection && dirty & /*sortDirection*/ 4) {
    				updating_sortDirection = true;
    				datatable_changes.sortDirection = /*sortDirection*/ ctx[2];
    				add_flush_callback(() => updating_sortDirection = false);
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);
    			transition_in(adminguard.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			transition_out(adminguard.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(adminguard, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$2 = s => s.service;

    function instance$d($$self, $$props, $$invalidate) {
    	let filterValue;
    	let filtered;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Partners', slots, []);
    	var items = [];
    	PartnerService$1.list().then(data => $$invalidate(5, items = data));
    	let sort = 'name';
    	let sortDirection = 'ascending';
    	const sortFunction = () => $$invalidate(3, filtered = filtered.sort(sortFunc(sort, sortDirection)));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Partners> was created with unknown prop '${key}'`);
    	});

    	function searchbar_value_binding(value) {
    		filterValue = value;
    		$$invalidate(0, filterValue);
    	}

    	const click_handler = () => navigate("partner/new");
    	const click_handler_1 = () => navigate("partner_service_types");
    	const click_handler_2 = item => navigate('partner/' + item.id);

    	function datatable_sort_binding(value) {
    		sort = value;
    		$$invalidate(1, sort);
    	}

    	function datatable_sortDirection_binding(value) {
    		sortDirection = value;
    		$$invalidate(2, sortDirection);
    	}

    	const MDCDataTable_sorted_handler = () => sortFunction();

    	$$self.$capture_state = () => ({
    		navigate,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		IconButton,
    		PartnerService: PartnerService$1,
    		Searchbar,
    		FloatingActionButton,
    		AdminGuard,
    		sortFunc,
    		FloatingSettingsButton,
    		items,
    		sort,
    		sortDirection,
    		sortFunction,
    		filterValue,
    		filtered
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(5, items = $$props.items);
    		if ('sort' in $$props) $$invalidate(1, sort = $$props.sort);
    		if ('sortDirection' in $$props) $$invalidate(2, sortDirection = $$props.sortDirection);
    		if ('filterValue' in $$props) $$invalidate(0, filterValue = $$props.filterValue);
    		if ('filtered' in $$props) $$invalidate(3, filtered = $$props.filtered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items, filterValue*/ 33) {
    			$$invalidate(3, filtered = items.filter(s => s.name.includes(filterValue) || s.services.find(service => service.service.includes(filterValue))));
    		}
    	};

    	$$invalidate(0, filterValue = "");

    	return [
    		filterValue,
    		sort,
    		sortDirection,
    		filtered,
    		sortFunction,
    		items,
    		searchbar_value_binding,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		datatable_sort_binding,
    		datatable_sortDirection_binding,
    		MDCDataTable_sorted_handler
    	];
    }

    class Partners extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Partners",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    function isNumeric$1(value) {
        return /^\d+$/.test(value);
    }

    /* src/components/partner/PartnerContact.svelte generated by Svelte v3.44.3 */
    const file$d = "src/components/partner/PartnerContact.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[11] = list;
    	child_ctx[12] = i;
    	return child_ctx;
    }

    // (26:0) <H2>
    function create_default_slot_14$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Kontakte");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$4.name,
    		type: "slot",
    		source: "(26:0) <H2>",
    		ctx
    	});

    	return block;
    }

    // (32:10) <Cell span={12}>
    function create_default_slot_13$5(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[4](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = {
    		label: "Anmerkung",
    		edit: /*edit*/ ctx[1]
    	};

    	if (/*dto*/ ctx[10].remarks !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].remarks;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].remarks;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$5.name,
    		type: "slot",
    		source: "(32:10) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (39:10) <Cell span={6}>
    function create_default_slot_12$5(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[5](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = { label: "Name", edit: /*edit*/ ctx[1] };

    	if (/*dto*/ ctx[10].name !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].name;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].name;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$5.name,
    		type: "slot",
    		source: "(39:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (42:10) <Cell span={6}>
    function create_default_slot_11$5(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_2(value) {
    		/*labeltextfieldtoggle_value_binding_2*/ ctx[6](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = { label: "Telefon", edit: /*edit*/ ctx[1] };

    	if (/*dto*/ ctx[10].phone !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].phone;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].phone;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$5.name,
    		type: "slot",
    		source: "(42:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (49:10) <Cell span={12}>
    function create_default_slot_10$5(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_3(value) {
    		/*labeltextfieldtoggle_value_binding_3*/ ctx[7](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = { label: "E-Mail", edit: /*edit*/ ctx[1] };

    	if (/*dto*/ ctx[10].email !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].email;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_3));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].email;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$5.name,
    		type: "slot",
    		source: "(49:10) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (31:8) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot_9$5(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_13$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_12$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_11$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_10$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$5.name,
    		type: "slot",
    		source: "(31:8) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:4) <Cell span={11}       >
    function create_default_slot_8$7(ctx) {
    	let div;
    	let layoutgrid;
    	let div_transition;
    	let current;

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot_9$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(layoutgrid.$$.fragment);
    			add_location(div, file$d, 29, 7, 747);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(layoutgrid, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutgrid.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutgrid.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(layoutgrid);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$7.name,
    		type: "slot",
    		source: "(29:4) <Cell span={11}       >",
    		ctx
    	});

    	return block;
    }

    // (59:4) {#if edit}
    function create_if_block_1$5(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 1,
    				align: "middle",
    				$$slots: { default: [create_default_slot_5$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, dtos*/ 8193) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(59:4) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (63:12) <Icon class="material-icons">
    function create_default_slot_7$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$8.name,
    		type: "slot",
    		source: "(63:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (62:10) <Button on:click={() => remove(dto)}>
    function create_default_slot_6$8(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_7$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$8.name,
    		type: "slot",
    		source: "(62:10) <Button on:click={() => remove(dto)}>",
    		ctx
    	});

    	return block;
    }

    // (60:6) <Cell span={1} align="middle"         >
    function create_default_slot_5$8(ctx) {
    	let div;
    	let button;
    	let div_transition;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[8](/*dto*/ ctx[10]);
    	}

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_6$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(button.$$.fragment);
    			add_location(div, file$d, 60, 9, 1599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(button);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$8.name,
    		type: "slot",
    		source: "(60:6) <Cell span={1} align=\\\"middle\\\"         >",
    		ctx
    	});

    	return block;
    }

    // (28:2) {#each dtos as dto}
    function create_each_block$5(ctx) {
    	let cell;
    	let t;
    	let if_block_anchor;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 11,
    				$$slots: { default: [create_default_slot_8$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*edit*/ ctx[1] && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(28:2) {#each dtos as dto}",
    		ctx
    	});

    	return block;
    }

    // (69:2) {#if edit}
    function create_if_block$9(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_1$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(69:2) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (72:8) <Icon class="material-icons">
    function create_default_slot_4$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$8.name,
    		type: "slot",
    		source: "(72:8) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (73:8) <Label>
    function create_default_slot_3$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Kontakt hinzufügen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$9.name,
    		type: "slot",
    		source: "(73:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (71:6) <Button on:click={() => add()}>
    function create_default_slot_2$9(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_4$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_3$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$9.name,
    		type: "slot",
    		source: "(71:6) <Button on:click={() => add()}>",
    		ctx
    	});

    	return block;
    }

    // (70:4) <Cell span={12}>
    function create_default_slot_1$a(ctx) {
    	let button;
    	let current;

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_2$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler_1*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$a.name,
    		type: "slot",
    		source: "(70:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (27:0) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot$b(ctx) {
    	let t;
    	let if_block_anchor;
    	let current;
    	let each_value = /*dtos*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*edit*/ ctx[1] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*remove, dtos, edit*/ 7) {
    				each_value = /*dtos*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t.parentNode, t);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(27:0) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let h2;
    	let t;
    	let layoutgrid;
    	let current;

    	h2 = new H2({
    			props: {
    				$$slots: { default: [create_default_slot_14$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(h2.$$.fragment);
    			t = space();
    			create_component(layoutgrid.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(h2, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(layoutgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const h2_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				h2_changes.$$scope = { dirty, ctx };
    			}

    			h2.$set(h2_changes);
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h2.$$.fragment, local);
    			transition_in(layoutgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h2.$$.fragment, local);
    			transition_out(layoutgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(h2, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(layoutgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PartnerContact', slots, []);
    	let { dtos } = $$props;
    	let { edit = false } = $$props;

    	function remove(dto) {
    		let contacts = dtos;
    		$$invalidate(0, dtos = contacts.filter(item => item !== dto));
    	}

    	function add() {
    		let contacts = dtos;

    		let contact = {
    			email: "",
    			name: "",
    			phone: "",
    			remarks: ""
    		};

    		contacts.push(contact);
    		$$invalidate(0, dtos = contacts);
    	}

    	const writable_props = ['dtos', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PartnerContact> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value, dto) {
    		if ($$self.$$.not_equal(dto.remarks, value)) {
    			dto.remarks = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value, dto) {
    		if ($$self.$$.not_equal(dto.name, value)) {
    			dto.name = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_2(value, dto) {
    		if ($$self.$$.not_equal(dto.phone, value)) {
    			dto.phone = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_3(value, dto) {
    		if ($$self.$$.not_equal(dto.email, value)) {
    			dto.email = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	const click_handler = dto => remove(dto);
    	const click_handler_1 = () => add();

    	$$self.$$set = $$props => {
    		if ('dtos' in $$props) $$invalidate(0, dtos = $$props.dtos);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		LayoutGrid,
    		Cell,
    		Button: Button_1,
    		Label,
    		Icon: Icon$1,
    		H2,
    		LabelTextfieldToggle,
    		dtos,
    		edit,
    		remove,
    		add
    	});

    	$$self.$inject_state = $$props => {
    		if ('dtos' in $$props) $$invalidate(0, dtos = $$props.dtos);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dtos,
    		edit,
    		remove,
    		add,
    		labeltextfieldtoggle_value_binding,
    		labeltextfieldtoggle_value_binding_1,
    		labeltextfieldtoggle_value_binding_2,
    		labeltextfieldtoggle_value_binding_3,
    		click_handler,
    		click_handler_1
    	];
    }

    class PartnerContact extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$i, safe_not_equal, { dtos: 0, edit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PartnerContact",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dtos*/ ctx[0] === undefined && !('dtos' in props)) {
    			console.warn("<PartnerContact> was created without expected prop 'dtos'");
    		}
    	}

    	get dtos() {
    		throw new Error("<PartnerContact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dtos(value) {
    		throw new Error("<PartnerContact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<PartnerContact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<PartnerContact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/partner/PartnerLogin.svelte generated by Svelte v3.44.3 */
    const file$c = "src/components/partner/PartnerLogin.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[11] = list;
    	child_ctx[12] = i;
    	return child_ctx;
    }

    // (27:0) <H2>
    function create_default_slot_14$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Logins");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$3.name,
    		type: "slot",
    		source: "(27:0) <H2>",
    		ctx
    	});

    	return block;
    }

    // (33:10) <Cell span={12}>
    function create_default_slot_13$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[4](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = { label: "Link", edit: /*edit*/ ctx[1] };

    	if (/*dto*/ ctx[10].link !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].link;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].link;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$4.name,
    		type: "slot",
    		source: "(33:10) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (40:10) <Cell span={6}>
    function create_default_slot_12$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[5](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = { label: "Username", edit: /*edit*/ ctx[1] };

    	if (/*dto*/ ctx[10].username !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].username;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].username;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$4.name,
    		type: "slot",
    		source: "(40:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (43:10) <Cell span={6}>
    function create_default_slot_11$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_2(value) {
    		/*labeltextfieldtoggle_value_binding_2*/ ctx[6](value, /*dto*/ ctx[10]);
    	}

    	let labeltextfieldtoggle_props = { label: "Passwort", edit: /*edit*/ ctx[1] };

    	if (/*dto*/ ctx[10].password !== void 0) {
    		labeltextfieldtoggle_props.value = /*dto*/ ctx[10].password;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 2) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[1];

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*dto*/ ctx[10].password;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$4.name,
    		type: "slot",
    		source: "(43:10) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (50:10) {#if edit}
    function create_if_block_2$1(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_10$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, dtos*/ 8193) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(50:10) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (51:10) <Cell span={12}>
    function create_default_slot_10$4(ctx) {
    	let stylizedcheckbox;
    	let updating_value;
    	let current;

    	function stylizedcheckbox_value_binding(value) {
    		/*stylizedcheckbox_value_binding*/ ctx[7](value, /*dto*/ ctx[10]);
    	}

    	let stylizedcheckbox_props = { label: "Admin-Login" };

    	if (/*dto*/ ctx[10].adminOnly !== void 0) {
    		stylizedcheckbox_props.value = /*dto*/ ctx[10].adminOnly;
    	}

    	stylizedcheckbox = new StylizedCheckbox({
    			props: stylizedcheckbox_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(stylizedcheckbox, 'value', stylizedcheckbox_value_binding));

    	const block = {
    		c: function create() {
    			create_component(stylizedcheckbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stylizedcheckbox, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const stylizedcheckbox_changes = {};

    			if (!updating_value && dirty & /*dtos*/ 1) {
    				updating_value = true;
    				stylizedcheckbox_changes.value = /*dto*/ ctx[10].adminOnly;
    				add_flush_callback(() => updating_value = false);
    			}

    			stylizedcheckbox.$set(stylizedcheckbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedcheckbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedcheckbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stylizedcheckbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$4.name,
    		type: "slot",
    		source: "(51:10) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (32:8) <LayoutGrid style="padding-bottom: 3rem; border-radius:5px;" class="{dto.adminOnly?'admin-content':''}">
    function create_default_slot_9$4(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let if_block_anchor;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_13$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_12$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_11$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*edit*/ ctx[1] && create_if_block_2$1(ctx);

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$4.name,
    		type: "slot",
    		source: "(32:8) <LayoutGrid style=\\\"padding-bottom: 3rem; border-radius:5px;\\\" class=\\\"{dto.adminOnly?'admin-content':''}\\\">",
    		ctx
    	});

    	return block;
    }

    // (30:4) <Cell span={11}       >
    function create_default_slot_8$6(ctx) {
    	let div;
    	let layoutgrid;
    	let div_transition;
    	let current;

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem; border-radius:5px;",
    				class: /*dto*/ ctx[10].adminOnly ? 'admin-content' : '',
    				$$slots: { default: [create_default_slot_9$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(layoutgrid.$$.fragment);
    			add_location(div, file$c, 30, 7, 815);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(layoutgrid, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const layoutgrid_changes = {};
    			if (dirty & /*dtos*/ 1) layoutgrid_changes.class = /*dto*/ ctx[10].adminOnly ? 'admin-content' : '';

    			if (dirty & /*$$scope, dtos, edit*/ 8195) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutgrid.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutgrid.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(layoutgrid);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$6.name,
    		type: "slot",
    		source: "(30:4) <Cell span={11}       >",
    		ctx
    	});

    	return block;
    }

    // (58:4) {#if edit}
    function create_if_block_1$4(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 1,
    				align: "middle",
    				$$slots: { default: [create_default_slot_5$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, dtos*/ 8193) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(58:4) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (62:12) <Icon class="material-icons">
    function create_default_slot_7$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$7.name,
    		type: "slot",
    		source: "(62:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (61:10) <Button on:click={() => remove(dto)}>
    function create_default_slot_6$7(ctx) {
    	let icon;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_7$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$7.name,
    		type: "slot",
    		source: "(61:10) <Button on:click={() => remove(dto)}>",
    		ctx
    	});

    	return block;
    }

    // (59:6) <Cell span={1} align="middle"         >
    function create_default_slot_5$7(ctx) {
    	let div;
    	let button;
    	let div_transition;
    	let current;

    	function click_handler() {
    		return /*click_handler*/ ctx[8](/*dto*/ ctx[10]);
    	}

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_6$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(button.$$.fragment);
    			add_location(div, file$c, 59, 9, 1713);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(button);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$7.name,
    		type: "slot",
    		source: "(59:6) <Cell span={1} align=\\\"middle\\\"         >",
    		ctx
    	});

    	return block;
    }

    // (29:2) {#each dtos as dto}
    function create_each_block$4(ctx) {
    	let cell;
    	let t;
    	let if_block_anchor;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 11,
    				$$slots: { default: [create_default_slot_8$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*edit*/ ctx[1] && create_if_block_1$4(ctx);

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope, dtos, edit*/ 8195) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(29:2) {#each dtos as dto}",
    		ctx
    	});

    	return block;
    }

    // (68:2) {#if edit}
    function create_if_block$8(ctx) {
    	let cell;
    	let current;

    	cell = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_1$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				cell_changes.$$scope = { dirty, ctx };
    			}

    			cell.$set(cell_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(68:2) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (71:8) <Icon class="material-icons">
    function create_default_slot_4$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("add");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$7.name,
    		type: "slot",
    		source: "(71:8) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (72:8) <Label>
    function create_default_slot_3$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Kontakt hinzufügen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$8.name,
    		type: "slot",
    		source: "(72:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (70:6) <Button on:click={() => add()}>
    function create_default_slot_2$8(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_4$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_3$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$8.name,
    		type: "slot",
    		source: "(70:6) <Button on:click={() => add()}>",
    		ctx
    	});

    	return block;
    }

    // (69:4) <Cell span={12}>
    function create_default_slot_1$9(ctx) {
    	let button;
    	let current;

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_2$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler_1*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$9.name,
    		type: "slot",
    		source: "(69:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (28:0) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot$a(ctx) {
    	let t;
    	let if_block_anchor;
    	let current;
    	let each_value = /*dtos*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*edit*/ ctx[1] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*remove, dtos, edit*/ 7) {
    				each_value = /*dtos*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t.parentNode, t);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(28:0) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let h2;
    	let t;
    	let layoutgrid;
    	let current;

    	h2 = new H2({
    			props: {
    				$$slots: { default: [create_default_slot_14$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(h2.$$.fragment);
    			t = space();
    			create_component(layoutgrid.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(h2, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(layoutgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const h2_changes = {};

    			if (dirty & /*$$scope*/ 8192) {
    				h2_changes.$$scope = { dirty, ctx };
    			}

    			h2.$set(h2_changes);
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, edit, dtos*/ 8195) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h2.$$.fragment, local);
    			transition_in(layoutgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h2.$$.fragment, local);
    			transition_out(layoutgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(h2, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(layoutgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PartnerLogin', slots, []);
    	let { dtos } = $$props;
    	let { edit = false } = $$props;

    	function remove(dto) {
    		let contacts = dtos;
    		$$invalidate(0, dtos = contacts.filter(item => item !== dto));
    	}

    	function add() {
    		let contacts = dtos;

    		let contact = {
    			link: "",
    			username: "",
    			password: "",
    			adminOnly: false
    		};

    		contacts.push(contact);
    		$$invalidate(0, dtos = contacts);
    	}

    	const writable_props = ['dtos', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PartnerLogin> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value, dto) {
    		if ($$self.$$.not_equal(dto.link, value)) {
    			dto.link = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value, dto) {
    		if ($$self.$$.not_equal(dto.username, value)) {
    			dto.username = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_2(value, dto) {
    		if ($$self.$$.not_equal(dto.password, value)) {
    			dto.password = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	function stylizedcheckbox_value_binding(value, dto) {
    		if ($$self.$$.not_equal(dto.adminOnly, value)) {
    			dto.adminOnly = value;
    			$$invalidate(0, dtos);
    		}
    	}

    	const click_handler = dto => remove(dto);
    	const click_handler_1 = () => add();

    	$$self.$$set = $$props => {
    		if ('dtos' in $$props) $$invalidate(0, dtos = $$props.dtos);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		LayoutGrid,
    		Cell,
    		Button: Button_1,
    		Label,
    		Icon: Icon$1,
    		H2,
    		LabelTextfieldToggle,
    		StylizedCheckbox,
    		dtos,
    		edit,
    		remove,
    		add
    	});

    	$$self.$inject_state = $$props => {
    		if ('dtos' in $$props) $$invalidate(0, dtos = $$props.dtos);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dtos,
    		edit,
    		remove,
    		add,
    		labeltextfieldtoggle_value_binding,
    		labeltextfieldtoggle_value_binding_1,
    		labeltextfieldtoggle_value_binding_2,
    		stylizedcheckbox_value_binding,
    		click_handler,
    		click_handler_1
    	];
    }

    class PartnerLogin extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$h, safe_not_equal, { dtos: 0, edit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PartnerLogin",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dtos*/ ctx[0] === undefined && !('dtos' in props)) {
    			console.warn("<PartnerLogin> was created without expected prop 'dtos'");
    		}
    	}

    	get dtos() {
    		throw new Error("<PartnerLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dtos(value) {
    		throw new Error("<PartnerLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<PartnerLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<PartnerLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * AnimationFrame provides a user-friendly abstraction around requesting
     * and canceling animation frames.
     */
    var AnimationFrame = /** @class */ (function () {
        function AnimationFrame() {
            this.rafIDs = new Map();
        }
        /**
         * Requests an animation frame. Cancels any existing frame with the same key.
         * @param {string} key The key for this callback.
         * @param {FrameRequestCallback} callback The callback to be executed.
         */
        AnimationFrame.prototype.request = function (key, callback) {
            var _this = this;
            this.cancel(key);
            var frameID = requestAnimationFrame(function (frame) {
                _this.rafIDs.delete(key);
                // Callback must come *after* the key is deleted so that nested calls to
                // request with the same key are not deleted.
                callback(frame);
            });
            this.rafIDs.set(key, frameID);
        };
        /**
         * Cancels a queued callback with the given key.
         * @param {string} key The key for this callback.
         */
        AnimationFrame.prototype.cancel = function (key) {
            var rafID = this.rafIDs.get(key);
            if (rafID) {
                cancelAnimationFrame(rafID);
                this.rafIDs.delete(key);
            }
        };
        /**
         * Cancels all queued callback.
         */
        AnimationFrame.prototype.cancelAll = function () {
            var _this = this;
            // Need to use forEach because it's the only iteration method supported
            // by IE11. Suppress the underscore because we don't need it.
            // tslint:disable-next-line:enforce-name-casing
            this.rafIDs.forEach(function (_, key) {
                _this.cancel(key);
            });
        };
        /**
         * Returns the queue of unexecuted callback keys.
         */
        AnimationFrame.prototype.getQueue = function () {
            var queue = [];
            // Need to use forEach because it's the only iteration method supported
            // by IE11. Suppress the underscore because we don't need it.
            // tslint:disable-next-line:enforce-name-casing
            this.rafIDs.forEach(function (_, key) {
                queue.push(key);
            });
            return queue;
        };
        return AnimationFrame;
    }());

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * Priorities for the announce function.
     */
    var AnnouncerPriority;
    (function (AnnouncerPriority) {
        AnnouncerPriority["POLITE"] = "polite";
        AnnouncerPriority["ASSERTIVE"] = "assertive";
    })(AnnouncerPriority || (AnnouncerPriority = {}));
    /**
     * Data attribute added to live region element.
     */
    var DATA_MDC_DOM_ANNOUNCE = 'data-mdc-dom-announce';
    /**
     * Announces the given message with optional priority, defaulting to "polite"
     */
    function announce$1(message, options) {
        Announcer.getInstance().say(message, options);
    }
    var Announcer = /** @class */ (function () {
        // Constructor made private to ensure only the singleton is used
        function Announcer() {
            this.liveRegions = new Map();
        }
        Announcer.getInstance = function () {
            if (!Announcer.instance) {
                Announcer.instance = new Announcer();
            }
            return Announcer.instance;
        };
        Announcer.prototype.say = function (message, options) {
            var _a, _b;
            var priority = (_a = options === null || options === void 0 ? void 0 : options.priority) !== null && _a !== void 0 ? _a : AnnouncerPriority.POLITE;
            var ownerDocument = (_b = options === null || options === void 0 ? void 0 : options.ownerDocument) !== null && _b !== void 0 ? _b : document;
            var liveRegion = this.getLiveRegion(priority, ownerDocument);
            // Reset the region to pick up the message, even if the message is the
            // exact same as before.
            liveRegion.textContent = '';
            // Timeout is necessary for screen readers like NVDA and VoiceOver.
            setTimeout(function () {
                liveRegion.textContent = message;
                ownerDocument.addEventListener('click', clearLiveRegion);
            }, 1);
            function clearLiveRegion() {
                liveRegion.textContent = '';
                ownerDocument.removeEventListener('click', clearLiveRegion);
            }
        };
        Announcer.prototype.getLiveRegion = function (priority, ownerDocument) {
            var documentLiveRegions = this.liveRegions.get(ownerDocument);
            if (!documentLiveRegions) {
                documentLiveRegions = new Map();
                this.liveRegions.set(ownerDocument, documentLiveRegions);
            }
            var existingLiveRegion = documentLiveRegions.get(priority);
            if (existingLiveRegion &&
                ownerDocument.body.contains(existingLiveRegion)) {
                return existingLiveRegion;
            }
            var liveRegion = this.createLiveRegion(priority, ownerDocument);
            documentLiveRegions.set(priority, liveRegion);
            return liveRegion;
        };
        Announcer.prototype.createLiveRegion = function (priority, ownerDocument) {
            var el = ownerDocument.createElement('div');
            el.style.position = 'absolute';
            el.style.top = '-9999px';
            el.style.left = '-9999px';
            el.style.height = '1px';
            el.style.overflow = 'hidden';
            el.setAttribute('aria-atomic', 'true');
            el.setAttribute('aria-live', priority);
            el.setAttribute(DATA_MDC_DOM_ANNOUNCE, 'true');
            ownerDocument.body.appendChild(el);
            return el;
        };
        return Announcer;
    }());

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var InteractionTrigger;
    (function (InteractionTrigger) {
        InteractionTrigger[InteractionTrigger["UNSPECIFIED"] = 0] = "UNSPECIFIED";
        InteractionTrigger[InteractionTrigger["CLICK"] = 1] = "CLICK";
        InteractionTrigger[InteractionTrigger["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
        InteractionTrigger[InteractionTrigger["DELETE_KEY"] = 3] = "DELETE_KEY";
        InteractionTrigger[InteractionTrigger["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
        InteractionTrigger[InteractionTrigger["ENTER_KEY"] = 5] = "ENTER_KEY";
    })(InteractionTrigger || (InteractionTrigger = {}));
    var strings$5 = {
        ARIA_HIDDEN: 'aria-hidden',
        INTERACTION_EVENT: 'MDCChipTrailingAction:interaction',
        NAVIGATION_EVENT: 'MDCChipTrailingAction:navigation',
        TAB_INDEX: 'tabindex',
    };

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCChipTrailingActionFoundation = /** @class */ (function (_super) {
        __extends(MDCChipTrailingActionFoundation, _super);
        function MDCChipTrailingActionFoundation(adapter) {
            return _super.call(this, __assign(__assign({}, MDCChipTrailingActionFoundation.defaultAdapter), adapter)) || this;
        }
        Object.defineProperty(MDCChipTrailingActionFoundation, "strings", {
            get: function () {
                return strings$5;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChipTrailingActionFoundation, "defaultAdapter", {
            get: function () {
                return {
                    focus: function () { return undefined; },
                    getAttribute: function () { return null; },
                    setAttribute: function () { return undefined; },
                    notifyInteraction: function () { return undefined; },
                    notifyNavigation: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCChipTrailingActionFoundation.prototype.handleClick = function (evt) {
            evt.stopPropagation();
            this.adapter.notifyInteraction(InteractionTrigger.CLICK);
        };
        MDCChipTrailingActionFoundation.prototype.handleKeydown = function (evt) {
            evt.stopPropagation();
            var key = normalizeKey(evt);
            if (this.shouldNotifyInteractionFromKey(key)) {
                var trigger = this.getTriggerFromKey(key);
                this.adapter.notifyInteraction(trigger);
                return;
            }
            if (isNavigationEvent(evt)) {
                this.adapter.notifyNavigation(key);
                return;
            }
        };
        MDCChipTrailingActionFoundation.prototype.removeFocus = function () {
            this.adapter.setAttribute(strings$5.TAB_INDEX, '-1');
        };
        MDCChipTrailingActionFoundation.prototype.focus = function () {
            this.adapter.setAttribute(strings$5.TAB_INDEX, '0');
            this.adapter.focus();
        };
        MDCChipTrailingActionFoundation.prototype.isNavigable = function () {
            return this.adapter.getAttribute(strings$5.ARIA_HIDDEN) !== 'true';
        };
        MDCChipTrailingActionFoundation.prototype.shouldNotifyInteractionFromKey = function (key) {
            var isFromActionKey = key === KEY.ENTER || key === KEY.SPACEBAR;
            var isFromDeleteKey = key === KEY.BACKSPACE || key === KEY.DELETE;
            return isFromActionKey || isFromDeleteKey;
        };
        MDCChipTrailingActionFoundation.prototype.getTriggerFromKey = function (key) {
            if (key === KEY.SPACEBAR) {
                return InteractionTrigger.SPACEBAR_KEY;
            }
            if (key === KEY.ENTER) {
                return InteractionTrigger.ENTER_KEY;
            }
            if (key === KEY.DELETE) {
                return InteractionTrigger.DELETE_KEY;
            }
            if (key === KEY.BACKSPACE) {
                return InteractionTrigger.BACKSPACE_KEY;
            }
            // Default case, should never be returned
            return InteractionTrigger.UNSPECIFIED;
        };
        return MDCChipTrailingActionFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2020 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCChipTrailingAction = /** @class */ (function (_super) {
        __extends(MDCChipTrailingAction, _super);
        function MDCChipTrailingAction() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MDCChipTrailingAction.prototype, "ripple", {
            get: function () {
                return this.rippleSurface;
            },
            enumerable: false,
            configurable: true
        });
        MDCChipTrailingAction.attachTo = function (root) {
            return new MDCChipTrailingAction(root);
        };
        MDCChipTrailingAction.prototype.initialize = function (rippleFactory) {
            if (rippleFactory === void 0) { rippleFactory = function (el, foundation) {
                return new MDCRipple(el, foundation);
            }; }
            // DO NOT INLINE this variable. For backward compatibility, foundations take
            // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
            // methods, we need a separate, strongly typed adapter variable.
            var rippleAdapter = MDCRipple.createAdapter(this);
            this.rippleSurface =
                rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
        };
        MDCChipTrailingAction.prototype.initialSyncWithDOM = function () {
            var _this = this;
            this.handleClick = function (evt) {
                _this.foundation.handleClick(evt);
            };
            this.handleKeydown = function (evt) {
                _this.foundation.handleKeydown(evt);
            };
            this.listen('click', this.handleClick);
            this.listen('keydown', this.handleKeydown);
        };
        MDCChipTrailingAction.prototype.destroy = function () {
            this.rippleSurface.destroy();
            this.unlisten('click', this.handleClick);
            this.unlisten('keydown', this.handleKeydown);
            _super.prototype.destroy.call(this);
        };
        MDCChipTrailingAction.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take
            // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
            // methods, we need a separate, strongly typed adapter variable.
            var adapter = {
                focus: function () {
                    // TODO(b/157231863): Migate MDCComponent#root to HTMLElement
                    _this.root.focus();
                },
                getAttribute: function (attr) { return _this.root.getAttribute(attr); },
                notifyInteraction: function (trigger) {
                    return _this.emit(strings$5.INTERACTION_EVENT, { trigger: trigger }, true /* shouldBubble */);
                },
                notifyNavigation: function (key) {
                    _this.emit(strings$5.NAVIGATION_EVENT, { key: key }, true /* shouldBubble */);
                },
                setAttribute: function (attr, value) {
                    _this.root.setAttribute(attr, value);
                },
            };
            return new MDCChipTrailingActionFoundation(adapter);
        };
        MDCChipTrailingAction.prototype.isNavigable = function () {
            return this.foundation.isNavigable();
        };
        MDCChipTrailingAction.prototype.focus = function () {
            this.foundation.focus();
        };
        MDCChipTrailingAction.prototype.removeFocus = function () {
            this.foundation.removeFocus();
        };
        return MDCChipTrailingAction;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var Direction;
    (function (Direction) {
        Direction["LEFT"] = "left";
        Direction["RIGHT"] = "right";
    })(Direction || (Direction = {}));
    var EventSource;
    (function (EventSource) {
        EventSource["PRIMARY"] = "primary";
        EventSource["TRAILING"] = "trailing";
        EventSource["NONE"] = "none";
    })(EventSource || (EventSource = {}));
    var strings$4 = {
        ADDED_ANNOUNCEMENT_ATTRIBUTE: 'data-mdc-chip-added-announcement',
        ARIA_CHECKED: 'aria-checked',
        ARROW_DOWN_KEY: 'ArrowDown',
        ARROW_LEFT_KEY: 'ArrowLeft',
        ARROW_RIGHT_KEY: 'ArrowRight',
        ARROW_UP_KEY: 'ArrowUp',
        BACKSPACE_KEY: 'Backspace',
        CHECKMARK_SELECTOR: '.mdc-chip__checkmark',
        DELETE_KEY: 'Delete',
        END_KEY: 'End',
        ENTER_KEY: 'Enter',
        ENTRY_ANIMATION_NAME: 'mdc-chip-entry',
        HOME_KEY: 'Home',
        IE_ARROW_DOWN_KEY: 'Down',
        IE_ARROW_LEFT_KEY: 'Left',
        IE_ARROW_RIGHT_KEY: 'Right',
        IE_ARROW_UP_KEY: 'Up',
        IE_DELETE_KEY: 'Del',
        INTERACTION_EVENT: 'MDCChip:interaction',
        LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',
        NAVIGATION_EVENT: 'MDCChip:navigation',
        PRIMARY_ACTION_SELECTOR: '.mdc-chip__primary-action',
        REMOVED_ANNOUNCEMENT_ATTRIBUTE: 'data-mdc-chip-removed-announcement',
        REMOVAL_EVENT: 'MDCChip:removal',
        SELECTION_EVENT: 'MDCChip:selection',
        SPACEBAR_KEY: ' ',
        TAB_INDEX: 'tabindex',
        TRAILING_ACTION_SELECTOR: '.mdc-chip-trailing-action',
        TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',
        TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing',
    };
    var cssClasses$4 = {
        CHECKMARK: 'mdc-chip__checkmark',
        CHIP_EXIT: 'mdc-chip--exit',
        DELETABLE: 'mdc-chip--deletable',
        EDITABLE: 'mdc-chip--editable',
        EDITING: 'mdc-chip--editing',
        HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',
        LEADING_ICON: 'mdc-chip__icon--leading',
        PRIMARY_ACTION: 'mdc-chip__primary-action',
        PRIMARY_ACTION_FOCUSED: 'mdc-chip--primary-action-focused',
        SELECTED: 'mdc-chip--selected',
        TEXT: 'mdc-chip__text',
        TRAILING_ACTION: 'mdc-chip__trailing-action',
        TRAILING_ICON: 'mdc-chip__icon--trailing',
    };
    var navigationKeys = new Set();
    // IE11 has no support for new Set with iterable so we need to initialize this by hand
    navigationKeys.add(strings$4.ARROW_LEFT_KEY);
    navigationKeys.add(strings$4.ARROW_RIGHT_KEY);
    navigationKeys.add(strings$4.ARROW_DOWN_KEY);
    navigationKeys.add(strings$4.ARROW_UP_KEY);
    navigationKeys.add(strings$4.END_KEY);
    navigationKeys.add(strings$4.HOME_KEY);
    navigationKeys.add(strings$4.IE_ARROW_LEFT_KEY);
    navigationKeys.add(strings$4.IE_ARROW_RIGHT_KEY);
    navigationKeys.add(strings$4.IE_ARROW_DOWN_KEY);
    navigationKeys.add(strings$4.IE_ARROW_UP_KEY);
    var jumpChipKeys = new Set();
    // IE11 has no support for new Set with iterable so we need to initialize this by hand
    jumpChipKeys.add(strings$4.ARROW_UP_KEY);
    jumpChipKeys.add(strings$4.ARROW_DOWN_KEY);
    jumpChipKeys.add(strings$4.HOME_KEY);
    jumpChipKeys.add(strings$4.END_KEY);
    jumpChipKeys.add(strings$4.IE_ARROW_UP_KEY);
    jumpChipKeys.add(strings$4.IE_ARROW_DOWN_KEY);

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var emptyClientRect = {
        bottom: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0,
        width: 0,
    };
    var FocusBehavior;
    (function (FocusBehavior) {
        FocusBehavior[FocusBehavior["SHOULD_FOCUS"] = 0] = "SHOULD_FOCUS";
        FocusBehavior[FocusBehavior["SHOULD_NOT_FOCUS"] = 1] = "SHOULD_NOT_FOCUS";
    })(FocusBehavior || (FocusBehavior = {}));
    var MDCChipFoundation = /** @class */ (function (_super) {
        __extends(MDCChipFoundation, _super);
        function MDCChipFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation.defaultAdapter), adapter)) || this;
            /** Whether a trailing icon click should immediately trigger exit/removal of the chip. */
            _this.shouldRemoveOnTrailingIconClick = true;
            /**
             * Whether the primary action should receive focus on click. Should only be
             * set to true for clients who programmatically give focus to a different
             * element on the page when a chip is clicked (like a menu).
             */
            _this.shouldFocusPrimaryActionOnClick = true;
            return _this;
        }
        Object.defineProperty(MDCChipFoundation, "strings", {
            get: function () {
                return strings$4;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChipFoundation, "cssClasses", {
            get: function () {
                return cssClasses$4;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChipFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    addClassToLeadingIcon: function () { return undefined; },
                    eventTargetHasClass: function () { return false; },
                    focusPrimaryAction: function () { return undefined; },
                    focusTrailingAction: function () { return undefined; },
                    getAttribute: function () { return null; },
                    getCheckmarkBoundingClientRect: function () { return emptyClientRect; },
                    getComputedStyleValue: function () { return ''; },
                    getRootBoundingClientRect: function () { return emptyClientRect; },
                    hasClass: function () { return false; },
                    hasLeadingIcon: function () { return false; },
                    isRTL: function () { return false; },
                    isTrailingActionNavigable: function () { return false; },
                    notifyEditFinish: function () { return undefined; },
                    notifyEditStart: function () { return undefined; },
                    notifyInteraction: function () { return undefined; },
                    notifyNavigation: function () { return undefined; },
                    notifyRemoval: function () { return undefined; },
                    notifySelection: function () { return undefined; },
                    notifyTrailingIconInteraction: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    removeClassFromLeadingIcon: function () { return undefined; },
                    removeTrailingActionFocus: function () { return undefined; },
                    setPrimaryActionAttr: function () { return undefined; },
                    setStyleProperty: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCChipFoundation.prototype.isSelected = function () {
            return this.adapter.hasClass(cssClasses$4.SELECTED);
        };
        MDCChipFoundation.prototype.isEditable = function () {
            return this.adapter.hasClass(cssClasses$4.EDITABLE);
        };
        MDCChipFoundation.prototype.isEditing = function () {
            return this.adapter.hasClass(cssClasses$4.EDITING);
        };
        MDCChipFoundation.prototype.setSelected = function (selected) {
            this.setSelectedImpl(selected);
            this.notifySelection(selected);
        };
        MDCChipFoundation.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
            this.setSelectedImpl(selected);
            if (shouldNotifyClients) {
                this.notifyIgnoredSelection(selected);
            }
        };
        MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {
            return this.shouldRemoveOnTrailingIconClick;
        };
        MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {
            this.shouldRemoveOnTrailingIconClick = shouldRemove;
        };
        MDCChipFoundation.prototype.setShouldFocusPrimaryActionOnClick = function (shouldFocus) {
            this.shouldFocusPrimaryActionOnClick = shouldFocus;
        };
        MDCChipFoundation.prototype.getDimensions = function () {
            var _this = this;
            var getRootRect = function () { return _this.adapter.getRootBoundingClientRect(); };
            var getCheckmarkRect = function () {
                return _this.adapter.getCheckmarkBoundingClientRect();
            };
            // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current
            // size of the checkmark.
            if (!this.adapter.hasLeadingIcon()) {
                var checkmarkRect = getCheckmarkRect();
                if (checkmarkRect) {
                    var rootRect = getRootRect();
                    // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.
                    // However, the checkbox is initially hidden by setting the width to 0.
                    // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)
                    // when adding it to the root client rect's width.
                    return {
                        bottom: rootRect.bottom,
                        height: rootRect.height,
                        left: rootRect.left,
                        right: rootRect.right,
                        top: rootRect.top,
                        width: rootRect.width + checkmarkRect.height,
                    };
                }
            }
            return getRootRect();
        };
        /**
         * Begins the exit animation which leads to removal of the chip.
         */
        MDCChipFoundation.prototype.beginExit = function () {
            this.adapter.addClass(cssClasses$4.CHIP_EXIT);
        };
        MDCChipFoundation.prototype.handleClick = function () {
            this.adapter.notifyInteraction();
            this.setPrimaryActionFocusable(this.getFocusBehavior());
        };
        MDCChipFoundation.prototype.handleDoubleClick = function () {
            if (this.isEditable()) {
                this.startEditing();
            }
        };
        /**
         * Handles a transition end event on the root element.
         */
        MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {
            var _this = this;
            // Handle transition end event on the chip when it is about to be removed.
            var shouldHandle = this.adapter.eventTargetHasClass(evt.target, cssClasses$4.CHIP_EXIT);
            var widthIsAnimating = evt.propertyName === 'width';
            var opacityIsAnimating = evt.propertyName === 'opacity';
            if (shouldHandle && opacityIsAnimating) {
                // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5
                var chipWidth_1 = this.adapter.getComputedStyleValue('width');
                // On the next frame (once we get the computed width), explicitly set the chip's width
                // to its current pixel width, so we aren't transitioning out of 'auto'.
                requestAnimationFrame(function () {
                    _this.adapter.setStyleProperty('width', chipWidth_1);
                    // To mitigate jitter, start transitioning padding and margin before width.
                    _this.adapter.setStyleProperty('padding', '0');
                    _this.adapter.setStyleProperty('margin', '0');
                    // On the next frame (once width is explicitly set), transition width to 0.
                    requestAnimationFrame(function () {
                        _this.adapter.setStyleProperty('width', '0');
                    });
                });
                return;
            }
            if (shouldHandle && widthIsAnimating) {
                this.removeFocus();
                var removedAnnouncement = this.adapter.getAttribute(strings$4.REMOVED_ANNOUNCEMENT_ATTRIBUTE);
                this.adapter.notifyRemoval(removedAnnouncement);
            }
            // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.
            if (!opacityIsAnimating) {
                return;
            }
            var shouldHideLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses$4.LEADING_ICON) &&
                this.adapter.hasClass(cssClasses$4.SELECTED);
            var shouldShowLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses$4.CHECKMARK) &&
                !this.adapter.hasClass(cssClasses$4.SELECTED);
            if (shouldHideLeadingIcon) {
                this.adapter.addClassToLeadingIcon(cssClasses$4.HIDDEN_LEADING_ICON);
                return;
            }
            if (shouldShowLeadingIcon) {
                this.adapter.removeClassFromLeadingIcon(cssClasses$4.HIDDEN_LEADING_ICON);
                return;
            }
        };
        MDCChipFoundation.prototype.handleFocusIn = function (evt) {
            // Early exit if the event doesn't come from the primary action
            if (!this.eventFromPrimaryAction(evt)) {
                return;
            }
            this.adapter.addClass(cssClasses$4.PRIMARY_ACTION_FOCUSED);
        };
        MDCChipFoundation.prototype.handleFocusOut = function (evt) {
            // Early exit if the event doesn't come from the primary action
            if (!this.eventFromPrimaryAction(evt)) {
                return;
            }
            if (this.isEditing()) {
                this.finishEditing();
            }
            this.adapter.removeClass(cssClasses$4.PRIMARY_ACTION_FOCUSED);
        };
        /**
         * Handles an interaction event on the trailing icon element. This is used to
         * prevent the ripple from activating on interaction with the trailing icon.
         */
        MDCChipFoundation.prototype.handleTrailingActionInteraction = function () {
            this.adapter.notifyTrailingIconInteraction();
            this.removeChip();
        };
        /**
         * Handles a keydown event from the root element.
         */
        MDCChipFoundation.prototype.handleKeydown = function (evt) {
            if (this.isEditing()) {
                if (this.shouldFinishEditing(evt)) {
                    evt.preventDefault();
                    this.finishEditing();
                }
                // When editing, the foundation should only handle key events that finish
                // the editing process.
                return;
            }
            if (this.isEditable()) {
                if (this.shouldStartEditing(evt)) {
                    evt.preventDefault();
                    this.startEditing();
                }
            }
            if (this.shouldNotifyInteraction(evt)) {
                this.adapter.notifyInteraction();
                this.setPrimaryActionFocusable(this.getFocusBehavior());
                return;
            }
            if (this.isDeleteAction(evt)) {
                evt.preventDefault();
                this.removeChip();
                return;
            }
            // Early exit if the key is not usable
            if (!navigationKeys.has(evt.key)) {
                return;
            }
            // Prevent default behavior for movement keys which could include scrolling
            evt.preventDefault();
            this.focusNextAction(evt.key, EventSource.PRIMARY);
        };
        MDCChipFoundation.prototype.handleTrailingActionNavigation = function (evt) {
            this.focusNextAction(evt.detail.key, EventSource.TRAILING);
        };
        /**
         * Called by the chip set to remove focus from the chip actions.
         */
        MDCChipFoundation.prototype.removeFocus = function () {
            this.adapter.setPrimaryActionAttr(strings$4.TAB_INDEX, '-1');
            this.adapter.removeTrailingActionFocus();
        };
        /**
         * Called by the chip set to focus the primary action.
         *
         */
        MDCChipFoundation.prototype.focusPrimaryAction = function () {
            this.setPrimaryActionFocusable(FocusBehavior.SHOULD_FOCUS);
        };
        /**
         * Called by the chip set to focus the trailing action (if present), otherwise
         * gives focus to the trailing action.
         */
        MDCChipFoundation.prototype.focusTrailingAction = function () {
            var trailingActionIsNavigable = this.adapter.isTrailingActionNavigable();
            if (trailingActionIsNavigable) {
                this.adapter.setPrimaryActionAttr(strings$4.TAB_INDEX, '-1');
                this.adapter.focusTrailingAction();
                return;
            }
            this.focusPrimaryAction();
        };
        MDCChipFoundation.prototype.setPrimaryActionFocusable = function (focusBehavior) {
            this.adapter.setPrimaryActionAttr(strings$4.TAB_INDEX, '0');
            if (focusBehavior === FocusBehavior.SHOULD_FOCUS) {
                this.adapter.focusPrimaryAction();
            }
            this.adapter.removeTrailingActionFocus();
        };
        MDCChipFoundation.prototype.getFocusBehavior = function () {
            if (this.shouldFocusPrimaryActionOnClick) {
                return FocusBehavior.SHOULD_FOCUS;
            }
            return FocusBehavior.SHOULD_NOT_FOCUS;
        };
        MDCChipFoundation.prototype.focusNextAction = function (key, source) {
            var isTrailingActionNavigable = this.adapter.isTrailingActionNavigable();
            var dir = this.getDirection(key);
            // Early exit if the key should jump chips
            if (jumpChipKeys.has(key) || !isTrailingActionNavigable) {
                this.adapter.notifyNavigation(key, source);
                return;
            }
            if (source === EventSource.PRIMARY && dir === Direction.RIGHT) {
                this.focusTrailingAction();
                return;
            }
            if (source === EventSource.TRAILING && dir === Direction.LEFT) {
                this.focusPrimaryAction();
                return;
            }
            this.adapter.notifyNavigation(key, EventSource.NONE);
        };
        MDCChipFoundation.prototype.getDirection = function (key) {
            var isRTL = this.adapter.isRTL();
            var isLeftKey = key === strings$4.ARROW_LEFT_KEY || key === strings$4.IE_ARROW_LEFT_KEY;
            var isRightKey = key === strings$4.ARROW_RIGHT_KEY || key === strings$4.IE_ARROW_RIGHT_KEY;
            if (!isRTL && isLeftKey || isRTL && isRightKey) {
                return Direction.LEFT;
            }
            return Direction.RIGHT;
        };
        MDCChipFoundation.prototype.removeChip = function () {
            if (this.shouldRemoveOnTrailingIconClick) {
                this.beginExit();
            }
        };
        MDCChipFoundation.prototype.shouldStartEditing = function (evt) {
            return this.eventFromPrimaryAction(evt) && evt.key === strings$4.ENTER_KEY;
        };
        MDCChipFoundation.prototype.shouldFinishEditing = function (evt) {
            return evt.key === strings$4.ENTER_KEY;
        };
        MDCChipFoundation.prototype.shouldNotifyInteraction = function (evt) {
            return evt.key === strings$4.ENTER_KEY || evt.key === strings$4.SPACEBAR_KEY;
        };
        MDCChipFoundation.prototype.isDeleteAction = function (evt) {
            var isDeletable = this.adapter.hasClass(cssClasses$4.DELETABLE);
            return isDeletable &&
                (evt.key === strings$4.BACKSPACE_KEY || evt.key === strings$4.DELETE_KEY ||
                    evt.key === strings$4.IE_DELETE_KEY);
        };
        MDCChipFoundation.prototype.setSelectedImpl = function (selected) {
            if (selected) {
                this.adapter.addClass(cssClasses$4.SELECTED);
                this.adapter.setPrimaryActionAttr(strings$4.ARIA_CHECKED, 'true');
            }
            else {
                this.adapter.removeClass(cssClasses$4.SELECTED);
                this.adapter.setPrimaryActionAttr(strings$4.ARIA_CHECKED, 'false');
            }
        };
        MDCChipFoundation.prototype.notifySelection = function (selected) {
            this.adapter.notifySelection(selected, false);
        };
        MDCChipFoundation.prototype.notifyIgnoredSelection = function (selected) {
            this.adapter.notifySelection(selected, true);
        };
        MDCChipFoundation.prototype.eventFromPrimaryAction = function (evt) {
            return this.adapter.eventTargetHasClass(evt.target, cssClasses$4.PRIMARY_ACTION);
        };
        MDCChipFoundation.prototype.startEditing = function () {
            this.adapter.addClass(cssClasses$4.EDITING);
            this.adapter.notifyEditStart();
        };
        MDCChipFoundation.prototype.finishEditing = function () {
            this.adapter.removeClass(cssClasses$4.EDITING);
            this.adapter.notifyEditFinish();
        };
        return MDCChipFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCChip = /** @class */ (function (_super) {
        __extends(MDCChip, _super);
        function MDCChip() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MDCChip.prototype, "selected", {
            /**
             * @return Whether the chip is selected.
             */
            get: function () {
                return this.foundation.isSelected();
            },
            /**
             * Sets selected state on the chip.
             */
            set: function (selected) {
                this.foundation.setSelected(selected);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChip.prototype, "shouldRemoveOnTrailingIconClick", {
            /**
             * @return Whether a trailing icon click should trigger exit/removal of the chip.
             */
            get: function () {
                return this.foundation.getShouldRemoveOnTrailingIconClick();
            },
            /**
             * Sets whether a trailing icon click should trigger exit/removal of the chip.
             */
            set: function (shouldRemove) {
                this.foundation.setShouldRemoveOnTrailingIconClick(shouldRemove);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChip.prototype, "setShouldFocusPrimaryActionOnClick", {
            /**
             * Sets whether a clicking on the chip should focus the primary action.
             */
            set: function (shouldFocus) {
                this.foundation.setShouldFocusPrimaryActionOnClick(shouldFocus);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChip.prototype, "ripple", {
            get: function () {
                return this.rippleSurface;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChip.prototype, "id", {
            get: function () {
                return this.root.id;
            },
            enumerable: false,
            configurable: true
        });
        MDCChip.attachTo = function (root) {
            return new MDCChip(root);
        };
        MDCChip.prototype.initialize = function (rippleFactory, trailingActionFactory) {
            var _this = this;
            if (rippleFactory === void 0) { rippleFactory = function (el, foundation) { return new MDCRipple(el, foundation); }; }
            if (trailingActionFactory === void 0) { trailingActionFactory = function (el) { return new MDCChipTrailingAction(el); }; }
            this.leadingIcon = this.root.querySelector(strings$4.LEADING_ICON_SELECTOR);
            this.checkmark = this.root.querySelector(strings$4.CHECKMARK_SELECTOR);
            this.primaryAction =
                this.root.querySelector(strings$4.PRIMARY_ACTION_SELECTOR);
            var trailingActionEl = this.root.querySelector(strings$4.TRAILING_ACTION_SELECTOR);
            if (trailingActionEl) {
                this.trailingAction = trailingActionFactory(trailingActionEl);
            }
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function () { return _this.foundation.getDimensions(); } });
            this.rippleSurface =
                rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
        };
        MDCChip.prototype.initialSyncWithDOM = function () {
            var _this = this;
            // Custom events
            this.handleTrailingActionInteraction = function () {
                _this.foundation.handleTrailingActionInteraction();
            };
            this.handleTrailingActionNavigation =
                function (evt) {
                    _this.foundation.handleTrailingActionNavigation(evt);
                };
            // Native events
            this.handleClick = function () {
                _this.foundation.handleClick();
            };
            this.handleKeydown = function (evt) {
                _this.foundation.handleKeydown(evt);
            };
            this.handleTransitionEnd = function (evt) {
                _this.foundation.handleTransitionEnd(evt);
            };
            this.handleFocusIn = function (evt) {
                _this.foundation.handleFocusIn(evt);
            };
            this.handleFocusOut = function (evt) {
                _this.foundation.handleFocusOut(evt);
            };
            this.listen('transitionend', this.handleTransitionEnd);
            this.listen('click', this.handleClick);
            this.listen('keydown', this.handleKeydown);
            this.listen('focusin', this.handleFocusIn);
            this.listen('focusout', this.handleFocusOut);
            if (this.trailingAction) {
                this.listen(strings$5.INTERACTION_EVENT, this.handleTrailingActionInteraction);
                this.listen(strings$5.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
            }
        };
        MDCChip.prototype.destroy = function () {
            this.rippleSurface.destroy();
            this.unlisten('transitionend', this.handleTransitionEnd);
            this.unlisten('keydown', this.handleKeydown);
            this.unlisten('click', this.handleClick);
            this.unlisten('focusin', this.handleFocusIn);
            this.unlisten('focusout', this.handleFocusOut);
            if (this.trailingAction) {
                this.unlisten(strings$5.INTERACTION_EVENT, this.handleTrailingActionInteraction);
                this.unlisten(strings$5.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
            }
            _super.prototype.destroy.call(this);
        };
        /**
         * Begins the exit animation which leads to removal of the chip.
         */
        MDCChip.prototype.beginExit = function () {
            this.foundation.beginExit();
        };
        MDCChip.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            var adapter = {
                addClass: function (className) { return _this.root.classList.add(className); },
                addClassToLeadingIcon: function (className) {
                    if (_this.leadingIcon) {
                        _this.leadingIcon.classList.add(className);
                    }
                },
                eventTargetHasClass: function (target, className) {
                    return target ? target.classList.contains(className) : false;
                },
                focusPrimaryAction: function () {
                    if (_this.primaryAction) {
                        _this.primaryAction.focus();
                    }
                },
                focusTrailingAction: function () {
                    if (_this.trailingAction) {
                        _this.trailingAction.focus();
                    }
                },
                getAttribute: function (attr) { return _this.root.getAttribute(attr); },
                getCheckmarkBoundingClientRect: function () {
                    return _this.checkmark ? _this.checkmark.getBoundingClientRect() : null;
                },
                getComputedStyleValue: function (propertyName) {
                    return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
                },
                getRootBoundingClientRect: function () { return _this.root.getBoundingClientRect(); },
                hasClass: function (className) { return _this.root.classList.contains(className); },
                hasLeadingIcon: function () { return !!_this.leadingIcon; },
                isRTL: function () { return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl'; },
                isTrailingActionNavigable: function () {
                    if (_this.trailingAction) {
                        return _this.trailingAction.isNavigable();
                    }
                    return false;
                },
                notifyInteraction: function () { return _this.emit(strings$4.INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */); },
                notifyNavigation: function (key, source) {
                    return _this.emit(strings$4.NAVIGATION_EVENT, { chipId: _this.id, key: key, source: source }, true /* shouldBubble */);
                },
                notifyRemoval: function (removedAnnouncement) {
                    _this.emit(strings$4.REMOVAL_EVENT, { chipId: _this.id, removedAnnouncement: removedAnnouncement }, true /* shouldBubble */);
                },
                notifySelection: function (selected, shouldIgnore) {
                    return _this.emit(strings$4.SELECTION_EVENT, { chipId: _this.id, selected: selected, shouldIgnore: shouldIgnore }, true /* shouldBubble */);
                },
                notifyTrailingIconInteraction: function () {
                    return _this.emit(strings$4.TRAILING_ICON_INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */);
                },
                notifyEditStart: function () { },
                notifyEditFinish: function () { },
                removeClass: function (className) { return _this.root.classList.remove(className); },
                removeClassFromLeadingIcon: function (className) {
                    if (_this.leadingIcon) {
                        _this.leadingIcon.classList.remove(className);
                    }
                },
                removeTrailingActionFocus: function () {
                    if (_this.trailingAction) {
                        _this.trailingAction.removeFocus();
                    }
                },
                setPrimaryActionAttr: function (attr, value) {
                    if (_this.primaryAction) {
                        _this.primaryAction.setAttribute(attr, value);
                    }
                },
                setStyleProperty: function (propertyName, value) {
                    return _this.root.style.setProperty(propertyName, value);
                },
            };
            return new MDCChipFoundation(adapter);
        };
        MDCChip.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
            this.foundation.setSelectedFromChipSet(selected, shouldNotifyClients);
        };
        MDCChip.prototype.focusPrimaryAction = function () {
            this.foundation.focusPrimaryAction();
        };
        MDCChip.prototype.focusTrailingAction = function () {
            this.foundation.focusTrailingAction();
        };
        MDCChip.prototype.removeFocus = function () {
            this.foundation.removeFocus();
        };
        MDCChip.prototype.remove = function () {
            var parent = this.root.parentNode;
            if (parent !== null) {
                parent.removeChild(this.root);
            }
        };
        return MDCChip;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$3 = {
        CHIP_SELECTOR: '.mdc-chip',
    };
    var cssClasses$3 = {
        CHOICE: 'mdc-chip-set--choice',
        FILTER: 'mdc-chip-set--filter',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCChipSetFoundation = /** @class */ (function (_super) {
        __extends(MDCChipSetFoundation, _super);
        function MDCChipSetFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation.defaultAdapter), adapter)) || this;
            /**
             * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.
             */
            _this.selectedChipIds = [];
            return _this;
        }
        Object.defineProperty(MDCChipSetFoundation, "strings", {
            get: function () {
                return strings$3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChipSetFoundation, "cssClasses", {
            get: function () {
                return cssClasses$3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChipSetFoundation, "defaultAdapter", {
            get: function () {
                return {
                    announceMessage: function () { return undefined; },
                    focusChipPrimaryActionAtIndex: function () { return undefined; },
                    focusChipTrailingActionAtIndex: function () { return undefined; },
                    getChipListCount: function () { return -1; },
                    getIndexOfChipById: function () { return -1; },
                    hasClass: function () { return false; },
                    isRTL: function () { return false; },
                    removeChipAtIndex: function () { return undefined; },
                    removeFocusFromChipAtIndex: function () { return undefined; },
                    selectChipAtIndex: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns an array of the IDs of all selected chips.
         */
        MDCChipSetFoundation.prototype.getSelectedChipIds = function () {
            return this.selectedChipIds.slice();
        };
        /**
         * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.
         * Does not notify clients of the updated selection state.
         */
        MDCChipSetFoundation.prototype.select = function (chipId) {
            this.selectImpl(chipId, false);
        };
        /**
         * Handles a chip interaction event
         */
        MDCChipSetFoundation.prototype.handleChipInteraction = function (_a) {
            var chipId = _a.chipId;
            var index = this.adapter.getIndexOfChipById(chipId);
            this.removeFocusFromChipsExcept(index);
            if (this.adapter.hasClass(cssClasses$3.CHOICE) ||
                this.adapter.hasClass(cssClasses$3.FILTER)) {
                this.toggleSelect(chipId);
            }
        };
        /**
         * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.
         */
        MDCChipSetFoundation.prototype.handleChipSelection = function (_a) {
            var chipId = _a.chipId, selected = _a.selected, shouldIgnore = _a.shouldIgnore;
            // Early exit if we should ignore the event
            if (shouldIgnore) {
                return;
            }
            var chipIsSelected = this.selectedChipIds.indexOf(chipId) >= 0;
            if (selected && !chipIsSelected) {
                this.select(chipId);
            }
            else if (!selected && chipIsSelected) {
                this.deselectImpl(chipId);
            }
        };
        /**
         * Handles the event when a chip is removed.
         */
        MDCChipSetFoundation.prototype.handleChipRemoval = function (_a) {
            var chipId = _a.chipId, removedAnnouncement = _a.removedAnnouncement;
            if (removedAnnouncement) {
                this.adapter.announceMessage(removedAnnouncement);
            }
            var index = this.adapter.getIndexOfChipById(chipId);
            this.deselectAndNotifyClients(chipId);
            this.adapter.removeChipAtIndex(index);
            var maxIndex = this.adapter.getChipListCount() - 1;
            if (maxIndex < 0) {
                return;
            }
            var nextIndex = Math.min(index, maxIndex);
            this.removeFocusFromChipsExcept(nextIndex);
            // After removing a chip, we should focus the trailing action for the next chip.
            this.adapter.focusChipTrailingActionAtIndex(nextIndex);
        };
        /**
         * Handles a chip navigation event.
         */
        MDCChipSetFoundation.prototype.handleChipNavigation = function (_a) {
            var chipId = _a.chipId, key = _a.key, source = _a.source;
            var maxIndex = this.adapter.getChipListCount() - 1;
            var index = this.adapter.getIndexOfChipById(chipId);
            // Early exit if the index is out of range or the key is unusable
            if (index === -1 || !navigationKeys.has(key)) {
                return;
            }
            var isRTL = this.adapter.isRTL();
            var isLeftKey = key === strings$4.ARROW_LEFT_KEY ||
                key === strings$4.IE_ARROW_LEFT_KEY;
            var isRightKey = key === strings$4.ARROW_RIGHT_KEY ||
                key === strings$4.IE_ARROW_RIGHT_KEY;
            var isDownKey = key === strings$4.ARROW_DOWN_KEY ||
                key === strings$4.IE_ARROW_DOWN_KEY;
            var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;
            var isHome = key === strings$4.HOME_KEY;
            var isEnd = key === strings$4.END_KEY;
            if (shouldIncrement) {
                index++;
            }
            else if (isHome) {
                index = 0;
            }
            else if (isEnd) {
                index = maxIndex;
            }
            else {
                index--;
            }
            // Early exit if the index is out of bounds
            if (index < 0 || index > maxIndex) {
                return;
            }
            this.removeFocusFromChipsExcept(index);
            this.focusChipAction(index, key, source);
        };
        MDCChipSetFoundation.prototype.focusChipAction = function (index, key, source) {
            var shouldJumpChips = jumpChipKeys.has(key);
            if (shouldJumpChips && source === EventSource.PRIMARY) {
                return this.adapter.focusChipPrimaryActionAtIndex(index);
            }
            if (shouldJumpChips && source === EventSource.TRAILING) {
                return this.adapter.focusChipTrailingActionAtIndex(index);
            }
            var dir = this.getDirection(key);
            if (dir === Direction.LEFT) {
                return this.adapter.focusChipTrailingActionAtIndex(index);
            }
            if (dir === Direction.RIGHT) {
                return this.adapter.focusChipPrimaryActionAtIndex(index);
            }
        };
        MDCChipSetFoundation.prototype.getDirection = function (key) {
            var isRTL = this.adapter.isRTL();
            var isLeftKey = key === strings$4.ARROW_LEFT_KEY ||
                key === strings$4.IE_ARROW_LEFT_KEY;
            var isRightKey = key === strings$4.ARROW_RIGHT_KEY ||
                key === strings$4.IE_ARROW_RIGHT_KEY;
            if (!isRTL && isLeftKey || isRTL && isRightKey) {
                return Direction.LEFT;
            }
            return Direction.RIGHT;
        };
        /**
         * Deselects the chip with the given id and optionally notifies clients.
         */
        MDCChipSetFoundation.prototype.deselectImpl = function (chipId, shouldNotifyClients) {
            if (shouldNotifyClients === void 0) { shouldNotifyClients = false; }
            var index = this.selectedChipIds.indexOf(chipId);
            if (index >= 0) {
                this.selectedChipIds.splice(index, 1);
                var chipIndex = this.adapter.getIndexOfChipById(chipId);
                this.adapter.selectChipAtIndex(chipIndex, /** isSelected */ false, shouldNotifyClients);
            }
        };
        /**
         * Deselects the chip with the given id and notifies clients.
         */
        MDCChipSetFoundation.prototype.deselectAndNotifyClients = function (chipId) {
            this.deselectImpl(chipId, true);
        };
        /**
         * Toggles selection of the chip with the given id.
         */
        MDCChipSetFoundation.prototype.toggleSelect = function (chipId) {
            if (this.selectedChipIds.indexOf(chipId) >= 0) {
                this.deselectAndNotifyClients(chipId);
            }
            else {
                this.selectAndNotifyClients(chipId);
            }
        };
        MDCChipSetFoundation.prototype.removeFocusFromChipsExcept = function (index) {
            var chipCount = this.adapter.getChipListCount();
            for (var i = 0; i < chipCount; i++) {
                if (i !== index) {
                    this.adapter.removeFocusFromChipAtIndex(i);
                }
            }
        };
        MDCChipSetFoundation.prototype.selectAndNotifyClients = function (chipId) {
            this.selectImpl(chipId, true);
        };
        MDCChipSetFoundation.prototype.selectImpl = function (chipId, shouldNotifyClients) {
            if (this.selectedChipIds.indexOf(chipId) >= 0) {
                return;
            }
            if (this.adapter.hasClass(cssClasses$3.CHOICE) &&
                this.selectedChipIds.length > 0) {
                var previouslySelectedChip = this.selectedChipIds[0];
                var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);
                this.selectedChipIds = [];
                this.adapter.selectChipAtIndex(previouslySelectedIndex, /** isSelected */ false, shouldNotifyClients);
            }
            this.selectedChipIds.push(chipId);
            var index = this.adapter.getIndexOfChipById(chipId);
            this.adapter.selectChipAtIndex(index, /** isSelected */ true, shouldNotifyClients);
        };
        return MDCChipSetFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var _a = MDCChipFoundation.strings, INTERACTION_EVENT = _a.INTERACTION_EVENT, SELECTION_EVENT = _a.SELECTION_EVENT, REMOVAL_EVENT = _a.REMOVAL_EVENT, NAVIGATION_EVENT = _a.NAVIGATION_EVENT;
    var CHIP_SELECTOR = MDCChipSetFoundation.strings.CHIP_SELECTOR;
    var idCounter = 0;
    var MDCChipSet = /** @class */ (function (_super) {
        __extends(MDCChipSet, _super);
        function MDCChipSet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCChipSet.attachTo = function (root) {
            return new MDCChipSet(root);
        };
        Object.defineProperty(MDCChipSet.prototype, "chips", {
            get: function () {
                return this.chipsList.slice();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCChipSet.prototype, "selectedChipIds", {
            /**
             * @return An array of the IDs of all selected chips.
             */
            get: function () {
                return this.foundation.getSelectedChipIds();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @param chipFactory A function which creates a new MDCChip.
         */
        MDCChipSet.prototype.initialize = function (chipFactory) {
            if (chipFactory === void 0) { chipFactory = function (el) { return new MDCChip(el); }; }
            this.chipFactory = chipFactory;
            this.chipsList = this.instantiateChips(this.chipFactory);
        };
        MDCChipSet.prototype.initialSyncWithDOM = function () {
            var e_1, _a;
            var _this = this;
            try {
                for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var chip = _c.value;
                    if (chip.id && chip.selected) {
                        this.foundation.select(chip.id);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.handleChipInteraction = function (evt) {
                return _this.foundation.handleChipInteraction(evt.detail);
            };
            this.handleChipSelection = function (evt) {
                return _this.foundation.handleChipSelection(evt.detail);
            };
            this.handleChipRemoval = function (evt) {
                return _this.foundation.handleChipRemoval(evt.detail);
            };
            this.handleChipNavigation = function (evt) {
                return _this.foundation.handleChipNavigation(evt.detail);
            };
            this.listen(INTERACTION_EVENT, this.handleChipInteraction);
            this.listen(SELECTION_EVENT, this.handleChipSelection);
            this.listen(REMOVAL_EVENT, this.handleChipRemoval);
            this.listen(NAVIGATION_EVENT, this.handleChipNavigation);
        };
        MDCChipSet.prototype.destroy = function () {
            var e_2, _a;
            try {
                for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var chip = _c.value;
                    chip.destroy();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.unlisten(INTERACTION_EVENT, this.handleChipInteraction);
            this.unlisten(SELECTION_EVENT, this.handleChipSelection);
            this.unlisten(REMOVAL_EVENT, this.handleChipRemoval);
            this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation);
            _super.prototype.destroy.call(this);
        };
        /**
         * Adds a new chip object to the chip set from the given chip element.
         */
        MDCChipSet.prototype.addChip = function (chipEl) {
            chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
            this.chipsList.push(this.chipFactory(chipEl));
        };
        MDCChipSet.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            var adapter = {
                announceMessage: function (message) {
                    announce$1(message);
                },
                focusChipPrimaryActionAtIndex: function (index) {
                    _this.chipsList[index].focusPrimaryAction();
                },
                focusChipTrailingActionAtIndex: function (index) {
                    _this.chipsList[index].focusTrailingAction();
                },
                getChipListCount: function () { return _this.chips.length; },
                getIndexOfChipById: function (chipId) {
                    return _this.findChipIndex(chipId);
                },
                hasClass: function (className) { return _this.root.classList.contains(className); },
                isRTL: function () { return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl'; },
                removeChipAtIndex: function (index) {
                    if (index >= 0 && index < _this.chips.length) {
                        _this.chipsList[index].destroy();
                        _this.chipsList[index].remove();
                        _this.chipsList.splice(index, 1);
                    }
                },
                removeFocusFromChipAtIndex: function (index) {
                    _this.chipsList[index].removeFocus();
                },
                selectChipAtIndex: function (index, selected, shouldNotifyClients) {
                    if (index >= 0 && index < _this.chips.length) {
                        _this.chipsList[index].setSelectedFromChipSet(selected, shouldNotifyClients);
                    }
                },
            };
            return new MDCChipSetFoundation(adapter);
        };
        /**
         * Instantiates chip components on all of the chip set's child chip elements.
         */
        MDCChipSet.prototype.instantiateChips = function (chipFactory) {
            var chipElements = [].slice.call(this.root.querySelectorAll(CHIP_SELECTOR));
            return chipElements.map(function (el) {
                el.id = el.id || "mdc-chip-" + ++idCounter;
                return chipFactory(el);
            });
        };
        /**
         * Returns the index of the chip with the given id, or -1 if the chip does not exist.
         */
        MDCChipSet.prototype.findChipIndex = function (chipId) {
            for (var i = 0; i < this.chips.length; i++) {
                if (this.chipsList[i].id === chipId) {
                    return i;
                }
            }
            return -1;
        };
        return MDCChipSet;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */

    var deprecated = /*#__PURE__*/Object.freeze({
        __proto__: null,
        trailingActionStrings: strings$5,
        MDCChipTrailingAction: MDCChipTrailingAction,
        MDCChipTrailingActionFoundation: MDCChipTrailingActionFoundation,
        chipCssClasses: cssClasses$4,
        chipStrings: strings$4,
        MDCChip: MDCChip,
        MDCChipFoundation: MDCChipFoundation,
        chipSetCssClasses: cssClasses$3,
        chipSetStrings: strings$3,
        MDCChipSet: MDCChipSet,
        MDCChipSetFoundation: MDCChipSetFoundation
    });

    /* node_modules/@smui/chips/dist/Chip.svelte generated by Svelte v3.44.3 */

    const { Error: Error_1 } = globals;
    const file$b = "node_modules/@smui/chips/dist/Chip.svelte";

    // (49:2) {#if ripple && !$nonInteractive}
    function create_if_block_1$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "mdc-chip__ripple");
    			add_location(div, file$b, 49, 4, 1566);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(49:2) {#if ripple && !$nonInteractive}",
    		ctx
    	});

    	return block;
    }

    // (53:2) {#if touch}
    function create_if_block$7(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "mdc-chip__touch");
    			add_location(div, file$b, 53, 4, 1636);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(53:2) {#if touch}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple: ripple && !$nonInteractive,         unbounded: false,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-chip': true,     'mdc-chip--selected': selected,     'mdc-chip--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   role="row"   on:transitionend={(event) => instance && instance.handleTransitionEnd(event)}   on:click={() => instance && instance.handleClick()}   on:keydown={(event) => instance && instance.handleKeydown(event)}   on:focusin={(event) => instance && instance.handleFocusIn(event)}   on:focusout={(event) => instance && instance.handleFocusOut(event)}   on:SMUIChipTrailingAction:interaction={() =>     instance && instance.handleTrailingActionInteraction()}   on:SMUIChipTrailingAction:navigation={(event) =>     instance && instance.handleTrailingActionNavigation(event)}   on:SMUIChipsChipPrimaryAction:mount={(event) =>     (primaryActionAccessor = event.detail)}   on:SMUIChipsChipPrimaryAction:unmount={() =>     (primaryActionAccessor = undefined)}   on:SMUIChipsChipTrailingAction:mount={(event) =>     (trailingActionAccessor = event.detail)}   on:SMUIChipsChipTrailingAction:unmount={() =>     (trailingActionAccessor = undefined)}   {...$$restProps} >
    function create_default_slot$9(ctx) {
    	let t0;
    	let t1;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*ripple*/ ctx[3] && !/*$nonInteractive*/ ctx[13] && create_if_block_1$3(ctx);
    	const default_slot_template = /*#slots*/ ctx[31].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);
    	let if_block1 = /*touch*/ ctx[4] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*ripple*/ ctx[3] && !/*$nonInteractive*/ ctx[13]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_1$3(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[44],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*touch*/ ctx[4]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block$7(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   bind:this={element}   use={[     [       Ripple,       {         ripple: ripple && !$nonInteractive,         unbounded: false,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-chip': true,     'mdc-chip--selected': selected,     'mdc-chip--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   role=\\\"row\\\"   on:transitionend={(event) => instance && instance.handleTransitionEnd(event)}   on:click={() => instance && instance.handleClick()}   on:keydown={(event) => instance && instance.handleKeydown(event)}   on:focusin={(event) => instance && instance.handleFocusIn(event)}   on:focusout={(event) => instance && instance.handleFocusOut(event)}   on:SMUIChipTrailingAction:interaction={() =>     instance && instance.handleTrailingActionInteraction()}   on:SMUIChipTrailingAction:navigation={(event) =>     instance && instance.handleTrailingActionNavigation(event)}   on:SMUIChipsChipPrimaryAction:mount={(event) =>     (primaryActionAccessor = event.detail)}   on:SMUIChipsChipPrimaryAction:unmount={() =>     (primaryActionAccessor = undefined)}   on:SMUIChipsChipTrailingAction:mount={(event) =>     (trailingActionAccessor = event.detail)}   on:SMUIChipsChipTrailingAction:unmount={() =>     (trailingActionAccessor = undefined)}   {...$$restProps} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				[
    					Ripple,
    					{
    						ripple: /*ripple*/ ctx[3] && !/*$nonInteractive*/ ctx[13],
    						unbounded: false,
    						addClass: /*addClass*/ ctx[22],
    						removeClass: /*removeClass*/ ctx[23],
    						addStyle: /*addStyle*/ ctx[24]
    					}
    				],
    				/*forwardEvents*/ ctx[14],
    				.../*use*/ ctx[0]
    			]
    		},
    		{
    			class: classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-chip': true,
    				'mdc-chip--selected': /*selected*/ ctx[7],
    				'mdc-chip--touch': /*touch*/ ctx[4],
    				.../*internalClasses*/ ctx[9]
    			})
    		},
    		{
    			style: Object.entries(/*internalStyles*/ ctx[10]).map(func$1).concat([/*style*/ ctx[2]]).join(' ')
    		},
    		{ role: "row" },
    		/*$$restProps*/ ctx[25]
    	];

    	var switch_value = /*component*/ ctx[5];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot$9] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		/*switch_instance_binding*/ ctx[32](switch_instance);
    		switch_instance.$on("transitionend", /*transitionend_handler*/ ctx[33]);
    		switch_instance.$on("click", /*click_handler*/ ctx[34]);
    		switch_instance.$on("keydown", /*keydown_handler*/ ctx[35]);
    		switch_instance.$on("focusin", /*focusin_handler*/ ctx[36]);
    		switch_instance.$on("focusout", /*focusout_handler*/ ctx[37]);
    		switch_instance.$on("SMUIChipTrailingAction:interaction", /*SMUIChipTrailingAction_interaction_handler*/ ctx[38]);
    		switch_instance.$on("SMUIChipTrailingAction:navigation", /*SMUIChipTrailingAction_navigation_handler*/ ctx[39]);
    		switch_instance.$on("SMUIChipsChipPrimaryAction:mount", /*SMUIChipsChipPrimaryAction_mount_handler*/ ctx[40]);
    		switch_instance.$on("SMUIChipsChipPrimaryAction:unmount", /*SMUIChipsChipPrimaryAction_unmount_handler*/ ctx[41]);
    		switch_instance.$on("SMUIChipsChipTrailingAction:mount", /*SMUIChipsChipTrailingAction_mount_handler*/ ctx[42]);
    		switch_instance.$on("SMUIChipsChipTrailingAction:unmount", /*SMUIChipsChipTrailingAction_unmount_handler*/ ctx[43]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*ripple, $nonInteractive, addClass, removeClass, addStyle, forwardEvents, use, className, selected, touch, internalClasses, internalStyles, style, $$restProps*/ 62940831)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty[0] & /*ripple, $nonInteractive, addClass, removeClass, addStyle, forwardEvents, use*/ 29384713 && {
    						use: [
    							[
    								Ripple,
    								{
    									ripple: /*ripple*/ ctx[3] && !/*$nonInteractive*/ ctx[13],
    									unbounded: false,
    									addClass: /*addClass*/ ctx[22],
    									removeClass: /*removeClass*/ ctx[23],
    									addStyle: /*addStyle*/ ctx[24]
    								}
    							],
    							/*forwardEvents*/ ctx[14],
    							.../*use*/ ctx[0]
    						]
    					},
    					dirty[0] & /*className, selected, touch, internalClasses*/ 658 && {
    						class: classMap({
    							[/*className*/ ctx[1]]: true,
    							'mdc-chip': true,
    							'mdc-chip--selected': /*selected*/ ctx[7],
    							'mdc-chip--touch': /*touch*/ ctx[4],
    							.../*internalClasses*/ ctx[9]
    						})
    					},
    					dirty[0] & /*internalStyles, style*/ 1028 && {
    						style: Object.entries(/*internalStyles*/ ctx[10]).map(func$1).concat([/*style*/ ctx[2]]).join(' ')
    					},
    					switch_instance_spread_levels[3],
    					dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(/*$$restProps*/ ctx[25])
    				])
    			: {};

    			if (dirty[0] & /*touch, ripple, $nonInteractive*/ 8216 | dirty[1] & /*$$scope*/ 8192) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[5])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					/*switch_instance_binding*/ ctx[32](switch_instance);
    					switch_instance.$on("transitionend", /*transitionend_handler*/ ctx[33]);
    					switch_instance.$on("click", /*click_handler*/ ctx[34]);
    					switch_instance.$on("keydown", /*keydown_handler*/ ctx[35]);
    					switch_instance.$on("focusin", /*focusin_handler*/ ctx[36]);
    					switch_instance.$on("focusout", /*focusout_handler*/ ctx[37]);
    					switch_instance.$on("SMUIChipTrailingAction:interaction", /*SMUIChipTrailingAction_interaction_handler*/ ctx[38]);
    					switch_instance.$on("SMUIChipTrailingAction:navigation", /*SMUIChipTrailingAction_navigation_handler*/ ctx[39]);
    					switch_instance.$on("SMUIChipsChipPrimaryAction:mount", /*SMUIChipsChipPrimaryAction_mount_handler*/ ctx[40]);
    					switch_instance.$on("SMUIChipsChipPrimaryAction:unmount", /*SMUIChipsChipPrimaryAction_unmount_handler*/ ctx[41]);
    					switch_instance.$on("SMUIChipsChipTrailingAction:mount", /*SMUIChipsChipTrailingAction_mount_handler*/ ctx[42]);
    					switch_instance.$on("SMUIChipsChipTrailingAction:unmount", /*SMUIChipsChipTrailingAction_unmount_handler*/ ctx[43]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*switch_instance_binding*/ ctx[32](null);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$1 = ([name, value]) => `${name}: ${value};`;

    function instance_1$5($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","chip","ripple","touch","shouldRemoveOnTrailingIconClick","shouldFocusPrimaryActionOnClick","component","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $index;
    	let $choice;
    	let $leadingIconClassesStore;
    	let $isSelectedStore;
    	let $shouldRemoveOnTrailingIconClickStore;
    	let $initialSelectedStore;
    	let $nonInteractive;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Chip', slots, ['default']);
    	const { MDCChipFoundation } = deprecated;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { chip: chipId } = $$props;
    	let { ripple = true } = $$props;
    	let { touch = false } = $$props;
    	let { shouldRemoveOnTrailingIconClick = true } = $$props;
    	let { shouldFocusPrimaryActionOnClick = true } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let leadingIconClasses = {};
    	let internalStyles = {};
    	const initialSelectedStore = getContext('SMUI:chips:chip:initialSelected');
    	validate_store(initialSelectedStore, 'initialSelectedStore');
    	component_subscribe($$self, initialSelectedStore, value => $$invalidate(50, $initialSelectedStore = value));
    	let selected = $initialSelectedStore;
    	let primaryActionAccessor = undefined;
    	let trailingActionAccessor = undefined;
    	const nonInteractive = getContext('SMUI:chips:nonInteractive');
    	validate_store(nonInteractive, 'nonInteractive');
    	component_subscribe($$self, nonInteractive, value => $$invalidate(13, $nonInteractive = value));
    	const choice = getContext('SMUI:chips:choice');
    	validate_store(choice, 'choice');
    	component_subscribe($$self, choice, value => $$invalidate(46, $choice = value));
    	const index = getContext('SMUI:chips:chip:index');
    	validate_store(index, 'index');
    	component_subscribe($$self, index, value => $$invalidate(45, $index = value));
    	let { component = Div } = $$props;
    	const shouldRemoveOnTrailingIconClickStore = writable(shouldRemoveOnTrailingIconClick);
    	validate_store(shouldRemoveOnTrailingIconClickStore, 'shouldRemoveOnTrailingIconClickStore');
    	component_subscribe($$self, shouldRemoveOnTrailingIconClickStore, value => $$invalidate(49, $shouldRemoveOnTrailingIconClickStore = value));
    	setContext('SMUI:chips:chip:shouldRemoveOnTrailingIconClick', shouldRemoveOnTrailingIconClickStore);
    	const isSelectedStore = writable(selected);
    	validate_store(isSelectedStore, 'isSelectedStore');
    	component_subscribe($$self, isSelectedStore, value => $$invalidate(48, $isSelectedStore = value));
    	setContext('SMUI:chips:chip:isSelected', isSelectedStore);
    	const leadingIconClassesStore = writable(leadingIconClasses);
    	validate_store(leadingIconClassesStore, 'leadingIconClassesStore');
    	component_subscribe($$self, leadingIconClassesStore, value => $$invalidate(47, $leadingIconClassesStore = value));
    	setContext('SMUI:chips:chip:leadingIconClasses', leadingIconClassesStore);
    	setContext('SMUI:chips:chip:focusable', $choice && selected || $index === 0);

    	if (!chipId) {
    		throw new Error('The chip property is required! It should be passed down from the Set to the Chip.');
    	}

    	onMount(() => {
    		$$invalidate(6, instance = new MDCChipFoundation({
    				addClass,
    				addClassToLeadingIcon: addLeadingIconClass,
    				eventTargetHasClass: (target, className) => target && 'classList' in target
    				? target.classList.contains(className)
    				: false,
    				focusPrimaryAction: () => {
    					if (primaryActionAccessor) {
    						primaryActionAccessor.focus();
    					}
    				},
    				focusTrailingAction: () => {
    					if (trailingActionAccessor) {
    						trailingActionAccessor.focus();
    					}
    				},
    				getAttribute: attr => getElement().getAttribute(attr),
    				getCheckmarkBoundingClientRect: () => {
    					const target = getElement().querySelector('.mdc-chip__checkmark');

    					if (target) {
    						return target.getBoundingClientRect();
    					}

    					return null;
    				},
    				getComputedStyleValue: getStyle,
    				getRootBoundingClientRect: () => getElement().getBoundingClientRect(),
    				hasClass,
    				hasLeadingIcon: () => {
    					const target = getElement().querySelector('.mdc-chip__icon--leading');
    					return !!target;
    				},
    				isRTL: () => getComputedStyle(getElement()).getPropertyValue('direction') === 'rtl',
    				isTrailingActionNavigable: () => {
    					if (trailingActionAccessor) {
    						return trailingActionAccessor.isNavigable();
    					}

    					return false;
    				},
    				notifyInteraction: () => dispatch(getElement(), 'SMUIChip:interaction', { chipId }, undefined, true),
    				notifyNavigation: (key, source) => dispatch(getElement(), 'SMUIChip:navigation', { chipId, key, source }, undefined, true),
    				notifyRemoval: removedAnnouncement => {
    					dispatch(getElement(), 'SMUIChip:removal', { chipId, removedAnnouncement }, undefined, true);
    				},
    				notifySelection: (selected, shouldIgnore) => dispatch(getElement(), 'SMUIChip:selection', { chipId, selected, shouldIgnore }, undefined, true),
    				notifyTrailingIconInteraction: () => dispatch(getElement(), 'SMUIChip:trailingIconInteraction', { chipId }, undefined, true),
    				notifyEditStart: () => {
    					
    				}, /* Not Implemented. */
    				notifyEditFinish: () => {
    					
    				}, /* Not Implemented. */
    				removeClass,
    				removeClassFromLeadingIcon: removeLeadingIconClass,
    				removeTrailingActionFocus: () => {
    					if (trailingActionAccessor) {
    						trailingActionAccessor.removeFocus();
    					}
    				},
    				setPrimaryActionAttr: (attr, value) => {
    					if (primaryActionAccessor) {
    						primaryActionAccessor.addAttr(attr, value);
    					}
    				},
    				setStyleProperty: addStyle
    			}));

    		const accessor = {
    			chipId,
    			get selected() {
    				return selected;
    			},
    			focusPrimaryAction,
    			focusTrailingAction,
    			removeFocus,
    			setSelectedFromChipSet
    		};

    		dispatch(getElement(), 'SMUIChipsChip:mount', accessor);
    		instance.init();

    		return () => {
    			dispatch(getElement(), 'SMUIChipsChip:unmount', accessor);
    			instance.destroy();
    		};
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(9, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(9, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addLeadingIconClass(className) {
    		if (!leadingIconClasses[className]) {
    			$$invalidate(30, leadingIconClasses[className] = true, leadingIconClasses);
    		}
    	}

    	function removeLeadingIconClass(className) {
    		if (!(className in leadingIconClasses) || leadingIconClasses[className]) {
    			$$invalidate(30, leadingIconClasses[className] = false, leadingIconClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(10, internalStyles);
    			} else {
    				$$invalidate(10, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function getStyle(name) {
    		return name in internalStyles
    		? internalStyles[name]
    		: getComputedStyle(getElement()).getPropertyValue(name);
    	}

    	function setSelectedFromChipSet(value, shouldNotifyClients) {
    		$$invalidate(7, selected = value);
    		instance.setSelectedFromChipSet(selected, shouldNotifyClients);
    	}

    	function focusPrimaryAction() {
    		instance.focusPrimaryAction();
    	}

    	function focusTrailingAction() {
    		instance.focusTrailingAction();
    	}

    	function removeFocus() {
    		instance.removeFocus();
    	}

    	function getElement() {
    		return element.getElement();
    	}

    	function switch_instance_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(8, element);
    		});
    	}

    	const transitionend_handler = event => instance && instance.handleTransitionEnd(event);
    	const click_handler = () => instance && instance.handleClick();
    	const keydown_handler = event => instance && instance.handleKeydown(event);
    	const focusin_handler = event => instance && instance.handleFocusIn(event);
    	const focusout_handler = event => instance && instance.handleFocusOut(event);
    	const SMUIChipTrailingAction_interaction_handler = () => instance && instance.handleTrailingActionInteraction();
    	const SMUIChipTrailingAction_navigation_handler = event => instance && instance.handleTrailingActionNavigation(event);
    	const SMUIChipsChipPrimaryAction_mount_handler = event => $$invalidate(11, primaryActionAccessor = event.detail);
    	const SMUIChipsChipPrimaryAction_unmount_handler = () => $$invalidate(11, primaryActionAccessor = undefined);
    	const SMUIChipsChipTrailingAction_mount_handler = event => $$invalidate(12, trailingActionAccessor = event.detail);
    	const SMUIChipsChipTrailingAction_unmount_handler = () => $$invalidate(12, trailingActionAccessor = undefined);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
    		if ('chip' in $$new_props) $$invalidate(26, chipId = $$new_props.chip);
    		if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('touch' in $$new_props) $$invalidate(4, touch = $$new_props.touch);
    		if ('shouldRemoveOnTrailingIconClick' in $$new_props) $$invalidate(27, shouldRemoveOnTrailingIconClick = $$new_props.shouldRemoveOnTrailingIconClick);
    		if ('shouldFocusPrimaryActionOnClick' in $$new_props) $$invalidate(28, shouldFocusPrimaryActionOnClick = $$new_props.shouldFocusPrimaryActionOnClick);
    		if ('component' in $$new_props) $$invalidate(5, component = $$new_props.component);
    		if ('$$scope' in $$new_props) $$invalidate(44, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		deprecated,
    		onMount,
    		setContext,
    		getContext,
    		writable,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		dispatch,
    		Ripple,
    		Div,
    		MDCChipFoundation,
    		forwardEvents,
    		use,
    		className,
    		style,
    		chipId,
    		ripple,
    		touch,
    		shouldRemoveOnTrailingIconClick,
    		shouldFocusPrimaryActionOnClick,
    		element,
    		instance,
    		internalClasses,
    		leadingIconClasses,
    		internalStyles,
    		initialSelectedStore,
    		selected,
    		primaryActionAccessor,
    		trailingActionAccessor,
    		nonInteractive,
    		choice,
    		index,
    		component,
    		shouldRemoveOnTrailingIconClickStore,
    		isSelectedStore,
    		leadingIconClassesStore,
    		hasClass,
    		addClass,
    		removeClass,
    		addLeadingIconClass,
    		removeLeadingIconClass,
    		addStyle,
    		getStyle,
    		setSelectedFromChipSet,
    		focusPrimaryAction,
    		focusTrailingAction,
    		removeFocus,
    		getElement,
    		$index,
    		$choice,
    		$leadingIconClassesStore,
    		$isSelectedStore,
    		$shouldRemoveOnTrailingIconClickStore,
    		$initialSelectedStore,
    		$nonInteractive
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
    		if ('chipId' in $$props) $$invalidate(26, chipId = $$new_props.chipId);
    		if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('touch' in $$props) $$invalidate(4, touch = $$new_props.touch);
    		if ('shouldRemoveOnTrailingIconClick' in $$props) $$invalidate(27, shouldRemoveOnTrailingIconClick = $$new_props.shouldRemoveOnTrailingIconClick);
    		if ('shouldFocusPrimaryActionOnClick' in $$props) $$invalidate(28, shouldFocusPrimaryActionOnClick = $$new_props.shouldFocusPrimaryActionOnClick);
    		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(6, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(9, internalClasses = $$new_props.internalClasses);
    		if ('leadingIconClasses' in $$props) $$invalidate(30, leadingIconClasses = $$new_props.leadingIconClasses);
    		if ('internalStyles' in $$props) $$invalidate(10, internalStyles = $$new_props.internalStyles);
    		if ('selected' in $$props) $$invalidate(7, selected = $$new_props.selected);
    		if ('primaryActionAccessor' in $$props) $$invalidate(11, primaryActionAccessor = $$new_props.primaryActionAccessor);
    		if ('trailingActionAccessor' in $$props) $$invalidate(12, trailingActionAccessor = $$new_props.trailingActionAccessor);
    		if ('component' in $$props) $$invalidate(5, component = $$new_props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*shouldRemoveOnTrailingIconClick*/ 134217728) {
    			set_store_value(shouldRemoveOnTrailingIconClickStore, $shouldRemoveOnTrailingIconClickStore = shouldRemoveOnTrailingIconClick, $shouldRemoveOnTrailingIconClickStore);
    		}

    		if ($$self.$$.dirty[0] & /*selected*/ 128) {
    			set_store_value(isSelectedStore, $isSelectedStore = selected, $isSelectedStore);
    		}

    		if ($$self.$$.dirty[0] & /*leadingIconClasses*/ 1073741824) {
    			set_store_value(leadingIconClassesStore, $leadingIconClassesStore = leadingIconClasses, $leadingIconClassesStore);
    		}

    		if ($$self.$$.dirty[0] & /*instance, shouldRemoveOnTrailingIconClick*/ 134217792) {
    			if (instance && instance.getShouldRemoveOnTrailingIconClick() !== shouldRemoveOnTrailingIconClick) {
    				instance.setShouldRemoveOnTrailingIconClick(shouldRemoveOnTrailingIconClick);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, shouldFocusPrimaryActionOnClick*/ 268435520) {
    			if (instance) {
    				instance.setShouldFocusPrimaryActionOnClick(shouldFocusPrimaryActionOnClick);
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		style,
    		ripple,
    		touch,
    		component,
    		instance,
    		selected,
    		element,
    		internalClasses,
    		internalStyles,
    		primaryActionAccessor,
    		trailingActionAccessor,
    		$nonInteractive,
    		forwardEvents,
    		initialSelectedStore,
    		nonInteractive,
    		choice,
    		index,
    		shouldRemoveOnTrailingIconClickStore,
    		isSelectedStore,
    		leadingIconClassesStore,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		chipId,
    		shouldRemoveOnTrailingIconClick,
    		shouldFocusPrimaryActionOnClick,
    		getElement,
    		leadingIconClasses,
    		slots,
    		switch_instance_binding,
    		transitionend_handler,
    		click_handler,
    		keydown_handler,
    		focusin_handler,
    		focusout_handler,
    		SMUIChipTrailingAction_interaction_handler,
    		SMUIChipTrailingAction_navigation_handler,
    		SMUIChipsChipPrimaryAction_mount_handler,
    		SMUIChipsChipPrimaryAction_unmount_handler,
    		SMUIChipsChipTrailingAction_mount_handler,
    		SMUIChipsChipTrailingAction_unmount_handler,
    		$$scope
    	];
    }

    class Chip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$5,
    			create_fragment$g,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				style: 2,
    				chip: 26,
    				ripple: 3,
    				touch: 4,
    				shouldRemoveOnTrailingIconClick: 27,
    				shouldFocusPrimaryActionOnClick: 28,
    				component: 5,
    				getElement: 29
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chip",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*chipId*/ ctx[26] === undefined && !('chip' in props)) {
    			console.warn("<Chip> was created without expected prop 'chip'");
    		}
    	}

    	get use() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get chip() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set chip(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shouldRemoveOnTrailingIconClick() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shouldRemoveOnTrailingIconClick(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shouldFocusPrimaryActionOnClick() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shouldFocusPrimaryActionOnClick(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error_1("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[29];
    	}

    	set getElement(value) {
    		throw new Error_1("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/chips/dist/Set.svelte generated by Svelte v3.44.3 */
    const file$a = "node_modules/@smui/chips/dist/Set.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[37] = list[i];
    	child_ctx[39] = i;
    	return child_ctx;
    }

    const get_default_slot_changes = dirty => ({ chip: dirty[0] & /*chips*/ 1 });
    const get_default_slot_context = ctx => ({ chip: /*chip*/ ctx[37] });

    // (24:6) <ContextFragment         key="SMUI:chips:chip:initialSelected"         value={initialSelected[i]}       >
    function create_default_slot_1$8(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[25].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[27], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope, chips*/ 134217729)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[27], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$8.name,
    		type: "slot",
    		source: "(24:6) <ContextFragment         key=\\\"SMUI:chips:chip:initialSelected\\\"         value={initialSelected[i]}       >",
    		ctx
    	});

    	return block;
    }

    // (23:4) <ContextFragment key="SMUI:chips:chip:index" value={i}>
    function create_default_slot$8(ctx) {
    	let contextfragment;
    	let t;
    	let current;

    	contextfragment = new ContextFragment({
    			props: {
    				key: "SMUI:chips:chip:initialSelected",
    				value: /*initialSelected*/ ctx[10][/*i*/ ctx[39]],
    				$$slots: { default: [create_default_slot_1$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(contextfragment.$$.fragment);
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(contextfragment, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextfragment_changes = {};
    			if (dirty[0] & /*chips*/ 1) contextfragment_changes.value = /*initialSelected*/ ctx[10][/*i*/ ctx[39]];

    			if (dirty[0] & /*$$scope, chips*/ 134217729) {
    				contextfragment_changes.$$scope = { dirty, ctx };
    			}

    			contextfragment.$set(contextfragment_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextfragment.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextfragment.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contextfragment, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(23:4) <ContextFragment key=\\\"SMUI:chips:chip:index\\\" value={i}>",
    		ctx
    	});

    	return block;
    }

    // (22:2) {#each chips as chip, i (key(chip))}
    function create_each_block$3(key_2, ctx) {
    	let first;
    	let contextfragment;
    	let current;

    	contextfragment = new ContextFragment({
    			props: {
    				key: "SMUI:chips:chip:index",
    				value: /*i*/ ctx[39],
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(contextfragment.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(contextfragment, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const contextfragment_changes = {};
    			if (dirty[0] & /*chips*/ 1) contextfragment_changes.value = /*i*/ ctx[39];

    			if (dirty[0] & /*$$scope, chips*/ 134217729) {
    				contextfragment_changes.$$scope = { dirty, ctx };
    			}

    			contextfragment.$set(contextfragment_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextfragment.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextfragment.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(contextfragment, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(22:2) {#each chips as chip, i (key(chip))}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let div_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*chips*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*key*/ ctx[3](/*chip*/ ctx[37]);
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*className*/ ctx[2]]: true,
    				'mdc-chip-set': true,
    				'smui-chip-set--non-interactive': /*nonInteractive*/ ctx[4],
    				'mdc-chip-set--choice': /*choice*/ ctx[5],
    				'mdc-chip-set--filter': /*filter*/ ctx[6],
    				'mdc-chip-set--input': /*input*/ ctx[7]
    			})
    		},
    		{ role: "grid" },
    		/*$$restProps*/ ctx[20]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_attributes(div, div_data);
    			add_location(div, file$a, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			/*div_binding*/ ctx[26](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[1])),
    					action_destroyer(/*forwardEvents*/ ctx[9].call(null, div)),
    					listen_dev(div, "SMUIChipsChip:mount", /*handleChipMount*/ ctx[14], false, false, false),
    					listen_dev(div, "SMUIChipsChip:unmount", /*handleChipUnmount*/ ctx[15], false, false, false),
    					listen_dev(div, "SMUIChip:interaction", /*handleChipInteraction*/ ctx[16], false, false, false),
    					listen_dev(div, "SMUIChip:selection", /*handleChipSelection*/ ctx[17], false, false, false),
    					listen_dev(div, "SMUIChip:removal", /*handleChipRemoval*/ ctx[18], false, false, false),
    					listen_dev(div, "SMUIChip:navigation", /*handleChipNavigation*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*chips, initialSelected, $$scope, key*/ 134218761) {
    				each_value = /*chips*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
    				check_outros();
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty[0] & /*className, nonInteractive, choice, filter, input*/ 244 && div_class_value !== (div_class_value = classMap({
    					[/*className*/ ctx[2]]: true,
    					'mdc-chip-set': true,
    					'smui-chip-set--non-interactive': /*nonInteractive*/ ctx[4],
    					'mdc-chip-set--choice': /*choice*/ ctx[5],
    					'mdc-chip-set--filter': /*filter*/ ctx[6],
    					'mdc-chip-set--input': /*input*/ ctx[7]
    				}))) && { class: div_class_value },
    				{ role: "grid" },
    				dirty[0] & /*$$restProps*/ 1048576 && /*$$restProps*/ ctx[20]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*div_binding*/ ctx[26](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function setDifference(setA, setB) {
    	let _difference = new Set(setA);

    	for (let elem of setB) {
    		_difference.delete(elem);
    	}

    	return _difference;
    }

    function instance_1$4($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","chips","key","selected","nonInteractive","choice","filter","input","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $filterStore;
    	let $choiceStore;
    	let $nonInteractiveStore;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Set', slots, ['default']);
    	const { MDCChipSetFoundation } = deprecated;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { chips = [] } = $$props;
    	let { key = chip => chip } = $$props;
    	let { selected = undefined } = $$props;
    	let { nonInteractive = false } = $$props;
    	let { choice = false } = $$props;
    	let { filter = false } = $$props;
    	let { input = false } = $$props;
    	let element;
    	let instance;
    	let chipAccessorMap = {};
    	let chipAccessorWeakMap = new WeakMap();
    	let initialSelected = chips.map(chipId => choice && selected === chipId || filter && selected.indexOf(chipId) !== -1);
    	const nonInteractiveStore = writable(nonInteractive);
    	validate_store(nonInteractiveStore, 'nonInteractiveStore');
    	component_subscribe($$self, nonInteractiveStore, value => $$invalidate(31, $nonInteractiveStore = value));
    	setContext('SMUI:chips:nonInteractive', nonInteractiveStore);
    	const choiceStore = writable(choice);
    	validate_store(choiceStore, 'choiceStore');
    	component_subscribe($$self, choiceStore, value => $$invalidate(30, $choiceStore = value));
    	setContext('SMUI:chips:choice', choiceStore);
    	const filterStore = writable(filter);
    	validate_store(filterStore, 'filterStore');
    	component_subscribe($$self, filterStore, value => $$invalidate(29, $filterStore = value));
    	setContext('SMUI:chips:filter', filterStore);
    	let previousSelected = filter ? new Set(selected) : selected;

    	onMount(() => {
    		$$invalidate(23, instance = new MDCChipSetFoundation({
    				announceMessage: announce$2,
    				focusChipPrimaryActionAtIndex: index => {
    					var _a;

    					(_a = getAccessor(chips[index])) === null || _a === void 0
    					? void 0
    					: _a.focusPrimaryAction();
    				},
    				focusChipTrailingActionAtIndex: index => {
    					var _a;

    					(_a = getAccessor(chips[index])) === null || _a === void 0
    					? void 0
    					: _a.focusTrailingAction();
    				},
    				getChipListCount: () => chips.length,
    				getIndexOfChipById: chipId => chips.indexOf(chipId),
    				hasClass: className => getElement().classList.contains(className),
    				isRTL: () => getComputedStyle(getElement()).getPropertyValue('direction') === 'rtl',
    				removeChipAtIndex: index => {
    					if (index >= 0 && index < chips.length) {
    						if (choice && selected === chips[index]) {
    							$$invalidate(21, selected = null);
    						} else if (filter && selected.indexOf(chips[index]) !== -1) {
    							selected.splice(selected.indexOf(chips[index]), 1);
    							$$invalidate(21, selected);
    						}

    						chips.splice(index, 1);
    						$$invalidate(0, chips);
    					}
    				},
    				removeFocusFromChipAtIndex: index => {
    					var _a;

    					(_a = getAccessor(chips[index])) === null || _a === void 0
    					? void 0
    					: _a.removeFocus();
    				},
    				selectChipAtIndex: (index, selectedValue, shouldNotifyClients) => {
    					var _a;

    					if (index >= 0 && index < chips.length) {
    						if (filter) {
    							const selIndex = selected.indexOf(chips[index]);

    							if (selectedValue && selIndex === -1) {
    								selected.push(chips[index]);
    								$$invalidate(21, selected);
    							} else if (!selectedValue && selIndex !== -1) {
    								selected.splice(selIndex, 1);
    								$$invalidate(21, selected);
    							}
    						} else if (choice && (selectedValue || selected === chips[index])) {
    							$$invalidate(21, selected = selectedValue ? chips[index] : null);
    						}

    						(_a = getAccessor(chips[index])) === null || _a === void 0
    						? void 0
    						: _a.setSelectedFromChipSet(selectedValue, shouldNotifyClients);
    					}
    				}
    			}));

    		instance.init();

    		if (choice && selected != null) {
    			instance.select(selected);
    		} else if (filter && selected.length) {
    			for (const chipId of selected) {
    				instance.select(chipId);
    			}
    		}

    		return () => {
    			instance.destroy();
    		};
    	});

    	function handleChipMount(event) {
    		const accessor = event.detail;
    		addAccessor(accessor.chipId, accessor);
    	}

    	function handleChipUnmount(event) {
    		const accessor = event.detail;
    		removeAccessor(accessor.chipId);
    	}

    	function handleChipInteraction(event) {
    		if (instance) {
    			instance.handleChipInteraction(event.detail);
    		}
    	}

    	function handleChipSelection(event) {
    		if (instance) {
    			instance.handleChipSelection(event.detail);
    		}
    	}

    	function handleChipRemoval(event) {
    		if (instance) {
    			instance.handleChipRemoval(event.detail);
    		}
    	}

    	function handleChipNavigation(event) {
    		if (instance) {
    			instance.handleChipNavigation(event.detail);
    		}
    	}

    	function getAccessor(chipId) {
    		return chipId instanceof Object
    		? chipAccessorWeakMap.get(chipId)
    		: chipAccessorMap[chipId];
    	}

    	function addAccessor(chipId, accessor) {
    		if (chipId instanceof Object) {
    			chipAccessorWeakMap.set(chipId, accessor);
    		} else {
    			chipAccessorMap[chipId] = accessor;
    		}
    	}

    	function removeAccessor(chipId) {
    		if (chipId instanceof Object) {
    			chipAccessorWeakMap.delete(chipId);
    		} else {
    			delete chipAccessorMap[chipId];
    		}
    	}

    	function getElement() {
    		return element;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(8, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('chips' in $$new_props) $$invalidate(0, chips = $$new_props.chips);
    		if ('key' in $$new_props) $$invalidate(3, key = $$new_props.key);
    		if ('selected' in $$new_props) $$invalidate(21, selected = $$new_props.selected);
    		if ('nonInteractive' in $$new_props) $$invalidate(4, nonInteractive = $$new_props.nonInteractive);
    		if ('choice' in $$new_props) $$invalidate(5, choice = $$new_props.choice);
    		if ('filter' in $$new_props) $$invalidate(6, filter = $$new_props.filter);
    		if ('input' in $$new_props) $$invalidate(7, input = $$new_props.input);
    		if ('$$scope' in $$new_props) $$invalidate(27, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		deprecated,
    		onMount,
    		setContext,
    		writable,
    		get_current_component,
    		announce: announce$2,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		ContextFragment,
    		MDCChipSetFoundation,
    		forwardEvents,
    		use,
    		className,
    		chips,
    		key,
    		selected,
    		nonInteractive,
    		choice,
    		filter,
    		input,
    		element,
    		instance,
    		chipAccessorMap,
    		chipAccessorWeakMap,
    		initialSelected,
    		nonInteractiveStore,
    		choiceStore,
    		filterStore,
    		previousSelected,
    		setDifference,
    		handleChipMount,
    		handleChipUnmount,
    		handleChipInteraction,
    		handleChipSelection,
    		handleChipRemoval,
    		handleChipNavigation,
    		getAccessor,
    		addAccessor,
    		removeAccessor,
    		getElement,
    		$filterStore,
    		$choiceStore,
    		$nonInteractiveStore
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('chips' in $$props) $$invalidate(0, chips = $$new_props.chips);
    		if ('key' in $$props) $$invalidate(3, key = $$new_props.key);
    		if ('selected' in $$props) $$invalidate(21, selected = $$new_props.selected);
    		if ('nonInteractive' in $$props) $$invalidate(4, nonInteractive = $$new_props.nonInteractive);
    		if ('choice' in $$props) $$invalidate(5, choice = $$new_props.choice);
    		if ('filter' in $$props) $$invalidate(6, filter = $$new_props.filter);
    		if ('input' in $$props) $$invalidate(7, input = $$new_props.input);
    		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(23, instance = $$new_props.instance);
    		if ('chipAccessorMap' in $$props) chipAccessorMap = $$new_props.chipAccessorMap;
    		if ('chipAccessorWeakMap' in $$props) chipAccessorWeakMap = $$new_props.chipAccessorWeakMap;
    		if ('initialSelected' in $$props) $$invalidate(10, initialSelected = $$new_props.initialSelected);
    		if ('previousSelected' in $$props) $$invalidate(24, previousSelected = $$new_props.previousSelected);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*nonInteractive*/ 16) {
    			set_store_value(nonInteractiveStore, $nonInteractiveStore = nonInteractive, $nonInteractiveStore);
    		}

    		if ($$self.$$.dirty[0] & /*choice*/ 32) {
    			set_store_value(choiceStore, $choiceStore = choice, $choiceStore);
    		}

    		if ($$self.$$.dirty[0] & /*filter*/ 64) {
    			set_store_value(filterStore, $filterStore = filter, $filterStore);
    		}

    		if ($$self.$$.dirty[0] & /*instance, choice, previousSelected, selected*/ 27263008) {
    			if (instance && choice && previousSelected !== selected) {
    				$$invalidate(24, previousSelected = selected);
    				instance.select(selected);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, filter, selected, previousSelected, chips*/ 27263041) {
    			if (instance && filter) {
    				const setSelected = new Set(selected);
    				const unSelected = setDifference(previousSelected, setSelected);
    				const newSelected = setDifference(setSelected, previousSelected);

    				if (unSelected.size || newSelected.size) {
    					$$invalidate(24, previousSelected = setSelected);

    					for (let chipId of unSelected) {
    						if (chips.indexOf(chipId) !== -1) {
    							instance.handleChipSelection({ chipId, selected: false });
    						}
    					}

    					for (let chipId of newSelected) {
    						instance.handleChipSelection({ chipId, selected: true });
    					}
    				}
    			}
    		}
    	};

    	return [
    		chips,
    		use,
    		className,
    		key,
    		nonInteractive,
    		choice,
    		filter,
    		input,
    		element,
    		forwardEvents,
    		initialSelected,
    		nonInteractiveStore,
    		choiceStore,
    		filterStore,
    		handleChipMount,
    		handleChipUnmount,
    		handleChipInteraction,
    		handleChipSelection,
    		handleChipRemoval,
    		handleChipNavigation,
    		$$restProps,
    		selected,
    		getElement,
    		instance,
    		previousSelected,
    		slots,
    		div_binding,
    		$$scope
    	];
    }

    class Set_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$4,
    			create_fragment$f,
    			safe_not_equal,
    			{
    				use: 1,
    				class: 2,
    				chips: 0,
    				key: 3,
    				selected: 21,
    				nonInteractive: 4,
    				choice: 5,
    				filter: 6,
    				input: 7,
    				getElement: 22
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Set_1",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get use() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get chips() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set chips(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nonInteractive() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nonInteractive(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get choice() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set choice(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filter() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filter(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input() {
    		throw new Error("<Set>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[22];
    	}

    	set getElement(value) {
    		throw new Error("<Set>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/chips/dist/Checkmark.svelte generated by Svelte v3.44.3 */
    const file$9 = "node_modules/@smui/chips/dist/Checkmark.svelte";

    function create_fragment$e(ctx) {
    	let span;
    	let svg;
    	let path;
    	let span_class_value;
    	let useActions_action;
    	let mounted;
    	let dispose;

    	let span_levels = [
    		{
    			class: span_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-chip__checkmark': true
    			})
    		},
    		/*$$restProps*/ ctx[3]
    	];

    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "class", "mdc-chip__checkmark-path");
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke", "black");
    			attr_dev(path, "d", "M1.73,12.91 8.1,19.28 22.79,4.59");
    			add_location(path, file$9, 10, 4, 220);
    			attr_dev(svg, "class", "mdc-chip__checkmark-svg");
    			attr_dev(svg, "viewBox", "-2 -3 30 30");
    			add_location(svg, file$9, 9, 2, 156);
    			set_attributes(span, span_data);
    			add_location(span, file$9, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, svg);
    			append_dev(svg, path);
    			/*span_binding*/ ctx[5](span);

    			if (!mounted) {
    				dispose = action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				dirty & /*className*/ 2 && span_class_value !== (span_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-chip__checkmark': true
    				})) && { class: span_class_value },
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			/*span_binding*/ ctx[5](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Checkmark', slots, []);
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let element;

    	function getElement() {
    		return element;
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    	};

    	$$self.$capture_state = () => ({
    		classMap,
    		useActions,
    		use,
    		className,
    		element,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [use, className, element, $$restProps, getElement, span_binding];
    }

    class Checkmark extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$e, safe_not_equal, { use: 0, class: 1, getElement: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Checkmark",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get use() {
    		throw new Error("<Checkmark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Checkmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Checkmark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Checkmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[4];
    	}

    	set getElement(value) {
    		throw new Error("<Checkmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/chips/dist/Text.svelte generated by Svelte v3.44.3 */
    const file$8 = "node_modules/@smui/chips/dist/Text.svelte";

    // (1:0) {#if $filter}
    function create_if_block_1$2(ctx) {
    	let checkmark;
    	let current;
    	let checkmark_props = {};
    	checkmark = new Checkmark({ props: checkmark_props, $$inline: true });
    	/*checkmark_binding*/ ctx[22](checkmark);

    	const block = {
    		c: function create() {
    			create_component(checkmark.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checkmark, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checkmark_changes = {};
    			checkmark.$set(checkmark_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkmark.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkmark.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*checkmark_binding*/ ctx[22](null);
    			destroy_component(checkmark, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(1:0) {#if $filter}",
    		ctx
    	});

    	return block;
    }

    // (12:2) {:else}
    function create_else_block$1(ctx) {
    	let span1;
    	let span0;
    	let span1_class_value;
    	let span1_role_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[21].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

    	let span1_levels = [
    		{
    			class: span1_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-chip__primary-action': true
    			})
    		},
    		{
    			role: span1_role_value = /*$filter*/ ctx[7]
    			? 'checkbox'
    			: /*$choice*/ ctx[9] ? 'radio' : 'button'
    		},
    		/*$filter*/ ctx[7] || /*$choice*/ ctx[9]
    		? {
    				'aria-selected': /*$isSelected*/ ctx[10] ? 'true' : 'false'
    			}
    		: {},
    		{ tabindex: /*tabindex*/ ctx[2] },
    		/*internalAttrs*/ ctx[6],
    		/*$$restProps*/ ctx[16]
    	];

    	let span1_data = {};

    	for (let i = 0; i < span1_levels.length; i += 1) {
    		span1_data = assign(span1_data, span1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span1 = element("span");
    			span0 = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span0, "class", "mdc-chip__text");
    			add_location(span0, file$8, 24, 23, 608);
    			set_attributes(span1, span1_data);
    			add_location(span1, file$8, 12, 4, 232);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span1, anchor);
    			append_dev(span1, span0);

    			if (default_slot) {
    				default_slot.m(span0, null);
    			}

    			/*span1_binding*/ ctx[23](span1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[20],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[20], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
    				(!current || dirty & /*className*/ 2 && span1_class_value !== (span1_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-chip__primary-action': true
    				}))) && { class: span1_class_value },
    				(!current || dirty & /*$filter, $choice*/ 640 && span1_role_value !== (span1_role_value = /*$filter*/ ctx[7]
    				? 'checkbox'
    				: /*$choice*/ ctx[9] ? 'radio' : 'button')) && { role: span1_role_value },
    				dirty & /*$filter, $choice, $isSelected*/ 1664 && (/*$filter*/ ctx[7] || /*$choice*/ ctx[9]
    				? {
    						'aria-selected': /*$isSelected*/ ctx[10] ? 'true' : 'false'
    					}
    				: {}),
    				(!current || dirty & /*tabindex*/ 4) && { tabindex: /*tabindex*/ ctx[2] },
    				dirty & /*internalAttrs*/ 64 && /*internalAttrs*/ ctx[6],
    				dirty & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16]
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span1);
    			if (default_slot) default_slot.d(detaching);
    			/*span1_binding*/ ctx[23](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(12:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (10:2) {#if $nonInteractive}
    function create_if_block$6(ctx) {
    	let span;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[21].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", "mdc-chip__text");
    			add_location(span, file$8, 10, 4, 173);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[20],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[20], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(10:2) {#if $nonInteractive}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let t;
    	let span;
    	let current_block_type_index;
    	let if_block1;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$filter*/ ctx[7] && create_if_block_1$2(ctx);
    	const if_block_creators = [create_if_block$6, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$nonInteractive*/ ctx[8]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			span = element("span");
    			if_block1.c();
    			attr_dev(span, "role", "gridcell");
    			add_location(span, file$8, 3, 0, 54);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, span, anchor);
    			if_blocks[current_block_type_index].m(span, null);
    			/*span_binding*/ ctx[24](span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[11].call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$filter*/ ctx[7]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$filter*/ 128) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(span, null);
    			}

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(span);
    			if_blocks[current_block_type_index].d();
    			/*span_binding*/ ctx[24](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","tabindex","focus","getInput","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $filter;
    	let $nonInteractive;
    	let $choice;
    	let $isSelected;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Text', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { tabindex = getContext('SMUI:chips:chip:focusable') ? 0 : -1 } = $$props;
    	let element;
    	let input = undefined;
    	let primaryAction = undefined;
    	let internalAttrs = {};
    	const nonInteractive = getContext('SMUI:chips:nonInteractive');
    	validate_store(nonInteractive, 'nonInteractive');
    	component_subscribe($$self, nonInteractive, value => $$invalidate(8, $nonInteractive = value));
    	const choice = getContext('SMUI:chips:choice');
    	validate_store(choice, 'choice');
    	component_subscribe($$self, choice, value => $$invalidate(9, $choice = value));
    	const filter = getContext('SMUI:chips:filter');
    	validate_store(filter, 'filter');
    	component_subscribe($$self, filter, value => $$invalidate(7, $filter = value));
    	const isSelected = getContext('SMUI:chips:chip:isSelected');
    	validate_store(isSelected, 'isSelected');
    	component_subscribe($$self, isSelected, value => $$invalidate(10, $isSelected = value));

    	onMount(() => {
    		let accessor = { focus, addAttr };
    		dispatch(getElement(), 'SMUIChipsChipPrimaryAction:mount', accessor);

    		return () => {
    			dispatch(getElement(), 'SMUIChipsChipPrimaryAction:unmount', accessor);
    		};
    	});

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(6, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function waitForTabindex(fn) {
    		if (internalAttrs['tabindex'] !== element.getAttribute('tabindex')) {
    			tick().then(fn);
    		} else {
    			fn();
    		}
    	}

    	function focus() {
    		// Let the tabindex change propagate.
    		waitForTabindex(() => {
    			primaryAction && primaryAction.focus();
    		});
    	}

    	function getInput() {
    		return input && input.getElement();
    	}

    	function getElement() {
    		return element;
    	}

    	function checkmark_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(4, input);
    		});
    	}

    	function span1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			primaryAction = $$value;
    			$$invalidate(5, primaryAction);
    		});
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(3, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('tabindex' in $$new_props) $$invalidate(2, tabindex = $$new_props.tabindex);
    		if ('$$scope' in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		getContext,
    		tick,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		Checkmark,
    		forwardEvents,
    		use,
    		className,
    		tabindex,
    		element,
    		input,
    		primaryAction,
    		internalAttrs,
    		nonInteractive,
    		choice,
    		filter,
    		isSelected,
    		addAttr,
    		waitForTabindex,
    		focus,
    		getInput,
    		getElement,
    		$filter,
    		$nonInteractive,
    		$choice,
    		$isSelected
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('tabindex' in $$props) $$invalidate(2, tabindex = $$new_props.tabindex);
    		if ('element' in $$props) $$invalidate(3, element = $$new_props.element);
    		if ('input' in $$props) $$invalidate(4, input = $$new_props.input);
    		if ('primaryAction' in $$props) $$invalidate(5, primaryAction = $$new_props.primaryAction);
    		if ('internalAttrs' in $$props) $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		tabindex,
    		element,
    		input,
    		primaryAction,
    		internalAttrs,
    		$filter,
    		$nonInteractive,
    		$choice,
    		$isSelected,
    		forwardEvents,
    		nonInteractive,
    		choice,
    		filter,
    		isSelected,
    		$$restProps,
    		focus,
    		getInput,
    		getElement,
    		$$scope,
    		slots,
    		checkmark_binding,
    		span1_binding,
    		span_binding
    	];
    }

    class Text$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$d, safe_not_equal, {
    			use: 0,
    			class: 1,
    			tabindex: 2,
    			focus: 17,
    			getInput: 18,
    			getElement: 19
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Text",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get use() {
    		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabindex() {
    		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabindex(value) {
    		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[17];
    	}

    	set focus(value) {
    		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getInput() {
    		return this.$$.ctx[18];
    	}

    	set getInput(value) {
    		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[19];
    	}

    	set getElement(value) {
    		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/chips/dist/TrailingAction.svelte generated by Svelte v3.44.3 */
    const file$7 = "node_modules/@smui/chips/dist/TrailingAction.svelte";

    // (29:2) {#if touch}
    function create_if_block$5(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "mdc-deprecated-chip-trailing-action__touch");
    			add_location(span, file$7, 29, 4, 763);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(29:2) {#if touch}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let button;
    	let span0;
    	let t0;
    	let t1;
    	let span1;
    	let span1_class_value;
    	let useActions_action;
    	let button_class_value;
    	let button_style_value;
    	let button_aria_hidden_value;
    	let Ripple_action;
    	let useActions_action_1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*touch*/ ctx[4] && create_if_block$5(ctx);
    	const default_slot_template = /*#slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

    	let span1_levels = [
    		{
    			class: span1_class_value = classMap({
    				[/*icon$class*/ ctx[7]]: true,
    				'mdc-deprecated-chip-trailing-action__icon': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[17], 'icon$')
    	];

    	let span1_data = {};

    	for (let i = 0; i < span1_levels.length; i += 1) {
    		span1_data = assign(span1_data, span1_levels[i]);
    	}

    	let button_levels = [
    		{
    			class: button_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-deprecated-chip-trailing-action': true,
    				.../*internalClasses*/ ctx[10]
    			})
    		},
    		{
    			style: button_style_value = Object.entries(/*internalStyles*/ ctx[11]).map(func).concat([/*style*/ ctx[2]]).join(' ')
    		},
    		{
    			"aria-hidden": button_aria_hidden_value = /*nonNavigable*/ ctx[5] ? 'true' : undefined
    		},
    		{ tabindex: "-1" },
    		/*internalAttrs*/ ctx[12],
    		exclude(/*$$restProps*/ ctx[17], ['icon$'])
    	];

    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			span0 = element("span");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			span1 = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span0, "class", "mdc-deprecated-chip-trailing-action__ripple");
    			add_location(span0, file$7, 27, 2, 684);
    			set_attributes(span1, span1_data);
    			add_location(span1, file$7, 31, 2, 833);
    			set_attributes(button, button_data);
    			add_location(button, file$7, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span0);
    			append_dev(button, t0);
    			if (if_block) if_block.m(button, null);
    			append_dev(button, t1);
    			append_dev(button, span1);

    			if (default_slot) {
    				default_slot.m(span1, null);
    			}

    			if (button.autofocus) button.focus();
    			/*button_binding*/ ctx[24](button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span1, /*icon$use*/ ctx[6])),
    					action_destroyer(Ripple_action = Ripple.call(null, button, {
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						addClass: /*addClass*/ ctx[14],
    						removeClass: /*removeClass*/ ctx[15],
    						addStyle: /*addStyle*/ ctx[16]
    					})),
    					action_destroyer(useActions_action_1 = useActions.call(null, button, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[13].call(null, button)),
    					listen_dev(button, "click", /*click_handler*/ ctx[25], false, false, false),
    					listen_dev(button, "keydown", /*keydown_handler*/ ctx[26], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*touch*/ ctx[4]) {
    				if (if_block) ; else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(button, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[22],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
    				(!current || dirty & /*icon$class*/ 128 && span1_class_value !== (span1_class_value = classMap({
    					[/*icon$class*/ ctx[7]]: true,
    					'mdc-deprecated-chip-trailing-action__icon': true
    				}))) && { class: span1_class_value },
    				dirty & /*$$restProps*/ 131072 && prefixFilter(/*$$restProps*/ ctx[17], 'icon$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*icon$use*/ 64) useActions_action.update.call(null, /*icon$use*/ ctx[6]);

    			set_attributes(button, button_data = get_spread_update(button_levels, [
    				(!current || dirty & /*className, internalClasses*/ 1026 && button_class_value !== (button_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-deprecated-chip-trailing-action': true,
    					.../*internalClasses*/ ctx[10]
    				}))) && { class: button_class_value },
    				(!current || dirty & /*internalStyles, style*/ 2052 && button_style_value !== (button_style_value = Object.entries(/*internalStyles*/ ctx[11]).map(func).concat([/*style*/ ctx[2]]).join(' '))) && { style: button_style_value },
    				(!current || dirty & /*nonNavigable*/ 32 && button_aria_hidden_value !== (button_aria_hidden_value = /*nonNavigable*/ ctx[5] ? 'true' : undefined)) && { "aria-hidden": button_aria_hidden_value },
    				{ tabindex: "-1" },
    				dirty & /*internalAttrs*/ 4096 && /*internalAttrs*/ ctx[12],
    				dirty & /*$$restProps*/ 131072 && exclude(/*$$restProps*/ ctx[17], ['icon$'])
    			]));

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple*/ 8) Ripple_action.update.call(null, {
    				ripple: /*ripple*/ ctx[3],
    				unbounded: false,
    				addClass: /*addClass*/ ctx[14],
    				removeClass: /*removeClass*/ ctx[15],
    				addStyle: /*addStyle*/ ctx[16]
    			});

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/ 1) useActions_action_1.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			/*button_binding*/ ctx[24](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = ([name, value]) => `${name}: ${value};`;

    function instance_1$3($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","style","ripple","touch","nonNavigable","icon$use","icon$class","isNavigable","focus","removeFocus","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TrailingAction', slots, ['default']);
    	const { MDCChipTrailingActionFoundation } = deprecated;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { style = '' } = $$props;
    	let { ripple = true } = $$props;
    	let { touch = false } = $$props;
    	let { nonNavigable = false } = $$props;
    	let { icon$use = [] } = $$props;
    	let { icon$class = '' } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let internalStyles = {};
    	let internalAttrs = {};

    	onMount(() => {
    		$$invalidate(9, instance = new MDCChipTrailingActionFoundation({
    				focus: () => {
    					const element = getElement();

    					// Let the tabindex change propagate.
    					waitForTabindex(() => {
    						element.focus();
    					});
    				},
    				getAttribute: getAttr,
    				notifyInteraction: trigger => dispatch(getElement(), 'SMUIChipTrailingAction:interaction', { trigger }, undefined, true),
    				notifyNavigation: key => {
    					dispatch(getElement(), 'SMUIChipTrailingAction:navigation', { key }, undefined, true);
    				},
    				setAttribute: addAttr
    			}));

    		const accessor = { isNavigable, focus, removeFocus };
    		dispatch(getElement(), 'SMUIChipsChipTrailingAction:mount', accessor);
    		instance.init();

    		return () => {
    			dispatch(getElement(), 'SMUIChipsChipTrailingAction:unmount', accessor);
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(10, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(10, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function addStyle(name, value) {
    		if (internalStyles[name] != value) {
    			if (value === '' || value == null) {
    				delete internalStyles[name];
    				$$invalidate(11, internalStyles);
    			} else {
    				$$invalidate(11, internalStyles[name] = value, internalStyles);
    			}
    		}
    	}

    	function getAttr(name) {
    		var _a;

    		return name in internalAttrs
    		? (_a = internalAttrs[name]) !== null && _a !== void 0
    			? _a
    			: null
    		: getElement().getAttribute(name);
    	}

    	function addAttr(name, value) {
    		if (internalAttrs[name] !== value) {
    			$$invalidate(12, internalAttrs[name] = value, internalAttrs);
    		}
    	}

    	function waitForTabindex(fn) {
    		if (internalAttrs['tabindex'] !== element.getAttribute('tabindex')) {
    			tick().then(fn);
    		} else {
    			fn();
    		}
    	}

    	function isNavigable() {
    		return instance.isNavigable();
    	}

    	function focus() {
    		instance.focus();
    	}

    	function removeFocus() {
    		instance.removeFocus();
    	}

    	function getElement() {
    		return element;
    	}

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(8, element);
    		});
    	}

    	const click_handler = event => instance && instance.handleClick(event);
    	const keydown_handler = event => instance && instance.handleKeydown(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
    		if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('touch' in $$new_props) $$invalidate(4, touch = $$new_props.touch);
    		if ('nonNavigable' in $$new_props) $$invalidate(5, nonNavigable = $$new_props.nonNavigable);
    		if ('icon$use' in $$new_props) $$invalidate(6, icon$use = $$new_props.icon$use);
    		if ('icon$class' in $$new_props) $$invalidate(7, icon$class = $$new_props.icon$class);
    		if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		deprecated,
    		onMount,
    		tick,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		Ripple,
    		MDCChipTrailingActionFoundation,
    		forwardEvents,
    		use,
    		className,
    		style,
    		ripple,
    		touch,
    		nonNavigable,
    		icon$use,
    		icon$class,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		addClass,
    		removeClass,
    		addStyle,
    		getAttr,
    		addAttr,
    		waitForTabindex,
    		isNavigable,
    		focus,
    		removeFocus,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
    		if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ('touch' in $$props) $$invalidate(4, touch = $$new_props.touch);
    		if ('nonNavigable' in $$props) $$invalidate(5, nonNavigable = $$new_props.nonNavigable);
    		if ('icon$use' in $$props) $$invalidate(6, icon$use = $$new_props.icon$use);
    		if ('icon$class' in $$props) $$invalidate(7, icon$class = $$new_props.icon$class);
    		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(9, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(10, internalClasses = $$new_props.internalClasses);
    		if ('internalStyles' in $$props) $$invalidate(11, internalStyles = $$new_props.internalStyles);
    		if ('internalAttrs' in $$props) $$invalidate(12, internalAttrs = $$new_props.internalAttrs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		use,
    		className,
    		style,
    		ripple,
    		touch,
    		nonNavigable,
    		icon$use,
    		icon$class,
    		element,
    		instance,
    		internalClasses,
    		internalStyles,
    		internalAttrs,
    		forwardEvents,
    		addClass,
    		removeClass,
    		addStyle,
    		$$restProps,
    		isNavigable,
    		focus,
    		removeFocus,
    		getElement,
    		$$scope,
    		slots,
    		button_binding,
    		click_handler,
    		keydown_handler
    	];
    }

    class TrailingAction$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$3, create_fragment$c, safe_not_equal, {
    			use: 0,
    			class: 1,
    			style: 2,
    			ripple: 3,
    			touch: 4,
    			nonNavigable: 5,
    			icon$use: 6,
    			icon$class: 7,
    			isNavigable: 18,
    			focus: 19,
    			removeFocus: 20,
    			getElement: 21
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TrailingAction",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get use() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get touch() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set touch(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nonNavigable() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nonNavigable(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon$use() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon$use(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon$class() {
    		throw new Error("<TrailingAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon$class(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isNavigable() {
    		return this.$$.ctx[18];
    	}

    	set isNavigable(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[19];
    	}

    	set focus(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get removeFocus() {
    		return this.$$.ctx[20];
    	}

    	set removeFocus(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[21];
    	}

    	set getElement(value) {
    		throw new Error("<TrailingAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Set$1 = Set_1;
    const Text = Text$1;
    const TrailingAction = TrailingAction$1;

    /* src/components/partner/PartnerService.svelte generated by Svelte v3.44.3 */

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (24:0) <H2>
    function create_default_slot_8$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Services");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$5.name,
    		type: "slot",
    		source: "(24:0) <H2>",
    		ctx
    	});

    	return block;
    }

    // (27:4) <Text>
    function create_default_slot_7$6(ctx) {
    	let t_value = /*chip*/ ctx[11].service + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*chip*/ 2048 && t_value !== (t_value = /*chip*/ ctx[11].service + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$6.name,
    		type: "slot",
    		source: "(27:4) <Text>",
    		ctx
    	});

    	return block;
    }

    // (28:4) {#if edit}
    function create_if_block_2(ctx) {
    	let trailingaction;
    	let current;

    	trailingaction = new TrailingAction({
    			props: {
    				icon$class: "material-icons",
    				$$slots: { default: [create_default_slot_6$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(trailingaction.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(trailingaction, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trailingaction.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trailingaction.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(trailingaction, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(28:4) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (29:4) <TrailingAction icon$class="material-icons">
    function create_default_slot_6$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$6.name,
    		type: "slot",
    		source: "(29:4) <TrailingAction icon$class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:2) <Chip {chip}>
    function create_default_slot_5$6(ctx) {
    	let text_1;
    	let t;
    	let if_block_anchor;
    	let current;

    	text_1 = new Text({
    			props: {
    				$$slots: { default: [create_default_slot_7$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*edit*/ ctx[1] && create_if_block_2(ctx);

    	const block = {
    		c: function create() {
    			create_component(text_1.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(text_1, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const text_1_changes = {};

    			if (dirty & /*$$scope, chip*/ 6144) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_1.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_1.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(text_1, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$6.name,
    		type: "slot",
    		source: "(26:2) <Chip {chip}>",
    		ctx
    	});

    	return block;
    }

    // (25:0) <Set bind:chips={dtos} let:chip input>
    function create_default_slot_4$6(ctx) {
    	let chip;
    	let current;

    	chip = new Chip({
    			props: {
    				chip: /*chip*/ ctx[11],
    				$$slots: { default: [create_default_slot_5$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(chip.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(chip, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const chip_changes = {};
    			if (dirty & /*chip*/ 2048) chip_changes.chip = /*chip*/ ctx[11];

    			if (dirty & /*$$scope, edit, chip*/ 6146) {
    				chip_changes.$$scope = { dirty, ctx };
    			}

    			chip.$set(chip_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chip.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chip.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(chip, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$6.name,
    		type: "slot",
    		source: "(25:0) <Set bind:chips={dtos} let:chip input>",
    		ctx
    	});

    	return block;
    }

    // (33:0) {#if edit}
    function create_if_block$4(ctx) {
    	let select;
    	let updating_value;
    	let t;
    	let button;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[7](value);
    	}

    	let select_props = {
    		label: "Service auswählen",
    		$$slots: { default: [create_default_slot_2$7] },
    		$$scope: { ctx }
    	};

    	if (/*newService*/ ctx[3] !== void 0) {
    		select_props.value = /*newService*/ ctx[3];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'value', select_value_binding));

    	button = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*add*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    			t = space();
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};

    			if (dirty & /*$$scope, serviceTypeDtos*/ 4100) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*newService*/ 8) {
    				updating_value = true;
    				select_changes.value = /*newService*/ ctx[3];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    			const button_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(33:0) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (36:4) {#if !contained(item)}
    function create_if_block_1$1(ctx) {
    	let option;
    	let current;

    	option = new Option({
    			props: {
    				value: /*item*/ ctx[8].service,
    				$$slots: { default: [create_default_slot_3$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(option.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(option, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const option_changes = {};
    			if (dirty & /*serviceTypeDtos*/ 4) option_changes.value = /*item*/ ctx[8].service;

    			if (dirty & /*$$scope, serviceTypeDtos*/ 4100) {
    				option_changes.$$scope = { dirty, ctx };
    			}

    			option.$set(option_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(option.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(option.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(option, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(36:4) {#if !contained(item)}",
    		ctx
    	});

    	return block;
    }

    // (37:4) <Option value={item.service}>
    function create_default_slot_3$7(ctx) {
    	let t_value = /*item*/ ctx[8].service + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*serviceTypeDtos*/ 4 && t_value !== (t_value = /*item*/ ctx[8].service + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$7.name,
    		type: "slot",
    		source: "(37:4) <Option value={item.service}>",
    		ctx
    	});

    	return block;
    }

    // (35:2) {#each serviceTypeDtos as item}
    function create_each_block$2(ctx) {
    	let show_if = !/*contained*/ ctx[5](/*item*/ ctx[8]);
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*serviceTypeDtos*/ 4) show_if = !/*contained*/ ctx[5](/*item*/ ctx[8]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*serviceTypeDtos*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(35:2) {#each serviceTypeDtos as item}",
    		ctx
    	});

    	return block;
    }

    // (34:2) <Select bind:value={newService} label="Service auswählen">
    function create_default_slot_2$7(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*serviceTypeDtos*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*serviceTypeDtos, contained*/ 36) {
    				each_value = /*serviceTypeDtos*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$7.name,
    		type: "slot",
    		source: "(34:2) <Select bind:value={newService} label=\\\"Service auswählen\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:25) <Label>
    function create_default_slot_1$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Hinzufügen");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$7.name,
    		type: "slot",
    		source: "(41:25) <Label>",
    		ctx
    	});

    	return block;
    }

    // (41:2) <Button on:click={add}>
    function create_default_slot$7(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_1$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(41:2) <Button on:click={add}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let h2;
    	let t0;
    	let set;
    	let updating_chips;
    	let t1;
    	let if_block_anchor;
    	let current;

    	h2 = new H2({
    			props: {
    				$$slots: { default: [create_default_slot_8$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function set_chips_binding(value) {
    		/*set_chips_binding*/ ctx[6](value);
    	}

    	let set_props = {
    		input: true,
    		$$slots: {
    			default: [
    				create_default_slot_4$6,
    				({ chip }) => ({ 11: chip }),
    				({ chip }) => chip ? 2048 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	if (/*dtos*/ ctx[0] !== void 0) {
    		set_props.chips = /*dtos*/ ctx[0];
    	}

    	set = new Set$1({ props: set_props, $$inline: true });
    	binding_callbacks.push(() => bind(set, 'chips', set_chips_binding));
    	let if_block = /*edit*/ ctx[1] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			create_component(h2.$$.fragment);
    			t0 = space();
    			create_component(set.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(h2, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(set, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const h2_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				h2_changes.$$scope = { dirty, ctx };
    			}

    			h2.$set(h2_changes);
    			const set_changes = {};

    			if (dirty & /*$$scope, chip, edit*/ 6146) {
    				set_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_chips && dirty & /*dtos*/ 1) {
    				updating_chips = true;
    				set_changes.chips = /*dtos*/ ctx[0];
    				add_flush_callback(() => updating_chips = false);
    			}

    			set.$set(set_changes);

    			if (/*edit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h2.$$.fragment, local);
    			transition_in(set.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h2.$$.fragment, local);
    			transition_out(set.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(h2, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(set, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PartnerService', slots, []);
    	let { dtos } = $$props;
    	let { edit = false } = $$props;
    	let newService = "";
    	let serviceTypeDtos = [];

    	function add() {
    		let dto = serviceTypeDtos.find(item => item.service == newService);
    		let temp = dtos;
    		temp.push(dto);
    		$$invalidate(0, dtos = temp);
    	}

    	function contained(item) {
    		return dtos.find(dto => dto.service == item.service) !== undefined;
    	}

    	const writable_props = ['dtos', 'edit'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PartnerService> was created with unknown prop '${key}'`);
    	});

    	function set_chips_binding(value) {
    		dtos = value;
    		$$invalidate(0, dtos);
    	}

    	function select_value_binding(value) {
    		newService = value;
    		$$invalidate(3, newService);
    	}

    	$$self.$$set = $$props => {
    		if ('dtos' in $$props) $$invalidate(0, dtos = $$props.dtos);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    	};

    	$$self.$capture_state = () => ({
    		Chip,
    		Set: Set$1,
    		TrailingAction,
    		Text,
    		Select,
    		Option,
    		Button: Button_1,
    		Label,
    		PartnerServiceTypeService,
    		H2,
    		dtos,
    		edit,
    		newService,
    		serviceTypeDtos,
    		add,
    		contained
    	});

    	$$self.$inject_state = $$props => {
    		if ('dtos' in $$props) $$invalidate(0, dtos = $$props.dtos);
    		if ('edit' in $$props) $$invalidate(1, edit = $$props.edit);
    		if ('newService' in $$props) $$invalidate(3, newService = $$props.newService);
    		if ('serviceTypeDtos' in $$props) $$invalidate(2, serviceTypeDtos = $$props.serviceTypeDtos);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*edit, serviceTypeDtos*/ 6) {
    			if (edit && serviceTypeDtos.length == 0) {
    				PartnerServiceTypeService.list().then(response => $$invalidate(2, serviceTypeDtos = response));
    			}
    		}
    	};

    	return [
    		dtos,
    		edit,
    		serviceTypeDtos,
    		newService,
    		add,
    		contained,
    		set_chips_binding,
    		select_value_binding
    	];
    }

    class PartnerService extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$b, safe_not_equal, { dtos: 0, edit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PartnerService",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dtos*/ ctx[0] === undefined && !('dtos' in props)) {
    			console.warn("<PartnerService> was created without expected prop 'dtos'");
    		}
    	}

    	get dtos() {
    		throw new Error("<PartnerService>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dtos(value) {
    		throw new Error("<PartnerService>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get edit() {
    		throw new Error("<PartnerService>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set edit(value) {
    		throw new Error("<PartnerService>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/Partner.svelte generated by Svelte v3.44.3 */
    const file$6 = "src/routes/Partner.svelte";

    // (38:2) <H1>
    function create_default_slot_13$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Partner");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$3.name,
    		type: "slot",
    		source: "(38:2) <H1>",
    		ctx
    	});

    	return block;
    }

    // (40:4) <Cell span={12}>
    function create_default_slot_12$3(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding(value) {
    		/*labeltextfieldtoggle_value_binding*/ ctx[5](value);
    	}

    	let labeltextfieldtoggle_props = { label: "Name", edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].name !== void 0) {
    		labeltextfieldtoggle_props.value = /*partner*/ ctx[1].name;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 1) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[0];

    			if (!updating_value && dirty & /*partner*/ 2) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*partner*/ ctx[1].name;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$3.name,
    		type: "slot",
    		source: "(40:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (43:4) <Cell span={12}>
    function create_default_slot_11$3(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_1(value) {
    		/*labeltextfieldtoggle_value_binding_1*/ ctx[6](value);
    	}

    	let labeltextfieldtoggle_props = { label: "Website", edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].website !== void 0) {
    		labeltextfieldtoggle_props.value = /*partner*/ ctx[1].website;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 1) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[0];

    			if (!updating_value && dirty & /*partner*/ 2) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*partner*/ ctx[1].website;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$3.name,
    		type: "slot",
    		source: "(43:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (46:4) <Cell span={12}>
    function create_default_slot_10$3(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_2(value) {
    		/*labeltextfieldtoggle_value_binding_2*/ ctx[7](value);
    	}

    	let labeltextfieldtoggle_props = { label: "IBAN", edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].iban !== void 0) {
    		labeltextfieldtoggle_props.value = /*partner*/ ctx[1].iban;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_2));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 1) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[0];

    			if (!updating_value && dirty & /*partner*/ 2) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*partner*/ ctx[1].iban;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$3.name,
    		type: "slot",
    		source: "(46:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (49:4) <Cell span={6}>
    function create_default_slot_9$3(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_3(value) {
    		/*labeltextfieldtoggle_value_binding_3*/ ctx[8](value);
    	}

    	let labeltextfieldtoggle_props = { label: "Bank", edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].bank !== void 0) {
    		labeltextfieldtoggle_props.value = /*partner*/ ctx[1].bank;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_3));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 1) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[0];

    			if (!updating_value && dirty & /*partner*/ 2) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*partner*/ ctx[1].bank;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$3.name,
    		type: "slot",
    		source: "(49:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (52:4) <Cell span={6}>
    function create_default_slot_8$4(ctx) {
    	let labeltextfieldtoggle;
    	let updating_value;
    	let current;

    	function labeltextfieldtoggle_value_binding_4(value) {
    		/*labeltextfieldtoggle_value_binding_4*/ ctx[9](value);
    	}

    	let labeltextfieldtoggle_props = { label: "BIC", edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].bic !== void 0) {
    		labeltextfieldtoggle_props.value = /*partner*/ ctx[1].bic;
    	}

    	labeltextfieldtoggle = new LabelTextfieldToggle({
    			props: labeltextfieldtoggle_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(labeltextfieldtoggle, 'value', labeltextfieldtoggle_value_binding_4));

    	const block = {
    		c: function create() {
    			create_component(labeltextfieldtoggle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labeltextfieldtoggle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labeltextfieldtoggle_changes = {};
    			if (dirty & /*edit*/ 1) labeltextfieldtoggle_changes.edit = /*edit*/ ctx[0];

    			if (!updating_value && dirty & /*partner*/ 2) {
    				updating_value = true;
    				labeltextfieldtoggle_changes.value = /*partner*/ ctx[1].bic;
    				add_flush_callback(() => updating_value = false);
    			}

    			labeltextfieldtoggle.$set(labeltextfieldtoggle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labeltextfieldtoggle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labeltextfieldtoggle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labeltextfieldtoggle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$4.name,
    		type: "slot",
    		source: "(52:4) <Cell span={6}>",
    		ctx
    	});

    	return block;
    }

    // (56:6) <Group>
    function create_default_slot_7$5(ctx) {
    	let partnercontact;
    	let updating_dtos;
    	let current;

    	function partnercontact_dtos_binding(value) {
    		/*partnercontact_dtos_binding*/ ctx[10](value);
    	}

    	let partnercontact_props = { edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].contacts !== void 0) {
    		partnercontact_props.dtos = /*partner*/ ctx[1].contacts;
    	}

    	partnercontact = new PartnerContact({
    			props: partnercontact_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(partnercontact, 'dtos', partnercontact_dtos_binding));

    	const block = {
    		c: function create() {
    			create_component(partnercontact.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(partnercontact, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const partnercontact_changes = {};
    			if (dirty & /*edit*/ 1) partnercontact_changes.edit = /*edit*/ ctx[0];

    			if (!updating_dtos && dirty & /*partner*/ 2) {
    				updating_dtos = true;
    				partnercontact_changes.dtos = /*partner*/ ctx[1].contacts;
    				add_flush_callback(() => updating_dtos = false);
    			}

    			partnercontact.$set(partnercontact_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(partnercontact.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(partnercontact.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(partnercontact, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$5.name,
    		type: "slot",
    		source: "(56:6) <Group>",
    		ctx
    	});

    	return block;
    }

    // (55:4) <Cell span={12}>
    function create_default_slot_6$5(ctx) {
    	let group;
    	let current;

    	group = new Group({
    			props: {
    				$$slots: { default: [create_default_slot_7$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const group_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				group_changes.$$scope = { dirty, ctx };
    			}

    			group.$set(group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$5.name,
    		type: "slot",
    		source: "(55:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (61:6) <Group>
    function create_default_slot_5$5(ctx) {
    	let partnerlogin;
    	let updating_dtos;
    	let current;

    	function partnerlogin_dtos_binding(value) {
    		/*partnerlogin_dtos_binding*/ ctx[11](value);
    	}

    	let partnerlogin_props = { edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].logins !== void 0) {
    		partnerlogin_props.dtos = /*partner*/ ctx[1].logins;
    	}

    	partnerlogin = new PartnerLogin({
    			props: partnerlogin_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(partnerlogin, 'dtos', partnerlogin_dtos_binding));

    	const block = {
    		c: function create() {
    			create_component(partnerlogin.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(partnerlogin, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const partnerlogin_changes = {};
    			if (dirty & /*edit*/ 1) partnerlogin_changes.edit = /*edit*/ ctx[0];

    			if (!updating_dtos && dirty & /*partner*/ 2) {
    				updating_dtos = true;
    				partnerlogin_changes.dtos = /*partner*/ ctx[1].logins;
    				add_flush_callback(() => updating_dtos = false);
    			}

    			partnerlogin.$set(partnerlogin_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(partnerlogin.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(partnerlogin.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(partnerlogin, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$5.name,
    		type: "slot",
    		source: "(61:6) <Group>",
    		ctx
    	});

    	return block;
    }

    // (60:4) <Cell span={12}>
    function create_default_slot_4$5(ctx) {
    	let group;
    	let current;

    	group = new Group({
    			props: {
    				$$slots: { default: [create_default_slot_5$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const group_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				group_changes.$$scope = { dirty, ctx };
    			}

    			group.$set(group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$5.name,
    		type: "slot",
    		source: "(60:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (66:6) <Group>
    function create_default_slot_3$6(ctx) {
    	let partnerservicecomponent;
    	let updating_dtos;
    	let current;

    	function partnerservicecomponent_dtos_binding(value) {
    		/*partnerservicecomponent_dtos_binding*/ ctx[12](value);
    	}

    	let partnerservicecomponent_props = { edit: /*edit*/ ctx[0] };

    	if (/*partner*/ ctx[1].services !== void 0) {
    		partnerservicecomponent_props.dtos = /*partner*/ ctx[1].services;
    	}

    	partnerservicecomponent = new PartnerService({
    			props: partnerservicecomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(partnerservicecomponent, 'dtos', partnerservicecomponent_dtos_binding));

    	const block = {
    		c: function create() {
    			create_component(partnerservicecomponent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(partnerservicecomponent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const partnerservicecomponent_changes = {};
    			if (dirty & /*edit*/ 1) partnerservicecomponent_changes.edit = /*edit*/ ctx[0];

    			if (!updating_dtos && dirty & /*partner*/ 2) {
    				updating_dtos = true;
    				partnerservicecomponent_changes.dtos = /*partner*/ ctx[1].services;
    				add_flush_callback(() => updating_dtos = false);
    			}

    			partnerservicecomponent.$set(partnerservicecomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(partnerservicecomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(partnerservicecomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(partnerservicecomponent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$6.name,
    		type: "slot",
    		source: "(66:6) <Group>",
    		ctx
    	});

    	return block;
    }

    // (65:4) <Cell span={12}>
    function create_default_slot_2$6(ctx) {
    	let group;
    	let current;

    	group = new Group({
    			props: {
    				$$slots: { default: [create_default_slot_3$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const group_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				group_changes.$$scope = { dirty, ctx };
    			}

    			group.$set(group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$6.name,
    		type: "slot",
    		source: "(65:4) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (39:2) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot_1$6(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let cell4;
    	let t4;
    	let cell5;
    	let t5;
    	let cell6;
    	let t6;
    	let cell7;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_12$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_11$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_10$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_9$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell4 = new Cell({
    			props: {
    				span: 6,
    				$$slots: { default: [create_default_slot_8$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell5 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_6$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell6 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_4$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell7 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_2$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    			create_component(cell4.$$.fragment);
    			t4 = space();
    			create_component(cell5.$$.fragment);
    			t5 = space();
    			create_component(cell6.$$.fragment);
    			t6 = space();
    			create_component(cell7.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(cell4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(cell5, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(cell6, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(cell7, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    			const cell4_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell4_changes.$$scope = { dirty, ctx };
    			}

    			cell4.$set(cell4_changes);
    			const cell5_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell5_changes.$$scope = { dirty, ctx };
    			}

    			cell5.$set(cell5_changes);
    			const cell6_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell6_changes.$$scope = { dirty, ctx };
    			}

    			cell6.$set(cell6_changes);
    			const cell7_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				cell7_changes.$$scope = { dirty, ctx };
    			}

    			cell7.$set(cell7_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			transition_in(cell4.$$.fragment, local);
    			transition_in(cell5.$$.fragment, local);
    			transition_in(cell6.$$.fragment, local);
    			transition_in(cell7.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			transition_out(cell4.$$.fragment, local);
    			transition_out(cell5.$$.fragment, local);
    			transition_out(cell6.$$.fragment, local);
    			transition_out(cell7.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(cell4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(cell5, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(cell6, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(cell7, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$6.name,
    		type: "slot",
    		source: "(39:2) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    // (72:2) {#if edit}
    function create_if_block$3(ctx) {
    	let div;
    	let floatingactionbutton;
    	let current;

    	floatingactionbutton = new FloatingActionButton({
    			props: {
    				label: "Save",
    				icon: "save",
    				float: false
    			},
    			$$inline: true
    		});

    	floatingactionbutton.$on("click", /*click_handler*/ ctx[13]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(floatingactionbutton.$$.fragment);
    			attr_dev(div, "class", "button-container svelte-1y4eeft");
    			add_location(div, file$6, 72, 2, 2295);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(floatingactionbutton, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatingactionbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatingactionbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(floatingactionbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(72:2) {#if edit}",
    		ctx
    	});

    	return block;
    }

    // (37:0) <FormContainer showIcon={$admin} on:icon-click={() => edit = !edit}>
    function create_default_slot$6(ctx) {
    	let h1;
    	let t0;
    	let layoutgrid;
    	let t1;
    	let if_block_anchor;
    	let current;

    	h1 = new H1({
    			props: {
    				$$slots: { default: [create_default_slot_13$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot_1$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*edit*/ ctx[0] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			create_component(h1.$$.fragment);
    			t0 = space();
    			create_component(layoutgrid.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(h1, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(layoutgrid, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const h1_changes = {};

    			if (dirty & /*$$scope*/ 32768) {
    				h1_changes.$$scope = { dirty, ctx };
    			}

    			h1.$set(h1_changes);
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);

    			if (/*edit*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*edit*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(h1.$$.fragment, local);
    			transition_in(layoutgrid.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(h1.$$.fragment, local);
    			transition_out(layoutgrid.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(h1, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(layoutgrid, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(37:0) <FormContainer showIcon={$admin} on:icon-click={() => edit = !edit}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let formcontainer;
    	let current;

    	formcontainer = new FormContainer({
    			props: {
    				showIcon: /*$admin*/ ctx[2],
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	formcontainer.$on("icon-click", /*icon_click_handler*/ ctx[14]);

    	const block = {
    		c: function create() {
    			create_component(formcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(formcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const formcontainer_changes = {};
    			if (dirty & /*$admin*/ 4) formcontainer_changes.showIcon = /*$admin*/ ctx[2];

    			if (dirty & /*$$scope, edit, partner*/ 32771) {
    				formcontainer_changes.$$scope = { dirty, ctx };
    			}

    			formcontainer.$set(formcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $admin;
    	validate_store(admin, 'admin');
    	component_subscribe($$self, admin, $$value => $$invalidate(2, $admin = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Partner', slots, []);
    	let { id } = $$props;
    	let edit = false;
    	let partner = { contacts: [], logins: [], services: [] };

    	if (isNumeric$1(id)) {
    		PartnerService$1.get(+id).then(data => $$invalidate(1, partner = data));
    	} else {
    		edit = true;
    	}

    	function save() {
    		if (isNumeric$1(id)) {
    			PartnerService$1.update(partner).then(() => navigate("/partners"));
    		} else {
    			PartnerService$1.add(partner).then(() => navigate("/partners"));
    		}
    	}

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Partner> was created with unknown prop '${key}'`);
    	});

    	function labeltextfieldtoggle_value_binding(value) {
    		if ($$self.$$.not_equal(partner.name, value)) {
    			partner.name = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_1(value) {
    		if ($$self.$$.not_equal(partner.website, value)) {
    			partner.website = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_2(value) {
    		if ($$self.$$.not_equal(partner.iban, value)) {
    			partner.iban = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_3(value) {
    		if ($$self.$$.not_equal(partner.bank, value)) {
    			partner.bank = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function labeltextfieldtoggle_value_binding_4(value) {
    		if ($$self.$$.not_equal(partner.bic, value)) {
    			partner.bic = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function partnercontact_dtos_binding(value) {
    		if ($$self.$$.not_equal(partner.contacts, value)) {
    			partner.contacts = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function partnerlogin_dtos_binding(value) {
    		if ($$self.$$.not_equal(partner.logins, value)) {
    			partner.logins = value;
    			$$invalidate(1, partner);
    		}
    	}

    	function partnerservicecomponent_dtos_binding(value) {
    		if ($$self.$$.not_equal(partner.services, value)) {
    			partner.services = value;
    			$$invalidate(1, partner);
    		}
    	}

    	const click_handler = () => save();
    	const icon_click_handler = () => $$invalidate(0, edit = !edit);

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(4, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		LayoutGrid,
    		Cell,
    		PartnerService: PartnerService$1,
    		isNumeric: isNumeric$1,
    		LabelTextfieldToggle,
    		FormContainer,
    		admin,
    		FloatingActionButton,
    		H1,
    		PartnerContact,
    		PartnerLogin,
    		PartnerServiceComponent: PartnerService,
    		Group,
    		id,
    		edit,
    		partner,
    		save,
    		$admin
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(4, id = $$props.id);
    		if ('edit' in $$props) $$invalidate(0, edit = $$props.edit);
    		if ('partner' in $$props) $$invalidate(1, partner = $$props.partner);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		edit,
    		partner,
    		$admin,
    		save,
    		id,
    		labeltextfieldtoggle_value_binding,
    		labeltextfieldtoggle_value_binding_1,
    		labeltextfieldtoggle_value_binding_2,
    		labeltextfieldtoggle_value_binding_3,
    		labeltextfieldtoggle_value_binding_4,
    		partnercontact_dtos_binding,
    		partnerlogin_dtos_binding,
    		partnerservicecomponent_dtos_binding,
    		click_handler,
    		icon_click_handler
    	];
    }

    class Partner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$a, safe_not_equal, { id: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Partner",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[4] === undefined && !('id' in props)) {
    			console.warn("<Partner> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<Partner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Partner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/Notes.svelte generated by Svelte v3.44.3 */

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (24:8) <Label>
    function create_default_slot_20$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$1.name,
    		type: "slot",
    		source: "(24:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (25:8) <IconButton class="material-icons">
    function create_default_slot_19$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$1.name,
    		type: "slot",
    		source: "(25:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (23:6) <Cell columnId="name" style="width: 100%;">
    function create_default_slot_18$1(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_20$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_19$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$1.name,
    		type: "slot",
    		source: "(23:6) <Cell columnId=\\\"name\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (28:8) <Label>
    function create_default_slot_17$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Art");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$2.name,
    		type: "slot",
    		source: "(28:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (29:8) <IconButton class="material-icons">
    function create_default_slot_16$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$2.name,
    		type: "slot",
    		source: "(29:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (27:6) <Cell columnId="type">
    function create_default_slot_15$2(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_17$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_16$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$2.name,
    		type: "slot",
    		source: "(27:6) <Cell columnId=\\\"type\\\">",
    		ctx
    	});

    	return block;
    }

    // (32:8) <Label>
    function create_default_slot_14$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Text");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$2.name,
    		type: "slot",
    		source: "(32:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (33:8) <IconButton class="material-icons">
    function create_default_slot_13$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$2.name,
    		type: "slot",
    		source: "(33:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (31:6) <Cell columnId="text">
    function create_default_slot_12$2(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_14$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_13$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$2.name,
    		type: "slot",
    		source: "(31:6) <Cell columnId=\\\"text\\\">",
    		ctx
    	});

    	return block;
    }

    // (36:8) <Label>
    function create_default_slot_11$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Fällig bis");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$2.name,
    		type: "slot",
    		source: "(36:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (37:8) <IconButton class="material-icons">
    function create_default_slot_10$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("arrow_upward");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$2.name,
    		type: "slot",
    		source: "(37:8) <IconButton class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (35:6) <Cell columnId="due">
    function create_default_slot_9$2(ctx) {
    	let label;
    	let t;
    	let iconbutton;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_11$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_10$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$2.name,
    		type: "slot",
    		source: "(35:6) <Cell columnId=\\\"due\\\">",
    		ctx
    	});

    	return block;
    }

    // (22:4) <Row>
    function create_default_slot_8$3(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				columnId: "name",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_18$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				columnId: "type",
    				$$slots: { default: [create_default_slot_15$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				columnId: "text",
    				$$slots: { default: [create_default_slot_12$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				columnId: "due",
    				$$slots: { default: [create_default_slot_9$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$3.name,
    		type: "slot",
    		source: "(22:4) <Row>",
    		ctx
    	});

    	return block;
    }

    // (21:2) <Head>
    function create_default_slot_7$4(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_8$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$4.name,
    		type: "slot",
    		source: "(21:2) <Head>",
    		ctx
    	});

    	return block;
    }

    // (44:8) <Cell>
    function create_default_slot_6$4(ctx) {
    	let t_value = /*item*/ ctx[8].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 4 && t_value !== (t_value = /*item*/ ctx[8].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$4.name,
    		type: "slot",
    		source: "(44:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (45:8) <Cell>
    function create_default_slot_5$4(ctx) {
    	let t_value = /*item*/ ctx[8].type + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 4 && t_value !== (t_value = /*item*/ ctx[8].type + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$4.name,
    		type: "slot",
    		source: "(45:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (46:8) <Cell>
    function create_default_slot_4$4(ctx) {
    	let t_value = /*item*/ ctx[8].text + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 4 && t_value !== (t_value = /*item*/ ctx[8].text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$4.name,
    		type: "slot",
    		source: "(46:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (47:8) <Cell>
    function create_default_slot_3$5(ctx) {
    	let t_value = /*item*/ ctx[8].due + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 4 && t_value !== (t_value = /*item*/ ctx[8].due + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$5.name,
    		type: "slot",
    		source: "(47:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (43:6) <Row>
    function create_default_slot_2$5(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_6$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_5$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_4$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_3$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$5.name,
    		type: "slot",
    		source: "(43:6) <Row>",
    		ctx
    	});

    	return block;
    }

    // (42:4) {#each filtered as item }
    function create_each_block$1(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_2$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(42:4) {#each filtered as item }",
    		ctx
    	});

    	return block;
    }

    // (41:2) <Body>
    function create_default_slot_1$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 4) {
    				each_value = /*filtered*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(41:2) <Body>",
    		ctx
    	});

    	return block;
    }

    // (13:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={() => sortFunction()}   table$aria-label="Template list"   style="width: 100%;" >
    function create_default_slot$5(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_7$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(13:0) <DataTable   sortable   bind:sort   bind:sortDirection   on:MDCDataTable:sorted={() => sortFunction()}   table$aria-label=\\\"Template list\\\"   style=\\\"width: 100%;\\\" >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let datatable;
    	let updating_sort;
    	let updating_sortDirection;
    	let current;

    	function datatable_sort_binding(value) {
    		/*datatable_sort_binding*/ ctx[5](value);
    	}

    	function datatable_sortDirection_binding(value) {
    		/*datatable_sortDirection_binding*/ ctx[6](value);
    	}

    	let datatable_props = {
    		sortable: true,
    		"table$aria-label": "Template list",
    		style: "width: 100%;",
    		$$slots: { default: [create_default_slot$5] },
    		$$scope: { ctx }
    	};

    	if (/*sort*/ ctx[0] !== void 0) {
    		datatable_props.sort = /*sort*/ ctx[0];
    	}

    	if (/*sortDirection*/ ctx[1] !== void 0) {
    		datatable_props.sortDirection = /*sortDirection*/ ctx[1];
    	}

    	datatable = new DataTable({ props: datatable_props, $$inline: true });
    	binding_callbacks.push(() => bind(datatable, 'sort', datatable_sort_binding));
    	binding_callbacks.push(() => bind(datatable, 'sortDirection', datatable_sortDirection_binding));
    	datatable.$on("MDCDataTable:sorted", /*MDCDataTable_sorted_handler*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(datatable.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(datatable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered*/ 2052) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_sort && dirty & /*sort*/ 1) {
    				updating_sort = true;
    				datatable_changes.sort = /*sort*/ ctx[0];
    				add_flush_callback(() => updating_sort = false);
    			}

    			if (!updating_sortDirection && dirty & /*sortDirection*/ 2) {
    				updating_sortDirection = true;
    				datatable_changes.sortDirection = /*sortDirection*/ ctx[1];
    				add_flush_callback(() => updating_sortDirection = false);
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(datatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let filtered;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Notes', slots, []);
    	let sort = 'name';
    	let sortDirection = 'ascending';
    	const sortFunction = () => $$invalidate(2, filtered = filtered.sort(sortFunc(sort, sortDirection)));
    	let list = [];
    	ReminderService.list().then(response => $$invalidate(4, list = response));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Notes> was created with unknown prop '${key}'`);
    	});

    	function datatable_sort_binding(value) {
    		sort = value;
    		$$invalidate(0, sort);
    	}

    	function datatable_sortDirection_binding(value) {
    		sortDirection = value;
    		$$invalidate(1, sortDirection);
    	}

    	const MDCDataTable_sorted_handler = () => sortFunction();

    	$$self.$capture_state = () => ({
    		ReminderService,
    		sortFunc,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		IconButton,
    		sort,
    		sortDirection,
    		sortFunction,
    		list,
    		filtered
    	});

    	$$self.$inject_state = $$props => {
    		if ('sort' in $$props) $$invalidate(0, sort = $$props.sort);
    		if ('sortDirection' in $$props) $$invalidate(1, sortDirection = $$props.sortDirection);
    		if ('list' in $$props) $$invalidate(4, list = $$props.list);
    		if ('filtered' in $$props) $$invalidate(2, filtered = $$props.filtered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*list*/ 16) {
    			$$invalidate(2, filtered = list);
    		}
    	};

    	return [
    		sort,
    		sortDirection,
    		filtered,
    		sortFunction,
    		list,
    		datatable_sort_binding,
    		datatable_sortDirection_binding,
    		MDCDataTable_sorted_handler
    	];
    }

    class Notes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notes",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src/routes/Employees.svelte generated by Svelte v3.44.3 */

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (20:8) <Label>
    function create_default_slot_17$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("ID");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$1.name,
    		type: "slot",
    		source: "(20:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (19:6) <Cell numeric columnId="id">
    function create_default_slot_16$1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_17$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$1.name,
    		type: "slot",
    		source: "(19:6) <Cell numeric columnId=\\\"id\\\">",
    		ctx
    	});

    	return block;
    }

    // (23:8) <Label>
    function create_default_slot_15$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Name");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$1.name,
    		type: "slot",
    		source: "(23:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (22:6) <Cell columnId="fullName" style="width: 100%;">
    function create_default_slot_14$1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_15$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$1.name,
    		type: "slot",
    		source: "(22:6) <Cell columnId=\\\"fullName\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:8) <Label>
    function create_default_slot_13$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Email");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$1.name,
    		type: "slot",
    		source: "(26:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (25:6) <Cell columnId="email">
    function create_default_slot_12$1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_13$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$1.name,
    		type: "slot",
    		source: "(25:6) <Cell columnId=\\\"email\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:8) <Label>
    function create_default_slot_11$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Admin");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$1.name,
    		type: "slot",
    		source: "(29:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (28:6) <Cell columnId="zipCode">
    function create_default_slot_10$1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_11$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$1.name,
    		type: "slot",
    		source: "(28:6) <Cell columnId=\\\"zipCode\\\">",
    		ctx
    	});

    	return block;
    }

    // (18:4) <Row>
    function create_default_slot_9$1(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				numeric: true,
    				columnId: "id",
    				$$slots: { default: [create_default_slot_16$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				columnId: "fullName",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot_14$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				columnId: "email",
    				$$slots: { default: [create_default_slot_12$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				columnId: "zipCode",
    				$$slots: { default: [create_default_slot_10$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$1.name,
    		type: "slot",
    		source: "(18:4) <Row>",
    		ctx
    	});

    	return block;
    }

    // (17:2) <Head>
    function create_default_slot_8$2(ctx) {
    	let row;
    	let current;

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_9$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(row.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const row_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$2.name,
    		type: "slot",
    		source: "(17:2) <Head>",
    		ctx
    	});

    	return block;
    }

    // (36:8) <Cell numeric>
    function create_default_slot_7$3(ctx) {
    	let t_value = /*item*/ ctx[6].id + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 2 && t_value !== (t_value = /*item*/ ctx[6].id + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$3.name,
    		type: "slot",
    		source: "(36:8) <Cell numeric>",
    		ctx
    	});

    	return block;
    }

    // (37:8) <Cell>
    function create_default_slot_6$3(ctx) {
    	let t_value = /*item*/ ctx[6].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 2 && t_value !== (t_value = /*item*/ ctx[6].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$3.name,
    		type: "slot",
    		source: "(37:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (38:8) <Cell>
    function create_default_slot_5$3(ctx) {
    	let t_value = /*item*/ ctx[6].email + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filtered*/ 2 && t_value !== (t_value = /*item*/ ctx[6].email + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$3.name,
    		type: "slot",
    		source: "(38:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (43:12) {:else}
    function create_else_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("radio_button_unchecked");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(43:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (41:12) {#if item.admin}
    function create_if_block$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("task_alt");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(41:12) {#if item.admin}",
    		ctx
    	});

    	return block;
    }

    // (40:10) <Icon class="material-icons">
    function create_default_slot_4$3(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[6].admin) return create_if_block$2;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$3.name,
    		type: "slot",
    		source: "(40:10) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (39:8) <Cell>
    function create_default_slot_3$4(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_4$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$4.name,
    		type: "slot",
    		source: "(39:8) <Cell>",
    		ctx
    	});

    	return block;
    }

    // (35:6) <Row on:click={() => navigate("employee/" + item.id)}>
    function create_default_slot_2$4(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let t2;
    	let cell3;
    	let t3;
    	let current;

    	cell0 = new Cell$2({
    			props: {
    				numeric: true,
    				$$slots: { default: [create_default_slot_7$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_6$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_5$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell3 = new Cell$2({
    			props: {
    				$$slots: { default: [create_default_slot_3$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    			t2 = space();
    			create_component(cell3.$$.fragment);
    			t3 = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(cell3, target, anchor);
    			insert_dev(target, t3, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    			const cell3_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				cell3_changes.$$scope = { dirty, ctx };
    			}

    			cell3.$set(cell3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			transition_in(cell3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			transition_out(cell3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(cell3, detaching);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$4.name,
    		type: "slot",
    		source: "(35:6) <Row on:click={() => navigate(\\\"employee/\\\" + item.id)}>",
    		ctx
    	});

    	return block;
    }

    // (34:4) {#each filtered as item (item.id)}
    function create_each_block(key_1, ctx) {
    	let first;
    	let row;
    	let current;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[5](/*item*/ ctx[6]);
    	}

    	row = new Row({
    			props: {
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	row.$on("click", click_handler_1);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(row.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(row, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const row_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				row_changes.$$scope = { dirty, ctx };
    			}

    			row.$set(row_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(row.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(row.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(row, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(34:4) {#each filtered as item (item.id)}",
    		ctx
    	});

    	return block;
    }

    // (33:2) <Body>
    function create_default_slot_1$4(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*filtered*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[6].id;
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*navigate, filtered*/ 2) {
    				each_value = /*filtered*/ ctx[1];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(33:2) <Body>",
    		ctx
    	});

    	return block;
    }

    // (16:0) <DataTable table$aria-label="User list" style="width: 100%;">
    function create_default_slot$4(ctx) {
    	let head;
    	let t;
    	let body;
    	let current;

    	head = new Head({
    			props: {
    				$$slots: { default: [create_default_slot_8$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	body = new Body({
    			props: {
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(head.$$.fragment);
    			t = space();
    			create_component(body.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(head, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(body, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const head_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				head_changes.$$scope = { dirty, ctx };
    			}

    			head.$set(head_changes);
    			const body_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				body_changes.$$scope = { dirty, ctx };
    			}

    			body.$set(body_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(head.$$.fragment, local);
    			transition_in(body.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(head.$$.fragment, local);
    			transition_out(body.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(head, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(body, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(16:0) <DataTable table$aria-label=\\\"User list\\\" style=\\\"width: 100%;\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let searchbar;
    	let updating_value;
    	let t0;
    	let floatingactionbutton;
    	let t1;
    	let datatable;
    	let current;

    	function searchbar_value_binding(value) {
    		/*searchbar_value_binding*/ ctx[3](value);
    	}

    	let searchbar_props = {};

    	if (/*filterValue*/ ctx[0] !== void 0) {
    		searchbar_props.value = /*filterValue*/ ctx[0];
    	}

    	searchbar = new Searchbar({ props: searchbar_props, $$inline: true });
    	binding_callbacks.push(() => bind(searchbar, 'value', searchbar_value_binding));
    	floatingactionbutton = new FloatingActionButton({ $$inline: true });
    	floatingactionbutton.$on("click", /*click_handler*/ ctx[4]);

    	datatable = new DataTable({
    			props: {
    				"table$aria-label": "User list",
    				style: "width: 100%;",
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(searchbar.$$.fragment);
    			t0 = space();
    			create_component(floatingactionbutton.$$.fragment);
    			t1 = space();
    			create_component(datatable.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(floatingactionbutton, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(datatable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const searchbar_changes = {};

    			if (!updating_value && dirty & /*filterValue*/ 1) {
    				updating_value = true;
    				searchbar_changes.value = /*filterValue*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			searchbar.$set(searchbar_changes);
    			const datatable_changes = {};

    			if (dirty & /*$$scope, filtered*/ 514) {
    				datatable_changes.$$scope = { dirty, ctx };
    			}

    			datatable.$set(datatable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbar.$$.fragment, local);
    			transition_in(floatingactionbutton.$$.fragment, local);
    			transition_in(datatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbar.$$.fragment, local);
    			transition_out(floatingactionbutton.$$.fragment, local);
    			transition_out(datatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(floatingactionbutton, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(datatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let filterValue;
    	let filtered;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Employees', slots, []);
    	var items = [];
    	EmployeeService.list().then(data => $$invalidate(2, items = data));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Employees> was created with unknown prop '${key}'`);
    	});

    	function searchbar_value_binding(value) {
    		filterValue = value;
    		$$invalidate(0, filterValue);
    	}

    	const click_handler = () => navigate("employee/new");
    	const click_handler_1 = item => navigate("employee/" + item.id);

    	$$self.$capture_state = () => ({
    		navigate,
    		Icon,
    		DataTable,
    		Head,
    		Body,
    		Row,
    		Cell: Cell$2,
    		Label,
    		EmployeeService,
    		Searchbar,
    		FloatingActionButton,
    		items,
    		filterValue,
    		filtered
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(2, items = $$props.items);
    		if ('filterValue' in $$props) $$invalidate(0, filterValue = $$props.filterValue);
    		if ('filtered' in $$props) $$invalidate(1, filtered = $$props.filtered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items, filterValue*/ 5) {
    			$$invalidate(1, filtered = items.filter(s => s.name.includes(filterValue) || s.email.includes(filterValue)));
    		}
    	};

    	$$invalidate(0, filterValue = "");

    	return [
    		filterValue,
    		filtered,
    		items,
    		searchbar_value_binding,
    		click_handler,
    		click_handler_1
    	];
    }

    class Employees extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Employees",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/routes/Employee.svelte generated by Svelte v3.44.3 */
    const file$5 = "src/routes/Employee.svelte";

    // (30:8) <Cell span={12}>
    function create_default_slot_8$1(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding(value) {
    		/*textfield_value_binding*/ ctx[3](value);
    	}

    	let textfield_props = { style: "width: 100%;", label: "Name" };

    	if (/*employee*/ ctx[0].name !== void 0) {
    		textfield_props.value = /*employee*/ ctx[0].name;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};

    			if (!updating_value && dirty & /*employee*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*employee*/ ctx[0].name;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$1.name,
    		type: "slot",
    		source: "(30:8) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (33:8) <Cell span={12}>
    function create_default_slot_7$2(ctx) {
    	let textfield;
    	let updating_value;
    	let current;

    	function textfield_value_binding_1(value) {
    		/*textfield_value_binding_1*/ ctx[4](value);
    	}

    	let textfield_props = { style: "width: 100%;", label: "E-Mail" };

    	if (/*employee*/ ctx[0].email !== void 0) {
    		textfield_props.value = /*employee*/ ctx[0].email;
    	}

    	textfield = new Textfield({ props: textfield_props, $$inline: true });
    	binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_1));

    	const block = {
    		c: function create() {
    			create_component(textfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textfield_changes = {};

    			if (!updating_value && dirty & /*employee*/ 1) {
    				updating_value = true;
    				textfield_changes.value = /*employee*/ ctx[0].email;
    				add_flush_callback(() => updating_value = false);
    			}

    			textfield.$set(textfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$2.name,
    		type: "slot",
    		source: "(33:8) <Cell span={12}>",
    		ctx
    	});

    	return block;
    }

    // (37:12) <FormField>
    function create_default_slot_6$2(ctx) {
    	let checkbox;
    	let updating_checked;
    	let current;

    	function checkbox_checked_binding(value) {
    		/*checkbox_checked_binding*/ ctx[5](value);
    	}

    	let checkbox_props = { touch: true };

    	if (/*employee*/ ctx[0].admin !== void 0) {
    		checkbox_props.checked = /*employee*/ ctx[0].admin;
    	}

    	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
    	binding_callbacks.push(() => bind(checkbox, 'checked', checkbox_checked_binding));

    	const block = {
    		c: function create() {
    			create_component(checkbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checkbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checkbox_changes = {};

    			if (!updating_checked && dirty & /*employee*/ 1) {
    				updating_checked = true;
    				checkbox_changes.checked = /*employee*/ ctx[0].admin;
    				add_flush_callback(() => updating_checked = false);
    			}

    			checkbox.$set(checkbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checkbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$2.name,
    		type: "slot",
    		source: "(37:12) <FormField>",
    		ctx
    	});

    	return block;
    }

    // (39:16) 
    function create_label_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Admin";
    			attr_dev(span, "slot", "label");
    			add_location(span, file$5, 38, 16, 1323);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot.name,
    		type: "slot",
    		source: "(39:16) ",
    		ctx
    	});

    	return block;
    }

    // (36:8) <Cell span={12} align="middle">
    function create_default_slot_5$2(ctx) {
    	let formfield;
    	let current;

    	formfield = new FormField({
    			props: {
    				$$slots: {
    					label: [create_label_slot],
    					default: [create_default_slot_6$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(formfield.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(formfield, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const formfield_changes = {};

    			if (dirty & /*$$scope, employee*/ 129) {
    				formfield_changes.$$scope = { dirty, ctx };
    			}

    			formfield.$set(formfield_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(formfield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(formfield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(formfield, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$2.name,
    		type: "slot",
    		source: "(36:8) <Cell span={12} align=\\\"middle\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:4) <LayoutGrid style="padding-bottom: 3rem;">
    function create_default_slot_4$2(ctx) {
    	let cell0;
    	let t0;
    	let cell1;
    	let t1;
    	let cell2;
    	let current;

    	cell0 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_8$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell1 = new Cell({
    			props: {
    				span: 12,
    				$$slots: { default: [create_default_slot_7$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	cell2 = new Cell({
    			props: {
    				span: 12,
    				align: "middle",
    				$$slots: { default: [create_default_slot_5$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cell0.$$.fragment);
    			t0 = space();
    			create_component(cell1.$$.fragment);
    			t1 = space();
    			create_component(cell2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cell0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(cell1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(cell2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cell0_changes = {};

    			if (dirty & /*$$scope, employee*/ 129) {
    				cell0_changes.$$scope = { dirty, ctx };
    			}

    			cell0.$set(cell0_changes);
    			const cell1_changes = {};

    			if (dirty & /*$$scope, employee*/ 129) {
    				cell1_changes.$$scope = { dirty, ctx };
    			}

    			cell1.$set(cell1_changes);
    			const cell2_changes = {};

    			if (dirty & /*$$scope, employee*/ 129) {
    				cell2_changes.$$scope = { dirty, ctx };
    			}

    			cell2.$set(cell2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cell0.$$.fragment, local);
    			transition_in(cell1.$$.fragment, local);
    			transition_in(cell2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cell0.$$.fragment, local);
    			transition_out(cell1.$$.fragment, local);
    			transition_out(cell2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cell0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(cell1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(cell2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(29:4) <LayoutGrid style=\\\"padding-bottom: 3rem;\\\">",
    		ctx
    	});

    	return block;
    }

    // (45:12) <Icon class="material-icons">
    function create_default_slot_3$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("save");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(45:12) <Icon class=\\\"material-icons\\\">",
    		ctx
    	});

    	return block;
    }

    // (46:12) <Label>
    function create_default_slot_2$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Save");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(46:12) <Label>",
    		ctx
    	});

    	return block;
    }

    // (44:8) <Fab color="primary" on:click={() => save()} extended>
    function create_default_slot_1$3(ctx) {
    	let icon;
    	let t;
    	let label;
    	let current;

    	icon = new Icon$1({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_3$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    			t = space();
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				icon_changes.$$scope = { dirty, ctx };
    			}

    			icon.$set(icon_changes);
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(44:8) <Fab color=\\\"primary\\\" on:click={() => save()} extended>",
    		ctx
    	});

    	return block;
    }

    // (27:0) <Paper elevation={6}>
    function create_default_slot$3(ctx) {
    	let h1;
    	let t1;
    	let layoutgrid;
    	let t2;
    	let div;
    	let fab;
    	let current;

    	layoutgrid = new LayoutGrid({
    			props: {
    				style: "padding-bottom: 3rem;",
    				$$slots: { default: [create_default_slot_4$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	fab = new Fab({
    			props: {
    				color: "primary",
    				extended: true,
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	fab.$on("click", /*click_handler*/ ctx[6]);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Employee";
    			t1 = space();
    			create_component(layoutgrid.$$.fragment);
    			t2 = space();
    			div = element("div");
    			create_component(fab.$$.fragment);
    			attr_dev(h1, "class", "svelte-ztz7ya");
    			add_location(h1, file$5, 27, 4, 856);
    			attr_dev(div, "class", "button-container svelte-ztz7ya");
    			add_location(div, file$5, 42, 4, 1418);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(layoutgrid, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(fab, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const layoutgrid_changes = {};

    			if (dirty & /*$$scope, employee*/ 129) {
    				layoutgrid_changes.$$scope = { dirty, ctx };
    			}

    			layoutgrid.$set(layoutgrid_changes);
    			const fab_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				fab_changes.$$scope = { dirty, ctx };
    			}

    			fab.$set(fab_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layoutgrid.$$.fragment, local);
    			transition_in(fab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layoutgrid.$$.fragment, local);
    			transition_out(fab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			destroy_component(layoutgrid, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(fab);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(27:0) <Paper elevation={6}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let paper;
    	let current;

    	paper = new Paper({
    			props: {
    				elevation: 6,
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(paper.$$.fragment);
    			attr_dev(div, "class", "form-container svelte-ztz7ya");
    			add_location(div, file$5, 25, 0, 801);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(paper, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const paper_changes = {};

    			if (dirty & /*$$scope, employee*/ 129) {
    				paper_changes.$$scope = { dirty, ctx };
    			}

    			paper.$set(paper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(paper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(paper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(paper);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isNumeric(value) {
    	return (/^\d+$/).test(value);
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Employee', slots, []);
    	let { id } = $$props;
    	let employee = { name: "", email: "", admin: false };

    	if (isNumeric(id)) {
    		EmployeeService.get(+id).then(data => $$invalidate(0, employee = data));
    	}

    	function save() {
    		if (isNumeric(id)) {
    			EmployeeService.update(employee).then(() => navigate("/employees"));
    		} else {
    			EmployeeService.add(employee).then(() => navigate("/employees"));
    		}
    	}

    	const writable_props = ['id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Employee> was created with unknown prop '${key}'`);
    	});

    	function textfield_value_binding(value) {
    		if ($$self.$$.not_equal(employee.name, value)) {
    			employee.name = value;
    			$$invalidate(0, employee);
    		}
    	}

    	function textfield_value_binding_1(value) {
    		if ($$self.$$.not_equal(employee.email, value)) {
    			employee.email = value;
    			$$invalidate(0, employee);
    		}
    	}

    	function checkbox_checked_binding(value) {
    		if ($$self.$$.not_equal(employee.admin, value)) {
    			employee.admin = value;
    			$$invalidate(0, employee);
    		}
    	}

    	const click_handler = () => save();

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		navigate,
    		LayoutGrid,
    		Cell,
    		Textfield,
    		Checkbox,
    		FormField,
    		Paper,
    		Fab,
    		Label,
    		Icon: Icon$1,
    		EmployeeService,
    		id,
    		employee,
    		save,
    		isNumeric
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('employee' in $$props) $$invalidate(0, employee = $$props.employee);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		employee,
    		save,
    		id,
    		textfield_value_binding,
    		textfield_value_binding_1,
    		checkbox_checked_binding,
    		click_handler
    	];
    }

    class Employee extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$7, safe_not_equal, { id: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Employee",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[2] === undefined && !('id' in props)) {
    			console.warn("<Employee> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<Employee>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Employee>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$2 = {
        ANIMATE: 'mdc-drawer--animate',
        CLOSING: 'mdc-drawer--closing',
        DISMISSIBLE: 'mdc-drawer--dismissible',
        MODAL: 'mdc-drawer--modal',
        OPEN: 'mdc-drawer--open',
        OPENING: 'mdc-drawer--opening',
        ROOT: 'mdc-drawer',
    };
    var strings$2 = {
        APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',
        CLOSE_EVENT: 'MDCDrawer:closed',
        OPEN_EVENT: 'MDCDrawer:opened',
        SCRIM_SELECTOR: '.mdc-drawer-scrim',
        LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',
        LIST_ITEM_ACTIVATED_SELECTOR: '.mdc-list-item--activated,.mdc-deprecated-list-item--activated',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCDismissibleDrawerFoundation = /** @class */ (function (_super) {
        __extends(MDCDismissibleDrawerFoundation, _super);
        function MDCDismissibleDrawerFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter), adapter)) || this;
            _this.animationFrame = 0;
            _this.animationTimer = 0;
            return _this;
        }
        Object.defineProperty(MDCDismissibleDrawerFoundation, "strings", {
            get: function () {
                return strings$2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCDismissibleDrawerFoundation, "cssClasses", {
            get: function () {
                return cssClasses$2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCDismissibleDrawerFoundation, "defaultAdapter", {
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    elementHasClass: function () { return false; },
                    notifyClose: function () { return undefined; },
                    notifyOpen: function () { return undefined; },
                    saveFocus: function () { return undefined; },
                    restoreFocus: function () { return undefined; },
                    focusActiveNavigationItem: function () { return undefined; },
                    trapFocus: function () { return undefined; },
                    releaseFocus: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: false,
            configurable: true
        });
        MDCDismissibleDrawerFoundation.prototype.destroy = function () {
            if (this.animationFrame) {
                cancelAnimationFrame(this.animationFrame);
            }
            if (this.animationTimer) {
                clearTimeout(this.animationTimer);
            }
        };
        /**
         * Opens the drawer from the closed state.
         */
        MDCDismissibleDrawerFoundation.prototype.open = function () {
            var _this = this;
            if (this.isOpen() || this.isOpening() || this.isClosing()) {
                return;
            }
            this.adapter.addClass(cssClasses$2.OPEN);
            this.adapter.addClass(cssClasses$2.ANIMATE);
            // Wait a frame once display is no longer "none", to establish basis for animation
            this.runNextAnimationFrame(function () {
                _this.adapter.addClass(cssClasses$2.OPENING);
            });
            this.adapter.saveFocus();
        };
        /**
         * Closes the drawer from the open state.
         */
        MDCDismissibleDrawerFoundation.prototype.close = function () {
            if (!this.isOpen() || this.isOpening() || this.isClosing()) {
                return;
            }
            this.adapter.addClass(cssClasses$2.CLOSING);
        };
        /**
         * Returns true if the drawer is in the open position.
         * @return true if drawer is in open state.
         */
        MDCDismissibleDrawerFoundation.prototype.isOpen = function () {
            return this.adapter.hasClass(cssClasses$2.OPEN);
        };
        /**
         * Returns true if the drawer is animating open.
         * @return true if drawer is animating open.
         */
        MDCDismissibleDrawerFoundation.prototype.isOpening = function () {
            return this.adapter.hasClass(cssClasses$2.OPENING) ||
                this.adapter.hasClass(cssClasses$2.ANIMATE);
        };
        /**
         * Returns true if the drawer is animating closed.
         * @return true if drawer is animating closed.
         */
        MDCDismissibleDrawerFoundation.prototype.isClosing = function () {
            return this.adapter.hasClass(cssClasses$2.CLOSING);
        };
        /**
         * Keydown handler to close drawer when key is escape.
         */
        MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {
            var keyCode = evt.keyCode, key = evt.key;
            var isEscape = key === 'Escape' || keyCode === 27;
            if (isEscape) {
                this.close();
            }
        };
        /**
         * Handles the `transitionend` event when the drawer finishes opening/closing.
         */
        MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {
            var OPENING = cssClasses$2.OPENING, CLOSING = cssClasses$2.CLOSING, OPEN = cssClasses$2.OPEN, ANIMATE = cssClasses$2.ANIMATE, ROOT = cssClasses$2.ROOT;
            // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.
            var isRootElement = this.isElement(evt.target) &&
                this.adapter.elementHasClass(evt.target, ROOT);
            if (!isRootElement) {
                return;
            }
            if (this.isClosing()) {
                this.adapter.removeClass(OPEN);
                this.closed();
                this.adapter.restoreFocus();
                this.adapter.notifyClose();
            }
            else {
                this.adapter.focusActiveNavigationItem();
                this.opened();
                this.adapter.notifyOpen();
            }
            this.adapter.removeClass(ANIMATE);
            this.adapter.removeClass(OPENING);
            this.adapter.removeClass(CLOSING);
        };
        /**
         * Extension point for when drawer finishes open animation.
         */
        MDCDismissibleDrawerFoundation.prototype.opened = function () { }; // tslint:disable-line:no-empty
        /**
         * Extension point for when drawer finishes close animation.
         */
        MDCDismissibleDrawerFoundation.prototype.closed = function () { }; // tslint:disable-line:no-empty
        /**
         * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
         */
        MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame = function (callback) {
            var _this = this;
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = requestAnimationFrame(function () {
                _this.animationFrame = 0;
                clearTimeout(_this.animationTimer);
                _this.animationTimer = setTimeout(callback, 0);
            });
        };
        MDCDismissibleDrawerFoundation.prototype.isElement = function (element) {
            // In Edge, transitionend on ripple pseudo-elements yields a target without classList.
            return Boolean(element.classList);
        };
        return MDCDismissibleDrawerFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /* istanbul ignore next: subclass is not a branch statement */
    var MDCModalDrawerFoundation = /** @class */ (function (_super) {
        __extends(MDCModalDrawerFoundation, _super);
        function MDCModalDrawerFoundation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Handles click event on scrim.
         */
        MDCModalDrawerFoundation.prototype.handleScrimClick = function () {
            this.close();
        };
        /**
         * Called when drawer finishes open animation.
         */
        MDCModalDrawerFoundation.prototype.opened = function () {
            this.adapter.trapFocus();
        };
        /**
         * Called when drawer finishes close animation.
         */
        MDCModalDrawerFoundation.prototype.closed = function () {
            this.adapter.releaseFocus();
        };
        return MDCModalDrawerFoundation;
    }(MDCDismissibleDrawerFoundation));

    /* node_modules/@smui/drawer/dist/Drawer.svelte generated by Svelte v3.44.3 */

    const file$4 = "node_modules/@smui/drawer/dist/Drawer.svelte";

    function create_fragment$6(ctx) {
    	let aside;
    	let aside_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

    	let aside_levels = [
    		{
    			class: aside_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-drawer': true,
    				'mdc-drawer--dismissible': /*variant*/ ctx[2] === 'dismissible',
    				'mdc-drawer--modal': /*variant*/ ctx[2] === 'modal',
    				'smui-drawer__absolute': /*variant*/ ctx[2] === 'modal' && !/*fixed*/ ctx[3],
    				.../*internalClasses*/ ctx[6]
    			})
    		},
    		/*$$restProps*/ ctx[8]
    	];

    	let aside_data = {};

    	for (let i = 0; i < aside_levels.length; i += 1) {
    		aside_data = assign(aside_data, aside_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			aside = element("aside");
    			if (default_slot) default_slot.c();
    			set_attributes(aside, aside_data);
    			add_location(aside, file$4, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, aside, anchor);

    			if (default_slot) {
    				default_slot.m(aside, null);
    			}

    			/*aside_binding*/ ctx[16](aside);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, aside, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, aside)),
    					listen_dev(aside, "keydown", /*keydown_handler*/ ctx[17], false, false, false),
    					listen_dev(aside, "transitionend", /*transitionend_handler*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(aside, aside_data = get_spread_update(aside_levels, [
    				(!current || dirty & /*className, variant, fixed, internalClasses*/ 78 && aside_class_value !== (aside_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-drawer': true,
    					'mdc-drawer--dismissible': /*variant*/ ctx[2] === 'dismissible',
    					'mdc-drawer--modal': /*variant*/ ctx[2] === 'modal',
    					'smui-drawer__absolute': /*variant*/ ctx[2] === 'modal' && !/*fixed*/ ctx[3],
    					.../*internalClasses*/ ctx[6]
    				}))) && { class: aside_class_value },
    				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(aside);
    			if (default_slot) default_slot.d(detaching);
    			/*aside_binding*/ ctx[16](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance_1$2($$self, $$props, $$invalidate) {
    	const omit_props_names = ["use","class","variant","open","fixed","setOpen","isOpen","getElement"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Drawer', slots, ['default']);
    	const { FocusTrap } = domFocusTrap;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { variant = undefined } = $$props;
    	let { open = false } = $$props;
    	let { fixed = true } = $$props;
    	let element;
    	let instance = undefined;
    	let internalClasses = {};
    	let previousFocus = null;
    	let focusTrap;
    	let scrim = false;
    	setContext('SMUI:list:nav', true);
    	setContext('SMUI:list:item:nav', true);
    	setContext('SMUI:list:wrapFocus', true);
    	let oldVariant = variant;

    	onMount(() => {
    		focusTrap = new FocusTrap(element,
    		{
    				// Component handles focusing on active nav item.
    				skipInitialFocus: true
    			});

    		$$invalidate(4, instance = getInstance());
    		instance && instance.init();
    	});

    	onDestroy(() => {
    		instance && instance.destroy();
    		scrim && scrim.removeEventListener('SMUIDrawerScrim:click', handleScrimClick);
    	});

    	function getInstance() {
    		var _a, _b;

    		if (scrim) {
    			scrim.removeEventListener('SMUIDrawerScrim:click', handleScrimClick);
    		}

    		if (variant === 'modal') {
    			scrim = (_b = (_a = element.parentNode) === null || _a === void 0
    			? void 0
    			: _a.querySelector('.mdc-drawer-scrim')) !== null && _b !== void 0
    			? _b
    			: false;

    			if (scrim) {
    				scrim.addEventListener('SMUIDrawerScrim:click', handleScrimClick);
    			}
    		}

    		const Foundation = variant === 'dismissible'
    		? MDCDismissibleDrawerFoundation
    		: variant === 'modal'
    			? MDCModalDrawerFoundation
    			: undefined;

    		return Foundation
    		? new Foundation({
    					addClass,
    					removeClass,
    					hasClass,
    					elementHasClass: (element, className) => element.classList.contains(className),
    					saveFocus: () => previousFocus = document.activeElement,
    					restoreFocus: () => {
    						if (previousFocus && 'focus' in previousFocus && element.contains(document.activeElement)) {
    							previousFocus.focus();
    						}
    					},
    					focusActiveNavigationItem: () => {
    						const activeNavItemEl = element.querySelector('.mdc-list-item--activated,.mdc-deprecated-list-item--activated');

    						if (activeNavItemEl) {
    							activeNavItemEl.focus();
    						}
    					},
    					notifyClose: () => {
    						$$invalidate(9, open = false);
    						dispatch(element, 'SMUIDrawer:closed', undefined, undefined, true);
    					},
    					notifyOpen: () => {
    						$$invalidate(9, open = true);
    						dispatch(element, 'SMUIDrawer:opened', undefined, undefined, true);
    					},
    					trapFocus: () => focusTrap.trapFocus(),
    					releaseFocus: () => focusTrap.releaseFocus()
    				})
    		: undefined;
    	}

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(6, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(6, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function handleScrimClick() {
    		instance && 'handleScrimClick' in instance && instance.handleScrimClick();
    	}

    	function setOpen(value) {
    		$$invalidate(9, open = value);
    	}

    	function isOpen() {
    		return open;
    	}

    	function getElement() {
    		return element;
    	}

    	function aside_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(5, element);
    		});
    	}

    	const keydown_handler = event => instance && instance.handleKeydown(event);
    	const transitionend_handler = event => instance && instance.handleTransitionEnd(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('variant' in $$new_props) $$invalidate(2, variant = $$new_props.variant);
    		if ('open' in $$new_props) $$invalidate(9, open = $$new_props.open);
    		if ('fixed' in $$new_props) $$invalidate(3, fixed = $$new_props.fixed);
    		if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCDismissibleDrawerFoundation,
    		MDCModalDrawerFoundation,
    		domFocusTrap,
    		onMount,
    		onDestroy,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		useActions,
    		dispatch,
    		FocusTrap,
    		forwardEvents,
    		use,
    		className,
    		variant,
    		open,
    		fixed,
    		element,
    		instance,
    		internalClasses,
    		previousFocus,
    		focusTrap,
    		scrim,
    		oldVariant,
    		getInstance,
    		hasClass,
    		addClass,
    		removeClass,
    		handleScrimClick,
    		setOpen,
    		isOpen,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('variant' in $$props) $$invalidate(2, variant = $$new_props.variant);
    		if ('open' in $$props) $$invalidate(9, open = $$new_props.open);
    		if ('fixed' in $$props) $$invalidate(3, fixed = $$new_props.fixed);
    		if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(4, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(6, internalClasses = $$new_props.internalClasses);
    		if ('previousFocus' in $$props) previousFocus = $$new_props.previousFocus;
    		if ('focusTrap' in $$props) focusTrap = $$new_props.focusTrap;
    		if ('scrim' in $$props) scrim = $$new_props.scrim;
    		if ('oldVariant' in $$props) $$invalidate(13, oldVariant = $$new_props.oldVariant);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*oldVariant, variant, instance*/ 8212) {
    			if (oldVariant !== variant) {
    				$$invalidate(13, oldVariant = variant);
    				instance && instance.destroy();
    				$$invalidate(6, internalClasses = {});
    				$$invalidate(4, instance = getInstance());
    				instance && instance.init();
    			}
    		}

    		if ($$self.$$.dirty & /*instance, open*/ 528) {
    			if (instance && instance.isOpen() !== open) {
    				if (open) {
    					instance.open();
    				} else {
    					instance.close();
    				}
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		variant,
    		fixed,
    		instance,
    		element,
    		internalClasses,
    		forwardEvents,
    		$$restProps,
    		open,
    		setOpen,
    		isOpen,
    		getElement,
    		oldVariant,
    		$$scope,
    		slots,
    		aside_binding,
    		keydown_handler,
    		transitionend_handler
    	];
    }

    class Drawer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance_1$2, create_fragment$6, safe_not_equal, {
    			use: 0,
    			class: 1,
    			variant: 2,
    			open: 9,
    			fixed: 3,
    			setOpen: 10,
    			isOpen: 11,
    			getElement: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Drawer",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get use() {
    		throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setOpen() {
    		return this.$$.ctx[10];
    	}

    	set setOpen(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		return this.$$.ctx[11];
    	}

    	set isOpen(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[12];
    	}

    	set getElement(value) {
    		throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var AppContent = classAdderBuilder({
        class: 'mdc-drawer-app-content',
        component: Div,
    });

    var Content$1 = classAdderBuilder({
        class: 'mdc-drawer__content',
        component: Div,
    });

    var Header = classAdderBuilder({
        class: 'mdc-drawer__header',
        component: Div,
    });

    var Title$1 = classAdderBuilder({
        class: 'mdc-drawer__title',
        component: H1$1,
    });

    var Subtitle = classAdderBuilder({
        class: 'mdc-drawer__subtitle',
        component: H2$1,
    });

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$1 = {
        CLOSING: 'mdc-snackbar--closing',
        OPEN: 'mdc-snackbar--open',
        OPENING: 'mdc-snackbar--opening',
    };
    var strings$1 = {
        ACTION_SELECTOR: '.mdc-snackbar__action',
        ARIA_LIVE_LABEL_TEXT_ATTR: 'data-mdc-snackbar-label-text',
        CLOSED_EVENT: 'MDCSnackbar:closed',
        CLOSING_EVENT: 'MDCSnackbar:closing',
        DISMISS_SELECTOR: '.mdc-snackbar__dismiss',
        LABEL_SELECTOR: '.mdc-snackbar__label',
        OPENED_EVENT: 'MDCSnackbar:opened',
        OPENING_EVENT: 'MDCSnackbar:opening',
        REASON_ACTION: 'action',
        REASON_DISMISS: 'dismiss',
        SURFACE_SELECTOR: '.mdc-snackbar__surface',
    };
    var numbers$1 = {
        DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5000,
        INDETERMINATE: -1,
        MAX_AUTO_DISMISS_TIMEOUT_MS: 10000,
        MIN_AUTO_DISMISS_TIMEOUT_MS: 4000,
        // These variables need to be kept in sync with the values in _variables.scss.
        SNACKBAR_ANIMATION_CLOSE_TIME_MS: 75,
        SNACKBAR_ANIMATION_OPEN_TIME_MS: 150,
        /**
         * Number of milliseconds to wait between temporarily clearing the label text
         * in the DOM and subsequently restoring it. This is necessary to force IE 11
         * to pick up the `aria-live` content change and announce it to the user.
         */
        ARIA_LIVE_DELAY_MS: 1000,
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var ARIA_LIVE_DELAY_MS = numbers$1.ARIA_LIVE_DELAY_MS;
    var ARIA_LIVE_LABEL_TEXT_ATTR = strings$1.ARIA_LIVE_LABEL_TEXT_ATTR;
    function announce(ariaEl, labelEl) {
        if (labelEl === void 0) { labelEl = ariaEl; }
        var priority = ariaEl.getAttribute('aria-live');
        // Trim text to ignore `&nbsp;` (see below).
        // textContent is only null if the node is a document, DOCTYPE, or notation.
        var labelText = labelEl.textContent.trim();
        if (!labelText || !priority) {
            return;
        }
        // Temporarily disable `aria-live` to prevent JAWS+Firefox from announcing the message twice.
        ariaEl.setAttribute('aria-live', 'off');
        // Temporarily clear `textContent` to force a DOM mutation event that will be detected by screen readers.
        // `aria-live` elements are only announced when the element's `textContent` *changes*, so snackbars
        // sent to the browser in the initial HTML response won't be read unless we clear the element's `textContent` first.
        // Similarly, displaying the same snackbar message twice in a row doesn't trigger a DOM mutation event,
        // so screen readers won't announce the second message unless we first clear `textContent`.
        //
        // We have to clear the label text two different ways to make it work in all browsers and screen readers:
        //
        //   1. `textContent = ''` is required for IE11 + JAWS
        //   2. `innerHTML = '&nbsp;'` is required for Chrome + JAWS and NVDA
        //
        // All other browser/screen reader combinations support both methods.
        //
        // The wrapper `<span>` visually hides the space character so that it doesn't cause jank when added/removed.
        // N.B.: Setting `position: absolute`, `opacity: 0`, or `height: 0` prevents Chrome from detecting the DOM change.
        //
        // This technique has been tested in:
        //
        //   * JAWS 2019:
        //       - Chrome 70
        //       - Firefox 60 (ESR)
        //       - IE 11
        //   * NVDA 2018:
        //       - Chrome 70
        //       - Firefox 60 (ESR)
        //       - IE 11
        //   * ChromeVox 53
        labelEl.textContent = '';
        labelEl.innerHTML = '<span style="display: inline-block; width: 0; height: 1px;">&nbsp;</span>';
        // Prevent visual jank by temporarily displaying the label text in the ::before pseudo-element.
        // CSS generated content is normally announced by screen readers
        // (except in IE 11; see https://tink.uk/accessibility-support-for-css-generated-content/);
        // however, `aria-live` is turned off, so this DOM update will be ignored by screen readers.
        labelEl.setAttribute(ARIA_LIVE_LABEL_TEXT_ATTR, labelText);
        setTimeout(function () {
            // Allow screen readers to announce changes to the DOM again.
            ariaEl.setAttribute('aria-live', priority);
            // Remove the message from the ::before pseudo-element.
            labelEl.removeAttribute(ARIA_LIVE_LABEL_TEXT_ATTR);
            // Restore the original label text, which will be announced by screen readers.
            labelEl.textContent = labelText;
        }, ARIA_LIVE_DELAY_MS);
    }

    var util$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        announce: announce
    });

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var OPENING = cssClasses$1.OPENING, OPEN = cssClasses$1.OPEN, CLOSING = cssClasses$1.CLOSING;
    var REASON_ACTION = strings$1.REASON_ACTION, REASON_DISMISS = strings$1.REASON_DISMISS;
    var MDCSnackbarFoundation = /** @class */ (function (_super) {
        __extends(MDCSnackbarFoundation, _super);
        function MDCSnackbarFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation.defaultAdapter), adapter)) || this;
            _this.opened = false;
            _this.animationFrame = 0;
            _this.animationTimer = 0;
            _this.autoDismissTimer = 0;
            _this.autoDismissTimeoutMs = numbers$1.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;
            _this.closeOnEscape = true;
            return _this;
        }
        Object.defineProperty(MDCSnackbarFoundation, "cssClasses", {
            get: function () {
                return cssClasses$1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSnackbarFoundation, "strings", {
            get: function () {
                return strings$1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSnackbarFoundation, "numbers", {
            get: function () {
                return numbers$1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCSnackbarFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    announce: function () { return undefined; },
                    notifyClosed: function () { return undefined; },
                    notifyClosing: function () { return undefined; },
                    notifyOpened: function () { return undefined; },
                    notifyOpening: function () { return undefined; },
                    removeClass: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCSnackbarFoundation.prototype.destroy = function () {
            this.clearAutoDismissTimer();
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
            clearTimeout(this.animationTimer);
            this.animationTimer = 0;
            this.adapter.removeClass(OPENING);
            this.adapter.removeClass(OPEN);
            this.adapter.removeClass(CLOSING);
        };
        MDCSnackbarFoundation.prototype.open = function () {
            var _this = this;
            this.clearAutoDismissTimer();
            this.opened = true;
            this.adapter.notifyOpening();
            this.adapter.removeClass(CLOSING);
            this.adapter.addClass(OPENING);
            this.adapter.announce();
            // Wait a frame once display is no longer "none", to establish basis for animation
            this.runNextAnimationFrame(function () {
                _this.adapter.addClass(OPEN);
                _this.animationTimer = setTimeout(function () {
                    var timeoutMs = _this.getTimeoutMs();
                    _this.handleAnimationTimerEnd();
                    _this.adapter.notifyOpened();
                    if (timeoutMs !== numbers$1.INDETERMINATE) {
                        _this.autoDismissTimer = setTimeout(function () {
                            _this.close(REASON_DISMISS);
                        }, timeoutMs);
                    }
                }, numbers$1.SNACKBAR_ANIMATION_OPEN_TIME_MS);
            });
        };
        /**
         * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
         *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
         *     client-specific values may also be used if desired.
         */
        MDCSnackbarFoundation.prototype.close = function (reason) {
            var _this = this;
            if (reason === void 0) { reason = ''; }
            if (!this.opened) {
                // Avoid redundant close calls (and events), e.g. repeated interactions as the snackbar is animating closed
                return;
            }
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
            this.clearAutoDismissTimer();
            this.opened = false;
            this.adapter.notifyClosing(reason);
            this.adapter.addClass(cssClasses$1.CLOSING);
            this.adapter.removeClass(cssClasses$1.OPEN);
            this.adapter.removeClass(cssClasses$1.OPENING);
            clearTimeout(this.animationTimer);
            this.animationTimer = setTimeout(function () {
                _this.handleAnimationTimerEnd();
                _this.adapter.notifyClosed(reason);
            }, numbers$1.SNACKBAR_ANIMATION_CLOSE_TIME_MS);
        };
        MDCSnackbarFoundation.prototype.isOpen = function () {
            return this.opened;
        };
        MDCSnackbarFoundation.prototype.getTimeoutMs = function () {
            return this.autoDismissTimeoutMs;
        };
        MDCSnackbarFoundation.prototype.setTimeoutMs = function (timeoutMs) {
            // Use shorter variable names to make the code more readable
            var minValue = numbers$1.MIN_AUTO_DISMISS_TIMEOUT_MS;
            var maxValue = numbers$1.MAX_AUTO_DISMISS_TIMEOUT_MS;
            var indeterminateValue = numbers$1.INDETERMINATE;
            if (timeoutMs === numbers$1.INDETERMINATE || (timeoutMs <= maxValue && timeoutMs >= minValue)) {
                this.autoDismissTimeoutMs = timeoutMs;
            }
            else {
                throw new Error("\n        timeoutMs must be an integer in the range " + minValue + "\u2013" + maxValue + "\n        (or " + indeterminateValue + " to disable), but got '" + timeoutMs + "'");
            }
        };
        MDCSnackbarFoundation.prototype.getCloseOnEscape = function () {
            return this.closeOnEscape;
        };
        MDCSnackbarFoundation.prototype.setCloseOnEscape = function (closeOnEscape) {
            this.closeOnEscape = closeOnEscape;
        };
        MDCSnackbarFoundation.prototype.handleKeyDown = function (evt) {
            var isEscapeKey = evt.key === 'Escape' || evt.keyCode === 27;
            if (isEscapeKey && this.getCloseOnEscape()) {
                this.close(REASON_DISMISS);
            }
        };
        MDCSnackbarFoundation.prototype.handleActionButtonClick = function (_evt) {
            this.close(REASON_ACTION);
        };
        MDCSnackbarFoundation.prototype.handleActionIconClick = function (_evt) {
            this.close(REASON_DISMISS);
        };
        MDCSnackbarFoundation.prototype.clearAutoDismissTimer = function () {
            clearTimeout(this.autoDismissTimer);
            this.autoDismissTimer = 0;
        };
        MDCSnackbarFoundation.prototype.handleAnimationTimerEnd = function () {
            this.animationTimer = 0;
            this.adapter.removeClass(cssClasses$1.OPENING);
            this.adapter.removeClass(cssClasses$1.CLOSING);
        };
        /**
         * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
         */
        MDCSnackbarFoundation.prototype.runNextAnimationFrame = function (callback) {
            var _this = this;
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = requestAnimationFrame(function () {
                _this.animationFrame = 0;
                clearTimeout(_this.animationTimer);
                _this.animationTimer = setTimeout(callback, 0);
            });
        };
        return MDCSnackbarFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/snackbar/dist/Snackbar.svelte generated by Svelte v3.44.3 */

    const file$3 = "node_modules/@smui/snackbar/dist/Snackbar.svelte";

    function create_fragment$5(ctx) {
    	let aside;
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let aside_class_value;
    	let useActions_action_1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[25].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[24], null);

    	let div_levels = [
    		{
    			class: div_class_value = classMap({
    				[/*surface$class*/ ctx[4]]: true,
    				'mdc-snackbar__surface': true
    			})
    		},
    		{ role: "status" },
    		{ "aria-relevant": "additions" },
    		prefixFilter(/*$$restProps*/ ctx[12], 'surface$')
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	let aside_levels = [
    		{
    			class: aside_class_value = classMap({
    				[/*className*/ ctx[1]]: true,
    				'mdc-snackbar': true,
    				'mdc-snackbar--stacked': /*variant*/ ctx[2] === 'stacked',
    				'mdc-snackbar--leading': /*leading*/ ctx[3],
    				.../*internalClasses*/ ctx[8]
    			})
    		},
    		exclude(/*$$restProps*/ ctx[12], ['surface$'])
    	];

    	let aside_data = {};

    	for (let i = 0; i < aside_levels.length; i += 1) {
    		aside_data = assign(aside_data, aside_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			aside = element("aside");
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$3, 15, 2, 415);
    			set_attributes(aside, aside_data);
    			add_location(aside, file$3, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, aside, anchor);
    			append_dev(aside, div);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*aside_binding*/ ctx[26](aside);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*surface$use*/ ctx[5])),
    					listen_dev(div, "click", /*handleSurfaceClick*/ ctx[10], false, false, false),
    					action_destroyer(useActions_action_1 = useActions.call(null, aside, /*use*/ ctx[0])),
    					action_destroyer(/*forwardEvents*/ ctx[9].call(null, aside)),
    					listen_dev(aside, "SMUISnackbar:closed", /*handleClosed*/ ctx[11], false, false, false),
    					listen_dev(aside, "keydown", /*keydown_handler*/ ctx[27], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 16777216)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[24],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[24])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[24], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty[0] & /*surface$class*/ 16 && div_class_value !== (div_class_value = classMap({
    					[/*surface$class*/ ctx[4]]: true,
    					'mdc-snackbar__surface': true
    				}))) && { class: div_class_value },
    				{ role: "status" },
    				{ "aria-relevant": "additions" },
    				dirty[0] & /*$$restProps*/ 4096 && prefixFilter(/*$$restProps*/ ctx[12], 'surface$')
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*surface$use*/ 32) useActions_action.update.call(null, /*surface$use*/ ctx[5]);

    			set_attributes(aside, aside_data = get_spread_update(aside_levels, [
    				(!current || dirty[0] & /*className, variant, leading, internalClasses*/ 270 && aside_class_value !== (aside_class_value = classMap({
    					[/*className*/ ctx[1]]: true,
    					'mdc-snackbar': true,
    					'mdc-snackbar--stacked': /*variant*/ ctx[2] === 'stacked',
    					'mdc-snackbar--leading': /*leading*/ ctx[3],
    					.../*internalClasses*/ ctx[8]
    				}))) && { class: aside_class_value },
    				dirty[0] & /*$$restProps*/ 4096 && exclude(/*$$restProps*/ ctx[12], ['surface$'])
    			]));

    			if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*use*/ 1) useActions_action_1.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(aside);
    			if (default_slot) default_slot.d(detaching);
    			/*aside_binding*/ ctx[26](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }
    let waiting = Promise.resolve();

    function instance_1$1($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","variant","leading","timeoutMs","closeOnEscape","labelText","actionButtonText","surface$class","surface$use","open","forceOpen","close","isOpen","getLabelElement","getActionButtonElement","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Snackbar', slots, ['default']);
    	const { closest } = ponyfill;
    	const forwardEvents = forwardEventsBuilder(get_current_component());

    	let uninitializedValue = () => {
    		
    	};

    	function isUninitializedValue(value) {
    		return value === uninitializedValue;
    	}

    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { variant = '' } = $$props;
    	let { leading = false } = $$props;
    	let { timeoutMs = 5000 } = $$props;
    	let { closeOnEscape = true } = $$props;
    	let { labelText = uninitializedValue } = $$props;
    	let { actionButtonText = uninitializedValue } = $$props;
    	let { surface$class = '' } = $$props;
    	let { surface$use = [] } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let closeResolve;
    	let closePromise = new Promise(resolve => closeResolve = resolve);
    	setContext('SMUI:label:context', 'snackbar');

    	onMount(() => {
    		$$invalidate(6, instance = new MDCSnackbarFoundation({
    				addClass,
    				announce: () => announce(getLabelElement()),
    				notifyClosed: reason => dispatch(getElement(), 'SMUISnackbar:closed', reason ? { reason } : {}, undefined, true),
    				notifyClosing: reason => dispatch(getElement(), 'SMUISnackbar:closing', reason ? { reason } : {}, undefined, true),
    				notifyOpened: () => dispatch(getElement(), 'SMUISnackbar:opened', undefined, undefined, true),
    				notifyOpening: () => dispatch(getElement(), 'SMUISnackbar:opening', undefined, undefined, true),
    				removeClass
    			}));

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(8, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(8, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function handleSurfaceClick(event) {
    		const target = event.target;

    		if (instance) {
    			if (closest(target, '.mdc-snackbar__action')) {
    				instance.handleActionButtonClick(event);
    			} else if (closest(target, '.mdc-snackbar__dismiss')) {
    				instance.handleActionIconClick(event);
    			}
    		}
    	}

    	function handleClosed() {
    		closeResolve();
    		closePromise = new Promise(resolve => closeResolve = resolve);
    	}

    	function open() {
    		waiting = waiting.then(() => {
    			instance.open();
    			return closePromise;
    		});
    	}

    	function forceOpen() {
    		return instance.open();
    	}

    	function close(reason) {
    		return instance.close(reason);
    	}

    	function isOpen() {
    		return instance.isOpen();
    	}

    	function getLabelElement() {
    		var _a;

    		return (_a = getElement().querySelector('.mdc-snackbar__label')) !== null && _a !== void 0
    		? _a
    		: document.createElement('div');
    	}

    	function getActionButtonElement() {
    		var _a;

    		return (_a = getElement().querySelector('.mdc-snackbar__action')) !== null && _a !== void 0
    		? _a
    		: document.createElement('button');
    	}

    	function getElement() {
    		return element;
    	}

    	function aside_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	const keydown_handler = event => instance && instance.handleKeyDown(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ('variant' in $$new_props) $$invalidate(2, variant = $$new_props.variant);
    		if ('leading' in $$new_props) $$invalidate(3, leading = $$new_props.leading);
    		if ('timeoutMs' in $$new_props) $$invalidate(13, timeoutMs = $$new_props.timeoutMs);
    		if ('closeOnEscape' in $$new_props) $$invalidate(14, closeOnEscape = $$new_props.closeOnEscape);
    		if ('labelText' in $$new_props) $$invalidate(15, labelText = $$new_props.labelText);
    		if ('actionButtonText' in $$new_props) $$invalidate(16, actionButtonText = $$new_props.actionButtonText);
    		if ('surface$class' in $$new_props) $$invalidate(4, surface$class = $$new_props.surface$class);
    		if ('surface$use' in $$new_props) $$invalidate(5, surface$use = $$new_props.surface$use);
    		if ('$$scope' in $$new_props) $$invalidate(24, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		waiting,
    		MDCSnackbarFoundation,
    		util: util$1,
    		ponyfill,
    		onMount,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		closest,
    		forwardEvents,
    		uninitializedValue,
    		isUninitializedValue,
    		use,
    		className,
    		variant,
    		leading,
    		timeoutMs,
    		closeOnEscape,
    		labelText,
    		actionButtonText,
    		surface$class,
    		surface$use,
    		element,
    		instance,
    		internalClasses,
    		closeResolve,
    		closePromise,
    		addClass,
    		removeClass,
    		handleSurfaceClick,
    		handleClosed,
    		open,
    		forceOpen,
    		close,
    		isOpen,
    		getLabelElement,
    		getActionButtonElement,
    		getElement
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
    		if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
    		if ('variant' in $$props) $$invalidate(2, variant = $$new_props.variant);
    		if ('leading' in $$props) $$invalidate(3, leading = $$new_props.leading);
    		if ('timeoutMs' in $$props) $$invalidate(13, timeoutMs = $$new_props.timeoutMs);
    		if ('closeOnEscape' in $$props) $$invalidate(14, closeOnEscape = $$new_props.closeOnEscape);
    		if ('labelText' in $$props) $$invalidate(15, labelText = $$new_props.labelText);
    		if ('actionButtonText' in $$props) $$invalidate(16, actionButtonText = $$new_props.actionButtonText);
    		if ('surface$class' in $$props) $$invalidate(4, surface$class = $$new_props.surface$class);
    		if ('surface$use' in $$props) $$invalidate(5, surface$use = $$new_props.surface$use);
    		if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(6, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(8, internalClasses = $$new_props.internalClasses);
    		if ('closeResolve' in $$props) closeResolve = $$new_props.closeResolve;
    		if ('closePromise' in $$props) closePromise = $$new_props.closePromise;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*instance, timeoutMs*/ 8256) {
    			if (instance && instance.getTimeoutMs() !== timeoutMs) {
    				instance.setTimeoutMs(timeoutMs);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, closeOnEscape*/ 16448) {
    			if (instance && instance.getCloseOnEscape() !== closeOnEscape) {
    				instance.setCloseOnEscape(closeOnEscape);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, labelText*/ 32832) {
    			if (instance && !isUninitializedValue(labelText) && getLabelElement().textContent !== labelText) {
    				getLabelElement().textContent = labelText;
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, actionButtonText*/ 65600) {
    			if (instance && !isUninitializedValue(actionButtonText) && getActionButtonElement().textContent !== actionButtonText) {
    				getActionButtonElement().textContent = actionButtonText;
    			}
    		}
    	};

    	return [
    		use,
    		className,
    		variant,
    		leading,
    		surface$class,
    		surface$use,
    		instance,
    		element,
    		internalClasses,
    		forwardEvents,
    		handleSurfaceClick,
    		handleClosed,
    		$$restProps,
    		timeoutMs,
    		closeOnEscape,
    		labelText,
    		actionButtonText,
    		open,
    		forceOpen,
    		close,
    		isOpen,
    		getLabelElement,
    		getActionButtonElement,
    		getElement,
    		$$scope,
    		slots,
    		aside_binding,
    		keydown_handler
    	];
    }

    class Snackbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1$1,
    			create_fragment$5,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				variant: 2,
    				leading: 3,
    				timeoutMs: 13,
    				closeOnEscape: 14,
    				labelText: 15,
    				actionButtonText: 16,
    				surface$class: 4,
    				surface$use: 5,
    				open: 17,
    				forceOpen: 18,
    				close: 19,
    				isOpen: 20,
    				getLabelElement: 21,
    				getActionButtonElement: 22,
    				getElement: 23
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Snackbar",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get use() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get leading() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set leading(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get timeoutMs() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set timeoutMs(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnEscape() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnEscape(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelText() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelText(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get actionButtonText() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set actionButtonText(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get surface$class() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set surface$class(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get surface$use() {
    		throw new Error("<Snackbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set surface$use(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		return this.$$.ctx[17];
    	}

    	set open(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get forceOpen() {
    		return this.$$.ctx[18];
    	}

    	set forceOpen(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		return this.$$.ctx[19];
    	}

    	set close(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		return this.$$.ctx[20];
    	}

    	set isOpen(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getLabelElement() {
    		return this.$$.ctx[21];
    	}

    	set getLabelElement(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getActionButtonElement() {
    		return this.$$.ctx[22];
    	}

    	set getActionButtonElement(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[23];
    	}

    	set getElement(value) {
    		throw new Error("<Snackbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Actions$1 = classAdderBuilder({
        class: 'mdc-snackbar__actions',
        props: { 'aria-atomic': 'true' },
        contexts: {
            'SMUI:button:context': 'snackbar:actions',
            'SMUI:icon-button:context': 'snackbar:actions',
            'SMUI:label:context': undefined,
        },
        component: Div,
    });

    /* src/components/Snackbar.svelte generated by Svelte v3.44.3 */

    // (15:2) <Label>
    function create_default_slot_3$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*msg*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*msg*/ 1) set_data_dev(t, /*msg*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(15:2) <Label>",
    		ctx
    	});

    	return block;
    }

    // (17:4) <IconButton class="material-icons" title="Dismiss">
    function create_default_slot_2$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(17:4) <IconButton class=\\\"material-icons\\\" title=\\\"Dismiss\\\">",
    		ctx
    	});

    	return block;
    }

    // (16:2) <Actions>
    function create_default_slot_1$2(ctx) {
    	let iconbutton;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				title: "Dismiss",
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(16:2) <Actions>",
    		ctx
    	});

    	return block;
    }

    // (14:0) <Snackbar bind:this={component}>
    function create_default_slot$2(ctx) {
    	let label;
    	let t;
    	let actions;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	actions = new Actions$1({
    			props: {
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    			t = space();
    			create_component(actions.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(actions, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, msg*/ 9) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    			const actions_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				actions_changes.$$scope = { dirty, ctx };
    			}

    			actions.$set(actions_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			transition_in(actions.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			transition_out(actions.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(actions, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(14:0) <Snackbar bind:this={component}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let snackbar_1;
    	let current;

    	let snackbar_1_props = {
    		$$slots: { default: [create_default_slot$2] },
    		$$scope: { ctx }
    	};

    	snackbar_1 = new Snackbar({ props: snackbar_1_props, $$inline: true });
    	/*snackbar_1_binding*/ ctx[2](snackbar_1);

    	const block = {
    		c: function create() {
    			create_component(snackbar_1.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(snackbar_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const snackbar_1_changes = {};

    			if (dirty & /*$$scope, msg*/ 9) {
    				snackbar_1_changes.$$scope = { dirty, ctx };
    			}

    			snackbar_1.$set(snackbar_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(snackbar_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(snackbar_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*snackbar_1_binding*/ ctx[2](null);
    			destroy_component(snackbar_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Snackbar', slots, []);
    	let msg = "";
    	let component;

    	snackbar.subscribe(value => {
    		if (value != "") {
    			$$invalidate(0, msg = value);
    			component.open();
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Snackbar> was created with unknown prop '${key}'`);
    	});

    	function snackbar_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			component = $$value;
    			$$invalidate(1, component);
    		});
    	}

    	$$self.$capture_state = () => ({
    		Snackbar,
    		Actions: Actions$1,
    		Label,
    		IconButton,
    		snackbar,
    		msg,
    		component
    	});

    	$$self.$inject_state = $$props => {
    		if ('msg' in $$props) $$invalidate(0, msg = $$props.msg);
    		if ('component' in $$props) $$invalidate(1, component = $$props.component);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [msg, component, snackbar_1_binding];
    }

    class Snackbar_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Snackbar_1",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    function createFocusTrapInstance(surfaceEl, focusTrapFactory, initialFocusEl) {
        return focusTrapFactory(surfaceEl, { initialFocusEl: initialFocusEl });
    }
    function isScrollable(el) {
        return el ? el.scrollHeight > el.offsetHeight : false;
    }
    /**
     * For scrollable content, returns true if the content has not been scrolled
     * (that is, the scroll content is as the "top"). This is used in full-screen
     * dialogs, where the scroll divider is expected only to appear once the
     * content has been scrolled "underneath" the header bar.
     */
    function isScrollAtTop(el) {
        return el ? el.scrollTop === 0 : false;
    }
    /**
     * For scrollable content, returns true if the content has been scrolled all the
     * way to the bottom. This is used in full-screen dialogs, where the footer
     * scroll divider is expected only to appear when the content is "cut-off" by
     * the footer bar.
     */
    function isScrollAtBottom(el) {
        return el ? Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight :
            false;
    }
    function areTopsMisaligned(els) {
        var tops = new Set();
        [].forEach.call(els, function (el) { return tops.add(el.offsetTop); });
        return tops.size > 1;
    }

    var util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createFocusTrapInstance: createFocusTrapInstance,
        isScrollable: isScrollable,
        isScrollAtTop: isScrollAtTop,
        isScrollAtBottom: isScrollAtBottom,
        areTopsMisaligned: areTopsMisaligned
    });

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses = {
        CLOSING: 'mdc-dialog--closing',
        OPEN: 'mdc-dialog--open',
        OPENING: 'mdc-dialog--opening',
        SCROLLABLE: 'mdc-dialog--scrollable',
        SCROLL_LOCK: 'mdc-dialog-scroll-lock',
        STACKED: 'mdc-dialog--stacked',
        FULLSCREEN: 'mdc-dialog--fullscreen',
        // Class for showing a scroll divider on full-screen dialog header element.
        // Should only be displayed on scrollable content, when the dialog content is
        // scrolled "underneath" the header.
        SCROLL_DIVIDER_HEADER: 'mdc-dialog-scroll-divider-header',
        // Class for showing a scroll divider on a full-screen dialog footer element.
        // Should only be displayed on scrolalble content, when the dialog content is
        // obscured "underneath" the footer.
        SCROLL_DIVIDER_FOOTER: 'mdc-dialog-scroll-divider-footer',
        // The "surface scrim" is a scrim covering only the surface of a dialog. This
        // is used in situations where a confirmation dialog is shown over an already
        // opened full-screen dialog. On larger screen-sizes, the full-screen dialog
        // is sized as a modal and so in these situations we display a "surface scrim"
        // to prevent a "double scrim" (where the scrim from the secondary
        // confirmation dialog would overlap with the scrim from the full-screen
        // dialog).
        SURFACE_SCRIM_SHOWN: 'mdc-dialog__surface-scrim--shown',
        // "Showing" animating class for the surface-scrim.
        SURFACE_SCRIM_SHOWING: 'mdc-dialog__surface-scrim--showing',
        // "Hiding" animating class for the surface-scrim.
        SURFACE_SCRIM_HIDING: 'mdc-dialog__surface-scrim--hiding',
        // Class to hide a dialog's scrim (used in conjunction with a surface-scrim).
        // Note that we only hide the original scrim rather than removing it entirely
        // to prevent interactions with the content behind this scrim, and to capture
        // scrim clicks.
        SCRIM_HIDDEN: 'mdc-dialog__scrim--hidden',
    };
    var strings = {
        ACTION_ATTRIBUTE: 'data-mdc-dialog-action',
        BUTTON_DEFAULT_ATTRIBUTE: 'data-mdc-dialog-button-default',
        BUTTON_SELECTOR: '.mdc-dialog__button',
        CLOSED_EVENT: 'MDCDialog:closed',
        CLOSE_ACTION: 'close',
        CLOSING_EVENT: 'MDCDialog:closing',
        CONTAINER_SELECTOR: '.mdc-dialog__container',
        CONTENT_SELECTOR: '.mdc-dialog__content',
        DESTROY_ACTION: 'destroy',
        INITIAL_FOCUS_ATTRIBUTE: 'data-mdc-dialog-initial-focus',
        OPENED_EVENT: 'MDCDialog:opened',
        OPENING_EVENT: 'MDCDialog:opening',
        SCRIM_SELECTOR: '.mdc-dialog__scrim',
        SUPPRESS_DEFAULT_PRESS_SELECTOR: [
            'textarea',
            '.mdc-menu .mdc-list-item',
            '.mdc-menu .mdc-deprecated-list-item',
        ].join(', '),
        SURFACE_SELECTOR: '.mdc-dialog__surface',
    };
    var numbers = {
        DIALOG_ANIMATION_CLOSE_TIME_MS: 75,
        DIALOG_ANIMATION_OPEN_TIME_MS: 150,
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var AnimationKeys;
    (function (AnimationKeys) {
        AnimationKeys["POLL_SCROLL_POS"] = "poll_scroll_position";
        AnimationKeys["POLL_LAYOUT_CHANGE"] = "poll_layout_change";
    })(AnimationKeys || (AnimationKeys = {}));
    var MDCDialogFoundation = /** @class */ (function (_super) {
        __extends(MDCDialogFoundation, _super);
        function MDCDialogFoundation(adapter) {
            var _this = _super.call(this, __assign(__assign({}, MDCDialogFoundation.defaultAdapter), adapter)) || this;
            _this.dialogOpen = false;
            _this.isFullscreen = false;
            _this.animationFrame = 0;
            _this.animationTimer = 0;
            _this.escapeKeyAction = strings.CLOSE_ACTION;
            _this.scrimClickAction = strings.CLOSE_ACTION;
            _this.autoStackButtons = true;
            _this.areButtonsStacked = false;
            _this.suppressDefaultPressSelector = strings.SUPPRESS_DEFAULT_PRESS_SELECTOR;
            _this.animFrame = new AnimationFrame();
            _this.contentScrollHandler = function () {
                _this.handleScrollEvent();
            };
            _this.windowResizeHandler = function () {
                _this.layout();
            };
            _this.windowOrientationChangeHandler = function () {
                _this.layout();
            };
            return _this;
        }
        Object.defineProperty(MDCDialogFoundation, "cssClasses", {
            get: function () {
                return cssClasses;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCDialogFoundation, "strings", {
            get: function () {
                return strings;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCDialogFoundation, "numbers", {
            get: function () {
                return numbers;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MDCDialogFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addBodyClass: function () { return undefined; },
                    addClass: function () { return undefined; },
                    areButtonsStacked: function () { return false; },
                    clickDefaultButton: function () { return undefined; },
                    eventTargetMatches: function () { return false; },
                    getActionFromEvent: function () { return ''; },
                    getInitialFocusEl: function () { return null; },
                    hasClass: function () { return false; },
                    isContentScrollable: function () { return false; },
                    notifyClosed: function () { return undefined; },
                    notifyClosing: function () { return undefined; },
                    notifyOpened: function () { return undefined; },
                    notifyOpening: function () { return undefined; },
                    releaseFocus: function () { return undefined; },
                    removeBodyClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    reverseButtons: function () { return undefined; },
                    trapFocus: function () { return undefined; },
                    registerContentEventHandler: function () { return undefined; },
                    deregisterContentEventHandler: function () { return undefined; },
                    isScrollableContentAtTop: function () { return false; },
                    isScrollableContentAtBottom: function () { return false; },
                    registerWindowEventHandler: function () { return undefined; },
                    deregisterWindowEventHandler: function () { return undefined; },
                };
            },
            enumerable: false,
            configurable: true
        });
        MDCDialogFoundation.prototype.init = function () {
            if (this.adapter.hasClass(cssClasses.STACKED)) {
                this.setAutoStackButtons(false);
            }
            this.isFullscreen = this.adapter.hasClass(cssClasses.FULLSCREEN);
        };
        MDCDialogFoundation.prototype.destroy = function () {
            if (this.animationTimer) {
                clearTimeout(this.animationTimer);
                this.handleAnimationTimerEnd();
            }
            if (this.isFullscreen) {
                this.adapter.deregisterContentEventHandler('scroll', this.contentScrollHandler);
            }
            this.animFrame.cancelAll();
            this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
            this.adapter.deregisterWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);
        };
        MDCDialogFoundation.prototype.open = function (dialogOptions) {
            var _this = this;
            this.dialogOpen = true;
            this.adapter.notifyOpening();
            this.adapter.addClass(cssClasses.OPENING);
            if (this.isFullscreen) {
                // A scroll event listener is registered even if the dialog is not
                // scrollable on open, since the window resize event, or orientation
                // change may make the dialog scrollable after it is opened.
                this.adapter.registerContentEventHandler('scroll', this.contentScrollHandler);
            }
            if (dialogOptions && dialogOptions.isAboveFullscreenDialog) {
                this.adapter.addClass(cssClasses.SCRIM_HIDDEN);
            }
            this.adapter.registerWindowEventHandler('resize', this.windowResizeHandler);
            this.adapter.registerWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);
            // Wait a frame once display is no longer "none", to establish basis for
            // animation
            this.runNextAnimationFrame(function () {
                _this.adapter.addClass(cssClasses.OPEN);
                _this.adapter.addBodyClass(cssClasses.SCROLL_LOCK);
                _this.layout();
                _this.animationTimer = setTimeout(function () {
                    _this.handleAnimationTimerEnd();
                    _this.adapter.trapFocus(_this.adapter.getInitialFocusEl());
                    _this.adapter.notifyOpened();
                }, numbers.DIALOG_ANIMATION_OPEN_TIME_MS);
            });
        };
        MDCDialogFoundation.prototype.close = function (action) {
            var _this = this;
            if (action === void 0) { action = ''; }
            if (!this.dialogOpen) {
                // Avoid redundant close calls (and events), e.g. from keydown on elements
                // that inherently emit click
                return;
            }
            this.dialogOpen = false;
            this.adapter.notifyClosing(action);
            this.adapter.addClass(cssClasses.CLOSING);
            this.adapter.removeClass(cssClasses.OPEN);
            this.adapter.removeBodyClass(cssClasses.SCROLL_LOCK);
            if (this.isFullscreen) {
                this.adapter.deregisterContentEventHandler('scroll', this.contentScrollHandler);
            }
            this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
            this.adapter.deregisterWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
            clearTimeout(this.animationTimer);
            this.animationTimer = setTimeout(function () {
                _this.adapter.releaseFocus();
                _this.handleAnimationTimerEnd();
                _this.adapter.notifyClosed(action);
            }, numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);
        };
        /**
         * Used only in instances of showing a secondary dialog over a full-screen
         * dialog. Shows the "surface scrim" displayed over the full-screen dialog.
         */
        MDCDialogFoundation.prototype.showSurfaceScrim = function () {
            var _this = this;
            this.adapter.addClass(cssClasses.SURFACE_SCRIM_SHOWING);
            this.runNextAnimationFrame(function () {
                _this.adapter.addClass(cssClasses.SURFACE_SCRIM_SHOWN);
            });
        };
        /**
         * Used only in instances of showing a secondary dialog over a full-screen
         * dialog. Hides the "surface scrim" displayed over the full-screen dialog.
         */
        MDCDialogFoundation.prototype.hideSurfaceScrim = function () {
            this.adapter.removeClass(cssClasses.SURFACE_SCRIM_SHOWN);
            this.adapter.addClass(cssClasses.SURFACE_SCRIM_HIDING);
        };
        /**
         * Handles `transitionend` event triggered when surface scrim animation is
         * finished.
         */
        MDCDialogFoundation.prototype.handleSurfaceScrimTransitionEnd = function () {
            this.adapter.removeClass(cssClasses.SURFACE_SCRIM_HIDING);
            this.adapter.removeClass(cssClasses.SURFACE_SCRIM_SHOWING);
        };
        MDCDialogFoundation.prototype.isOpen = function () {
            return this.dialogOpen;
        };
        MDCDialogFoundation.prototype.getEscapeKeyAction = function () {
            return this.escapeKeyAction;
        };
        MDCDialogFoundation.prototype.setEscapeKeyAction = function (action) {
            this.escapeKeyAction = action;
        };
        MDCDialogFoundation.prototype.getScrimClickAction = function () {
            return this.scrimClickAction;
        };
        MDCDialogFoundation.prototype.setScrimClickAction = function (action) {
            this.scrimClickAction = action;
        };
        MDCDialogFoundation.prototype.getAutoStackButtons = function () {
            return this.autoStackButtons;
        };
        MDCDialogFoundation.prototype.setAutoStackButtons = function (autoStack) {
            this.autoStackButtons = autoStack;
        };
        MDCDialogFoundation.prototype.getSuppressDefaultPressSelector = function () {
            return this.suppressDefaultPressSelector;
        };
        MDCDialogFoundation.prototype.setSuppressDefaultPressSelector = function (selector) {
            this.suppressDefaultPressSelector = selector;
        };
        MDCDialogFoundation.prototype.layout = function () {
            var _this = this;
            this.animFrame.request(AnimationKeys.POLL_LAYOUT_CHANGE, function () {
                _this.layoutInternal();
            });
        };
        /** Handles click on the dialog root element. */
        MDCDialogFoundation.prototype.handleClick = function (evt) {
            var isScrim = this.adapter.eventTargetMatches(evt.target, strings.SCRIM_SELECTOR);
            // Check for scrim click first since it doesn't require querying ancestors.
            if (isScrim && this.scrimClickAction !== '') {
                this.close(this.scrimClickAction);
            }
            else {
                var action = this.adapter.getActionFromEvent(evt);
                if (action) {
                    this.close(action);
                }
            }
        };
        /** Handles keydown on the dialog root element. */
        MDCDialogFoundation.prototype.handleKeydown = function (evt) {
            var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
            if (!isEnter) {
                return;
            }
            var action = this.adapter.getActionFromEvent(evt);
            if (action) {
                // Action button callback is handled in `handleClick`,
                // since space/enter keydowns on buttons trigger click events.
                return;
            }
            // `composedPath` is used here, when available, to account for use cases
            // where a target meant to suppress the default press behaviour
            // may exist in a shadow root.
            // For example, a textarea inside a web component:
            // <mwc-dialog>
            //   <horizontal-layout>
            //     #shadow-root (open)
            //       <mwc-textarea>
            //         #shadow-root (open)
            //           <textarea></textarea>
            //       </mwc-textarea>
            //   </horizontal-layout>
            // </mwc-dialog>
            var target = evt.composedPath ? evt.composedPath()[0] : evt.target;
            var isDefault = this.suppressDefaultPressSelector ?
                !this.adapter.eventTargetMatches(target, this.suppressDefaultPressSelector) :
                true;
            if (isEnter && isDefault) {
                this.adapter.clickDefaultButton();
            }
        };
        /** Handles keydown on the document. */
        MDCDialogFoundation.prototype.handleDocumentKeydown = function (evt) {
            var isEscape = evt.key === 'Escape' || evt.keyCode === 27;
            if (isEscape && this.escapeKeyAction !== '') {
                this.close(this.escapeKeyAction);
            }
        };
        /**
         * Handles scroll event on the dialog's content element -- showing a scroll
         * divider on the header or footer based on the scroll position. This handler
         * should only be registered on full-screen dialogs with scrollable content.
         */
        MDCDialogFoundation.prototype.handleScrollEvent = function () {
            var _this = this;
            // Since scroll events can fire at a high rate, we throttle these events by
            // using requestAnimationFrame.
            this.animFrame.request(AnimationKeys.POLL_SCROLL_POS, function () {
                _this.toggleScrollDividerHeader();
                _this.toggleScrollDividerFooter();
            });
        };
        MDCDialogFoundation.prototype.layoutInternal = function () {
            if (this.autoStackButtons) {
                this.detectStackedButtons();
            }
            this.toggleScrollableClasses();
        };
        MDCDialogFoundation.prototype.handleAnimationTimerEnd = function () {
            this.animationTimer = 0;
            this.adapter.removeClass(cssClasses.OPENING);
            this.adapter.removeClass(cssClasses.CLOSING);
        };
        /**
         * Runs the given logic on the next animation frame, using setTimeout to
         * factor in Firefox reflow behavior.
         */
        MDCDialogFoundation.prototype.runNextAnimationFrame = function (callback) {
            var _this = this;
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = requestAnimationFrame(function () {
                _this.animationFrame = 0;
                clearTimeout(_this.animationTimer);
                _this.animationTimer = setTimeout(callback, 0);
            });
        };
        MDCDialogFoundation.prototype.detectStackedButtons = function () {
            // Remove the class first to let us measure the buttons' natural positions.
            this.adapter.removeClass(cssClasses.STACKED);
            var areButtonsStacked = this.adapter.areButtonsStacked();
            if (areButtonsStacked) {
                this.adapter.addClass(cssClasses.STACKED);
            }
            if (areButtonsStacked !== this.areButtonsStacked) {
                this.adapter.reverseButtons();
                this.areButtonsStacked = areButtonsStacked;
            }
        };
        MDCDialogFoundation.prototype.toggleScrollableClasses = function () {
            // Remove the class first to let us measure the natural height of the
            // content.
            this.adapter.removeClass(cssClasses.SCROLLABLE);
            if (this.adapter.isContentScrollable()) {
                this.adapter.addClass(cssClasses.SCROLLABLE);
                if (this.isFullscreen) {
                    // If dialog is full-screen and scrollable, check if a scroll divider
                    // should be shown.
                    this.toggleScrollDividerHeader();
                    this.toggleScrollDividerFooter();
                }
            }
        };
        MDCDialogFoundation.prototype.toggleScrollDividerHeader = function () {
            if (!this.adapter.isScrollableContentAtTop()) {
                this.adapter.addClass(cssClasses.SCROLL_DIVIDER_HEADER);
            }
            else if (this.adapter.hasClass(cssClasses.SCROLL_DIVIDER_HEADER)) {
                this.adapter.removeClass(cssClasses.SCROLL_DIVIDER_HEADER);
            }
        };
        MDCDialogFoundation.prototype.toggleScrollDividerFooter = function () {
            if (!this.adapter.isScrollableContentAtBottom()) {
                this.adapter.addClass(cssClasses.SCROLL_DIVIDER_FOOTER);
            }
            else if (this.adapter.hasClass(cssClasses.SCROLL_DIVIDER_FOOTER)) {
                this.adapter.removeClass(cssClasses.SCROLL_DIVIDER_FOOTER);
            }
        };
        return MDCDialogFoundation;
    }(MDCFoundation));

    /* node_modules/@smui/dialog/dist/Dialog.svelte generated by Svelte v3.44.3 */

    const { document: document_1, window: window_1 } = globals;

    const file$2 = "node_modules/@smui/dialog/dist/Dialog.svelte";
    const get_over_slot_changes = dirty => ({});
    const get_over_slot_context = ctx => ({});

    // (47:6) {#if fullscreen}
    function create_if_block$1(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "mdc-dialog__surface-scrim");
    			add_location(div, file$2, 47, 8, 1330);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "transitionend", /*transitionend_handler*/ ctx[31], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(47:6) {#if fullscreen}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let t0;
    	let div3;
    	let div1;
    	let div0;
    	let t1;
    	let div0_class_value;
    	let div1_class_value;
    	let t2;
    	let div2;
    	let div3_class_value;
    	let useActions_action;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[27].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[26], null);
    	let if_block = /*fullscreen*/ ctx[5] && create_if_block$1(ctx);

    	let div0_levels = [
    		{
    			class: div0_class_value = classMap({
    				[/*surface$class*/ ctx[7]]: true,
    				'mdc-dialog__surface': true
    			})
    		},
    		{ role: "alertdialog" },
    		{ "aria-modal": "true" },
    		prefixFilter(/*$$restProps*/ ctx[17], 'surface$')
    	];

    	let div0_data = {};

    	for (let i = 0; i < div0_levels.length; i += 1) {
    		div0_data = assign(div0_data, div0_levels[i]);
    	}

    	let div1_levels = [
    		{
    			class: div1_class_value = classMap({
    				[/*container$class*/ ctx[6]]: true,
    				'mdc-dialog__container': true
    			})
    		},
    		prefixFilter(/*$$restProps*/ ctx[17], 'container$')
    	];

    	let div1_data = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div1_data = assign(div1_data, div1_levels[i]);
    	}

    	let div3_levels = [
    		{
    			class: div3_class_value = classMap({
    				[/*className*/ ctx[2]]: true,
    				'mdc-dialog': true,
    				'mdc-dialog--stacked': !/*autoStackButtons*/ ctx[4],
    				'mdc-dialog--fullscreen': /*fullscreen*/ ctx[5],
    				'smui-dialog--selection': /*selection*/ ctx[3],
    				.../*internalClasses*/ ctx[10]
    			})
    		},
    		{ role: "alertdialog" },
    		{ "aria-modal": "true" },
    		exclude(/*$$restProps*/ ctx[17], ['container$', 'surface$'])
    	];

    	let div3_data = {};

    	for (let i = 0; i < div3_levels.length; i += 1) {
    		div3_data = assign(div3_data, div3_levels[i]);
    	}

    	const over_slot_template = /*#slots*/ ctx[27].over;
    	const over_slot = create_slot(over_slot_template, ctx, /*$$scope*/ ctx[26], get_over_slot_context);

    	const block = {
    		c: function create() {
    			t0 = space();
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			div2 = element("div");
    			t3 = space();
    			if (over_slot) over_slot.c();
    			set_attributes(div0, div0_data);
    			add_location(div0, file$2, 36, 4, 1073);
    			set_attributes(div1, div1_data);
    			add_location(div1, file$2, 29, 2, 913);
    			attr_dev(div2, "class", "mdc-dialog__scrim");
    			add_location(div2, file$2, 55, 2, 1526);
    			set_attributes(div3, div3_data);
    			add_location(div3, file$2, 8, 0, 250);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div0, t1);
    			if (if_block) if_block.m(div0, null);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			/*div3_binding*/ ctx[32](div3);
    			insert_dev(target, t3, anchor);

    			if (over_slot) {
    				over_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "resize", /*resize_handler*/ ctx[28], false, false, false),
    					listen_dev(window_1, "orientationchange", /*orientationchange_handler*/ ctx[29], false, false, false),
    					listen_dev(document_1.body, "keydown", /*keydown_handler*/ ctx[30], false, false, false),
    					action_destroyer(useActions_action = useActions.call(null, div3, /*use*/ ctx[1])),
    					action_destroyer(/*forwardEvents*/ ctx[11].call(null, div3)),
    					listen_dev(div3, "SMUIDialog:opening", /*handleDialogOpening*/ ctx[14], false, false, false),
    					listen_dev(div3, "SMUIDialog:opened", /*handleDialogOpened*/ ctx[15], false, false, false),
    					listen_dev(div3, "SMUIDialog:closed", /*handleDialogClosed*/ ctx[16], false, false, false),
    					listen_dev(div3, "click", /*click_handler*/ ctx[33], false, false, false),
    					listen_dev(div3, "keydown", /*keydown_handler_1*/ ctx[34], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 67108864)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[26],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[26])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[26], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*fullscreen*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_attributes(div0, div0_data = get_spread_update(div0_levels, [
    				(!current || dirty[0] & /*surface$class*/ 128 && div0_class_value !== (div0_class_value = classMap({
    					[/*surface$class*/ ctx[7]]: true,
    					'mdc-dialog__surface': true
    				}))) && { class: div0_class_value },
    				{ role: "alertdialog" },
    				{ "aria-modal": "true" },
    				dirty[0] & /*$$restProps*/ 131072 && prefixFilter(/*$$restProps*/ ctx[17], 'surface$')
    			]));

    			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
    				(!current || dirty[0] & /*container$class*/ 64 && div1_class_value !== (div1_class_value = classMap({
    					[/*container$class*/ ctx[6]]: true,
    					'mdc-dialog__container': true
    				}))) && { class: div1_class_value },
    				dirty[0] & /*$$restProps*/ 131072 && prefixFilter(/*$$restProps*/ ctx[17], 'container$')
    			]));

    			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
    				(!current || dirty[0] & /*className, autoStackButtons, fullscreen, selection, internalClasses*/ 1084 && div3_class_value !== (div3_class_value = classMap({
    					[/*className*/ ctx[2]]: true,
    					'mdc-dialog': true,
    					'mdc-dialog--stacked': !/*autoStackButtons*/ ctx[4],
    					'mdc-dialog--fullscreen': /*fullscreen*/ ctx[5],
    					'smui-dialog--selection': /*selection*/ ctx[3],
    					.../*internalClasses*/ ctx[10]
    				}))) && { class: div3_class_value },
    				{ role: "alertdialog" },
    				{ "aria-modal": "true" },
    				dirty[0] & /*$$restProps*/ 131072 && exclude(/*$$restProps*/ ctx[17], ['container$', 'surface$'])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);

    			if (over_slot) {
    				if (over_slot.p && (!current || dirty[0] & /*$$scope*/ 67108864)) {
    					update_slot_base(
    						over_slot,
    						over_slot_template,
    						ctx,
    						/*$$scope*/ ctx[26],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[26])
    						: get_slot_changes(over_slot_template, /*$$scope*/ ctx[26], dirty, get_over_slot_changes),
    						get_over_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(over_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(over_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div3);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    			/*div3_binding*/ ctx[32](null);
    			if (detaching) detach_dev(t3);
    			if (over_slot) over_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance_1($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"use","class","open","selection","escapeKeyAction","scrimClickAction","autoStackButtons","fullscreen","container$class","surface$class","isOpen","setOpen","layout","getElement"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $aboveFullscreenShown;
    	let $actionButtonsReversed;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dialog', slots, ['default','over']);
    	var _a;
    	const { FocusTrap } = domFocusTrap;
    	const { closest, matches } = ponyfill;
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = '' } = $$props;
    	let { open = false } = $$props;
    	let { selection = false } = $$props;
    	let { escapeKeyAction = 'close' } = $$props;
    	let { scrimClickAction = 'close' } = $$props;
    	let { autoStackButtons = true } = $$props;
    	let { fullscreen = false } = $$props;
    	let { container$class = '' } = $$props;
    	let { surface$class = '' } = $$props;
    	let element;
    	let instance;
    	let internalClasses = {};
    	let focusTrap;
    	let actionButtonsReversed = writable(false);
    	validate_store(actionButtonsReversed, 'actionButtonsReversed');
    	component_subscribe($$self, actionButtonsReversed, value => $$invalidate(38, $actionButtonsReversed = value));
    	let aboveFullscreen = getContext('SMUI:dialog:aboveFullscreen');

    	let aboveFullscreenShown = (_a = getContext('SMUI:dialog:aboveFullscreenShown')) !== null && _a !== void 0
    	? _a
    	: writable(false);

    	validate_store(aboveFullscreenShown, 'aboveFullscreenShown');
    	component_subscribe($$self, aboveFullscreenShown, value => $$invalidate(25, $aboveFullscreenShown = value));
    	let addLayoutListener = getContext('SMUI:addLayoutListener');
    	let removeLayoutListener;
    	let layoutListeners = [];

    	let addLayoutListenerFn = listener => {
    		layoutListeners.push(listener);

    		return () => {
    			const idx = layoutListeners.indexOf(listener);

    			if (idx >= 0) {
    				layoutListeners.splice(idx, 1);
    			}
    		};
    	};

    	setContext('SMUI:dialog:actions:reversed', actionButtonsReversed);
    	setContext('SMUI:addLayoutListener', addLayoutListenerFn);
    	setContext('SMUI:dialog:selection', selection);
    	setContext('SMUI:dialog:aboveFullscreen', aboveFullscreen || fullscreen);
    	setContext('SMUI:dialog:aboveFullscreenShown', aboveFullscreenShown);

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	let previousAboveFullscreenShown = $aboveFullscreenShown;

    	onMount(() => {
    		var _a;

    		focusTrap = new FocusTrap(element,
    		{
    				initialFocusEl: (_a = getInitialFocusEl()) !== null && _a !== void 0
    				? _a
    				: undefined
    			});

    		$$invalidate(8, instance = new MDCDialogFoundation({
    				addBodyClass: className => document.body.classList.add(className),
    				addClass,
    				areButtonsStacked: () => areTopsMisaligned(getButtonEls()),
    				clickDefaultButton: () => {
    					const defaultButton = getDefaultButtonEl();

    					if (defaultButton) {
    						defaultButton.click();
    					}
    				},
    				eventTargetMatches: (target, selector) => target ? matches(target, selector) : false,
    				getActionFromEvent: evt => {
    					if (!evt.target) {
    						return '';
    					}

    					const element = closest(evt.target, '[data-mdc-dialog-action]');
    					return element && element.getAttribute('data-mdc-dialog-action');
    				},
    				getInitialFocusEl,
    				hasClass,
    				isContentScrollable: () => isScrollable(getContentEl()),
    				notifyClosed: action => {
    					$$invalidate(0, open = false);
    					dispatch(getElement(), 'SMUIDialog:closed', action ? { action } : {}, undefined, true);
    				},
    				notifyClosing: action => dispatch(getElement(), 'SMUIDialog:closing', action ? { action } : {}, undefined, true),
    				notifyOpened: () => dispatch(getElement(), 'SMUIDialog:opened', {}, undefined, true),
    				notifyOpening: () => dispatch(getElement(), 'SMUIDialog:opening', {}, undefined, true),
    				releaseFocus: () => focusTrap.releaseFocus(),
    				removeBodyClass: className => document.body.classList.remove(className),
    				removeClass,
    				reverseButtons: () => {
    					set_store_value(actionButtonsReversed, $actionButtonsReversed = true, $actionButtonsReversed);
    				},
    				trapFocus: () => focusTrap.trapFocus(),
    				registerContentEventHandler: (evt, handler) => {
    					const content = getContentEl();

    					if (content instanceof HTMLElement) {
    						content.addEventListener(evt, handler);
    					}
    				},
    				deregisterContentEventHandler: (evt, handler) => {
    					const content = getContentEl();

    					if (content instanceof HTMLElement) {
    						content.removeEventListener(evt, handler);
    					}
    				},
    				isScrollableContentAtTop: () => {
    					return isScrollAtTop(getContentEl());
    				},
    				isScrollableContentAtBottom: () => {
    					return isScrollAtBottom(getContentEl());
    				},
    				registerWindowEventHandler: (evt, handler) => {
    					window.addEventListener(evt, handler);
    				},
    				deregisterWindowEventHandler: (evt, handler) => {
    					window.removeEventListener(evt, handler);
    				}
    			}));

    		instance.init();

    		return () => {
    			instance.destroy();
    		};
    	});

    	onDestroy(() => {
    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function hasClass(className) {
    		return className in internalClasses
    		? internalClasses[className]
    		: getElement().classList.contains(className);
    	}

    	function addClass(className) {
    		if (!internalClasses[className]) {
    			$$invalidate(10, internalClasses[className] = true, internalClasses);
    		}
    	}

    	function removeClass(className) {
    		if (!(className in internalClasses) || internalClasses[className]) {
    			$$invalidate(10, internalClasses[className] = false, internalClasses);
    		}
    	}

    	function getButtonEls() {
    		return [].slice.call(element.querySelectorAll('.mdc-dialog__button'));
    	}

    	function getDefaultButtonEl() {
    		return element.querySelector('[data-mdc-dialog-button-default');
    	}

    	function getContentEl() {
    		return element.querySelector('.mdc-dialog__content');
    	}

    	function getInitialFocusEl() {
    		return element.querySelector('[data-mdc-dialog-initial-focus]');
    	}

    	function handleDialogOpening() {
    		if (aboveFullscreen) {
    			set_store_value(aboveFullscreenShown, $aboveFullscreenShown = true, $aboveFullscreenShown);
    		}

    		requestAnimationFrame(() => {
    			layoutListeners.forEach(listener => listener());
    		});
    	}

    	function handleDialogOpened() {
    		layoutListeners.forEach(listener => listener());
    	}

    	function handleDialogClosed() {
    		if (aboveFullscreen) {
    			set_store_value(aboveFullscreenShown, $aboveFullscreenShown = false, $aboveFullscreenShown);
    		}
    	}

    	function isOpen() {
    		return open;
    	}

    	function setOpen(value) {
    		$$invalidate(0, open = value);
    	}

    	function layout() {
    		return instance.layout();
    	}

    	function getElement() {
    		return element;
    	}

    	const resize_handler = () => open && instance && instance.layout();
    	const orientationchange_handler = () => open && instance && instance.layout();
    	const keydown_handler = event => open && instance && instance.handleDocumentKeydown(event);
    	const transitionend_handler = () => instance && instance.handleSurfaceScrimTransitionEnd();

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(9, element);
    		});
    	}

    	const click_handler = event => instance && instance.handleClick(event);
    	const keydown_handler_1 = event => instance && instance.handleKeydown(event);

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
    		if ('selection' in $$new_props) $$invalidate(3, selection = $$new_props.selection);
    		if ('escapeKeyAction' in $$new_props) $$invalidate(18, escapeKeyAction = $$new_props.escapeKeyAction);
    		if ('scrimClickAction' in $$new_props) $$invalidate(19, scrimClickAction = $$new_props.scrimClickAction);
    		if ('autoStackButtons' in $$new_props) $$invalidate(4, autoStackButtons = $$new_props.autoStackButtons);
    		if ('fullscreen' in $$new_props) $$invalidate(5, fullscreen = $$new_props.fullscreen);
    		if ('container$class' in $$new_props) $$invalidate(6, container$class = $$new_props.container$class);
    		if ('surface$class' in $$new_props) $$invalidate(7, surface$class = $$new_props.surface$class);
    		if ('$$scope' in $$new_props) $$invalidate(26, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		MDCDialogFoundation,
    		util,
    		domFocusTrap,
    		ponyfill,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		writable,
    		get_current_component,
    		forwardEventsBuilder,
    		classMap,
    		exclude,
    		prefixFilter,
    		useActions,
    		dispatch,
    		FocusTrap,
    		closest,
    		matches,
    		forwardEvents,
    		use,
    		className,
    		open,
    		selection,
    		escapeKeyAction,
    		scrimClickAction,
    		autoStackButtons,
    		fullscreen,
    		container$class,
    		surface$class,
    		element,
    		instance,
    		internalClasses,
    		focusTrap,
    		actionButtonsReversed,
    		aboveFullscreen,
    		aboveFullscreenShown,
    		addLayoutListener,
    		removeLayoutListener,
    		layoutListeners,
    		addLayoutListenerFn,
    		previousAboveFullscreenShown,
    		hasClass,
    		addClass,
    		removeClass,
    		getButtonEls,
    		getDefaultButtonEl,
    		getContentEl,
    		getInitialFocusEl,
    		handleDialogOpening,
    		handleDialogOpened,
    		handleDialogClosed,
    		isOpen,
    		setOpen,
    		layout,
    		getElement,
    		$aboveFullscreenShown,
    		$actionButtonsReversed
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('_a' in $$props) _a = $$new_props._a;
    		if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
    		if ('selection' in $$props) $$invalidate(3, selection = $$new_props.selection);
    		if ('escapeKeyAction' in $$props) $$invalidate(18, escapeKeyAction = $$new_props.escapeKeyAction);
    		if ('scrimClickAction' in $$props) $$invalidate(19, scrimClickAction = $$new_props.scrimClickAction);
    		if ('autoStackButtons' in $$props) $$invalidate(4, autoStackButtons = $$new_props.autoStackButtons);
    		if ('fullscreen' in $$props) $$invalidate(5, fullscreen = $$new_props.fullscreen);
    		if ('container$class' in $$props) $$invalidate(6, container$class = $$new_props.container$class);
    		if ('surface$class' in $$props) $$invalidate(7, surface$class = $$new_props.surface$class);
    		if ('element' in $$props) $$invalidate(9, element = $$new_props.element);
    		if ('instance' in $$props) $$invalidate(8, instance = $$new_props.instance);
    		if ('internalClasses' in $$props) $$invalidate(10, internalClasses = $$new_props.internalClasses);
    		if ('focusTrap' in $$props) focusTrap = $$new_props.focusTrap;
    		if ('actionButtonsReversed' in $$props) $$invalidate(12, actionButtonsReversed = $$new_props.actionButtonsReversed);
    		if ('aboveFullscreen' in $$props) $$invalidate(42, aboveFullscreen = $$new_props.aboveFullscreen);
    		if ('aboveFullscreenShown' in $$props) $$invalidate(13, aboveFullscreenShown = $$new_props.aboveFullscreenShown);
    		if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    		if ('layoutListeners' in $$props) layoutListeners = $$new_props.layoutListeners;
    		if ('addLayoutListenerFn' in $$props) addLayoutListenerFn = $$new_props.addLayoutListenerFn;
    		if ('previousAboveFullscreenShown' in $$props) $$invalidate(24, previousAboveFullscreenShown = $$new_props.previousAboveFullscreenShown);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*instance, escapeKeyAction*/ 262400) {
    			if (instance && instance.getEscapeKeyAction() !== escapeKeyAction) {
    				instance.setEscapeKeyAction(escapeKeyAction);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, scrimClickAction*/ 524544) {
    			if (instance && instance.getScrimClickAction() !== scrimClickAction) {
    				instance.setScrimClickAction(scrimClickAction);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, autoStackButtons*/ 272) {
    			if (instance && instance.getAutoStackButtons() !== autoStackButtons) {
    				instance.setAutoStackButtons(autoStackButtons);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*autoStackButtons*/ 16) {
    			if (!autoStackButtons) {
    				set_store_value(actionButtonsReversed, $actionButtonsReversed = true, $actionButtonsReversed);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance, open*/ 257) {
    			if (instance && instance.isOpen() !== open) {
    				if (open) {
    					instance.open({
    						isAboveFullscreenDialog: !!aboveFullscreen
    					});
    				} else {
    					instance.close();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*fullscreen, instance, previousAboveFullscreenShown, $aboveFullscreenShown*/ 50331936) {
    			if (fullscreen && instance && previousAboveFullscreenShown !== $aboveFullscreenShown) {
    				$$invalidate(24, previousAboveFullscreenShown = $aboveFullscreenShown);

    				if ($aboveFullscreenShown) {
    					instance.showSurfaceScrim();
    				} else {
    					instance.hideSurfaceScrim();
    				}
    			}
    		}
    	};

    	return [
    		open,
    		use,
    		className,
    		selection,
    		autoStackButtons,
    		fullscreen,
    		container$class,
    		surface$class,
    		instance,
    		element,
    		internalClasses,
    		forwardEvents,
    		actionButtonsReversed,
    		aboveFullscreenShown,
    		handleDialogOpening,
    		handleDialogOpened,
    		handleDialogClosed,
    		$$restProps,
    		escapeKeyAction,
    		scrimClickAction,
    		isOpen,
    		setOpen,
    		layout,
    		getElement,
    		previousAboveFullscreenShown,
    		$aboveFullscreenShown,
    		$$scope,
    		slots,
    		resize_handler,
    		orientationchange_handler,
    		keydown_handler,
    		transitionend_handler,
    		div3_binding,
    		click_handler,
    		keydown_handler_1
    	];
    }

    class Dialog extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance_1,
    			create_fragment$3,
    			safe_not_equal,
    			{
    				use: 1,
    				class: 2,
    				open: 0,
    				selection: 3,
    				escapeKeyAction: 18,
    				scrimClickAction: 19,
    				autoStackButtons: 4,
    				fullscreen: 5,
    				container$class: 6,
    				surface$class: 7,
    				isOpen: 20,
    				setOpen: 21,
    				layout: 22,
    				getElement: 23
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dialog",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get use() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeKeyAction() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeKeyAction(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrimClickAction() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrimClickAction(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autoStackButtons() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoStackButtons(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullscreen() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullscreen(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container$class() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container$class(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get surface$class() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set surface$class(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		return this.$$.ctx[20];
    	}

    	set isOpen(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setOpen() {
    		return this.$$.ctx[21];
    	}

    	set setOpen(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[22];
    	}

    	set layout(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getElement() {
    		return this.$$.ctx[23];
    	}

    	set getElement(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    classAdderBuilder({
        class: 'mdc-dialog__header',
        component: Div,
        contexts: {
            'SMUI:icon-button:context': 'dialog:header',
        },
    });

    var Title = classAdderBuilder({
        class: 'mdc-dialog__title',
        component: H2$1,
    });

    var Content = classAdderBuilder({
        class: 'mdc-dialog__content',
        component: Div,
    });

    var Actions = classAdderBuilder({
        class: 'mdc-dialog__actions',
        component: Div,
        classMap: {
            'smui-dialog__actions--reversed': 'SMUI:dialog:actions:reversed',
        },
        contexts: {
            'SMUI:button:context': 'dialog:action',
        },
    });

    /* src/components/ConfirmDialog.svelte generated by Svelte v3.44.3 */

    // (18:2) <Title id="simple-title">
    function create_default_slot_7$1(ctx) {
    	let t_value = /*$confirm*/ ctx[1].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$confirm*/ 2 && t_value !== (t_value = /*$confirm*/ ctx[1].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$1.name,
    		type: "slot",
    		source: "(18:2) <Title id=\\\"simple-title\\\">",
    		ctx
    	});

    	return block;
    }

    // (19:2) <Content id="simple-content">
    function create_default_slot_6$1(ctx) {
    	let t_value = /*$confirm*/ ctx[1].message + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$confirm*/ 2 && t_value !== (t_value = /*$confirm*/ ctx[1].message + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(19:2) <Content id=\\\"simple-content\\\">",
    		ctx
    	});

    	return block;
    }

    // (22:6) <Label>
    function create_default_slot_5$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Nein");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(22:6) <Label>",
    		ctx
    	});

    	return block;
    }

    // (21:4) <Button>
    function create_default_slot_4$1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_5$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(21:4) <Button>",
    		ctx
    	});

    	return block;
    }

    // (25:6) <Label>
    function create_default_slot_3$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Ja");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(25:6) <Label>",
    		ctx
    	});

    	return block;
    }

    // (24:4) <Button on:click={() => {$confirm.func()}}>
    function create_default_slot_2$1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(24:4) <Button on:click={() => {$confirm.func()}}>",
    		ctx
    	});

    	return block;
    }

    // (20:2) <Actions>
    function create_default_slot_1$1(ctx) {
    	let button0;
    	let t;
    	let button1;
    	let current;

    	button0 = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_4$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new Button_1({
    			props: {
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler*/ ctx[2]);

    	const block = {
    		c: function create() {
    			create_component(button0.$$.fragment);
    			t = space();
    			create_component(button1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(button1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(20:2) <Actions>",
    		ctx
    	});

    	return block;
    }

    // (12:0) <Dialog   bind:open   aria-labelledby="simple-title"   aria-describedby="simple-content" >
    function create_default_slot$1(ctx) {
    	let title;
    	let t0;
    	let content;
    	let t1;
    	let actions;
    	let current;

    	title = new Title({
    			props: {
    				id: "simple-title",
    				$$slots: { default: [create_default_slot_7$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	content = new Content({
    			props: {
    				id: "simple-content",
    				$$slots: { default: [create_default_slot_6$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	actions = new Actions({
    			props: {
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(title.$$.fragment);
    			t0 = space();
    			create_component(content.$$.fragment);
    			t1 = space();
    			create_component(actions.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(title, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(content, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(actions, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const title_changes = {};

    			if (dirty & /*$$scope, $confirm*/ 18) {
    				title_changes.$$scope = { dirty, ctx };
    			}

    			title.$set(title_changes);
    			const content_changes = {};

    			if (dirty & /*$$scope, $confirm*/ 18) {
    				content_changes.$$scope = { dirty, ctx };
    			}

    			content.$set(content_changes);
    			const actions_changes = {};

    			if (dirty & /*$$scope, $confirm*/ 18) {
    				actions_changes.$$scope = { dirty, ctx };
    			}

    			actions.$set(actions_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title.$$.fragment, local);
    			transition_in(content.$$.fragment, local);
    			transition_in(actions.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title.$$.fragment, local);
    			transition_out(content.$$.fragment, local);
    			transition_out(actions.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(title, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(content, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(actions, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(12:0) <Dialog   bind:open   aria-labelledby=\\\"simple-title\\\"   aria-describedby=\\\"simple-content\\\" >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let dialog;
    	let updating_open;
    	let current;

    	function dialog_open_binding(value) {
    		/*dialog_open_binding*/ ctx[3](value);
    	}

    	let dialog_props = {
    		"aria-labelledby": "simple-title",
    		"aria-describedby": "simple-content",
    		$$slots: { default: [create_default_slot$1] },
    		$$scope: { ctx }
    	};

    	if (/*open*/ ctx[0] !== void 0) {
    		dialog_props.open = /*open*/ ctx[0];
    	}

    	dialog = new Dialog({ props: dialog_props, $$inline: true });
    	binding_callbacks.push(() => bind(dialog, 'open', dialog_open_binding));

    	const block = {
    		c: function create() {
    			create_component(dialog.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(dialog, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const dialog_changes = {};

    			if (dirty & /*$$scope, $confirm*/ 18) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_open && dirty & /*open*/ 1) {
    				updating_open = true;
    				dialog_changes.open = /*open*/ ctx[0];
    				add_flush_callback(() => updating_open = false);
    			}

    			dialog.$set(dialog_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dialog, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $confirm;
    	validate_store(confirm, 'confirm');
    	component_subscribe($$self, confirm, $$value => $$invalidate(1, $confirm = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ConfirmDialog', slots, []);
    	let open = false;

    	confirm.subscribe(c => {
    		if (c.title != "") {
    			$$invalidate(0, open = true);
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ConfirmDialog> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		$confirm.func();
    	};

    	function dialog_open_binding(value) {
    		open = value;
    		$$invalidate(0, open);
    	}

    	$$self.$capture_state = () => ({
    		Dialog,
    		Title,
    		Content,
    		Actions,
    		Button: Button_1,
    		Label,
    		confirm,
    		open,
    		$confirm
    	});

    	$$self.$inject_state = $$props => {
    		if ('open' in $$props) $$invalidate(0, open = $$props.open);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [open, $confirm, click_handler, dialog_open_binding];
    }

    class ConfirmDialog extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConfirmDialog",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/routes/EasterEgg.svelte generated by Svelte v3.44.3 */
    const file$1 = "src/routes/EasterEgg.svelte";

    function create_fragment$1(ctx) {
    	let canvas_1;
    	let t;
    	let canvas_1_style_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			canvas_1 = element("canvas");
    			t = text(" ");
    			attr_dev(canvas_1, "style", canvas_1_style_value = /*show*/ ctx[0] ? '' : 'display:none;');
    			attr_dev(canvas_1, "class", "svelte-1scit8m");
    			add_location(canvas_1, file$1, 443, 0, 14552);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, canvas_1, anchor);
    			append_dev(canvas_1, t);
    			/*canvas_1_binding*/ ctx[2](canvas_1);

    			if (!mounted) {
    				dispose = listen_dev(canvas_1, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*show*/ 1 && canvas_1_style_value !== (canvas_1_style_value = /*show*/ ctx[0] ? '' : 'display:none;')) {
    				attr_dev(canvas_1, "style", canvas_1_style_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(canvas_1);
    			/*canvas_1_binding*/ ctx[2](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const FIREWORK_ACCELERATION = 1.05;

    // Minimum firework brightness.
    const FIREWORK_BRIGHTNESS_MIN = 50;

    // Maximum firework brightness.
    const FIREWORK_BRIGHTNESS_MAX = 70;

    // Base speed of fireworks.
    const FIREWORK_SPEED = 5;

    // Base length of firework trails.
    const FIREWORK_TRAIL_LENGTH = 3;

    // Determine if target position indicator is enabled.
    const FIREWORK_TARGET_INDICATOR_ENABLED = true;

    // Minimum particle brightness.
    const PARTICLE_BRIGHTNESS_MIN = 50;

    // Maximum particle brightness.
    const PARTICLE_BRIGHTNESS_MAX = 80;

    // Base particle count per firework.
    const PARTICLE_COUNT = 100;

    // Minimum particle decay rate.
    const PARTICLE_DECAY_MIN = 0.015;

    // Maximum particle decay rate.
    const PARTICLE_DECAY_MAX = 0.03;

    // Base particle friction.
    // Slows the speed of particles over time.
    const PARTICLE_FRICTION = 0.95;

    // Base particle gravity.
    // How quickly particles move toward a downward trajectory.
    const PARTICLE_GRAVITY = 0.7;

    // Variance in particle coloration.
    const PARTICLE_HUE_VARIANCE = 20;

    // Base particle transparency.
    const PARTICLE_TRANSPARENCY = 1;

    // Minimum particle speed.
    const PARTICLE_SPEED_MIN = 1;

    // Maximum particle speed.
    const PARTICLE_SPEED_MAX = 10;

    // Base length of explosion particle trails.
    const PARTICLE_TRAIL_LENGTH = 5;

    // Alpha level that canvas cleanup iteration removes existing trails.
    // Lower value increases trail duration.
    const CANVAS_CLEANUP_ALPHA = 0.15;

    // Hue change per loop, used to rotate through different firework colors.
    const HUE_STEP_INCREASE = 0.5;

    // Minimum number of ticks per manual firework launch.
    const TICKS_PER_FIREWORK_MIN = 5;

    // Minimum number of ticks between each automatic firework launch.
    const TICKS_PER_FIREWORK_AUTOMATED_MIN = 20;

    // Maximum number of ticks between each automatic firework launch.
    const TICKS_PER_FIREWORK_AUTOMATED_MAX = 80;

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EasterEgg', slots, []);
    	let { show = false } = $$props;

    	// === END CONFIGURATION ===
    	// === LOCAL VARS ===
    	let canvas;

    	onMount(() => {
    		// Set canvas dimensions.
    		$$invalidate(1, canvas.width = window.innerWidth, canvas);

    		$$invalidate(1, canvas.height = window.innerHeight, canvas);

    		// Set the context, 2d in this case.
    		let context = canvas.getContext('2d');

    		// Firework and particles collections.
    		let fireworks = [], particles = [];

    		// Mouse coordinates.
    		let mouseX, mouseY;

    		// Variable to check if mouse is down.
    		let isMouseDown = false;

    		// Initial hue.
    		let hue = 120;

    		// Track number of ticks since automated firework.
    		let ticksSinceFireworkAutomated = 0;

    		// Track number of ticks since manual firework.
    		let ticksSinceFirework = 0;

    		// === END LOCAL VARS ===
    		// === HELPERS ===
    		// Use requestAnimationFrame to maintain smooth animation loops.
    		// Fall back on setTimeout() if browser support isn't available.
    		window.requestAnimFrame = (() => {
    			return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
    				window.setTimeout(callback, 1000 / 60);
    			};
    		})();

    		// Get a random number within the specified range.
    		function random(min, max) {
    			return Math.random() * (max - min) + min;
    		}

    		// Calculate the distance between two points.
    		function calculateDistance(aX, aY, bX, bY) {
    			let xDistance = aX - bX;
    			let yDistance = aY - bY;
    			return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
    		}

    		// === END HELPERS ===
    		// === EVENT LISTENERS ===
    		// Track current mouse position within canvas.
    		canvas.addEventListener('mousemove', e => {
    			mouseX = e.pageX - canvas.offsetLeft;
    			mouseY = e.pageY - canvas.offsetTop;
    		});

    		// Track when mouse is pressed.
    		canvas.addEventListener('mousedown', e => {
    			e.preventDefault();
    			isMouseDown = true;
    		});

    		// Track when mouse is released.
    		canvas.addEventListener('mouseup', e => {
    			e.preventDefault();
    			isMouseDown = false;
    		});

    		// === END EVENT LISTENERS ===
    		// === PROTOTYPING ===
    		// Creates a new firework.
    		// Path begins at 'start' point and ends and 'end' point.
    		function Firework(startX, startY, endX, endY) {
    			// Set current coordinates.
    			this.x = startX;

    			this.y = startY;

    			// Set starting coordinates.
    			this.startX = startX;

    			this.startY = startY;

    			// Set end coordinates.
    			this.endX = endX;

    			this.endY = endY;

    			// Get the distance to the end point.
    			this.distanceToEnd = calculateDistance(startX, startY, endX, endY);

    			this.distanceTraveled = 0;

    			// Create an array to track current trail particles.
    			this.trail = [];

    			// Trail length determines how many trailing particles are active at once.
    			this.trailLength = FIREWORK_TRAIL_LENGTH;

    			// While the trail length remains, add current point to trail list.
    			while (this.trailLength--) {
    				this.trail.push([this.x, this.y]);
    			}

    			// Calculate the angle to travel from start to end point.
    			this.angle = Math.atan2(endY - startY, endX - startX);

    			// Set the speed.
    			this.speed = FIREWORK_SPEED;

    			// Set the acceleration.
    			this.acceleration = FIREWORK_ACCELERATION;

    			// Set the brightness.
    			this.brightness = random(FIREWORK_BRIGHTNESS_MIN, FIREWORK_BRIGHTNESS_MAX);

    			// Set the radius of click-target location.
    			this.targetRadius = 2.5;
    		}

    		// Update a firework prototype.
    		// 'index' parameter is index in 'fireworks' array to remove, if journey is complete.
    		Firework.prototype.update = function (index) {
    			// Remove the oldest trail particle.
    			this.trail.pop();

    			// Add the current position to the start of trail.
    			this.trail.unshift([this.x, this.y]);

    			// Animate the target radius indicator.
    			{
    				if (this.targetRadius < 8) {
    					this.targetRadius += 0.3;
    				} else {
    					this.targetRadius = 1;
    				}
    			}

    			// Increase speed based on acceleration rate.
    			this.speed *= this.acceleration;

    			// Calculate current velocity for both x and y axes.
    			let xVelocity = Math.cos(this.angle) * this.speed;

    			let yVelocity = Math.sin(this.angle) * this.speed;

    			// Calculate the current distance travelled based on starting position, current position, and velocity.
    			// This can be used to determine if firework has reached final position.
    			this.distanceTraveled = calculateDistance(this.startX, this.startY, this.x + xVelocity, this.y + yVelocity);

    			// Check if final position has been reached (or exceeded).
    			if (this.distanceTraveled >= this.distanceToEnd) {
    				// Destroy firework by removing it from collection.
    				fireworks.splice(index, 1);

    				// Create particle explosion at end point.  Important not to use this.x and this.y, 
    				// since that position is always one animation loop behind.
    				createParticles(this.endX, this.endY);
    			} else {
    				// End position hasn't been reached, so continue along current trajectory by updating current coordinates.
    				this.x += xVelocity;

    				this.y += yVelocity;
    			}
    		};

    		// Draw a firework.
    		// Use CanvasRenderingContext2D methods to create strokes as firework paths. 
    		Firework.prototype.draw = function () {
    			// Begin a new path for firework trail.
    			context.beginPath();

    			// Get the coordinates for the oldest trail position.	
    			let trailEndX = this.trail[this.trail.length - 1][0];

    			let trailEndY = this.trail[this.trail.length - 1][1];

    			// Create a trail stroke from trail end position to current firework position.
    			context.moveTo(trailEndX, trailEndY);

    			context.lineTo(this.x, this.y);

    			// Set stroke coloration and style.
    			// Use hue, saturation, and light values instead of RGB.
    			context.strokeStyle = `hsl(${hue}, 100%, ${this.brightness}%)`;

    			// Draw stroke.
    			context.stroke();

    			{
    				// Begin a new path for end position animation.
    				context.beginPath();

    				// Create an pulsing circle at the end point with targetRadius.
    				context.arc(this.endX, this.endY, this.targetRadius, 0, Math.PI * 2);

    				// Draw stroke.
    				context.stroke();
    			}
    		};

    		// Creates a new particle at provided 'x' and 'y' coordinates.
    		function Particle(x, y) {
    			// Set current position.
    			this.x = x;

    			this.y = y;

    			// To better simulate a firework, set the angle of travel to random value in any direction.
    			this.angle = random(0, Math.PI * 2);

    			// Set friction.
    			this.friction = PARTICLE_FRICTION;

    			// Set gravity.
    			this.gravity = PARTICLE_GRAVITY;

    			// Set the hue to somewhat randomized number.
    			// This gives the particles within a firework explosion an appealing variance.
    			this.hue = random(hue - PARTICLE_HUE_VARIANCE, hue + PARTICLE_HUE_VARIANCE);

    			// Set brightness.
    			this.brightness = random(PARTICLE_BRIGHTNESS_MIN, PARTICLE_BRIGHTNESS_MAX);

    			// Set decay.
    			this.decay = random(PARTICLE_DECAY_MIN, PARTICLE_DECAY_MAX);

    			// Set speed.
    			this.speed = random(PARTICLE_SPEED_MIN, PARTICLE_SPEED_MAX);

    			// Create an array to track current trail particles.
    			this.trail = [];

    			// Trail length determines how many trailing particles are active at once.
    			this.trailLength = PARTICLE_TRAIL_LENGTH;

    			// While the trail length remains, add current point to trail list.
    			while (this.trailLength--) {
    				this.trail.push([this.x, this.y]);
    			}

    			// Set transparency.
    			this.transparency = PARTICLE_TRANSPARENCY;
    		}

    		// Update a particle prototype.
    		// 'index' parameter is index in 'particles' array to remove, if journey is complete.
    		Particle.prototype.update = function (index) {
    			// Remove the oldest trail particle.
    			this.trail.pop();

    			// Add the current position to the start of trail.
    			this.trail.unshift([this.x, this.y]);

    			// Decrease speed based on friction rate.
    			this.speed *= this.friction;

    			// Calculate current position based on angle, speed, and gravity (for y-axis only).
    			this.x += Math.cos(this.angle) * this.speed;

    			this.y += Math.sin(this.angle) * this.speed + this.gravity;

    			// Apply transparency based on decay.
    			this.transparency -= this.decay;

    			// Use decay rate to determine if particle should be destroyed.
    			if (this.transparency <= this.decay) {
    				// Destroy particle once transparency level is below decay.
    				particles.splice(index, 1);
    			}
    		};

    		// Draw a particle.
    		// Use CanvasRenderingContext2D methods to create strokes as particle paths. 
    		Particle.prototype.draw = function () {
    			// Begin a new path for particle trail.
    			context.beginPath();

    			// Get the coordinates for the oldest trail position.	
    			let trailEndX = this.trail[this.trail.length - 1][0];

    			let trailEndY = this.trail[this.trail.length - 1][1];

    			// Create a trail stroke from trail end position to current particle position.
    			context.moveTo(trailEndX, trailEndY);

    			context.lineTo(this.x, this.y);

    			// Set stroke coloration and style.
    			// Use hue, brightness, and transparency instead of RGBA.
    			context.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.transparency})`;

    			context.stroke();
    		};

    		// === END PROTOTYPING ===
    		// === APP HELPERS ===
    		// Cleans up the canvas by removing older trails.
    		//
    		// In order to smoothly transition trails off the canvas, and to make them 
    		// appear more realistic, we're using a composite fill.
    		// Set the initial composite mode to 'destination-out' to keep content that
    		// overlap with the fill we're adding.
    		//
    		// see: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
    		function cleanCanvas() {
    			// Set 'destination-out' composite mode, so additional fill doesn't remove non-overlapping content.
    			context.globalCompositeOperation = 'destination-out';

    			// Set alpha level of content to remove.
    			// Lower value means trails remain on screen longer.
    			context.fillStyle = `rgba(0, 0, 0, ${CANVAS_CLEANUP_ALPHA})`;

    			// Fill entire canvas.
    			context.fillRect(0, 0, canvas.width, canvas.height);

    			// Reset composite mode to 'lighter', so overlapping particles brighten each other.
    			context.globalCompositeOperation = 'lighter';
    		}

    		// Create particle explosion at 'x' and 'y' coordinates.
    		function createParticles(x, y) {
    			// Set particle count.
    			// Higher numbers may reduce performance.
    			let particleCount = PARTICLE_COUNT;

    			while (particleCount--) {
    				// Create a new particle and add it to particles collection.
    				particles.push(new Particle(x, y));
    			}
    		}

    		// Launch fireworks automatically.
    		function launchAutomatedFirework() {
    			// Determine if ticks since last automated launch is greater than random min/max values.
    			if (ticksSinceFireworkAutomated >= random(TICKS_PER_FIREWORK_AUTOMATED_MIN, TICKS_PER_FIREWORK_AUTOMATED_MAX)) {
    				// Check if mouse is not currently clicked.
    				if (!isMouseDown) {
    					// Set start position to bottom center.
    					let startX = canvas.width / 2;

    					let startY = canvas.height;

    					// Set end position to random position, somewhere in the top half of screen.
    					let endX = random(0, canvas.width);

    					let endY = random(0, canvas.height / 2);

    					// Create new firework and add to collection.
    					fireworks.push(new Firework(startX, startY, endX, endY));

    					// Reset tick counter.
    					ticksSinceFireworkAutomated = 0;
    				}
    			} else {
    				// Increment counter.
    				ticksSinceFireworkAutomated++;
    			}
    		}

    		// Launch fireworks manually, if mouse is pressed.
    		function launchManualFirework() {
    			// Check if ticks since last firework launch is less than minimum value.
    			if (ticksSinceFirework >= TICKS_PER_FIREWORK_MIN) {
    				// Check if mouse is down.
    				if (isMouseDown) {
    					// Set start position to bottom center.
    					let startX = canvas.width / 2;

    					let startY = canvas.height;

    					// Set end position to current mouse position.
    					let endX = mouseX;

    					let endY = mouseY;

    					// Create new firework and add to collection.
    					fireworks.push(new Firework(startX, startY, endX, endY));

    					// Reset tick counter.
    					ticksSinceFirework = 0;
    				}
    			} else {
    				// Increment counter.
    				ticksSinceFirework++;
    			}
    		}

    		// Update all active fireworks.
    		function updateFireworks() {
    			// Loop backwards through all fireworks, drawing and updating each.
    			for (let i = fireworks.length - 1; i >= 0; --i) {
    				fireworks[i].draw();
    				fireworks[i].update(i);
    			}
    		}

    		// Update all active particles.
    		function updateParticles() {
    			// Loop backwards through all particles, drawing and updating each.
    			for (let i = particles.length - 1; i >= 0; --i) {
    				particles[i].draw();
    				particles[i].update(i);
    			}
    		}

    		// === END APP HELPERS ===
    		// Primary loop.
    		function loop() {
    			// Smoothly request animation frame for each loop iteration.
    			requestAnimFrame(loop);

    			// Adjusts coloration of fireworks over time.
    			hue += HUE_STEP_INCREASE;

    			// Clean the canvas.
    			cleanCanvas();

    			// Update fireworks.
    			updateFireworks();

    			// Update particles.
    			updateParticles();

    			// Launch automated fireworks.
    			launchAutomatedFirework();

    			// Launch manual fireworks.
    			launchManualFirework();
    		}

    		// Initiate loop after window loads.
    		window.onload = loop;
    	});

    	const writable_props = ['show'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EasterEgg> was created with unknown prop '${key}'`);
    	});

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			canvas = $$value;
    			$$invalidate(1, canvas);
    		});
    	}

    	const click_handler = () => $$invalidate(0, show = false);

    	$$self.$$set = $$props => {
    		if ('show' in $$props) $$invalidate(0, show = $$props.show);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		show,
    		FIREWORK_ACCELERATION,
    		FIREWORK_BRIGHTNESS_MIN,
    		FIREWORK_BRIGHTNESS_MAX,
    		FIREWORK_SPEED,
    		FIREWORK_TRAIL_LENGTH,
    		FIREWORK_TARGET_INDICATOR_ENABLED,
    		PARTICLE_BRIGHTNESS_MIN,
    		PARTICLE_BRIGHTNESS_MAX,
    		PARTICLE_COUNT,
    		PARTICLE_DECAY_MIN,
    		PARTICLE_DECAY_MAX,
    		PARTICLE_FRICTION,
    		PARTICLE_GRAVITY,
    		PARTICLE_HUE_VARIANCE,
    		PARTICLE_TRANSPARENCY,
    		PARTICLE_SPEED_MIN,
    		PARTICLE_SPEED_MAX,
    		PARTICLE_TRAIL_LENGTH,
    		CANVAS_CLEANUP_ALPHA,
    		HUE_STEP_INCREASE,
    		TICKS_PER_FIREWORK_MIN,
    		TICKS_PER_FIREWORK_AUTOMATED_MIN,
    		TICKS_PER_FIREWORK_AUTOMATED_MAX,
    		canvas
    	});

    	$$self.$inject_state = $$props => {
    		if ('show' in $$props) $$invalidate(0, show = $$props.show);
    		if ('canvas' in $$props) $$invalidate(1, canvas = $$props.canvas);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [show, canvas, canvas_1_binding, click_handler];
    }

    class EasterEgg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { show: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EasterEgg",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get show() {
    		throw new Error("<EasterEgg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<EasterEgg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.44.3 */
    const file = "src/App.svelte";

    // (76:5) <Title>
    function create_default_slot_38(ctx) {
    	let span0;
    	let span1;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			span0.textContent = "Libero";
    			span1 = element("span");
    			span1.textContent = "Life";
    			attr_dev(span0, "class", "font-medium svelte-125ed2y");
    			add_location(span0, file, 75, 12, 2568);
    			attr_dev(span1, "class", "font-extralight svelte-125ed2y");
    			add_location(span1, file, 75, 51, 2607);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			insert_dev(target, span1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(span1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_38.name,
    		type: "slot",
    		source: "(76:5) <Title>",
    		ctx
    	});

    	return block;
    }

    // (77:5) <Subtitle>
    function create_default_slot_37(ctx) {
    	let span;
    	let t_value = /*$l*/ ctx[7].slogan + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "font-regular svelte-125ed2y");
    			add_location(span, file, 76, 15, 2672);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].slogan + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_37.name,
    		type: "slot",
    		source: "(77:5) <Subtitle>",
    		ctx
    	});

    	return block;
    }

    // (74:4) <Header>
    function create_default_slot_36(ctx) {
    	let img;
    	let img_src_value;
    	let t0;
    	let title;
    	let t1;
    	let subtitle;
    	let current;

    	title = new Title$1({
    			props: {
    				$$slots: { default: [create_default_slot_38] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	subtitle = new Subtitle({
    			props: {
    				$$slots: { default: [create_default_slot_37] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			img = element("img");
    			t0 = space();
    			create_component(title.$$.fragment);
    			t1 = space();
    			create_component(subtitle.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "../logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Logo");
    			attr_dev(img, "width", "60px");
    			add_location(img, file, 74, 5, 2506);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(title, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(subtitle, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const title_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				title_changes.$$scope = { dirty, ctx };
    			}

    			title.$set(title_changes);
    			const subtitle_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				subtitle_changes.$$scope = { dirty, ctx };
    			}

    			subtitle.$set(subtitle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title.$$.fragment, local);
    			transition_in(subtitle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title.$$.fragment, local);
    			transition_out(subtitle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t0);
    			destroy_component(title, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(subtitle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_36.name,
    		type: "slot",
    		source: "(74:4) <Header>",
    		ctx
    	});

    	return block;
    }

    // (82:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_35(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("home");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_35.name,
    		type: "slot",
    		source: "(82:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (83:7) <Text>
    function create_default_slot_34(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.home + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.home + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_34.name,
    		type: "slot",
    		source: "(83:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (81:6) <Item href="/" on:click={() => setActive("")} activated={active === ""}>
    function create_default_slot_33(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_35] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_34] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_33.name,
    		type: "slot",
    		source: "(81:6) <Item href=\\\"/\\\" on:click={() => setActive(\\\"\\\")} activated={active === \\\"\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (86:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_32(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("people");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_32.name,
    		type: "slot",
    		source: "(86:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (87:7) <Text>
    function create_default_slot_31(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.clients + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.clients + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_31.name,
    		type: "slot",
    		source: "(87:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (85:6) <Item href="/clients" on:click={() => setActive("clients")} activated={active === "clients"}>
    function create_default_slot_30(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_32] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_31] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_30.name,
    		type: "slot",
    		source: "(85:6) <Item href=\\\"/clients\\\" on:click={() => setActive(\\\"clients\\\")} activated={active === \\\"clients\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (90:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_29(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("file_copy");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_29.name,
    		type: "slot",
    		source: "(90:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (91:7) <Text>
    function create_default_slot_28(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.templates + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.templates + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28.name,
    		type: "slot",
    		source: "(91:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (89:6) <Item href="/templates" on:click={() => setActive("templates")} activated={active === "templates"}>
    function create_default_slot_27(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_29] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_28] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27.name,
    		type: "slot",
    		source: "(89:6) <Item href=\\\"/templates\\\" on:click={() => setActive(\\\"templates\\\")} activated={active === \\\"templates\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (94:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_26(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("apartment");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26.name,
    		type: "slot",
    		source: "(94:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (95:7) <Text>
    function create_default_slot_25(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.partner + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.partner + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25.name,
    		type: "slot",
    		source: "(95:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (93:6) <Item href="/partners" on:click={() => setActive("partner")} activated={active === "partner"}>
    function create_default_slot_24(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_26] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_25] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24.name,
    		type: "slot",
    		source: "(93:6) <Item href=\\\"/partners\\\" on:click={() => setActive(\\\"partner\\\")} activated={active === \\\"partner\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (98:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_23(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("task");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23.name,
    		type: "slot",
    		source: "(98:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (99:7) <Text>
    function create_default_slot_22(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.contracts + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.contracts + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22.name,
    		type: "slot",
    		source: "(99:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (97:6) <Item href="/contracts" on:click={() => setActive("contracts")} activated={active === "contracts"}>
    function create_default_slot_21(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_23] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_22] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21.name,
    		type: "slot",
    		source: "(97:6) <Item href=\\\"/contracts\\\" on:click={() => setActive(\\\"contracts\\\")} activated={active === \\\"contracts\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (102:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_20(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("assignment");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20.name,
    		type: "slot",
    		source: "(102:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (103:7) <Text>
    function create_default_slot_19(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.notes + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.notes + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19.name,
    		type: "slot",
    		source: "(103:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (101:6) <Item href="/notes" on:click={() => setActive("notes")} activated={active === "notes"}>
    function create_default_slot_18(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_20] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_19] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18.name,
    		type: "slot",
    		source: "(101:6) <Item href=\\\"/notes\\\" on:click={() => setActive(\\\"notes\\\")} activated={active === \\\"notes\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (107:6) {#if adminPrivileges}
    function create_if_block_1(ctx) {
    	let item;
    	let current;

    	item = new Item({
    			props: {
    				href: "javascript:void(0)",
    				class: /*isAdminMode*/ ctx[5] ? 'admin-content' : '',
    				$$slots: { default: [create_default_slot_15] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item.$on("click", /*click_handler_6*/ ctx[18]);

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item_changes = {};
    			if (dirty & /*isAdminMode*/ 32) item_changes.class = /*isAdminMode*/ ctx[5] ? 'admin-content' : '';

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(107:6) {#if adminPrivileges}",
    		ctx
    	});

    	return block;
    }

    // (109:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_17(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("military_tech");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17.name,
    		type: "slot",
    		source: "(109:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (110:7) <Text>
    function create_default_slot_16(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.admin_mode + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.admin_mode + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16.name,
    		type: "slot",
    		source: "(110:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (108:6) <Item href="javascript:void(0)" on:click={() => toggleAdminMode()} class="{isAdminMode ? 'admin-content' : ''}">
    function create_default_slot_15(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_17] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_16] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15.name,
    		type: "slot",
    		source: "(108:6) <Item href=\\\"javascript:void(0)\\\" on:click={() => toggleAdminMode()} class=\\\"{isAdminMode ? 'admin-content' : ''}\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:6) {#if isAdminMode}
    function create_if_block(ctx) {
    	let item;
    	let current;

    	item = new Item({
    			props: {
    				href: "/employees",
    				activated: /*active*/ ctx[1] === "employees",
    				$$slots: { default: [create_default_slot_12] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item.$on("click", /*click_handler_7*/ ctx[19]);

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item_changes = {};
    			if (dirty & /*active*/ 2) item_changes.activated = /*active*/ ctx[1] === "employees";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(113:6) {#if isAdminMode}",
    		ctx
    	});

    	return block;
    }

    // (115:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_14(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("badge");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14.name,
    		type: "slot",
    		source: "(115:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (116:7) <Text>
    function create_default_slot_13(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.employees + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.employees + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13.name,
    		type: "slot",
    		source: "(116:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (114:6) <Item href="/employees" on:click={() => setActive("employees")} activated={active === "employees"}>
    function create_default_slot_12(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_14] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_13] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12.name,
    		type: "slot",
    		source: "(114:6) <Item href=\\\"/employees\\\" on:click={() => setActive(\\\"employees\\\")} activated={active === \\\"employees\\\"}>",
    		ctx
    	});

    	return block;
    }

    // (120:7) <Graphic class="material-icons" aria-hidden="true">
    function create_default_slot_11(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("logout");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11.name,
    		type: "slot",
    		source: "(120:7) <Graphic class=\\\"material-icons\\\" aria-hidden=\\\"true\\\">",
    		ctx
    	});

    	return block;
    }

    // (121:7) <Text>
    function create_default_slot_10(ctx) {
    	let t_value = /*$l*/ ctx[7].menu.logout + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$l*/ 128 && t_value !== (t_value = /*$l*/ ctx[7].menu.logout + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10.name,
    		type: "slot",
    		source: "(121:7) <Text>",
    		ctx
    	});

    	return block;
    }

    // (119:6) <Item href="javascript:void(0)" on:click={() => logout()}>
    function create_default_slot_9(ctx) {
    	let graphic;
    	let t;
    	let text_1;
    	let current;

    	graphic = new Graphic({
    			props: {
    				class: "material-icons",
    				"aria-hidden": "true",
    				$$slots: { default: [create_default_slot_11] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	text_1 = new Text$2({
    			props: {
    				$$slots: { default: [create_default_slot_10] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			create_component(text_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(text_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    			const text_1_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				text_1_changes.$$scope = { dirty, ctx };
    			}

    			text_1.$set(text_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(text_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(text_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(text_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(119:6) <Item href=\\\"javascript:void(0)\\\" on:click={() => logout()}>",
    		ctx
    	});

    	return block;
    }

    // (80:5) <List>
    function create_default_slot_8(ctx) {
    	let item0;
    	let t0;
    	let item1;
    	let t1;
    	let item2;
    	let t2;
    	let item3;
    	let t3;
    	let item4;
    	let t4;
    	let item5;
    	let t5;
    	let separator;
    	let t6;
    	let t7;
    	let t8;
    	let item6;
    	let current;

    	item0 = new Item({
    			props: {
    				href: "/",
    				activated: /*active*/ ctx[1] === "",
    				$$slots: { default: [create_default_slot_33] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item0.$on("click", /*click_handler*/ ctx[12]);

    	item1 = new Item({
    			props: {
    				href: "/clients",
    				activated: /*active*/ ctx[1] === "clients",
    				$$slots: { default: [create_default_slot_30] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item1.$on("click", /*click_handler_1*/ ctx[13]);

    	item2 = new Item({
    			props: {
    				href: "/templates",
    				activated: /*active*/ ctx[1] === "templates",
    				$$slots: { default: [create_default_slot_27] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item2.$on("click", /*click_handler_2*/ ctx[14]);

    	item3 = new Item({
    			props: {
    				href: "/partners",
    				activated: /*active*/ ctx[1] === "partner",
    				$$slots: { default: [create_default_slot_24] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item3.$on("click", /*click_handler_3*/ ctx[15]);

    	item4 = new Item({
    			props: {
    				href: "/contracts",
    				activated: /*active*/ ctx[1] === "contracts",
    				$$slots: { default: [create_default_slot_21] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item4.$on("click", /*click_handler_4*/ ctx[16]);

    	item5 = new Item({
    			props: {
    				href: "/notes",
    				activated: /*active*/ ctx[1] === "notes",
    				$$slots: { default: [create_default_slot_18] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item5.$on("click", /*click_handler_5*/ ctx[17]);
    	separator = new Separator({ $$inline: true });
    	let if_block0 = /*adminPrivileges*/ ctx[3] && create_if_block_1(ctx);
    	let if_block1 = /*isAdminMode*/ ctx[5] && create_if_block(ctx);

    	item6 = new Item({
    			props: {
    				href: "javascript:void(0)",
    				$$slots: { default: [create_default_slot_9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	item6.$on("click", /*click_handler_8*/ ctx[20]);

    	const block = {
    		c: function create() {
    			create_component(item0.$$.fragment);
    			t0 = space();
    			create_component(item1.$$.fragment);
    			t1 = space();
    			create_component(item2.$$.fragment);
    			t2 = space();
    			create_component(item3.$$.fragment);
    			t3 = space();
    			create_component(item4.$$.fragment);
    			t4 = space();
    			create_component(item5.$$.fragment);
    			t5 = space();
    			create_component(separator.$$.fragment);
    			t6 = space();
    			if (if_block0) if_block0.c();
    			t7 = space();
    			if (if_block1) if_block1.c();
    			t8 = space();
    			create_component(item6.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(item1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(item2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(item3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(item4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(item5, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(separator, target, anchor);
    			insert_dev(target, t6, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t7, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(item6, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item0_changes = {};
    			if (dirty & /*active*/ 2) item0_changes.activated = /*active*/ ctx[1] === "";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item0_changes.$$scope = { dirty, ctx };
    			}

    			item0.$set(item0_changes);
    			const item1_changes = {};
    			if (dirty & /*active*/ 2) item1_changes.activated = /*active*/ ctx[1] === "clients";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item1_changes.$$scope = { dirty, ctx };
    			}

    			item1.$set(item1_changes);
    			const item2_changes = {};
    			if (dirty & /*active*/ 2) item2_changes.activated = /*active*/ ctx[1] === "templates";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item2_changes.$$scope = { dirty, ctx };
    			}

    			item2.$set(item2_changes);
    			const item3_changes = {};
    			if (dirty & /*active*/ 2) item3_changes.activated = /*active*/ ctx[1] === "partner";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item3_changes.$$scope = { dirty, ctx };
    			}

    			item3.$set(item3_changes);
    			const item4_changes = {};
    			if (dirty & /*active*/ 2) item4_changes.activated = /*active*/ ctx[1] === "contracts";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item4_changes.$$scope = { dirty, ctx };
    			}

    			item4.$set(item4_changes);
    			const item5_changes = {};
    			if (dirty & /*active*/ 2) item5_changes.activated = /*active*/ ctx[1] === "notes";

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item5_changes.$$scope = { dirty, ctx };
    			}

    			item5.$set(item5_changes);

    			if (/*adminPrivileges*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*adminPrivileges*/ 8) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t7.parentNode, t7);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*isAdminMode*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*isAdminMode*/ 32) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t8.parentNode, t8);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const item6_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				item6_changes.$$scope = { dirty, ctx };
    			}

    			item6.$set(item6_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item0.$$.fragment, local);
    			transition_in(item1.$$.fragment, local);
    			transition_in(item2.$$.fragment, local);
    			transition_in(item3.$$.fragment, local);
    			transition_in(item4.$$.fragment, local);
    			transition_in(item5.$$.fragment, local);
    			transition_in(separator.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(item6.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item0.$$.fragment, local);
    			transition_out(item1.$$.fragment, local);
    			transition_out(item2.$$.fragment, local);
    			transition_out(item3.$$.fragment, local);
    			transition_out(item4.$$.fragment, local);
    			transition_out(item5.$$.fragment, local);
    			transition_out(separator.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(item6.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(item1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(item2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(item3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(item4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(item5, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(separator, detaching);
    			if (detaching) detach_dev(t6);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t7);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(item6, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(80:5) <List>",
    		ctx
    	});

    	return block;
    }

    // (126:6) <Label>
    function create_default_slot_7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*language*/ ctx[2]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*language*/ 4) set_data_dev(t, /*language*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(126:6) <Label>",
    		ctx
    	});

    	return block;
    }

    // (125:5) <Button on:click={() => toggleLanguage()} style="position: absolute; bottom: 5px; left: 5px;">
    function create_default_slot_6(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, language*/ 268435460) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(125:5) <Button on:click={() => toggleLanguage()} style=\\\"position: absolute; bottom: 5px; left: 5px;\\\">",
    		ctx
    	});

    	return block;
    }

    // (79:4) <Content>
    function create_default_slot_5(ctx) {
    	let list;
    	let t0;
    	let button;
    	let t1;
    	let footer;

    	let t2_value = (/*easterEgg*/ ctx[6]
    	? /*$l*/ ctx[7].menu.footerAlt
    	: /*$l*/ ctx[7].menu.footer) + "";

    	let t2;
    	let current;
    	let mounted;
    	let dispose;

    	list = new List({
    			props: {
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button = new Button_1({
    			props: {
    				style: "position: absolute; bottom: 5px; left: 5px;",
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*click_handler_9*/ ctx[21]);

    	const block = {
    		c: function create() {
    			create_component(list.$$.fragment);
    			t0 = space();
    			create_component(button.$$.fragment);
    			t1 = space();
    			footer = element("footer");
    			t2 = text(t2_value);
    			attr_dev(footer, "class", "svelte-125ed2y");
    			add_location(footer, file, 128, 5, 5073);
    		},
    		m: function mount(target, anchor) {
    			mount_component(list, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(button, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, footer, anchor);
    			append_dev(footer, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(footer, "click", /*click_handler_10*/ ctx[22], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const list_changes = {};

    			if (dirty & /*$$scope, $l, active, isAdminMode, adminPrivileges*/ 268435626) {
    				list_changes.$$scope = { dirty, ctx };
    			}

    			list.$set(list_changes);
    			const button_changes = {};

    			if (dirty & /*$$scope, language*/ 268435460) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);

    			if ((!current || dirty & /*easterEgg, $l*/ 192) && t2_value !== (t2_value = (/*easterEgg*/ ctx[6]
    			? /*$l*/ ctx[7].menu.footerAlt
    			: /*$l*/ ctx[7].menu.footer) + "")) set_data_dev(t2, t2_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(list, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(button, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(footer);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(79:4) <Content>",
    		ctx
    	});

    	return block;
    }

    // (73:3) <Drawer variant="modal" bind:open={drawerOpen}>
    function create_default_slot_4(ctx) {
    	let header;
    	let t;
    	let content;
    	let current;

    	header = new Header({
    			props: {
    				$$slots: { default: [create_default_slot_36] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	content = new Content$1({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(content.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(content, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const header_changes = {};

    			if (dirty & /*$$scope, $l*/ 268435584) {
    				header_changes.$$scope = { dirty, ctx };
    			}

    			header.$set(header_changes);
    			const content_changes = {};

    			if (dirty & /*$$scope, easterEgg, $l, language, active, isAdminMode, adminPrivileges*/ 268435694) {
    				content_changes.$$scope = { dirty, ctx };
    			}

    			content.$set(content_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(content.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(content.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(content, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(73:3) <Drawer variant=\\\"modal\\\" bind:open={drawerOpen}>",
    		ctx
    	});

    	return block;
    }

    // (135:5) <IconButton class="material-icons" on:click={() => (drawerOpen = !drawerOpen)}>
    function create_default_slot_3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("menu");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(135:5) <IconButton class=\\\"material-icons\\\" on:click={() => (drawerOpen = !drawerOpen)}>",
    		ctx
    	});

    	return block;
    }

    // (140:4) <Route path="/">
    function create_default_slot_2(ctx) {
    	let home;
    	let current;

    	home = new Home({
    			props: { name: /*name*/ ctx[4] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(home.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const home_changes = {};
    			if (dirty & /*name*/ 16) home_changes.name = /*name*/ ctx[4];
    			home.$set(home_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(140:4) <Route path=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (133:3) <AppContent>
    function create_default_slot_1(ctx) {
    	let div0;
    	let iconbutton;
    	let t0;
    	let easteregg;
    	let updating_show;
    	let t1;
    	let route0;
    	let t2;
    	let div1;
    	let route1;
    	let t3;
    	let route2;
    	let t4;
    	let route3;
    	let t5;
    	let route4;
    	let t6;
    	let route5;
    	let t7;
    	let route6;
    	let t8;
    	let route7;
    	let t9;
    	let route8;
    	let t10;
    	let route9;
    	let t11;
    	let route10;
    	let t12;
    	let route11;
    	let div1_class_value;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				class: "material-icons",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton.$on("click", /*click_handler_11*/ ctx[24]);

    	function easteregg_show_binding(value) {
    		/*easteregg_show_binding*/ ctx[25](value);
    	}

    	let easteregg_props = {};

    	if (/*easterEgg*/ ctx[6] !== void 0) {
    		easteregg_props.show = /*easterEgg*/ ctx[6];
    	}

    	easteregg = new EasterEgg({ props: easteregg_props, $$inline: true });
    	binding_callbacks.push(() => bind(easteregg, 'show', easteregg_show_binding));

    	route0 = new Route({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: { path: "/clients", component: Clients },
    			$$inline: true
    		});

    	route2 = new Route({
    			props: { path: "client/:id", component: Client },
    			$$inline: true
    		});

    	route3 = new Route({
    			props: { path: "/templates", component: Templates },
    			$$inline: true
    		});

    	route4 = new Route({
    			props: {
    				path: "/template/new",
    				component: Template
    			},
    			$$inline: true
    		});

    	route5 = new Route({
    			props: {
    				path: "/needs_assessment",
    				component: NeedsAssessment
    			},
    			$$inline: true
    		});

    	route6 = new Route({
    			props: { path: "/partners", component: Partners },
    			$$inline: true
    		});

    	route7 = new Route({
    			props: {
    				path: "/partner_service_types",
    				component: PartnerServiceTypes
    			},
    			$$inline: true
    		});

    	route8 = new Route({
    			props: { path: "/partner/:id", component: Partner },
    			$$inline: true
    		});

    	route9 = new Route({
    			props: { path: "/employees", component: Employees },
    			$$inline: true
    		});

    	route10 = new Route({
    			props: {
    				path: "employee/:id",
    				component: Employee
    			},
    			$$inline: true
    		});

    	route11 = new Route({
    			props: { path: "/notes", component: Notes },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(iconbutton.$$.fragment);
    			t0 = space();
    			create_component(easteregg.$$.fragment);
    			t1 = space();
    			create_component(route0.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			create_component(route1.$$.fragment);
    			t3 = space();
    			create_component(route2.$$.fragment);
    			t4 = space();
    			create_component(route3.$$.fragment);
    			t5 = space();
    			create_component(route4.$$.fragment);
    			t6 = space();
    			create_component(route5.$$.fragment);
    			t7 = space();
    			create_component(route6.$$.fragment);
    			t8 = space();
    			create_component(route7.$$.fragment);
    			t9 = space();
    			create_component(route8.$$.fragment);
    			t10 = space();
    			create_component(route9.$$.fragment);
    			t11 = space();
    			create_component(route10.$$.fragment);
    			t12 = space();
    			create_component(route11.$$.fragment);
    			attr_dev(div0, "class", "drawer-button svelte-125ed2y");
    			add_location(div0, file, 133, 4, 5228);
    			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(/*active*/ ctx[1] !== "" ? 'content' : '') + " svelte-125ed2y"));
    			add_location(div1, file, 142, 4, 5478);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(iconbutton, div0, null);
    			insert_dev(target, t0, anchor);
    			mount_component(easteregg, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route0, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(route1, div1, null);
    			append_dev(div1, t3);
    			mount_component(route2, div1, null);
    			append_dev(div1, t4);
    			mount_component(route3, div1, null);
    			append_dev(div1, t5);
    			mount_component(route4, div1, null);
    			append_dev(div1, t6);
    			mount_component(route5, div1, null);
    			append_dev(div1, t7);
    			mount_component(route6, div1, null);
    			append_dev(div1, t8);
    			mount_component(route7, div1, null);
    			append_dev(div1, t9);
    			mount_component(route8, div1, null);
    			append_dev(div1, t10);
    			mount_component(route9, div1, null);
    			append_dev(div1, t11);
    			mount_component(route10, div1, null);
    			append_dev(div1, t12);
    			mount_component(route11, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 268435456) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    			const easteregg_changes = {};

    			if (!updating_show && dirty & /*easterEgg*/ 64) {
    				updating_show = true;
    				easteregg_changes.show = /*easterEgg*/ ctx[6];
    				add_flush_callback(() => updating_show = false);
    			}

    			easteregg.$set(easteregg_changes);
    			const route0_changes = {};

    			if (dirty & /*$$scope, name*/ 268435472) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);

    			if (!current || dirty & /*active*/ 2 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*active*/ ctx[1] !== "" ? 'content' : '') + " svelte-125ed2y"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			transition_in(easteregg.$$.fragment, local);
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(route4.$$.fragment, local);
    			transition_in(route5.$$.fragment, local);
    			transition_in(route6.$$.fragment, local);
    			transition_in(route7.$$.fragment, local);
    			transition_in(route8.$$.fragment, local);
    			transition_in(route9.$$.fragment, local);
    			transition_in(route10.$$.fragment, local);
    			transition_in(route11.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			transition_out(easteregg.$$.fragment, local);
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(route4.$$.fragment, local);
    			transition_out(route5.$$.fragment, local);
    			transition_out(route6.$$.fragment, local);
    			transition_out(route7.$$.fragment, local);
    			transition_out(route8.$$.fragment, local);
    			transition_out(route9.$$.fragment, local);
    			transition_out(route10.$$.fragment, local);
    			transition_out(route11.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(iconbutton);
    			if (detaching) detach_dev(t0);
    			destroy_component(easteregg, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    			destroy_component(route4);
    			destroy_component(route5);
    			destroy_component(route6);
    			destroy_component(route7);
    			destroy_component(route8);
    			destroy_component(route9);
    			destroy_component(route10);
    			destroy_component(route11);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(133:3) <AppContent>",
    		ctx
    	});

    	return block;
    }

    // (72:2) <Router>
    function create_default_slot(ctx) {
    	let drawer;
    	let updating_open;
    	let t;
    	let appcontent;
    	let current;

    	function drawer_open_binding(value) {
    		/*drawer_open_binding*/ ctx[23](value);
    	}

    	let drawer_props = {
    		variant: "modal",
    		$$slots: { default: [create_default_slot_4] },
    		$$scope: { ctx }
    	};

    	if (/*drawerOpen*/ ctx[0] !== void 0) {
    		drawer_props.open = /*drawerOpen*/ ctx[0];
    	}

    	drawer = new Drawer({ props: drawer_props, $$inline: true });
    	binding_callbacks.push(() => bind(drawer, 'open', drawer_open_binding));

    	appcontent = new AppContent({
    			props: {
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(drawer.$$.fragment);
    			t = space();
    			create_component(appcontent.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(drawer, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(appcontent, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const drawer_changes = {};

    			if (dirty & /*$$scope, easterEgg, $l, language, active, isAdminMode, adminPrivileges*/ 268435694) {
    				drawer_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_open && dirty & /*drawerOpen*/ 1) {
    				updating_open = true;
    				drawer_changes.open = /*drawerOpen*/ ctx[0];
    				add_flush_callback(() => updating_open = false);
    			}

    			drawer.$set(drawer_changes);
    			const appcontent_changes = {};

    			if (dirty & /*$$scope, active, name, easterEgg, drawerOpen*/ 268435539) {
    				appcontent_changes.$$scope = { dirty, ctx };
    			}

    			appcontent.$set(appcontent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(drawer.$$.fragment, local);
    			transition_in(appcontent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(drawer.$$.fragment, local);
    			transition_out(appcontent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(drawer, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(appcontent, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(72:2) <Router>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let main;
    	let div;
    	let router;
    	let t0;
    	let confirmdialog;
    	let t1;
    	let snackbar;
    	let current;
    	let mounted;
    	let dispose;

    	router = new Router({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	confirmdialog = new ConfirmDialog({ $$inline: true });
    	snackbar = new Snackbar_1({ $$inline: true });

    	const block = {
    		c: function create() {
    			main = element("main");
    			div = element("div");
    			create_component(router.$$.fragment);
    			t0 = space();
    			create_component(confirmdialog.$$.fragment);
    			t1 = space();
    			create_component(snackbar.$$.fragment);
    			add_location(div, file, 70, 1, 2410);
    			add_location(main, file, 69, 0, 2402);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div);
    			mount_component(router, div, null);
    			append_dev(main, t0);
    			mount_component(confirmdialog, main, null);
    			append_dev(main, t1);
    			mount_component(snackbar, main, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(links.call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};

    			if (dirty & /*$$scope, active, name, easterEgg, drawerOpen, $l, language, isAdminMode, adminPrivileges*/ 268435711) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			transition_in(confirmdialog.$$.fragment, local);
    			transition_in(snackbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			transition_out(confirmdialog.$$.fragment, local);
    			transition_out(snackbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(router);
    			destroy_component(confirmdialog);
    			destroy_component(snackbar);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $l;
    	validate_store(l, 'l');
    	component_subscribe($$self, l, $$value => $$invalidate(7, $l = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	OpenAPI.BASE = "http://localhost:8080";

    	OpenAPI.HEADERS = { 'Accept': '*/*' };
    	let drawerOpen = true;
    	let active = window.location.pathname.substring(1);

    	const logout = () => {
    		confirm.set({
    			title: 'Logout',
    			message: 'Wirklich ausloggen?',
    			func: () => {
    				window.location.replace('/logout');
    			}
    		});
    	};

    	let language = getLanguageButtonText();

    	function toggleLanguage() {
    		if ($l == de) {
    			l.set(en);
    			$$invalidate(2, language = "de");
    		} else {
    			l.set(de);
    			$$invalidate(2, language = "en");
    		}

    		$$invalidate(2, language = getLanguageButtonText());
    	}

    	function getLanguageButtonText() {
    		return $l == de ? "en" : "de";
    	}

    	function setActive(value) {
    		if (window.screen.width < 800) {
    			$$invalidate(0, drawerOpen = !drawerOpen);
    		}

    		$$invalidate(1, active = value);
    	}

    	let adminPrivileges = false;
    	let name = "";

    	UserService.get().then(employee => {
    		$$invalidate(3, adminPrivileges = employee.admin);
    		$$invalidate(4, name = employee.name);
    	});

    	let isAdminMode = false;

    	admin.subscribe(value => {
    		$$invalidate(5, isAdminMode = value);
    	});

    	function toggleAdminMode() {
    		admin.set(!isAdminMode);
    	}

    	let easterEgg = false;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => setActive("");
    	const click_handler_1 = () => setActive("clients");
    	const click_handler_2 = () => setActive("templates");
    	const click_handler_3 = () => setActive("partner");
    	const click_handler_4 = () => setActive("contracts");
    	const click_handler_5 = () => setActive("notes");
    	const click_handler_6 = () => toggleAdminMode();
    	const click_handler_7 = () => setActive("employees");
    	const click_handler_8 = () => logout();
    	const click_handler_9 = () => toggleLanguage();
    	const click_handler_10 = () => $$invalidate(6, easterEgg = !easterEgg);

    	function drawer_open_binding(value) {
    		drawerOpen = value;
    		$$invalidate(0, drawerOpen);
    	}

    	const click_handler_11 = () => $$invalidate(0, drawerOpen = !drawerOpen);

    	function easteregg_show_binding(value) {
    		easterEgg = value;
    		$$invalidate(6, easterEgg);
    	}

    	$$self.$capture_state = () => ({
    		admin,
    		production,
    		confirm,
    		OpenAPI,
    		UserService,
    		l,
    		de,
    		en,
    		Home,
    		Clients,
    		Client,
    		Templates,
    		Template,
    		NeedsAssessment,
    		PartnerServiceTypes,
    		Partners,
    		Partner,
    		Notes,
    		Employees,
    		Employee,
    		Button: Button_1,
    		Label,
    		IconButton,
    		Router,
    		links,
    		Route,
    		Drawer,
    		AppContent,
    		Content: Content$1,
    		Header,
    		Title: Title$1,
    		Subtitle,
    		List,
    		Item,
    		Graphic,
    		Separator,
    		Text: Text$2,
    		Snackbar: Snackbar_1,
    		ConfirmDialog,
    		EasterEgg,
    		drawerOpen,
    		active,
    		logout,
    		language,
    		toggleLanguage,
    		getLanguageButtonText,
    		setActive,
    		adminPrivileges,
    		name,
    		isAdminMode,
    		toggleAdminMode,
    		easterEgg,
    		$l
    	});

    	$$self.$inject_state = $$props => {
    		if ('drawerOpen' in $$props) $$invalidate(0, drawerOpen = $$props.drawerOpen);
    		if ('active' in $$props) $$invalidate(1, active = $$props.active);
    		if ('language' in $$props) $$invalidate(2, language = $$props.language);
    		if ('adminPrivileges' in $$props) $$invalidate(3, adminPrivileges = $$props.adminPrivileges);
    		if ('name' in $$props) $$invalidate(4, name = $$props.name);
    		if ('isAdminMode' in $$props) $$invalidate(5, isAdminMode = $$props.isAdminMode);
    		if ('easterEgg' in $$props) $$invalidate(6, easterEgg = $$props.easterEgg);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		drawerOpen,
    		active,
    		language,
    		adminPrivileges,
    		name,
    		isAdminMode,
    		easterEgg,
    		$l,
    		logout,
    		toggleLanguage,
    		setActive,
    		toggleAdminMode,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		drawer_open_binding,
    		click_handler_11,
    		easteregg_show_binding
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body,
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
