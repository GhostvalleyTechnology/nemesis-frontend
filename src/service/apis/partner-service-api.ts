/* tslint:disable */
/* eslint-disable */
/**
 * nemesis-backend API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Partner } from '../models';
/**
 * PartnerServiceApi - axios parameter creator
 * @export
 */
export const PartnerServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Partner} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartnerAddPost: async (body?: Partner, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/partner/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartnerListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/partner/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Partner} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartnerUpdatePost: async (body?: Partner, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/partner/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerServiceApi - functional programming interface
 * @export
 */
export const PartnerServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Partner} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartnerAddPost(body?: Partner, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PartnerServiceApiAxiosParamCreator(configuration).apiPartnerAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartnerListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Partner>>> {
            const localVarAxiosArgs = await PartnerServiceApiAxiosParamCreator(configuration).apiPartnerListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Partner} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartnerUpdatePost(body?: Partner, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PartnerServiceApiAxiosParamCreator(configuration).apiPartnerUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PartnerServiceApi - factory interface
 * @export
 */
export const PartnerServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {Partner} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartnerAddPost(body?: Partner, options?: any): AxiosPromise<void> {
            return PartnerServiceApiFp(configuration).apiPartnerAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartnerListGet(options?: any): AxiosPromise<Array<Partner>> {
            return PartnerServiceApiFp(configuration).apiPartnerListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Partner} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartnerUpdatePost(body?: Partner, options?: any): AxiosPromise<void> {
            return PartnerServiceApiFp(configuration).apiPartnerUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartnerServiceApi - object-oriented interface
 * @export
 * @class PartnerServiceApi
 * @extends {BaseAPI}
 */
export class PartnerServiceApi extends BaseAPI {
    /**
     * 
     * @param {Partner} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerServiceApi
     */
    public apiPartnerAddPost(body?: Partner, options?: any) {
        return PartnerServiceApiFp(this.configuration).apiPartnerAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerServiceApi
     */
    public apiPartnerListGet(options?: any) {
        return PartnerServiceApiFp(this.configuration).apiPartnerListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Partner} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerServiceApi
     */
    public apiPartnerUpdatePost(body?: Partner, options?: any) {
        return PartnerServiceApiFp(this.configuration).apiPartnerUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
